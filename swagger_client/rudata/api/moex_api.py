# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MoexApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_moex_boards_post(self, **kwargs):  # noqa: E501
        """Получить справочник подсистем (engines), рынков (markets), групп режимов (board groups) и режимов торгов (boards) со всеми взаимосвязями между собой – всё дерево за один вызов. Входных параметров нет.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_boards_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EfirDataHubModelsModelsMoexBoardsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_boards_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_boards_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_boards_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справочник подсистем (engines), рынков (markets), групп режимов (board groups) и режимов торгов (boards) со всеми взаимосвязями между собой – всё дерево за один вызов. Входных параметров нет.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_boards_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EfirDataHubModelsModelsMoexBoardsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_boards_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/Boards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsMoexBoardsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_derivatives_uderlying_assets_post(self, **kwargs):  # noqa: E501
        """Возвращает описание базовых активов производных финансовых инструментов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_derivatives_uderlying_assets_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexDerivativesuderlyingassetsBody body:
        :return: list[EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_derivatives_uderlying_assets_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_derivatives_uderlying_assets_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_derivatives_uderlying_assets_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает описание базовых активов производных финансовых инструментов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_derivatives_uderlying_assets_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexDerivativesuderlyingassetsBody body:
        :return: list[EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_derivatives_uderlying_assets_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/derivatives-uderlying-assets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_dividend_yield_post(self, **kwargs):  # noqa: E501
        """Возвращает сведения о дивидендной доходности, получаемые с Московской Биржи  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_dividend_yield_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexDividendYieldBody body:
        :return: list[EfirDataHubModelsModelsMoexDividendYieldFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_dividend_yield_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_dividend_yield_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_dividend_yield_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает сведения о дивидендной доходности, получаемые с Московской Биржи  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_dividend_yield_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexDividendYieldBody body:
        :return: list[EfirDataHubModelsModelsMoexDividendYieldFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_dividend_yield_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/DividendYield', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexDividendYieldFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_futures_columns_post(self, **kwargs):  # noqa: E501
        """Получить описание полей в справочнике фьючерсов, см. метод Futures. Входных параметров нет.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_futures_columns_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsMoexFuturesColumnsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_futures_columns_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_futures_columns_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_futures_columns_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить описание полей в справочнике фьючерсов, см. метод Futures. Входных параметров нет.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_futures_columns_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsMoexFuturesColumnsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_futures_columns_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/FuturesColumns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexFuturesColumnsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_futures_post(self, **kwargs):  # noqa: E501
        """Получить описания фьючерсов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_futures_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexFuturesBody body:
        :return: list[EfirDataHubModelsModelsMoexFuturesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_futures_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_futures_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_futures_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить описания фьючерсов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_futures_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexFuturesBody body:
        :return: list[EfirDataHubModelsModelsMoexFuturesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_futures_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/Futures', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexFuturesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_history_columns_post(self, **kwargs):  # noqa: E501
        """Получить описания колонок в исторических данных по инструментам, см. метод History.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_history_columns_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexHistoryColumnsBody body:
        :return: list[EfirDataHubModelsModelsMoexHistoryColumnsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_history_columns_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_history_columns_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_history_columns_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить описания колонок в исторических данных по инструментам, см. метод History.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_history_columns_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexHistoryColumnsBody body:
        :return: list[EfirDataHubModelsModelsMoexHistoryColumnsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_history_columns_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/HistoryColumns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexHistoryColumnsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_history_post(self, **kwargs):  # noqa: E501
        """Получить официальные итоги по набору конкретных инструментов или по всем инструментам заданного рынка, группы режимов или одного режима торгов.  В зависимости от комбинации входных параметров engine и market возвращаются следующие типы ответов:  \"stock\", \"bonds\" HistoryStockBondsFields  \"stock\", \"ccp\" HistoryStockCcpFields  \"stock\", \"index\" HistoryStockIndexFields  \"stock\", \"ndm\" HistoryStockNdmFields  \"stock\", \"foreignndm\" HistoryStockNdmFields  \"stock\", \"otc\" HistoryStockSharesFields  \"stock\", \"qnv\" HistoryStockQnvFields  \"stock\", \"repo\" HistoryStockRepoFields  \"stock\", \"gcc\" HistoryStockRepoFields  \"stock\", \"shares\" HistoryStockSharesFields  \"stock\", \"foreignshares\" HistoryStockSharesFields  \"futures\", \"options\" HistoryFuturesOptionsFields  \"futures\", \"forts\" HistoryFuturesFortsFields  \"currency\", \"futures\" HistoryCurrencyFuturesFields  \"currency\", \"selt\" HistoryCurrencySeltFields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_history_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexHistoryBody body:
        :return: EfirDataHubModelsModelsMoexHistoryStockIndexFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_history_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_history_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_history_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить официальные итоги по набору конкретных инструментов или по всем инструментам заданного рынка, группы режимов или одного режима торгов.  В зависимости от комбинации входных параметров engine и market возвращаются следующие типы ответов:  \"stock\", \"bonds\" HistoryStockBondsFields  \"stock\", \"ccp\" HistoryStockCcpFields  \"stock\", \"index\" HistoryStockIndexFields  \"stock\", \"ndm\" HistoryStockNdmFields  \"stock\", \"foreignndm\" HistoryStockNdmFields  \"stock\", \"otc\" HistoryStockSharesFields  \"stock\", \"qnv\" HistoryStockQnvFields  \"stock\", \"repo\" HistoryStockRepoFields  \"stock\", \"gcc\" HistoryStockRepoFields  \"stock\", \"shares\" HistoryStockSharesFields  \"stock\", \"foreignshares\" HistoryStockSharesFields  \"futures\", \"options\" HistoryFuturesOptionsFields  \"futures\", \"forts\" HistoryFuturesFortsFields  \"currency\", \"futures\" HistoryCurrencyFuturesFields  \"currency\", \"selt\" HistoryCurrencySeltFields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_history_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexHistoryBody body:
        :return: EfirDataHubModelsModelsMoexHistoryStockIndexFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_history_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/History', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsMoexHistoryStockIndexFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_limitval_currency_post(self, **kwargs):  # noqa: E501
        """Возвращает лимиты концентрации Валютного рынка  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_limitval_currency_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexLimitvalCurrencyBody body:
        :return: list[EfirDataHubModelsModelsMoexLimitvalFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_limitval_currency_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_limitval_currency_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_limitval_currency_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает лимиты концентрации Валютного рынка  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_limitval_currency_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexLimitvalCurrencyBody body:
        :return: list[EfirDataHubModelsModelsMoexLimitvalFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_limitval_currency_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/Limitval-Currency', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexLimitvalFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_limitval_stock_post(self, **kwargs):  # noqa: E501
        """Возвращает лимиты концентрации Фондового рынка  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_limitval_stock_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexLimitvalStockBody body:
        :return: list[EfirDataHubModelsModelsMoexLimitvalFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_limitval_stock_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_limitval_stock_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_limitval_stock_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает лимиты концентрации Фондового рынка  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_limitval_stock_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexLimitvalStockBody body:
        :return: list[EfirDataHubModelsModelsMoexLimitvalFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_limitval_stock_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/Limitval-Stock', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexLimitvalFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_ncc_indicative_risk_currency_post(self, **kwargs):  # noqa: E501
        """Индикативные ставки риска валютного рынка, НКЦ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_indicative_risk_currency_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccIndicativeRiskCurrencyBody body:
        :return: list[EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_ncc_indicative_risk_currency_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_ncc_indicative_risk_currency_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_ncc_indicative_risk_currency_post_with_http_info(self, **kwargs):  # noqa: E501
        """Индикативные ставки риска валютного рынка, НКЦ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_indicative_risk_currency_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccIndicativeRiskCurrencyBody body:
        :return: list[EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_ncc_indicative_risk_currency_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/NccIndicativeRiskCurrency', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_ncc_indicative_risk_fond_post(self, **kwargs):  # noqa: E501
        """Индикативные ставки риска фондового рынка, НКЦ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_indicative_risk_fond_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccIndicativeRiskFondBody body:
        :return: list[EfirDataHubModelsModelsMoexNccIndicativeRiskFondFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_ncc_indicative_risk_fond_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_ncc_indicative_risk_fond_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_ncc_indicative_risk_fond_post_with_http_info(self, **kwargs):  # noqa: E501
        """Индикативные ставки риска фондового рынка, НКЦ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_indicative_risk_fond_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccIndicativeRiskFondBody body:
        :return: list[EfirDataHubModelsModelsMoexNccIndicativeRiskFondFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_ncc_indicative_risk_fond_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/NccIndicativeRiskFond', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexNccIndicativeRiskFondFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_ncc_indicative_risk_futures_post(self, **kwargs):  # noqa: E501
        """Индикативные ставки риска срочного рынка, НКЦ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_indicative_risk_futures_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccIndicativeRiskFuturesBody body:
        :return: list[EfirDataHubModelsModelsMoexNccIndicativeRiskFuturesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_ncc_indicative_risk_futures_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_ncc_indicative_risk_futures_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_ncc_indicative_risk_futures_post_with_http_info(self, **kwargs):  # noqa: E501
        """Индикативные ставки риска срочного рынка, НКЦ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_indicative_risk_futures_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccIndicativeRiskFuturesBody body:
        :return: list[EfirDataHubModelsModelsMoexNccIndicativeRiskFuturesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_ncc_indicative_risk_futures_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/NccIndicativeRiskFutures', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexNccIndicativeRiskFuturesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_ncc_market_risk_currency_post(self, **kwargs):  # noqa: E501
        """Динамические риск-параметры рыночных рисков на валютном рынке, НКЦ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_market_risk_currency_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccMarketRiskCurrencyBody body:
        :return: list[EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_ncc_market_risk_currency_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_ncc_market_risk_currency_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_ncc_market_risk_currency_post_with_http_info(self, **kwargs):  # noqa: E501
        """Динамические риск-параметры рыночных рисков на валютном рынке, НКЦ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_market_risk_currency_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccMarketRiskCurrencyBody body:
        :return: list[EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_ncc_market_risk_currency_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/NccMarketRiskCurrency', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_ncc_market_risk_fond_post(self, **kwargs):  # noqa: E501
        """Динамические риск-параметры рыночных рисков на фондовом рынке, НКЦ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_market_risk_fond_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccMarketRiskFondBody body:
        :return: list[EfirDataHubModelsModelsMoexNccMarketRiskFondFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_ncc_market_risk_fond_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_ncc_market_risk_fond_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_ncc_market_risk_fond_post_with_http_info(self, **kwargs):  # noqa: E501
        """Динамические риск-параметры рыночных рисков на фондовом рынке, НКЦ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_market_risk_fond_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccMarketRiskFondBody body:
        :return: list[EfirDataHubModelsModelsMoexNccMarketRiskFondFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_ncc_market_risk_fond_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/NccMarketRiskFond', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexNccMarketRiskFondFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_ncc_percent_risk_currency_post(self, **kwargs):  # noqa: E501
        """Возвращает динамические риск-параметры процентных рисков на валютном рынке  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_percent_risk_currency_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccPercentRiskCurrencyBody body:
        :return: list[EfirDataHubModelsModelsMoexNccPercentRiskFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_ncc_percent_risk_currency_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_ncc_percent_risk_currency_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_ncc_percent_risk_currency_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает динамические риск-параметры процентных рисков на валютном рынке  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_percent_risk_currency_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccPercentRiskCurrencyBody body:
        :return: list[EfirDataHubModelsModelsMoexNccPercentRiskFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_ncc_percent_risk_currency_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/NccPercentRiskCurrency', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexNccPercentRiskFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_ncc_percent_risk_fond_post(self, **kwargs):  # noqa: E501
        """Возвращает динамические риск-параметры процентных рисков на рынке акций и облигаций  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_percent_risk_fond_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccPercentRiskFondBody body:
        :return: list[EfirDataHubModelsModelsMoexNccPercentRiskFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_ncc_percent_risk_fond_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_ncc_percent_risk_fond_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_ncc_percent_risk_fond_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает динамические риск-параметры процентных рисков на рынке акций и облигаций  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_ncc_percent_risk_fond_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexNccPercentRiskFondBody body:
        :return: list[EfirDataHubModelsModelsMoexNccPercentRiskFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_ncc_percent_risk_fond_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/NccPercentRiskFond', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexNccPercentRiskFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_option_columns_post(self, **kwargs):  # noqa: E501
        """Получить описание полей в справочнике опционов, см. метод Options. Входных параметров нет.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_option_columns_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsMoexOptionColumnsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_option_columns_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_option_columns_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_option_columns_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить описание полей в справочнике опционов, см. метод Options. Входных параметров нет.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_option_columns_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsMoexOptionColumnsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_option_columns_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/OptionColumns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexOptionColumnsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_options_post(self, **kwargs):  # noqa: E501
        """Получить описания опционов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_options_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexOptionsBody body:
        :return: list[EfirDataHubModelsModelsMoexOptionsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_options_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_options_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_options_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить описания опционов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_options_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexOptionsBody body:
        :return: list[EfirDataHubModelsModelsMoexOptionsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_options_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/Options', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexOptionsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_sec_columns_post(self, **kwargs):  # noqa: E501
        """Получить описание полей в справочнике торговых инструментов, см. метод Securities. Входных параметров нет.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_sec_columns_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsMoexSecColumnsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_sec_columns_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_sec_columns_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_sec_columns_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить описание полей в справочнике торговых инструментов, см. метод Securities. Входных параметров нет.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_sec_columns_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsMoexSecColumnsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_sec_columns_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/SecColumns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexSecColumnsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_securities_post(self, **kwargs):  # noqa: E501
        """Получить список торгуемых инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_securities_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexSecuritiesBody body:
        :return: list[EfirDataHubModelsModelsMoexSecuritiesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_securities_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_securities_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_securities_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить список торгуемых инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_securities_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexSecuritiesBody body:
        :return: list[EfirDataHubModelsModelsMoexSecuritiesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_securities_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/Securities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexSecuritiesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_stock_boards_post(self, **kwargs):  # noqa: E501
        """Возвращает описание режимов торгов (boards) ценных бумаг фондового рынка  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_stock_boards_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexStockBoardsBody body:
        :return: list[EfirDataHubModelsModelsMoexStockBoardsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_stock_boards_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_stock_boards_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_stock_boards_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает описание режимов торгов (boards) ценных бумаг фондового рынка  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_stock_boards_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexStockBoardsBody body:
        :return: list[EfirDataHubModelsModelsMoexStockBoardsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_stock_boards_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/StockBoards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexStockBoardsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_moex_stocks_post(self, **kwargs):  # noqa: E501
        """Возвращает краткое описание ценных бумаг фондового рынка  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_stocks_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexStocksBody body:
        :return: list[EfirDataHubModelsModelsMoexStocksFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_moex_stocks_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_moex_stocks_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_moex_stocks_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает краткое описание ценных бумаг фондового рынка  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_moex_stocks_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoexStocksBody body:
        :return: list[EfirDataHubModelsModelsMoexStocksFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_moex_stocks_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Moex/Stocks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsMoexStocksFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
