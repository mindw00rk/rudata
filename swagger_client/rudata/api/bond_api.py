# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BondApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_bond_amortizations_ext_post(self, **kwargs):  # noqa: E501
        """Получить расширенный план погашения выпусков с амортизацией долга.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_amortizations_ext_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondAmortizationsExtBody body:
        :return: list[EfirDataHubModelsModelsBondAmortizationsExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_amortizations_ext_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_amortizations_ext_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_amortizations_ext_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить расширенный план погашения выпусков с амортизацией долга.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_amortizations_ext_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondAmortizationsExtBody body:
        :return: list[EfirDataHubModelsModelsBondAmortizationsExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_amortizations_ext_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/AmortizationsExt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondAmortizationsExtFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_amortizations_post(self, **kwargs):  # noqa: E501
        """Получить план погашения выпусков с амортизацией долга.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_amortizations_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondAmortizationsBody body:
        :return: list[EfirDataHubModelsModelsBondAmortizationsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_amortizations_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_amortizations_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_amortizations_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить план погашения выпусков с амортизацией долга.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_amortizations_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondAmortizationsBody body:
        :return: list[EfirDataHubModelsModelsBondAmortizationsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_amortizations_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/Amortizations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondAmortizationsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_auction_data_post(self, **kwargs):  # noqa: E501
        """Получить данные по первичным размещениям.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_auction_data_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondAuctionDataBody body:
        :return: list[EfirDataHubModelsModelsBondAuctionDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_auction_data_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_auction_data_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_auction_data_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные по первичным размещениям.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_auction_data_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondAuctionDataBody body:
        :return: list[EfirDataHubModelsModelsBondAuctionDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_auction_data_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/AuctionData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondAuctionDataFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_calculate_bond_ex_post(self, **kwargs):  # noqa: E501
        """Произвести вычисления доходностей и других параметров облигаций. Является аналогом метода CalculateBond с дополнительными полями входного параметра couponForecast и couponBinding.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_calculate_bond_ex_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCalculateBondExBody body:
        :return: list[EfirDataHubModelsModelsBondCalculateBondFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_calculate_bond_ex_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_calculate_bond_ex_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_calculate_bond_ex_post_with_http_info(self, **kwargs):  # noqa: E501
        """Произвести вычисления доходностей и других параметров облигаций. Является аналогом метода CalculateBond с дополнительными полями входного параметра couponForecast и couponBinding.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_calculate_bond_ex_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCalculateBondExBody body:
        :return: list[EfirDataHubModelsModelsBondCalculateBondFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_calculate_bond_ex_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/CalculateBondEx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondCalculateBondFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_calculate_bond_multi_post(self, **kwargs):  # noqa: E501
        """Аналог CalcucalteBondEx для списка инструментов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_calculate_bond_multi_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCalculateBondMultiBody body:
        :return: list[EfirDataHubModelsModelsBondCalculateBondMultiResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_calculate_bond_multi_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_calculate_bond_multi_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_calculate_bond_multi_post_with_http_info(self, **kwargs):  # noqa: E501
        """Аналог CalcucalteBondEx для списка инструментов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_calculate_bond_multi_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCalculateBondMultiBody body:
        :return: list[EfirDataHubModelsModelsBondCalculateBondMultiResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_calculate_bond_multi_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/CalculateBondMulti', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondCalculateBondMultiResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_calculate_bond_post(self, **kwargs):  # noqa: E501
        """Произвести вычисления доходностей и других параметров облигаций.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_calculate_bond_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCalculateBondBody body:
        :return: list[EfirDataHubModelsModelsBondCalculateBondFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_calculate_bond_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_calculate_bond_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_calculate_bond_post_with_http_info(self, **kwargs):  # noqa: E501
        """Произвести вычисления доходностей и других параметров облигаций.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_calculate_bond_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCalculateBondBody body:
        :return: list[EfirDataHubModelsModelsBondCalculateBondFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_calculate_bond_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/CalculateBond', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondCalculateBondFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_calculate_post(self, **kwargs):  # noqa: E501
        """Calculate bond yields, durations, face value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_calculate_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCalculateBody body:
        :return: EfirDataHubModelsModelsBondCalculateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_calculate_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_calculate_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_calculate_post_with_http_info(self, **kwargs):  # noqa: E501
        """Calculate bond yields, durations, face value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_calculate_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCalculateBody body:
        :return: EfirDataHubModelsModelsBondCalculateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_calculate_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/Calculate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsBondCalculateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_classification_post(self, **kwargs):  # noqa: E501
        """Получить классификацию выпуска.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_classification_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondClassificationBody body:
        :return: list[EfirDataHubModelsModelsBondClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_classification_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_classification_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_classification_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить классификацию выпуска.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_classification_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondClassificationBody body:
        :return: list[EfirDataHubModelsModelsBondClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_classification_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/Classification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondClassificationFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_common_data_ext_post(self, **kwargs):  # noqa: E501
        """Получить расширенные общие данные по выпуску.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_common_data_ext_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCommonDataExtBody body:
        :return: list[EfirDataHubModelsModelsBondCommonDataExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_common_data_ext_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_common_data_ext_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_common_data_ext_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить расширенные общие данные по выпуску.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_common_data_ext_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCommonDataExtBody body:
        :return: list[EfirDataHubModelsModelsBondCommonDataExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_common_data_ext_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/CommonDataExt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondCommonDataExtFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_common_data_post(self, **kwargs):  # noqa: E501
        """Получить общие данные по выпуску.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_common_data_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCommonDataBody body:
        :return: list[EfirDataHubModelsModelsBondCommonDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_common_data_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_common_data_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_common_data_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить общие данные по выпуску.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_common_data_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCommonDataBody body:
        :return: list[EfirDataHubModelsModelsBondCommonDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_common_data_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/CommonData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondCommonDataFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_convertation_post(self, **kwargs):  # noqa: E501
        """Получить данные по конвертациям облигаций в другие инструменты.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_convertation_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondConvertationBody body:
        :return: list[EfirDataHubModelsModelsBondConvertationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_convertation_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_convertation_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_convertation_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные по конвертациям облигаций в другие инструменты.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_convertation_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondConvertationBody body:
        :return: list[EfirDataHubModelsModelsBondConvertationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_convertation_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/Convertation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondConvertationFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_coupons_ext_post(self, **kwargs):  # noqa: E501
        """Получить расширенные данные по купонам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_coupons_ext_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCouponsExtBody body:
        :return: list[EfirDataHubModelsModelsBondCouponsExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_coupons_ext_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_coupons_ext_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_coupons_ext_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить расширенные данные по купонам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_coupons_ext_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCouponsExtBody body:
        :return: list[EfirDataHubModelsModelsBondCouponsExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_coupons_ext_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/CouponsExt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondCouponsExtFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_coupons_post(self, **kwargs):  # noqa: E501
        """Получить данные по купонам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_coupons_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCouponsBody body:
        :return: list[EfirDataHubModelsModelsBondCouponsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_coupons_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_coupons_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_coupons_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные по купонам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_coupons_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCouponsBody body:
        :return: list[EfirDataHubModelsModelsBondCouponsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_coupons_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/Coupons', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondCouponsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_covenants_post(self, **kwargs):  # noqa: E501
        """Возвращает список ковенантов для массива бумаг  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_covenants_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCovenantsBody body:
        :return: list[EfirDataHubModelsModelsBondCovenantsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_covenants_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_covenants_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_covenants_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает список ковенантов для массива бумаг  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_covenants_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondCovenantsBody body:
        :return: list[EfirDataHubModelsModelsBondCovenantsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_covenants_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/Covenants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondCovenantsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_date_options_fields_post(self, **kwargs):  # noqa: E501
        """Получить справочник полей для метода DateOptionsTable.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_date_options_fields_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondDateOptionsFieldsBody body:
        :return: list[EfirDataHubModelsModelsBondDateOptionsFieldsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_date_options_fields_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_date_options_fields_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_date_options_fields_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справочник полей для метода DateOptionsTable.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_date_options_fields_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondDateOptionsFieldsBody body:
        :return: list[EfirDataHubModelsModelsBondDateOptionsFieldsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_date_options_fields_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/DateOptionsFields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondDateOptionsFieldsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_date_options_post(self, **kwargs):  # noqa: E501
        """Получить параметры облигации, зависимые от даты.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_date_options_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondDateOptionsBody body:
        :return: EfirDataHubModelsModelsBondDateOptionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_date_options_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_date_options_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_date_options_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить параметры облигации, зависимые от даты.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_date_options_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondDateOptionsBody body:
        :return: EfirDataHubModelsModelsBondDateOptionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_date_options_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/DateOptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsBondDateOptionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_date_options_table_post(self, **kwargs):  # noqa: E501
        """Получить параметры облигации, зависимые от даты, в табличном виде.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_date_options_table_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondDateOptionsTableBody body:
        :return: list[EfirDataHubModelsModelsBondDateOptionsTableFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_date_options_table_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_date_options_table_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_date_options_table_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить параметры облигации, зависимые от даты, в табличном виде.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_date_options_table_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondDateOptionsTableBody body:
        :return: list[EfirDataHubModelsModelsBondDateOptionsTableFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_date_options_table_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/DateOptionsTable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondDateOptionsTableFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_default_events_post(self, **kwargs):  # noqa: E501
        """Получить данные по дефолтам по облигациям.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_default_events_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondDefaultEventsBody body:
        :return: list[EfirDataHubModelsModelsBondDefaultEventsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_default_events_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_default_events_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_default_events_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные по дефолтам по облигациям.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_default_events_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondDefaultEventsBody body:
        :return: list[EfirDataHubModelsModelsBondDefaultEventsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_default_events_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/DefaultEvents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondDefaultEventsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_defaults_table_post(self, **kwargs):  # noqa: E501
        """Получить список произошедших дефолтов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_defaults_table_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondDefaultsTableBody body:
        :return: list[EfirDataHubModelsModelsBondDefaultsTableFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_defaults_table_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_defaults_table_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_defaults_table_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить список произошедших дефолтов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_defaults_table_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondDefaultsTableBody body:
        :return: list[EfirDataHubModelsModelsBondDefaultsTableFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_defaults_table_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/DefaultsTable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondDefaultsTableFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_emission_docs_post(self, **kwargs):  # noqa: E501
        """Получить ссылки на документы эмиссий.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_emission_docs_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondEmissionDocsBody body:
        :return: list[EfirDataHubModelsModelsBondEmissionDocsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_emission_docs_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_emission_docs_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_emission_docs_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить ссылки на документы эмиссий.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_emission_docs_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondEmissionDocsBody body:
        :return: list[EfirDataHubModelsModelsBondEmissionDocsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_emission_docs_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/EmissionDocs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondEmissionDocsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_fintool_id_amortizations_post(self, fintool_id, **kwargs):  # noqa: E501
        """Получить план погашения выпусков с амортизацией долга.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_fintool_id_amortizations_post(fintool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fintool_id: Идентификатор финансового инструмента в базе Интерфакс (required)
        :param FintoolIdAmortizationsBody body: Параметры запроса
        :return: list[EfirDataHubModelsModelsBondAmortizationsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_fintool_id_amortizations_post_with_http_info(fintool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_fintool_id_amortizations_post_with_http_info(fintool_id, **kwargs)  # noqa: E501
            return data

    def v2_bond_fintool_id_amortizations_post_with_http_info(self, fintool_id, **kwargs):  # noqa: E501
        """Получить план погашения выпусков с амортизацией долга.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_fintool_id_amortizations_post_with_http_info(fintool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fintool_id: Идентификатор финансового инструмента в базе Интерфакс (required)
        :param FintoolIdAmortizationsBody body: Параметры запроса
        :return: list[EfirDataHubModelsModelsBondAmortizationsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fintool_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_fintool_id_amortizations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fintool_id' is set
        if ('fintool_id' not in params or
                params['fintool_id'] is None):
            raise ValueError("Missing the required parameter `fintool_id` when calling `v2_bond_fintool_id_amortizations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fintool_id' in params:
            path_params['fintoolId'] = params['fintool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/{fintoolId}/Amortizations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondAmortizationsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_fintool_id_coupons_post(self, fintool_id, **kwargs):  # noqa: E501
        """Получить данные по купонам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_fintool_id_coupons_post(fintool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fintool_id: Идентификатор финансового инструмента в базе Интерфакс (required)
        :param FintoolIdCouponsBody body: Параметры запроса
        :return: list[EfirDataHubModelsModelsBondCouponsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_fintool_id_coupons_post_with_http_info(fintool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_fintool_id_coupons_post_with_http_info(fintool_id, **kwargs)  # noqa: E501
            return data

    def v2_bond_fintool_id_coupons_post_with_http_info(self, fintool_id, **kwargs):  # noqa: E501
        """Получить данные по купонам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_fintool_id_coupons_post_with_http_info(fintool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fintool_id: Идентификатор финансового инструмента в базе Интерфакс (required)
        :param FintoolIdCouponsBody body: Параметры запроса
        :return: list[EfirDataHubModelsModelsBondCouponsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fintool_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_fintool_id_coupons_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fintool_id' is set
        if ('fintool_id' not in params or
                params['fintool_id'] is None):
            raise ValueError("Missing the required parameter `fintool_id` when calling `v2_bond_fintool_id_coupons_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fintool_id' in params:
            path_params['fintoolId'] = params['fintool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/{fintoolId}/Coupons', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondCouponsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_fintool_id_covenant_info_post(self, fintool_id, **kwargs):  # noqa: E501
        """Возвращает список ковенантов для указанного fintoolId облигации  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_fintool_id_covenant_info_post(fintool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fintool_id: (required)
        :return: list[EfirDataHubModelsModelsBondCovenantsInfoFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_fintool_id_covenant_info_post_with_http_info(fintool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_fintool_id_covenant_info_post_with_http_info(fintool_id, **kwargs)  # noqa: E501
            return data

    def v2_bond_fintool_id_covenant_info_post_with_http_info(self, fintool_id, **kwargs):  # noqa: E501
        """Возвращает список ковенантов для указанного fintoolId облигации  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_fintool_id_covenant_info_post_with_http_info(fintool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fintool_id: (required)
        :return: list[EfirDataHubModelsModelsBondCovenantsInfoFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fintool_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_fintool_id_covenant_info_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fintool_id' is set
        if ('fintool_id' not in params or
                params['fintool_id'] is None):
            raise ValueError("Missing the required parameter `fintool_id` when calling `v2_bond_fintool_id_covenant_info_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fintool_id' in params:
            path_params['fintoolId'] = params['fintool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/{fintoolId}/CovenantInfo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondCovenantsInfoFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_fintool_id_offers_post(self, fintool_id, **kwargs):  # noqa: E501
        """Получить данные по досрочным выкупам/офертам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_fintool_id_offers_post(fintool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fintool_id: Идентификатор финансового инструмента в базе Интерфакс (required)
        :param FintoolIdOffersBody body: Параметры запроса
        :return: list[EfirDataHubModelsModelsBondOffersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_fintool_id_offers_post_with_http_info(fintool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_fintool_id_offers_post_with_http_info(fintool_id, **kwargs)  # noqa: E501
            return data

    def v2_bond_fintool_id_offers_post_with_http_info(self, fintool_id, **kwargs):  # noqa: E501
        """Получить данные по досрочным выкупам/офертам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_fintool_id_offers_post_with_http_info(fintool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fintool_id: Идентификатор финансового инструмента в базе Интерфакс (required)
        :param FintoolIdOffersBody body: Параметры запроса
        :return: list[EfirDataHubModelsModelsBondOffersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fintool_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_fintool_id_offers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fintool_id' is set
        if ('fintool_id' not in params or
                params['fintool_id'] is None):
            raise ValueError("Missing the required parameter `fintool_id` when calling `v2_bond_fintool_id_offers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fintool_id' in params:
            path_params['fintoolId'] = params['fintool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/{fintoolId}/Offers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondOffersFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_floater_data_post(self, **kwargs):  # noqa: E501
        """Возвращает описания правил расчета ставок для бумаг с плавающей купонной ставкой  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_floater_data_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondFloaterDataBody body:
        :return: list[EfirDataHubModelsModelsBondFloaterDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_floater_data_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_floater_data_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_floater_data_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает описания правил расчета ставок для бумаг с плавающей купонной ставкой  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_floater_data_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondFloaterDataBody body:
        :return: list[EfirDataHubModelsModelsBondFloaterDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_floater_data_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/FloaterData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondFloaterDataFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_g_curve_ofz_post(self, **kwargs):  # noqa: E501
        """Параметры кривой бескупонной доходности государственных облигаций  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_g_curve_ofz_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondGcurveofzBody body:
        :return: EfirDataHubModelsModelsRuDataGCurveOFZResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_g_curve_ofz_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_g_curve_ofz_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_g_curve_ofz_post_with_http_info(self, **kwargs):  # noqa: E501
        """Параметры кривой бескупонной доходности государственных облигаций  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_g_curve_ofz_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondGcurveofzBody body:
        :return: EfirDataHubModelsModelsRuDataGCurveOFZResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_g_curve_ofz_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/g-curve-ofz', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRuDataGCurveOFZResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_list_bond_types_post(self, **kwargs):  # noqa: E501
        """Получить справочник типов облигаций.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_list_bond_types_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondListBondTypesBody body:
        :return: list[EfirDataHubModelsModelsBondListBondTypesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_list_bond_types_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_list_bond_types_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_list_bond_types_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справочник типов облигаций.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_list_bond_types_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondListBondTypesBody body:
        :return: list[EfirDataHubModelsModelsBondListBondTypesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_list_bond_types_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/ListBondTypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondListBondTypesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_list_org_roles_post(self, **kwargs):  # noqa: E501
        """Получить справочник ролей организаций.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_list_org_roles_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondListOrgRolesBody body:
        :return: list[EfirDataHubModelsModelsBondListOrgRolesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_list_org_roles_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_list_org_roles_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_list_org_roles_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справочник ролей организаций.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_list_org_roles_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondListOrgRolesBody body:
        :return: list[EfirDataHubModelsModelsBondListOrgRolesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_list_org_roles_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/ListOrgRoles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondListOrgRolesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_list_type_groups_post(self, **kwargs):  # noqa: E501
        """Получить категории типов облигаций.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_list_type_groups_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondListTypeGroupsBody body:
        :return: list[EfirDataHubModelsModelsBondListTypeGroupsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_list_type_groups_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_list_type_groups_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_list_type_groups_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить категории типов облигаций.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_list_type_groups_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondListTypeGroupsBody body:
        :return: list[EfirDataHubModelsModelsBondListTypeGroupsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_list_type_groups_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/ListTypeGroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondListTypeGroupsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_offerors_guarants_post(self, **kwargs):  # noqa: E501
        """Возвращает список гарантов/оферентов для инструмента  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_offerors_guarants_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondOfferorsGuarantsBody body:
        :return: list[EfirDataHubModelsModelsBondOfferorsGuarantsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_offerors_guarants_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_offerors_guarants_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_offerors_guarants_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает список гарантов/оферентов для инструмента  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_offerors_guarants_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondOfferorsGuarantsBody body:
        :return: list[EfirDataHubModelsModelsBondOfferorsGuarantsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_offerors_guarants_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/OfferorsGuarants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondOfferorsGuarantsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_offers_post(self, **kwargs):  # noqa: E501
        """Получить данные по досрочным выкупам/офертам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_offers_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondOffersBody body:
        :return: list[EfirDataHubModelsModelsBondOffersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_offers_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_offers_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_offers_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные по досрочным выкупам/офертам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_offers_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondOffersBody body:
        :return: list[EfirDataHubModelsModelsBondOffersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_offers_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/Offers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondOffersFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_organizers_post(self, **kwargs):  # noqa: E501
        """Получить роли организаторов выпуска.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_organizers_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondOrganizersBody body:
        :return: list[EfirDataHubModelsModelsBondOrganizersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_organizers_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_organizers_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_organizers_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить роли организаторов выпуска.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_organizers_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondOrganizersBody body:
        :return: list[EfirDataHubModelsModelsBondOrganizersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_organizers_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/Organizers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondOrganizersFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_programs_post(self, **kwargs):  # noqa: E501
        """Получить данные по программам выпуска облигаций.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_programs_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondProgramsBody body:
        :return: list[EfirDataHubModelsModelsBondProgramsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_programs_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_programs_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_programs_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные по программам выпуска облигаций.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_programs_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondProgramsBody body:
        :return: list[EfirDataHubModelsModelsBondProgramsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_programs_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/Programs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondProgramsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_risk_data_post(self, **kwargs):  # noqa: E501
        """Получить данные, необходимые для расчёта рисков по выпуску.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_risk_data_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondRiskDataBody body:
        :return: list[EfirDataHubModelsModelsBondRiskDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_risk_data_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_risk_data_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_risk_data_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные, необходимые для расчёта рисков по выпуску.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_risk_data_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondRiskDataBody body:
        :return: list[EfirDataHubModelsModelsBondRiskDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_risk_data_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/RiskData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondRiskDataFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_time_table_field_groups_post(self, **kwargs):  # noqa: E501
        """Получить справочник групп полей (см. метод TimeTableFields).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_time_table_field_groups_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondTimeTableFieldGroupsBody body:
        :return: list[EfirDataHubModelsModelsBondTimeTableFieldGroupsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_time_table_field_groups_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_time_table_field_groups_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_time_table_field_groups_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справочник групп полей (см. метод TimeTableFields).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_time_table_field_groups_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondTimeTableFieldGroupsBody body:
        :return: list[EfirDataHubModelsModelsBondTimeTableFieldGroupsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_time_table_field_groups_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/TimeTableFieldGroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondTimeTableFieldGroupsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_time_table_fields_post(self, **kwargs):  # noqa: E501
        """Получить справочник полей для использования в календаре событий (см. метод TimeTable).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_time_table_fields_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondTimeTableFieldsBody body:
        :return: list[EfirDataHubModelsModelsBondTimeTableFieldsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_time_table_fields_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_time_table_fields_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_time_table_fields_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справочник полей для использования в календаре событий (см. метод TimeTable).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_time_table_fields_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondTimeTableFieldsBody body:
        :return: list[EfirDataHubModelsModelsBondTimeTableFieldsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_time_table_fields_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/TimeTableFields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondTimeTableFieldsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_time_table_post(self, **kwargs):  # noqa: E501
        """Получить календарь событий.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_time_table_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondTimeTableBody body:
        :return: EfirDataHubModelsModelsBondTimeTableResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_time_table_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_time_table_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_time_table_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить календарь событий.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_time_table_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondTimeTableBody body:
        :return: EfirDataHubModelsModelsBondTimeTableResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_time_table_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/TimeTable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsBondTimeTableResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_bond_traffic_light_scoring_post(self, **kwargs):  # noqa: E501
        """Возвращает показатели кредитной оценки облигаций российских эмитентов или евробондов российских компаний  по шкале \"светофора\" (1-6), актуальные на заданную дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_traffic_light_scoring_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondTrafficLightScoringBody body:
        :return: list[EfirDataHubModelsModelsBondTrafficLightScoringFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_bond_traffic_light_scoring_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_bond_traffic_light_scoring_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_bond_traffic_light_scoring_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает показатели кредитной оценки облигаций российских эмитентов или евробондов российских компаний  по шкале \"светофора\" (1-6), актуальные на заданную дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_bond_traffic_light_scoring_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BondTrafficLightScoringBody body:
        :return: list[EfirDataHubModelsModelsBondTrafficLightScoringFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_bond_traffic_light_scoring_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Bond/TrafficLightScoring', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondTrafficLightScoringFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
