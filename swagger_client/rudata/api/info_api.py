# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class InfoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_info_bank_branches_post(self, **kwargs):  # noqa: E501
        """Получить список отделений банков.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_bank_branches_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoBankBranchesBody body:
        :return: list[EfirDataHubModelsModelsInfoBankBranchesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_bank_branches_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_bank_branches_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_bank_branches_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить список отделений банков.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_bank_branches_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoBankBranchesBody body:
        :return: list[EfirDataHubModelsModelsInfoBankBranchesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_bank_branches_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/BankBranches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoBankBranchesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_calendar_post(self, **kwargs):  # noqa: E501
        """Возвращает календарь событий по инструментам за период.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_calendar_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoCalendarBody body:
        :return: EfirDataHubModelsModelsBondTimeTableResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_calendar_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_calendar_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_calendar_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает календарь событий по инструментам за период.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_calendar_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoCalendarBody body:
        :return: EfirDataHubModelsModelsBondTimeTableResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_calendar_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/Calendar', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsBondTimeTableResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_calendar_v2_post(self, **kwargs):  # noqa: E501
        """Возвращает календарь событий по инструментам за период  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_calendar_v2_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoCalendarV2Body body:
        :return: list[EfirDataHubModelsModelsBondTimeTableV2Fields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_calendar_v2_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_calendar_v2_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_calendar_v2_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает календарь событий по инструментам за период  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_calendar_v2_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoCalendarV2Body body:
        :return: list[EfirDataHubModelsModelsBondTimeTableV2Fields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_calendar_v2_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/CalendarV2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsBondTimeTableV2Fields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_classification_codes_post(self, **kwargs):  # noqa: E501
        """Получить структуру «Группы классификаторов» / «Классификаторы» для инструментов и/или эмитентов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_classification_codes_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoClassificationCodesBody body:
        :return: EfirDataHubModelsModelsInfoClassificationCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_classification_codes_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_classification_codes_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_classification_codes_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить структуру «Группы классификаторов» / «Классификаторы» для инструментов и/или эмитентов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_classification_codes_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoClassificationCodesBody body:
        :return: EfirDataHubModelsModelsInfoClassificationCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_classification_codes_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/ClassificationCodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsInfoClassificationCodesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_classification_post(self, **kwargs):  # noqa: E501
        """Классификатор финансовых инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_classification_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoClassificationBody body:
        :return: list[EfirDataHubModelsModelsInfoClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_classification_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_classification_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_classification_post_with_http_info(self, **kwargs):  # noqa: E501
        """Классификатор финансовых инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_classification_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoClassificationBody body:
        :return: list[EfirDataHubModelsModelsInfoClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_classification_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/Classification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoClassificationFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_country_classification_post(self, **kwargs):  # noqa: E501
        """Получить классификацию стран  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_country_classification_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoCountryClassificationBody body:
        :return: list[EfirDataHubModelsModelsInfoCountryClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_country_classification_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_country_classification_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_country_classification_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить классификацию стран  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_country_classification_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoCountryClassificationBody body:
        :return: list[EfirDataHubModelsModelsInfoCountryClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_country_classification_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/CountryClassification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoCountryClassificationFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_currencies_post(self, **kwargs):  # noqa: E501
        """Получить справочник валют.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_currencies_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoCurrenciesBody body:
        :return: EfirDataHubModelsModelsInfoCurrenciesWithKkvFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_currencies_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_currencies_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_currencies_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справочник валют.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_currencies_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoCurrenciesBody body:
        :return: EfirDataHubModelsModelsInfoCurrenciesWithKkvFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_currencies_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/Currencies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsInfoCurrenciesWithKkvFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_currency_codes_post(self, **kwargs):  # noqa: E501
        """Получить коды валют по различным классификаторам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_currency_codes_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoCurrencyCodesBody body:
        :return: list[EfirDataHubModelsModelsInfoCurrencyCodesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_currency_codes_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_currency_codes_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_currency_codes_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить коды валют по различным классификаторам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_currency_codes_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoCurrencyCodesBody body:
        :return: list[EfirDataHubModelsModelsInfoCurrencyCodesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_currency_codes_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/CurrencyCodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoCurrencyCodesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_deleted_securities_post(self, **kwargs):  # noqa: E501
        """Получить список удаленных из базы инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_deleted_securities_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoDeletedSecuritiesBody body:
        :return: list[EfirDataHubModelsModelsInfoDeletedSecuritiesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_deleted_securities_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_deleted_securities_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_deleted_securities_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить список удаленных из базы инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_deleted_securities_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoDeletedSecuritiesBody body:
        :return: list[EfirDataHubModelsModelsInfoDeletedSecuritiesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_deleted_securities_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/DeletedSecurities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoDeletedSecuritiesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_emission_docs_post(self, **kwargs):  # noqa: E501
        """Получить ссылки на документы эмиссий.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emission_docs_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEmissionDocsBody body:
        :return: EfirDataHubModelsModelsInfoEmissionDocsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_emission_docs_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_emission_docs_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_emission_docs_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить ссылки на документы эмиссий.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emission_docs_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEmissionDocsBody body:
        :return: EfirDataHubModelsModelsInfoEmissionDocsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_emission_docs_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/EmissionDocs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsInfoEmissionDocsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_emitent_category_value_post(self, **kwargs):  # noqa: E501
        """Метод для получения компаний и их категорий  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emitent_category_value_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEmitentcategoryvalueBody body:
        :return: list[EfirDataHubModelsModelsDictionaryEmitentCategoryValueFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_emitent_category_value_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_emitent_category_value_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_emitent_category_value_post_with_http_info(self, **kwargs):  # noqa: E501
        """Метод для получения компаний и их категорий  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emitent_category_value_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEmitentcategoryvalueBody body:
        :return: list[EfirDataHubModelsModelsDictionaryEmitentCategoryValueFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_emitent_category_value_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/emitent-category-value', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsDictionaryEmitentCategoryValueFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_emitent_classification_post(self, **kwargs):  # noqa: E501
        """Получить классификацию эмитентов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emitent_classification_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEmitentClassificationBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_emitent_classification_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_emitent_classification_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_emitent_classification_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить классификацию эмитентов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emitent_classification_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEmitentClassificationBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_emitent_classification_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/EmitentClassification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoEmitentClassificationFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_emitent_docs_post(self, **kwargs):  # noqa: E501
        """Получить информационные материалы по эмитентам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emitent_docs_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEmitentDocsBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentDocsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_emitent_docs_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_emitent_docs_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_emitent_docs_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить информационные материалы по эмитентам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emitent_docs_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEmitentDocsBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentDocsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_emitent_docs_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/EmitentDocs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoEmitentDocsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_emitents_ext_post(self, **kwargs):  # noqa: E501
        """Получить расширенный справочник по эмитентам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emitents_ext_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEmitentsExtBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentsExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_emitents_ext_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_emitents_ext_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_emitents_ext_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить расширенный справочник по эмитентам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emitents_ext_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEmitentsExtBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentsExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_emitents_ext_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/EmitentsExt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoEmitentsExtFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_emitents_id_post(self, id, **kwargs):  # noqa: E501
        """Получить краткий справочник по эмитентам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emitents_id_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: EfirDataHubModelsModelsInfoEmitentsFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_emitents_id_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_emitents_id_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v2_info_emitents_id_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Получить краткий справочник по эмитентам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emitents_id_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: EfirDataHubModelsModelsInfoEmitentsFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_emitents_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v2_info_emitents_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/Emitents/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsInfoEmitentsFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_emitents_post(self, **kwargs):  # noqa: E501
        """Получить краткий справочник по эмитентам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emitents_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEmitentsBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_emitents_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_emitents_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_emitents_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить краткий справочник по эмитентам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_emitents_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEmitentsBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_emitents_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/Emitents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoEmitentsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_enum_values_post(self, **kwargs):  # noqa: E501
        """Списки значений выходных полей с перечислениями в методах Securities и FintoolReferenceData.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_enum_values_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEnumValuesBody body:
        :return: list[EfirDataHubModelsModelsInfoEnumValuesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_enum_values_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_enum_values_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_enum_values_post_with_http_info(self, **kwargs):  # noqa: E501
        """Списки значений выходных полей с перечислениями в методах Securities и FintoolReferenceData.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_enum_values_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEnumValuesBody body:
        :return: list[EfirDataHubModelsModelsInfoEnumValuesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_enum_values_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/EnumValues', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoEnumValuesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_enums_post(self, **kwargs):  # noqa: E501
        """Списки выходных полей с перечислениями в методах Securities и FintoolReferenceData.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_enums_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEnumsBody body:
        :return: list[EfirDataHubModelsModelsInfoEnumsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_enums_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_enums_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_enums_post_with_http_info(self, **kwargs):  # noqa: E501
        """Списки выходных полей с перечислениями в методах Securities и FintoolReferenceData.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_enums_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoEnumsBody body:
        :return: list[EfirDataHubModelsModelsInfoEnumsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_enums_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/Enums', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoEnumsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_exchange_tree_post(self, **kwargs):  # noqa: E501
        """Получить иерархию торговых площадок/источников, используемых Интерфакс.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_exchange_tree_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoExchangeTreeBody body:
        :return: list[EfirDataHubModelsModelsInfoExchangeTreeFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_exchange_tree_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_exchange_tree_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_exchange_tree_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить иерархию торговых площадок/источников, используемых Интерфакс.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_exchange_tree_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoExchangeTreeBody body:
        :return: list[EfirDataHubModelsModelsInfoExchangeTreeFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_exchange_tree_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/ExchangeTree', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoExchangeTreeFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_fields_post(self, **kwargs):  # noqa: E501
        """Получить справочник по полям данных для торговых инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fields_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFieldsBody body:
        :return: list[EfirDataHubModelsModelsInfoFieldsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_fields_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_fields_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_fields_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справочник по полям данных для торговых инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fields_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFieldsBody body:
        :return: list[EfirDataHubModelsModelsInfoFieldsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_fields_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/Fields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoFieldsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_fintool_category_value_post(self, **kwargs):  # noqa: E501
        """Метод для получения инструментов и их категорий  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_category_value_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolcategoryvalueBody body:
        :return: list[EfirDataHubModelsModelsDictionaryFintoolCategoryValueFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_fintool_category_value_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_fintool_category_value_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_fintool_category_value_post_with_http_info(self, **kwargs):  # noqa: E501
        """Метод для получения инструментов и их категорий  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_category_value_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolcategoryvalueBody body:
        :return: list[EfirDataHubModelsModelsDictionaryFintoolCategoryValueFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_fintool_category_value_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/fintool-category-value', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsDictionaryFintoolCategoryValueFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_fintool_classification_post(self, **kwargs):  # noqa: E501
        """Получить классификацию инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_classification_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolClassificationBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_fintool_classification_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_fintool_classification_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_fintool_classification_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить классификацию инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_classification_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolClassificationBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_fintool_classification_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/FintoolClassification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoFintoolClassificationFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_fintool_convertation_post(self, **kwargs):  # noqa: E501
        """Получить данные по конвертациям инструментов (кроме облигаций) в другие инструменты.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_convertation_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolConvertationBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolConvertationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_fintool_convertation_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_fintool_convertation_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_fintool_convertation_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные по конвертациям инструментов (кроме облигаций) в другие инструменты.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_convertation_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolConvertationBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolConvertationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_fintool_convertation_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/FintoolConvertation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoFintoolConvertationFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_fintool_fields_ext_post(self, **kwargs):  # noqa: E501
        """Получить справочник по полям данных для финансовых инструментов (метод служебный, только для внутреннего использования).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_fields_ext_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolFieldsExtBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolFieldsExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_fintool_fields_ext_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_fintool_fields_ext_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_fintool_fields_ext_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справочник по полям данных для финансовых инструментов (метод служебный, только для внутреннего использования).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_fields_ext_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolFieldsExtBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolFieldsExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_fintool_fields_ext_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/FintoolFieldsExt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoFintoolFieldsExtFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_fintool_fields_post(self, **kwargs):  # noqa: E501
        """Получить справочник по полям данных для финансовых инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_fields_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolFieldsBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolFieldsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_fintool_fields_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_fintool_fields_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_fintool_fields_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справочник по полям данных для финансовых инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_fields_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolFieldsBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolFieldsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_fintool_fields_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/FintoolFields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoFintoolFieldsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_fintool_listing_post(self, **kwargs):  # noqa: E501
        """Уровень листинга и суммарные объемы торгов (метод служебный, только для внутреннего использования).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_listing_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolListingBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolListingFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_fintool_listing_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_fintool_listing_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_fintool_listing_post_with_http_info(self, **kwargs):  # noqa: E501
        """Уровень листинга и суммарные объемы торгов (метод служебный, только для внутреннего использования).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_listing_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolListingBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolListingFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_fintool_listing_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/FintoolListing', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoFintoolListingFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_fintool_ref_data_list_post(self, **kwargs):  # noqa: E501
        """Get fintool reference data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_ref_data_list_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FintoolRefDataListBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolReferenceDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_fintool_ref_data_list_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_fintool_ref_data_list_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_fintool_ref_data_list_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get fintool reference data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_ref_data_list_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FintoolRefDataListBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolReferenceDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_fintool_ref_data_list_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/FintoolRefData/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoFintoolReferenceDataFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_fintool_reference_data_id_post(self, id, **kwargs):  # noqa: E501
        """Получить расширенный справочник по финансовому инструменту.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_reference_data_id_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Идентификатор финансового инструмента в базе Интерфакс (required)
        :param FintoolReferenceDataIdBody body: Параметры запроса
        :return: EfirDataHubModelsModelsInfoFintoolReferenceDataFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_fintool_reference_data_id_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_fintool_reference_data_id_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v2_info_fintool_reference_data_id_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Получить расширенный справочник по финансовому инструменту.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_reference_data_id_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Идентификатор финансового инструмента в базе Интерфакс (required)
        :param FintoolReferenceDataIdBody body: Параметры запроса
        :return: EfirDataHubModelsModelsInfoFintoolReferenceDataFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_fintool_reference_data_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v2_info_fintool_reference_data_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/FintoolReferenceData/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsInfoFintoolReferenceDataFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_fintool_reference_data_post(self, **kwargs):  # noqa: E501
        """Получить расширенный справочник по финансовым инструментам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_reference_data_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolReferenceDataBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolReferenceDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_fintool_reference_data_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_fintool_reference_data_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_fintool_reference_data_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить расширенный справочник по финансовым инструментам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_fintool_reference_data_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoFintoolReferenceDataBody body:
        :return: list[EfirDataHubModelsModelsInfoFintoolReferenceDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_fintool_reference_data_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/FintoolReferenceData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoFintoolReferenceDataFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_holidays_post(self, **kwargs):  # noqa: E501
        """Возвращает даты неторговых дней  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_holidays_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoHolidaysBody body:
        :return: list[EfirDataHubModelsModelsInfoHolidaysFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_holidays_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_holidays_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_holidays_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает даты неторговых дней  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_holidays_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoHolidaysBody body:
        :return: list[EfirDataHubModelsModelsInfoHolidaysFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_holidays_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/Holidays', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoHolidaysFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_ifx_fintool_ref_data_post(self, **kwargs):  # noqa: E501
        """Получить справочник Интерфакс по финансовым инструментам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_ifx_fintool_ref_data_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoIFXFintoolRefDataBody body:
        :return: list[EfirDataHubModelsModelsInfoIFXFintoolRefDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_ifx_fintool_ref_data_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_ifx_fintool_ref_data_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_ifx_fintool_ref_data_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справочник Интерфакс по финансовым инструментам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_ifx_fintool_ref_data_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoIFXFintoolRefDataBody body:
        :return: list[EfirDataHubModelsModelsInfoIFXFintoolRefDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_ifx_fintool_ref_data_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/IFXFintoolRefData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoIFXFintoolRefDataFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_instruments_post(self, **kwargs):  # noqa: E501
        """Получить краткий справочник по торговым инструментам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_instruments_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoInstrumentsBody body:
        :return: list[EfirDataHubModelsModelsInfoInstrumentsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_instruments_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_instruments_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_instruments_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить краткий справочник по торговым инструментам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_instruments_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoInstrumentsBody body:
        :return: list[EfirDataHubModelsModelsInfoInstrumentsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_instruments_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/Instruments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoInstrumentsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_list_org_roles_post(self, **kwargs):  # noqa: E501
        """Получить справочник ролей организаций  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_list_org_roles_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoListOrgRolesBody body:
        :return: list[EfirDataHubModelsModelsInfoListOrgRolesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_list_org_roles_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_list_org_roles_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_list_org_roles_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справочник ролей организаций  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_list_org_roles_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoListOrgRolesBody body:
        :return: list[EfirDataHubModelsModelsInfoListOrgRolesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_list_org_roles_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/ListOrgRoles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoListOrgRolesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_money_flow_post(self, **kwargs):  # noqa: E501
        """Поток платежей по ценной бумаге в валюте номинала.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_money_flow_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoMoneyFlowBody body:
        :return: EfirDataHubModelsModelsInfoMoneyFlowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_money_flow_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_money_flow_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_money_flow_post_with_http_info(self, **kwargs):  # noqa: E501
        """Поток платежей по ценной бумаге в валюте номинала.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_money_flow_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoMoneyFlowBody body:
        :return: EfirDataHubModelsModelsInfoMoneyFlowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_money_flow_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/MoneyFlow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsInfoMoneyFlowResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_organizers_by_fininst_id_post(self, **kwargs):  # noqa: E501
        """Получить роли организаторов выпуска по списку FininstId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_organizers_by_fininst_id_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoOrganizersByFininstIdBody body:
        :return: list[EfirDataHubModelsModelsInfoOrganizersByFininstIdFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_organizers_by_fininst_id_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_organizers_by_fininst_id_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_organizers_by_fininst_id_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить роли организаторов выпуска по списку FininstId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_organizers_by_fininst_id_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoOrganizersByFininstIdBody body:
        :return: list[EfirDataHubModelsModelsInfoOrganizersByFininstIdFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_organizers_by_fininst_id_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/OrganizersByFininstId', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoOrganizersByFininstIdFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_organizers_by_fintool_id_post(self, **kwargs):  # noqa: E501
        """Получить роли организаторов выпуска по списку FintoolId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_organizers_by_fintool_id_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoOrganizersByFintoolIdBody body:
        :return: list[EfirDataHubModelsModelsInfoOrganizersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_organizers_by_fintool_id_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_organizers_by_fintool_id_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_organizers_by_fintool_id_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить роли организаторов выпуска по списку FintoolId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_organizers_by_fintool_id_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoOrganizersByFintoolIdBody body:
        :return: list[EfirDataHubModelsModelsInfoOrganizersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_organizers_by_fintool_id_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/OrganizersByFintoolId', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoOrganizersFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_organizers_post(self, **kwargs):  # noqa: E501
        """Получить роли организаторов выпуска  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_organizers_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoOrganizersBody body:
        :return: list[EfirDataHubModelsModelsInfoOrganizersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_organizers_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_organizers_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_organizers_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить роли организаторов выпуска  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_organizers_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoOrganizersBody body:
        :return: list[EfirDataHubModelsModelsInfoOrganizersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_organizers_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/Organizers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoOrganizersFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_prof_participants_post(self, **kwargs):  # noqa: E501
        """Получить реквизиты профессиональных участников финансового рынка по версии ЦБ.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_prof_participants_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoProfParticipantsBody body:
        :return: list[EfirDataHubModelsModelsInfoProfParticipantsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_prof_participants_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_prof_participants_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_prof_participants_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить реквизиты профессиональных участников финансового рынка по версии ЦБ.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_prof_participants_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoProfParticipantsBody body:
        :return: list[EfirDataHubModelsModelsInfoProfParticipantsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_prof_participants_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/ProfParticipants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoProfParticipantsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_residual_face_value_post(self, **kwargs):  # noqa: E501
        """Получить величину остаточного номинала на заданную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_residual_face_value_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoResidualFaceValueBody body:
        :return: EfirDataHubModelsModelsInfoResidualFaceValueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_residual_face_value_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_residual_face_value_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_residual_face_value_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить величину остаточного номинала на заданную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_residual_face_value_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoResidualFaceValueBody body:
        :return: EfirDataHubModelsModelsInfoResidualFaceValueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_residual_face_value_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/ResidualFaceValue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsInfoResidualFaceValueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_securities_post(self, **kwargs):  # noqa: E501
        """Получить краткий справочник по финансовым инструментам. Для акций метод возвращает только основные выпуски (по колонке SecurityKind).   Для получения данных по дополнительным выпускам необходимо использовать метод FintoolRefrenceData.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_securities_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoSecuritiesBody body:
        :return: list[EfirDataHubModelsModelsInfoSecuritiesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_securities_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_securities_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_securities_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить краткий справочник по финансовым инструментам. Для акций метод возвращает только основные выпуски (по колонке SecurityKind).   Для получения данных по дополнительным выпускам необходимо использовать метод FintoolRefrenceData.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_securities_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoSecuritiesBody body:
        :return: list[EfirDataHubModelsModelsInfoSecuritiesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_securities_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/Securities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoSecuritiesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_share_dividend_id_post(self, id, **kwargs):  # noqa: E501
        """Информация по дивидендам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_share_dividend_id_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Идентификатор финансового инструмента в базе Интерфакс (required)
        :param ShareDividendIdBody body: Параметры запроса
        :return: list[EfirDataHubModelsModelsInfoShareDividendFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_share_dividend_id_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_share_dividend_id_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v2_info_share_dividend_id_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Информация по дивидендам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_share_dividend_id_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Идентификатор финансового инструмента в базе Интерфакс (required)
        :param ShareDividendIdBody body: Параметры запроса
        :return: list[EfirDataHubModelsModelsInfoShareDividendFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_share_dividend_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v2_info_share_dividend_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/ShareDividend/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoShareDividendFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_share_dividend_post(self, **kwargs):  # noqa: E501
        """Информация по дивидендам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_share_dividend_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoShareDividendBody body:
        :return: list[EfirDataHubModelsModelsInfoShareDividendFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_share_dividend_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_share_dividend_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_share_dividend_post_with_http_info(self, **kwargs):  # noqa: E501
        """Информация по дивидендам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_share_dividend_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoShareDividendBody body:
        :return: list[EfirDataHubModelsModelsInfoShareDividendFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_share_dividend_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/ShareDividend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoShareDividendFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_info_type_tree_post(self, **kwargs):  # noqa: E501
        """Get information about tree of instrument types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_type_tree_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoTypeTreeBody body:
        :return: list[EfirDataHubModelsModelsInfoTypeTreeFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_info_type_tree_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_info_type_tree_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_info_type_tree_post_with_http_info(self, **kwargs):  # noqa: E501
        """Get information about tree of instrument types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_info_type_tree_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InfoTypeTreeBody body:
        :return: list[EfirDataHubModelsModelsInfoTypeTreeFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_info_type_tree_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Info/TypeTree', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoTypeTreeFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
