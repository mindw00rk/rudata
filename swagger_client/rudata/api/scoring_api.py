# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ScoringApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_scoring_coeff_weights_post(self, **kwargs):  # noqa: E501
        """Возвращает веса для коэффициентов скоринговой модели раздельно по типам отчетности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_coeff_weights_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCoeffWeightsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringCoeffWeightsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_coeff_weights_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_coeff_weights_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_coeff_weights_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает веса для коэффициентов скоринговой модели раздельно по типам отчетности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_coeff_weights_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCoeffWeightsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringCoeffWeightsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_coeff_weights_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/CoeffWeights', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringCoeffWeightsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_company_main_owners_post(self, **kwargs):  # noqa: E501
        """Возвращает описание крупных акционеров компании  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_company_main_owners_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCompanymainownersBody body:
        :return: list[EfirDataHubModelsModelsScoringMainOwnerFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_company_main_owners_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_company_main_owners_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_company_main_owners_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает описание крупных акционеров компании  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_company_main_owners_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCompanymainownersBody body:
        :return: list[EfirDataHubModelsModelsScoringMainOwnerFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_company_main_owners_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/company-main-owners', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsScoringMainOwnerFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_company_owners_post(self, **kwargs):  # noqa: E501
        """Возвращает описание акционеров компании  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_company_owners_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCompanyownersBody body:
        :return: list[EfirDataHubModelsModelsScoringOwnerFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_company_owners_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_company_owners_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_company_owners_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает описание акционеров компании  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_company_owners_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCompanyownersBody body:
        :return: list[EfirDataHubModelsModelsScoringOwnerFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_company_owners_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/company-owners', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsScoringOwnerFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_corrected_pd_post(self, **kwargs):  # noqa: E501
        """Возвращает скорректированный PD  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_corrected_pd_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCorrectedpdBody body:
        :return: list[EfirDataHubModelsModelsScoringCompanyPDFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_corrected_pd_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_corrected_pd_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_corrected_pd_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает скорректированный PD  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_corrected_pd_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCorrectedpdBody body:
        :return: list[EfirDataHubModelsModelsScoringCompanyPDFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_corrected_pd_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/corrected-pd', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsScoringCompanyPDFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_custom_report_scoring_msfo_ext_post(self, **kwargs):  # noqa: E501
        """Возвращает расширенный скоринг по пользовательской отчётности типа МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_custom_report_scoring_msfo_ext_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCustomReportScoringMSFOExtBody body:
        :return: EfirDataHubModelsModelsEmitentScoringExtFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_custom_report_scoring_msfo_ext_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_custom_report_scoring_msfo_ext_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_custom_report_scoring_msfo_ext_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает расширенный скоринг по пользовательской отчётности типа МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_custom_report_scoring_msfo_ext_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCustomReportScoringMSFOExtBody body:
        :return: EfirDataHubModelsModelsEmitentScoringExtFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_custom_report_scoring_msfo_ext_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/CustomReportScoringMSFOExt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsEmitentScoringExtFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_custom_report_scoring_msfo_post(self, **kwargs):  # noqa: E501
        """Возвращает скоринг по пользовательской отчётности типа МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_custom_report_scoring_msfo_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCustomReportScoringMSFOBody body:
        :return: EfirDataHubModelsModelsEmitentScoringFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_custom_report_scoring_msfo_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_custom_report_scoring_msfo_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_custom_report_scoring_msfo_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает скоринг по пользовательской отчётности типа МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_custom_report_scoring_msfo_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCustomReportScoringMSFOBody body:
        :return: EfirDataHubModelsModelsEmitentScoringFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_custom_report_scoring_msfo_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/CustomReportScoringMSFO', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsEmitentScoringFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_custom_report_scoring_rsbu_ext_post(self, **kwargs):  # noqa: E501
        """Возвращает расширенный скоринг по пользовательской отчётности типа РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_custom_report_scoring_rsbu_ext_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCustomReportScoringRSBUExtBody body:
        :return: EfirDataHubModelsModelsEmitentScoringExtFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_custom_report_scoring_rsbu_ext_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_custom_report_scoring_rsbu_ext_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_custom_report_scoring_rsbu_ext_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает расширенный скоринг по пользовательской отчётности типа РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_custom_report_scoring_rsbu_ext_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCustomReportScoringRSBUExtBody body:
        :return: EfirDataHubModelsModelsEmitentScoringExtFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_custom_report_scoring_rsbu_ext_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/CustomReportScoringRSBUExt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsEmitentScoringExtFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_custom_report_scoring_rsbu_post(self, **kwargs):  # noqa: E501
        """Возвращает скоринг по пользовательской отчётности типа РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_custom_report_scoring_rsbu_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCustomReportScoringRSBUBody body:
        :return: EfirDataHubModelsModelsEmitentScoringFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_custom_report_scoring_rsbu_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_custom_report_scoring_rsbu_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_custom_report_scoring_rsbu_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает скоринг по пользовательской отчётности типа РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_custom_report_scoring_rsbu_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringCustomReportScoringRSBUBody body:
        :return: EfirDataHubModelsModelsEmitentScoringFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_custom_report_scoring_rsbu_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/CustomReportScoringRSBU', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsEmitentScoringFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_ext_fields_get(self, **kwargs):  # noqa: E501
        """Возвращает описания полей которые возвращает метод /Emitent/ScoringExt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_ext_fields_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsEmitentScoringExtFieldsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_ext_fields_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_ext_fields_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_ext_fields_get_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает описания полей которые возвращает метод /Emitent/ScoringExt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_ext_fields_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsEmitentScoringExtFieldsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_ext_fields_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/ExtFields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringExtFieldsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_ext_history_post(self, **kwargs):  # noqa: E501
        """Возвращает историю расширенных скорингов для списка компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_ext_history_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringExtHistoryBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringExtHistoryFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_ext_history_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_ext_history_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_ext_history_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает историю расширенных скорингов для списка компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_ext_history_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringExtHistoryBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringExtHistoryFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_ext_history_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/ExtHistory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringExtHistoryFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_ext_stats_post(self, **kwargs):  # noqa: E501
        """Возвращает статистики по расширенным скорингам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_ext_stats_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringExtStatsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringExtStatsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_ext_stats_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_ext_stats_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_ext_stats_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает статистики по расширенным скорингам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_ext_stats_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringExtStatsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringExtStatsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_ext_stats_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/ExtStats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringExtStatsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_history_post(self, **kwargs):  # noqa: E501
        """Возвращает историю скорингов для списка компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_history_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringHistoryBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringHistoryFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_history_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_history_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_history_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает историю скорингов для списка компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_history_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringHistoryBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringHistoryFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_history_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/History', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringHistoryFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_rating_contribution_post(self, **kwargs):  # noqa: E501
        """Возвращает распределение долей владения по значениям рейтинга родительских компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_rating_contribution_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringRatingcontributionBody body:
        :return: list[EfirDataHubModelsModelsScoringRatingContribution]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_rating_contribution_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_rating_contribution_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_rating_contribution_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает распределение долей владения по значениям рейтинга родительских компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_rating_contribution_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringRatingcontributionBody body:
        :return: list[EfirDataHubModelsModelsScoringRatingContribution]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_rating_contribution_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/rating-contribution', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsScoringRatingContribution]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_scale_post(self, **kwargs):  # noqa: E501
        """Возвращает описание рейтинговой шкалы - глобальной или национальной  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_scale_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringScaleBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringScaleFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_scale_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_scale_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_scale_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает описание рейтинговой шкалы - глобальной или национальной  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_scale_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringScaleBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringScaleFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_scale_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/Scale', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringScaleFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_scoring_ext_post(self, **kwargs):  # noqa: E501
        """Возвращает расширенные скоринговые значения по компании за период отчетности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_scoring_ext_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringScoringExtBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_scoring_ext_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_scoring_ext_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_scoring_ext_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает расширенные скоринговые значения по компании за период отчетности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_scoring_ext_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringScoringExtBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_scoring_ext_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/ScoringExt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringExtFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_scoring_post(self, **kwargs):  # noqa: E501
        """Скоринг компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_scoring_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringScoringBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_scoring_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_scoring_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_scoring_post_with_http_info(self, **kwargs):  # noqa: E501
        """Скоринг компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_scoring_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringScoringBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_scoring_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/Scoring', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_sector_weights_post(self, **kwargs):  # noqa: E501
        """Возвращает веса скоринговой модели для для групп секторов экономики  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_sector_weights_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringSectorWeightsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringSectorWeightsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_sector_weights_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_sector_weights_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_sector_weights_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает веса скоринговой модели для для групп секторов экономики  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_sector_weights_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringSectorWeightsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringSectorWeightsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_sector_weights_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/SectorWeights', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringSectorWeightsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_slopes_post(self, **kwargs):  # noqa: E501
        """Возвращает значение свободного члена регрессии для скоринговой модели по типу отчетности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_slopes_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringSlopesBody body:
        :return: EfirDataHubModelsModelsEmitentScoringSlopesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_slopes_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_slopes_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_slopes_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает значение свободного члена регрессии для скоринговой модели по типу отчетности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_slopes_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringSlopesBody body:
        :return: EfirDataHubModelsModelsEmitentScoringSlopesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_slopes_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/Slopes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsEmitentScoringSlopesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_stats_post(self, **kwargs):  # noqa: E501
        """Возвращает статистики по скорингам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_stats_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringStatsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringStatsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_stats_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_stats_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_stats_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает статистики по скорингам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_stats_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringStatsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringStatsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_stats_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/Stats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringStatsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_scoring_transformants_post(self, **kwargs):  # noqa: E501
        """Возвращает трансформанты для коэффициента скоринговой модели на дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_transformants_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringTransformantsBody body:
        :return: EfirDataHubModelsModelsEmitentScoringTransformantsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_scoring_transformants_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_scoring_transformants_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_scoring_transformants_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает трансформанты для коэффициента скоринговой модели на дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_scoring_transformants_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScoringTransformantsBody body:
        :return: EfirDataHubModelsModelsEmitentScoringTransformantsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_scoring_transformants_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Scoring/Transformants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsEmitentScoringTransformantsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
