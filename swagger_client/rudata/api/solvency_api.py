# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SolvencyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_solvency_classification_codes_post(self, **kwargs):  # noqa: E501
        """Получить значения справочника свойств контрагентов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_classification_codes_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EfirDataHubModelsModelsSolvencyClassificationCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_solvency_classification_codes_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_solvency_classification_codes_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_solvency_classification_codes_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить значения справочника свойств контрагентов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_classification_codes_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EfirDataHubModelsModelsSolvencyClassificationCodesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_solvency_classification_codes_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Solvency/ClassificationCodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsSolvencyClassificationCodesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_solvency_counterparty_classification_post(self, **kwargs):  # noqa: E501
        """Возвращает значения классификаторов контрагентов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_counterparty_classification_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyCounterpartyClassificationBody body:
        :return: list[EfirDataHubModelsModelsSolvencyCounterpartyClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_solvency_counterparty_classification_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_solvency_counterparty_classification_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_solvency_counterparty_classification_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает значения классификаторов контрагентов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_counterparty_classification_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyCounterpartyClassificationBody body:
        :return: list[EfirDataHubModelsModelsSolvencyCounterpartyClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_solvency_counterparty_classification_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Solvency/CounterpartyClassification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsSolvencyCounterpartyClassificationFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_solvency_counterparty_id_post(self, **kwargs):  # noqa: E501
        """Формирует идентификатор контрагента  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_counterparty_id_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyCounterpartyIdBody body:
        :return: list[EfirDataHubModelsModelsSolvencyCounterpartyIdFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_solvency_counterparty_id_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_solvency_counterparty_id_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_solvency_counterparty_id_post_with_http_info(self, **kwargs):  # noqa: E501
        """Формирует идентификатор контрагента  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_counterparty_id_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyCounterpartyIdBody body:
        :return: list[EfirDataHubModelsModelsSolvencyCounterpartyIdFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_solvency_counterparty_id_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Solvency/CounterpartyId', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsSolvencyCounterpartyIdFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_solvency_counterparty_post(self, **kwargs):  # noqa: E501
        """Возвращает описание контрагентов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_counterparty_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyCounterpartyBody body:
        :return: list[EfirDataHubModelsModelsSolvencyCounterpartyFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_solvency_counterparty_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_solvency_counterparty_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_solvency_counterparty_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает описание контрагентов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_counterparty_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyCounterpartyBody body:
        :return: list[EfirDataHubModelsModelsSolvencyCounterpartyFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_solvency_counterparty_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Solvency/Counterparty', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsSolvencyCounterpartyFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_solvency_licenses_post(self, **kwargs):  # noqa: E501
        """Возвращает описания лицензий контрагентов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_licenses_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyLicensesBody body:
        :return: list[EfirDataHubModelsModelsSolvencyLicenseFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_solvency_licenses_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_solvency_licenses_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_solvency_licenses_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает описания лицензий контрагентов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_licenses_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyLicensesBody body:
        :return: list[EfirDataHubModelsModelsSolvencyLicenseFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_solvency_licenses_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Solvency/Licenses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsSolvencyLicenseFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_solvency_rating_agg_company_post(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_rating_agg_company_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyRatingAggCompanyBody body:
        :return: list[EfirDataHubModelsModelsSolvencyRatingAggCompanyFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_solvency_rating_agg_company_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_solvency_rating_agg_company_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_solvency_rating_agg_company_post_with_http_info(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_rating_agg_company_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyRatingAggCompanyBody body:
        :return: list[EfirDataHubModelsModelsSolvencyRatingAggCompanyFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_solvency_rating_agg_company_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Solvency/RatingAggCompany', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsSolvencyRatingAggCompanyFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_solvency_rating_agg_security_by_issuer_post(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги инструментов по эмитентам выпуска  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_rating_agg_security_by_issuer_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyRatingAggSecurityByIssuerBody body:
        :return: list[EfirDataHubModelsModelsSolvencyRatingAggSecurityByIssuerFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_solvency_rating_agg_security_by_issuer_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_solvency_rating_agg_security_by_issuer_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_solvency_rating_agg_security_by_issuer_post_with_http_info(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги инструментов по эмитентам выпуска  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_rating_agg_security_by_issuer_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyRatingAggSecurityByIssuerBody body:
        :return: list[EfirDataHubModelsModelsSolvencyRatingAggSecurityByIssuerFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_solvency_rating_agg_security_by_issuer_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Solvency/RatingAggSecurityByIssuer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsSolvencyRatingAggSecurityByIssuerFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_solvency_rating_agg_security_by_role_post(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги инструментов по ролям организаторов выпуска  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_rating_agg_security_by_role_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyRatingAggSecurityByRoleBody body:
        :return: list[EfirDataHubModelsModelsSolvencyRatingAggSecurityByRoleFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_solvency_rating_agg_security_by_role_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_solvency_rating_agg_security_by_role_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_solvency_rating_agg_security_by_role_post_with_http_info(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги инструментов по ролям организаторов выпуска  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_rating_agg_security_by_role_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyRatingAggSecurityByRoleBody body:
        :return: list[EfirDataHubModelsModelsSolvencyRatingAggSecurityByRoleFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_solvency_rating_agg_security_by_role_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Solvency/RatingAggSecurityByRole', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsSolvencyRatingAggSecurityByRoleFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_solvency_rating_agg_security_post(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги инструментов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_rating_agg_security_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyRatingAggSecurityBody body:
        :return: list[EfirDataHubModelsModelsSolvencyRatingAggSecurityFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_solvency_rating_agg_security_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_solvency_rating_agg_security_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_solvency_rating_agg_security_post_with_http_info(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги инструментов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_rating_agg_security_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyRatingAggSecurityBody body:
        :return: list[EfirDataHubModelsModelsSolvencyRatingAggSecurityFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_solvency_rating_agg_security_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Solvency/RatingAggSecurity', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsSolvencyRatingAggSecurityFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_solvency_rating_list_post(self, **kwargs):  # noqa: E501
        """Список кодов рейтингов на дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_rating_list_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyRatingListBody body:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_solvency_rating_list_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_solvency_rating_list_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_solvency_rating_list_post_with_http_info(self, **kwargs):  # noqa: E501
        """Список кодов рейтингов на дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_solvency_rating_list_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SolvencyRatingListBody body:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_solvency_rating_list_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Solvency/RatingList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
