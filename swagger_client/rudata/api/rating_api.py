# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RatingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_rating_aggregation_list_post(self, **kwargs):  # noqa: E501
        """Возвращает рейтинги, включенные в заданный список  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_aggregation_list_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingAggregationListBody body:
        :return: list[EfirDataHubModelsModelsRatingAggregationListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_aggregation_list_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_aggregation_list_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_aggregation_list_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает рейтинги, включенные в заданный список  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_aggregation_list_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingAggregationListBody body:
        :return: list[EfirDataHubModelsModelsRatingAggregationListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_aggregation_list_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/AggregationList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingAggregationListFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_aggregation_lists_post(self, **kwargs):  # noqa: E501
        """Возвращает списки рейтингов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_aggregation_lists_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsRatingAggregationList]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_aggregation_lists_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_aggregation_lists_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_aggregation_lists_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает списки рейтингов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_aggregation_lists_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsRatingAggregationList]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_aggregation_lists_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/AggregationLists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingAggregationList]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_aggregation_scale_ratio_post(self, **kwargs):  # noqa: E501
        """Возвращает соотношение рейтинговых шкал RU и BIG3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_aggregation_scale_ratio_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingAggregationScaleRatioBody body:
        :return: list[EfirDataHubModelsModelsRatingAggregationScaleRatioFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_aggregation_scale_ratio_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_aggregation_scale_ratio_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_aggregation_scale_ratio_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает соотношение рейтинговых шкал RU и BIG3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_aggregation_scale_ratio_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingAggregationScaleRatioBody body:
        :return: list[EfirDataHubModelsModelsRatingAggregationScaleRatioFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_aggregation_scale_ratio_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/AggregationScaleRatio', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingAggregationScaleRatioFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_aggregation_scale_ratios_post(self, **kwargs):  # noqa: E501
        """Возвращает соотношения рейтинговых шкал RU и BIG3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_aggregation_scale_ratios_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsRatingAggregationScaleMappingFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_aggregation_scale_ratios_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_aggregation_scale_ratios_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_aggregation_scale_ratios_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает соотношения рейтинговых шкал RU и BIG3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_aggregation_scale_ratios_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsRatingAggregationScaleMappingFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_aggregation_scale_ratios_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/AggregationScaleRatios', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingAggregationScaleMappingFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_company_ratings_agg_post(self, **kwargs):  # noqa: E501
        """Метод позволяет получить таблицу с данными по уровням рейтингов на заданную дату по одной или нескольким компаниям.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_company_ratings_agg_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCompanyRatingsAggBody body:
        :return: list[EfirDataHubModelsModelsRatingCompanyRatingsAggFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_company_ratings_agg_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_company_ratings_agg_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_company_ratings_agg_post_with_http_info(self, **kwargs):  # noqa: E501
        """Метод позволяет получить таблицу с данными по уровням рейтингов на заданную дату по одной или нескольким компаниям.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_company_ratings_agg_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCompanyRatingsAggBody body:
        :return: list[EfirDataHubModelsModelsRatingCompanyRatingsAggFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_company_ratings_agg_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/CompanyRatingsAgg', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingCompanyRatingsAggFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_company_ratings_agg_v2_post(self, **kwargs):  # noqa: E501
        """Метод позволяет получить структуру с данными по уровням рейтингов на заданную дату по одной или нескольким компаниям.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_company_ratings_agg_v2_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCompanyRatingsAggV2Body body:
        :return: EfirDataHubModelsModelsRatingCompanyRatingsAggV2Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_company_ratings_agg_v2_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_company_ratings_agg_v2_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_company_ratings_agg_v2_post_with_http_info(self, **kwargs):  # noqa: E501
        """Метод позволяет получить структуру с данными по уровням рейтингов на заданную дату по одной или нескольким компаниям.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_company_ratings_agg_v2_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCompanyRatingsAggV2Body body:
        :return: EfirDataHubModelsModelsRatingCompanyRatingsAggV2Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_company_ratings_agg_v2_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/CompanyRatingsAgg_v2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRatingCompanyRatingsAggV2Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_company_ratings_hist_id_post(self, id, **kwargs):  # noqa: E501
        """Получить рейтинги компании за период.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_company_ratings_hist_id_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Идентификатор компании в базе Интерфакс FinInstID. (required)
        :param CompanyRatingsHistIdBody body:
        :return: list[EfirDataHubModelsModelsRatingCompanyRatingsHistFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_company_ratings_hist_id_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_company_ratings_hist_id_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v2_rating_company_ratings_hist_id_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Получить рейтинги компании за период.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_company_ratings_hist_id_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Идентификатор компании в базе Интерфакс FinInstID. (required)
        :param CompanyRatingsHistIdBody body:
        :return: list[EfirDataHubModelsModelsRatingCompanyRatingsHistFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_company_ratings_hist_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v2_rating_company_ratings_hist_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/CompanyRatingsHist/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingCompanyRatingsHistFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_company_ratings_hist_post(self, **kwargs):  # noqa: E501
        """Получить все рейтинги компании за период, но не более чем за неделю (с dateTo-6 по dateTo)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_company_ratings_hist_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCompanyRatingsHistBody body:
        :return: list[EfirDataHubModelsModelsRatingCompanyRatingsHistFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_company_ratings_hist_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_company_ratings_hist_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_company_ratings_hist_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить все рейтинги компании за период, но не более чем за неделю (с dateTo-6 по dateTo)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_company_ratings_hist_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCompanyRatingsHistBody body:
        :return: list[EfirDataHubModelsModelsRatingCompanyRatingsHistFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_company_ratings_hist_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/CompanyRatingsHist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingCompanyRatingsHistFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_company_ratings_id_post(self, id, **kwargs):  # noqa: E501
        """Получить рейтинги компании на заданную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_company_ratings_id_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Код страны (обозначение по ISO 3166-1 Alpha-3 или ISO 3166-1 Alpha-2) или код организации по ОКПО/ОГРН, ИНН либо ID зарубежной организации (FinInstID). (required)
        :param CompanyRatingsIdBody body:
        :return: list[EfirDataHubModelsModelsRatingCompanyRatingsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_company_ratings_id_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_company_ratings_id_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v2_rating_company_ratings_id_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Получить рейтинги компании на заданную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_company_ratings_id_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Код страны (обозначение по ISO 3166-1 Alpha-3 или ISO 3166-1 Alpha-2) или код организации по ОКПО/ОГРН, ИНН либо ID зарубежной организации (FinInstID). (required)
        :param CompanyRatingsIdBody body:
        :return: list[EfirDataHubModelsModelsRatingCompanyRatingsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_company_ratings_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v2_rating_company_ratings_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/CompanyRatings/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingCompanyRatingsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_company_ratings_table_post(self, **kwargs):  # noqa: E501
        """Получить рейтинги нескольких компаний на заданную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_company_ratings_table_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCompanyRatingsTableBody body:
        :return: list[EfirDataHubModelsModelsRatingCompanyRatingsTableFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_company_ratings_table_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_company_ratings_table_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_company_ratings_table_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить рейтинги нескольких компаний на заданную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_company_ratings_table_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCompanyRatingsTableBody body:
        :return: list[EfirDataHubModelsModelsRatingCompanyRatingsTableFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_company_ratings_table_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/CompanyRatingsTable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingCompanyRatingsTableFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_custom_agg_company_by_agency_post(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги компаний по агентствам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_custom_agg_company_by_agency_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCustomAggCompanyByAgencyBody body:
        :return: list[EfirDataHubModelsModelsRatingRatingCompanyByAgenciesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_custom_agg_company_by_agency_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_custom_agg_company_by_agency_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_custom_agg_company_by_agency_post_with_http_info(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги компаний по агентствам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_custom_agg_company_by_agency_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCustomAggCompanyByAgencyBody body:
        :return: list[EfirDataHubModelsModelsRatingRatingCompanyByAgenciesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_custom_agg_company_by_agency_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/CustomAggCompanyByAgency', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingRatingCompanyByAgenciesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_custom_agg_company_post(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_custom_agg_company_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCustomAggCompanyBody body:
        :return: list[EfirDataHubModelsModelsRatingRatingAggCompanyFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_custom_agg_company_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_custom_agg_company_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_custom_agg_company_post_with_http_info(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_custom_agg_company_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCustomAggCompanyBody body:
        :return: list[EfirDataHubModelsModelsRatingRatingAggCompanyFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_custom_agg_company_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/CustomAggCompany', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingRatingAggCompanyFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_custom_agg_security_by_agency_post(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги инструментов по агентствам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_custom_agg_security_by_agency_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCustomAggSecurityByAgencyBody body:
        :return: list[EfirDataHubModelsModelsRatingRatingSecurityByAgenciesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_custom_agg_security_by_agency_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_custom_agg_security_by_agency_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_custom_agg_security_by_agency_post_with_http_info(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги инструментов по агентствам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_custom_agg_security_by_agency_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCustomAggSecurityByAgencyBody body:
        :return: list[EfirDataHubModelsModelsRatingRatingSecurityByAgenciesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_custom_agg_security_by_agency_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/CustomAggSecurityByAgency', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingRatingSecurityByAgenciesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_custom_agg_security_by_role_post(self, **kwargs):  # noqa: E501
        """Агрегированные по ролям организаторов выпуска рейтинги ценных бумаг  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_custom_agg_security_by_role_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCustomAggSecurityByRoleBody body:
        :return: list[EfirDataHubModelsModelsRatingRatingAggSecurityByRoleFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_custom_agg_security_by_role_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_custom_agg_security_by_role_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_custom_agg_security_by_role_post_with_http_info(self, **kwargs):  # noqa: E501
        """Агрегированные по ролям организаторов выпуска рейтинги ценных бумаг  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_custom_agg_security_by_role_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCustomAggSecurityByRoleBody body:
        :return: list[EfirDataHubModelsModelsRatingRatingAggSecurityByRoleFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_custom_agg_security_by_role_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/CustomAggSecurityByRole', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingRatingAggSecurityByRoleFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_custom_agg_security_post(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги инструментов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_custom_agg_security_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCustomAggSecurityBody body:
        :return: list[EfirDataHubModelsModelsRatingRatingAggSecurityFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_custom_agg_security_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_custom_agg_security_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_custom_agg_security_post_with_http_info(self, **kwargs):  # noqa: E501
        """Агрегированные рейтинги инструментов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_custom_agg_security_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingCustomAggSecurityBody body:
        :return: list[EfirDataHubModelsModelsRatingRatingAggSecurityFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_custom_agg_security_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/CustomAggSecurity', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingRatingAggSecurityFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_list_companies_post(self, **kwargs):  # noqa: E501
        """Получить список компаний (не рекомендуется к использованию, надо использовать /Info/Emitents).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_list_companies_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingListCompaniesBody body:
        :return: list[EfirDataHubModelsModelsRatingListCompaniesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_list_companies_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_list_companies_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_list_companies_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить список компаний (не рекомендуется к использованию, надо использовать /Info/Emitents).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_list_companies_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingListCompaniesBody body:
        :return: list[EfirDataHubModelsModelsRatingListCompaniesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_list_companies_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/ListCompanies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingListCompaniesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_list_ratings_post(self, **kwargs):  # noqa: E501
        """Получить список рейтингов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_list_ratings_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingListRatingsBody body:
        :return: list[EfirDataHubModelsModelsRatingListRatingsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_list_ratings_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_list_ratings_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_list_ratings_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить список рейтингов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_list_ratings_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingListRatingsBody body:
        :return: list[EfirDataHubModelsModelsRatingListRatingsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_list_ratings_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/ListRatings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingListRatingsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_list_scale_values_post(self, **kwargs):  # noqa: E501
        """Список шкал значений рейтингов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_list_scale_values_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingListScaleValuesBody body:
        :return: list[EfirDataHubModelsModelsRatingScaleValueFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_list_scale_values_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_list_scale_values_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_list_scale_values_post_with_http_info(self, **kwargs):  # noqa: E501
        """Список шкал значений рейтингов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_list_scale_values_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingListScaleValuesBody body:
        :return: list[EfirDataHubModelsModelsRatingScaleValueFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_list_scale_values_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/ListScaleValues', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingScaleValueFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_list_scales_post(self, **kwargs):  # noqa: E501
        """Список рейтинговых шкал  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_list_scales_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingListScalesBody body:
        :return: list[EfirDataHubModelsModelsRatingScaleFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_list_scales_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_list_scales_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_list_scales_post_with_http_info(self, **kwargs):  # noqa: E501
        """Список рейтинговых шкал  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_list_scales_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingListScalesBody body:
        :return: list[EfirDataHubModelsModelsRatingScaleFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_list_scales_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/ListScales', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingScaleFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_list_securities_post(self, **kwargs):  # noqa: E501
        """Получить список финансовых инструментов (не рекомендуется к использованию, надо использовать /Info/Securities; именно этот метод будет развиваться).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_list_securities_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingListSecuritiesBody body:
        :return: list[EfirDataHubModelsModelsRatingListSecuritiesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_list_securities_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_list_securities_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_list_securities_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить список финансовых инструментов (не рекомендуется к использованию, надо использовать /Info/Securities; именно этот метод будет развиваться).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_list_securities_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingListSecuritiesBody body:
        :return: list[EfirDataHubModelsModelsRatingListSecuritiesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_list_securities_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/ListSecurities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingListSecuritiesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_ratings_history_post(self, **kwargs):  # noqa: E501
        """Получить рейтинговые события за период.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_ratings_history_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingRatingsHistoryBody body:
        :return: list[EfirDataHubModelsModelsRatingRatingsHistoryFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_ratings_history_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_ratings_history_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_ratings_history_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить рейтинговые события за период.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_ratings_history_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingRatingsHistoryBody body:
        :return: list[EfirDataHubModelsModelsRatingRatingsHistoryFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_ratings_history_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/RatingsHistory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingRatingsHistoryFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_security_rating_table_post(self, **kwargs):  # noqa: E501
        """Получить рейтинги нескольких бумаг и связанных с ними компаний на заданную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_security_rating_table_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSecurityRatingTableBody body:
        :return: list[EfirDataHubModelsModelsRatingSecurityRatingTableFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_security_rating_table_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_security_rating_table_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_security_rating_table_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить рейтинги нескольких бумаг и связанных с ними компаний на заданную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_security_rating_table_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSecurityRatingTableBody body:
        :return: list[EfirDataHubModelsModelsRatingSecurityRatingTableFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_security_rating_table_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/SecurityRatingTable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingSecurityRatingTableFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_security_ratings_agg_post(self, **kwargs):  # noqa: E501
        """Метод позволяет получить таблицу с данными по уровням рейтингов на заданную дату по одному или нескольким инструментам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_security_ratings_agg_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSecurityRatingsAggBody body:
        :return: list[EfirDataHubModelsModelsRatingSecurityRatingsAggFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_security_ratings_agg_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_security_ratings_agg_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_security_ratings_agg_post_with_http_info(self, **kwargs):  # noqa: E501
        """Метод позволяет получить таблицу с данными по уровням рейтингов на заданную дату по одному или нескольким инструментам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_security_ratings_agg_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSecurityRatingsAggBody body:
        :return: list[EfirDataHubModelsModelsRatingSecurityRatingsAggFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_security_ratings_agg_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/SecurityRatingsAgg', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingSecurityRatingsAggFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_security_ratings_agg_v2_post(self, **kwargs):  # noqa: E501
        """Метод позволяет получить структуру с данными по уровням рейтингов на заданную дату по одному или нескольким инструментам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_security_ratings_agg_v2_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSecurityRatingsAggV2Body body:
        :return: EfirDataHubModelsModelsRatingSecurityRatingsAggV2Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_security_ratings_agg_v2_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_security_ratings_agg_v2_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_security_ratings_agg_v2_post_with_http_info(self, **kwargs):  # noqa: E501
        """Метод позволяет получить структуру с данными по уровням рейтингов на заданную дату по одному или нескольким инструментам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_security_ratings_agg_v2_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSecurityRatingsAggV2Body body:
        :return: EfirDataHubModelsModelsRatingSecurityRatingsAggV2Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_security_ratings_agg_v2_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/SecurityRatingsAgg_v2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRatingSecurityRatingsAggV2Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_security_ratings_fintool_id_post(self, fintool_id, **kwargs):  # noqa: E501
        """Получить рейтинги инструмента, его эмитента и основных организаторов выпуска по FintoolId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_security_ratings_fintool_id_post(fintool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fintool_id: (required)
        :param SecurityRatingsFintoolIdBody body:
        :return: list[EfirDataHubModelsModelsRatingSecurityRatingsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_security_ratings_fintool_id_post_with_http_info(fintool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_security_ratings_fintool_id_post_with_http_info(fintool_id, **kwargs)  # noqa: E501
            return data

    def v2_rating_security_ratings_fintool_id_post_with_http_info(self, fintool_id, **kwargs):  # noqa: E501
        """Получить рейтинги инструмента, его эмитента и основных организаторов выпуска по FintoolId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_security_ratings_fintool_id_post_with_http_info(fintool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fintool_id: (required)
        :param SecurityRatingsFintoolIdBody body:
        :return: list[EfirDataHubModelsModelsRatingSecurityRatingsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fintool_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_security_ratings_fintool_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fintool_id' is set
        if ('fintool_id' not in params or
                params['fintool_id'] is None):
            raise ValueError("Missing the required parameter `fintool_id` when calling `v2_rating_security_ratings_fintool_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fintool_id' in params:
            path_params['fintoolId'] = params['fintool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/SecurityRatings/{fintoolId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingSecurityRatingsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_security_ratings_hist_post(self, **kwargs):  # noqa: E501
        """Получить рейтинги инструмента, его эмитента и основных организаторов выпуска.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_security_ratings_hist_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSecurityRatingsHistBody body:
        :return: list[EfirDataHubModelsModelsRatingSecurityRatingsHistFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_security_ratings_hist_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_security_ratings_hist_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_security_ratings_hist_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить рейтинги инструмента, его эмитента и основных организаторов выпуска.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_security_ratings_hist_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSecurityRatingsHistBody body:
        :return: list[EfirDataHubModelsModelsRatingSecurityRatingsHistFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_security_ratings_hist_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/SecurityRatingsHist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingSecurityRatingsHistFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_security_ratings_post(self, **kwargs):  # noqa: E501
        """Получить рейтинги инструмента, его эмитента и основных организаторов выпуска по ISIN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_security_ratings_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSecurityRatingsBody body:
        :return: list[EfirDataHubModelsModelsRatingSecurityRatingsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_security_ratings_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_security_ratings_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_security_ratings_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить рейтинги инструмента, его эмитента и основных организаторов выпуска по ISIN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_security_ratings_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSecurityRatingsBody body:
        :return: list[EfirDataHubModelsModelsRatingSecurityRatingsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_security_ratings_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/SecurityRatings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingSecurityRatingsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_surety_ratings_agg_post(self, **kwargs):  # noqa: E501
        """Позволяет получить таблицу с данными по уровням рейтингов на заданную дату для гарантов/поручителей одного или нескольких инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_surety_ratings_agg_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSuretyRatingsAggBody body:
        :return: list[EfirDataHubModelsModelsRatingSuretyRatingsAggFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_surety_ratings_agg_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_surety_ratings_agg_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_surety_ratings_agg_post_with_http_info(self, **kwargs):  # noqa: E501
        """Позволяет получить таблицу с данными по уровням рейтингов на заданную дату для гарантов/поручителей одного или нескольких инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_surety_ratings_agg_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSuretyRatingsAggBody body:
        :return: list[EfirDataHubModelsModelsRatingSuretyRatingsAggFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_surety_ratings_agg_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/SuretyRatingsAgg', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRatingSuretyRatingsAggFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rating_surety_ratings_agg_v2_post(self, **kwargs):  # noqa: E501
        """Позволяет получить структуру с данными по уровням рейтингов на заданную дату для гарантов/поручителей одного или нескольких инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_surety_ratings_agg_v2_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSuretyRatingsAggV2Body body:
        :return: EfirDataHubModelsModelsRatingCompanyRatingsAggV2Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rating_surety_ratings_agg_v2_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rating_surety_ratings_agg_v2_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rating_surety_ratings_agg_v2_post_with_http_info(self, **kwargs):  # noqa: E501
        """Позволяет получить структуру с данными по уровням рейтингов на заданную дату для гарантов/поручителей одного или нескольких инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rating_surety_ratings_agg_v2_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RatingSuretyRatingsAggV2Body body:
        :return: EfirDataHubModelsModelsRatingCompanyRatingsAggV2Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rating_surety_ratings_agg_v2_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Rating/SuretyRatingsAgg_v2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRatingCompanyRatingsAggV2Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
