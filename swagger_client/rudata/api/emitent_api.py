# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EmitentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_emitent_bankrupt_list_post(self, **kwargs):  # noqa: E501
        """Возвращает сведения о банкротстве запрашиваемой компании  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_bankrupt_list_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentBankruptListBody body:
        :return: list[EfirDataHubModelsModelsEmitentBankruptListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_bankrupt_list_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_bankrupt_list_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_bankrupt_list_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает сведения о банкротстве запрашиваемой компании  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_bankrupt_list_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentBankruptListBody body:
        :return: list[EfirDataHubModelsModelsEmitentBankruptListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_bankrupt_list_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/BankruptList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentBankruptListFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_calendar_post(self, **kwargs):  # noqa: E501
        """Календари событий эмитентов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_calendar_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentCalendarBody body:
        :return: list[EfirDataHubModelsModelsEmitentCalendarFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_calendar_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_calendar_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_calendar_post_with_http_info(self, **kwargs):  # noqa: E501
        """Календари событий эмитентов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_calendar_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentCalendarBody body:
        :return: list[EfirDataHubModelsModelsEmitentCalendarFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_calendar_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/Calendar', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentCalendarFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_classification_post(self, **kwargs):  # noqa: E501
        """Получить классификацию эмитентов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_classification_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentClassificationBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_classification_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_classification_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_classification_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить классификацию эмитентов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_classification_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentClassificationBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentClassificationFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_classification_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/Classification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoEmitentClassificationFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_code_get(self, code, **kwargs):  # noqa: E501
        """Получить краткий справочник по эмитенту.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_code_get(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :return: EfirDataHubModelsModelsInfoEmitentsFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_code_get_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_code_get_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def v2_emitent_code_get_with_http_info(self, code, **kwargs):  # noqa: E501
        """Получить краткий справочник по эмитенту.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_code_get_with_http_info(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :return: EfirDataHubModelsModelsInfoEmitentsFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `v2_emitent_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/{code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsInfoEmitentsFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_code_msfo_report_list_get(self, code, **kwargs):  # noqa: E501
        """Список доступных отчетов по МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_code_msfo_report_list_get(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Один из идентификаторов компании: FininstId, ИНН, ОГРН (required)
        :return: list[EfirDataHubModelsModelsEmitentMsfoReportListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_code_msfo_report_list_get_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_code_msfo_report_list_get_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def v2_emitent_code_msfo_report_list_get_with_http_info(self, code, **kwargs):  # noqa: E501
        """Список доступных отчетов по МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_code_msfo_report_list_get_with_http_info(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Один из идентификаторов компании: FininstId, ИНН, ОГРН (required)
        :return: list[EfirDataHubModelsModelsEmitentMsfoReportListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_code_msfo_report_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `v2_emitent_code_msfo_report_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/{code}/MSFOReportList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentMsfoReportListFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_code_msfo_report_post(self, code, **kwargs):  # noqa: E501
        """Отчет по МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_code_msfo_report_post(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Один из идентификаторов компании: FininstId, ИНН, ОГРН (required)
        :param CodeMSFOReportBody body:
        :return: list[EfirDataHubModelsModelsEmitentMsfoReportFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_code_msfo_report_post_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_code_msfo_report_post_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def v2_emitent_code_msfo_report_post_with_http_info(self, code, **kwargs):  # noqa: E501
        """Отчет по МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_code_msfo_report_post_with_http_info(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Один из идентификаторов компании: FininstId, ИНН, ОГРН (required)
        :param CodeMSFOReportBody body:
        :return: list[EfirDataHubModelsModelsEmitentMsfoReportFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_code_msfo_report_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `v2_emitent_code_msfo_report_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/{code}/MSFOReport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentMsfoReportFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_code_rsbu_report_list_get(self, code, **kwargs):  # noqa: E501
        """Список доступных отчетов по РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_code_rsbu_report_list_get(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Один из идентификаторов компании: FininstId, ИНН, ОГРН (required)
        :return: list[EfirDataHubModelsModelsEmitentRsbuReportListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_code_rsbu_report_list_get_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_code_rsbu_report_list_get_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def v2_emitent_code_rsbu_report_list_get_with_http_info(self, code, **kwargs):  # noqa: E501
        """Список доступных отчетов по РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_code_rsbu_report_list_get_with_http_info(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Один из идентификаторов компании: FininstId, ИНН, ОГРН (required)
        :return: list[EfirDataHubModelsModelsEmitentRsbuReportListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_code_rsbu_report_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `v2_emitent_code_rsbu_report_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/{code}/RSBUReportList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentRsbuReportListFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_code_rsbu_report_post(self, code, **kwargs):  # noqa: E501
        """Отчет по РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_code_rsbu_report_post(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Один из идентификаторов компании: FininstId, ИНН, ОГРН (required)
        :param CodeRSBUReportBody body:
        :return: list[EfirDataHubModelsModelsEmitentRsbuReportFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_code_rsbu_report_post_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_code_rsbu_report_post_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def v2_emitent_code_rsbu_report_post_with_http_info(self, code, **kwargs):  # noqa: E501
        """Отчет по РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_code_rsbu_report_post_with_http_info(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Один из идентификаторов компании: FininstId, ИНН, ОГРН (required)
        :param CodeRSBUReportBody body:
        :return: list[EfirDataHubModelsModelsEmitentRsbuReportFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_code_rsbu_report_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `v2_emitent_code_rsbu_report_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/{code}/RSBUReport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentRsbuReportFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_companies_post(self, **kwargs):  # noqa: E501
        """Список компаний, поддерживаемых в методах сервиса Emitent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_companies_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentCompaniesBody body:
        :return: list[EfirDataHubModelsModelsEmitentCompaniesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_companies_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_companies_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_companies_post_with_http_info(self, **kwargs):  # noqa: E501
        """Список компаний, поддерживаемых в методах сервиса Emitent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_companies_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentCompaniesBody body:
        :return: list[EfirDataHubModelsModelsEmitentCompaniesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_companies_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/Companies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentCompaniesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_company_groups_by_inclusions_post(self, **kwargs):  # noqa: E501
        """Возвращает информацию о принадлежности компаний к группам компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_company_groups_by_inclusions_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentCompanyGroupsByInclusionsBody body:
        :return: list[EfirDataHubModelsModelsEmitentCompanyGroupsByInclusionsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_company_groups_by_inclusions_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_company_groups_by_inclusions_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_company_groups_by_inclusions_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает информацию о принадлежности компаний к группам компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_company_groups_by_inclusions_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentCompanyGroupsByInclusionsBody body:
        :return: list[EfirDataHubModelsModelsEmitentCompanyGroupsByInclusionsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_company_groups_by_inclusions_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/CompanyGroupsByInclusions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentCompanyGroupsByInclusionsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_company_groups_members_post(self, **kwargs):  # noqa: E501
        """Возвращает полные описания групп по ид групп  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_company_groups_members_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentCompanyGroupsMembersBody body:
        :return: list[EfirDataHubModelsModelsEmitentCompanyGroupsMembersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_company_groups_members_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_company_groups_members_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_company_groups_members_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает полные описания групп по ид групп  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_company_groups_members_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentCompanyGroupsMembersBody body:
        :return: list[EfirDataHubModelsModelsEmitentCompanyGroupsMembersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_company_groups_members_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/CompanyGroupsMembers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentCompanyGroupsMembersFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_company_traffic_light_scoring_post(self, **kwargs):  # noqa: E501
        """Возвращает показатели кредитной оценки эмитентов по шкале \"светофора\" (1-6), актуальные на заданную дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_company_traffic_light_scoring_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentCompanyTrafficLightScoringBody body:
        :return: list[EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_company_traffic_light_scoring_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_company_traffic_light_scoring_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_company_traffic_light_scoring_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает показатели кредитной оценки эмитентов по шкале \"светофора\" (1-6), актуальные на заданную дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_company_traffic_light_scoring_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentCompanyTrafficLightScoringBody body:
        :return: list[EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_company_traffic_light_scoring_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/CompanyTrafficLightScoring', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_encumbrance_list_post(self, **kwargs):  # noqa: E501
        """Возвращает данные об обременениях имущества компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_encumbrance_list_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentEncumbranceListBody body:
        :return: list[EfirDataHubModelsModelsEmitentEncumbranceListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_encumbrance_list_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_encumbrance_list_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_encumbrance_list_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает данные об обременениях имущества компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_encumbrance_list_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentEncumbranceListBody body:
        :return: list[EfirDataHubModelsModelsEmitentEncumbranceListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_encumbrance_list_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/EncumbranceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentEncumbranceListFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_find_code_get(self, code, **kwargs):  # noqa: E501
        """Поиск эмитента по коду (fininstId, ИНН, ОГРН, shortname)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_find_code_get(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :return: EfirDataHubModelsModelsEmitentEmitentShortInfoFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_find_code_get_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_find_code_get_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def v2_emitent_find_code_get_with_http_info(self, code, **kwargs):  # noqa: E501
        """Поиск эмитента по коду (fininstId, ИНН, ОГРН, shortname)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_find_code_get_with_http_info(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: (required)
        :return: EfirDataHubModelsModelsEmitentEmitentShortInfoFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_find_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `v2_emitent_find_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/Find/{code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsEmitentEmitentShortInfoFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_find_post(self, **kwargs):  # noqa: E501
        """Поиск эмитента по списку кодов (fininstId, ИНН, ОГРН, shortname)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_find_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentFindBody body:
        :return: list[EfirDataHubModelsModelsEmitentEmitentShortInfoFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_find_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_find_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_find_post_with_http_info(self, **kwargs):  # noqa: E501
        """Поиск эмитента по списку кодов (fininstId, ИНН, ОГРН, shortname)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_find_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentFindBody body:
        :return: list[EfirDataHubModelsModelsEmitentEmitentShortInfoFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_find_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/Find', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentEmitentShortInfoFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_kmv_emitent_dates_post(self, **kwargs):  # noqa: E501
        """Возвращает перечень дат, для которых есть значения KMV PD для указанных эмитентов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_kmv_emitent_dates_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentKMVEmitentDatesBody body:
        :return: list[EfirDataHubModelsModelsEmitentKmvEmitentDatesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_kmv_emitent_dates_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_kmv_emitent_dates_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_kmv_emitent_dates_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает перечень дат, для которых есть значения KMV PD для указанных эмитентов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_kmv_emitent_dates_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentKMVEmitentDatesBody body:
        :return: list[EfirDataHubModelsModelsEmitentKmvEmitentDatesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_kmv_emitent_dates_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/KMVEmitentDates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentKmvEmitentDatesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_kmv_emitents_get(self, **kwargs):  # noqa: E501
        """Возвращает перечень эмитентов, для которых когда-либо было рассчитано значение KMV PD  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_kmv_emitents_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_kmv_emitents_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_kmv_emitents_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_kmv_emitents_get_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает перечень эмитентов, для которых когда-либо было рассчитано значение KMV PD  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_kmv_emitents_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_kmv_emitents_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/KMVEmitents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_kmvpd_post(self, **kwargs):  # noqa: E501
        """Возвращает значения PIT KMV PD для указанных эмитентов на дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_kmvpd_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentKMVPDBody body:
        :return: list[EfirDataHubModelsModelsEmitentKmvPdFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_kmvpd_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_kmvpd_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_kmvpd_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает значения PIT KMV PD для указанных эмитентов на дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_kmvpd_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentKMVPDBody body:
        :return: list[EfirDataHubModelsModelsEmitentKmvPdFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_kmvpd_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/KMVPD', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentKmvPdFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_list_ext_post(self, **kwargs):  # noqa: E501
        """Получить расширенный справочник по эмитентам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_list_ext_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentListExtBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentsExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_list_ext_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_list_ext_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_list_ext_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить расширенный справочник по эмитентам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_list_ext_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentListExtBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentsExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_list_ext_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/ListExt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoEmitentsExtFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_list_post(self, **kwargs):  # noqa: E501
        """Получить краткий справочник по эмитентам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_list_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentListBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_list_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_list_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_list_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить краткий справочник по эмитентам.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_list_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentListBody body:
        :return: list[EfirDataHubModelsModelsInfoEmitentsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_list_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/List', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsInfoEmitentsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_multipliers_list_get(self, **kwargs):  # noqa: E501
        """Справочные данные мультипликаторов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_multipliers_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsEmitentMultipliersListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_multipliers_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_multipliers_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_multipliers_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """Справочные данные мультипликаторов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_multipliers_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsEmitentMultipliersListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_multipliers_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/MultipliersList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentMultipliersListFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_multipliers_post(self, **kwargs):  # noqa: E501
        """Данные мультипликаторов по российской компании за интересующий период  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_multipliers_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentMultipliersBody body:
        :return: list[EfirDataHubModelsModelsEmitentMultipliersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_multipliers_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_multipliers_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_multipliers_post_with_http_info(self, **kwargs):  # noqa: E501
        """Данные мультипликаторов по российской компании за интересующий период  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_multipliers_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentMultipliersBody body:
        :return: list[EfirDataHubModelsModelsEmitentMultipliersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_multipliers_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/Multipliers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentMultipliersFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_multipliers_trade_statistics_post(self, **kwargs):  # noqa: E501
        """Торговая статистика, участвовавшая в расчёте мультипликаторов за интересующий период  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_multipliers_trade_statistics_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentMultipliersTradeStatisticsBody body:
        :return: list[EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_multipliers_trade_statistics_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_multipliers_trade_statistics_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_multipliers_trade_statistics_post_with_http_info(self, **kwargs):  # noqa: E501
        """Торговая статистика, участвовавшая в расчёте мультипликаторов за интересующий период  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_multipliers_trade_statistics_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentMultipliersTradeStatisticsBody body:
        :return: list[EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_multipliers_trade_statistics_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/MultipliersTradeStatistics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_pd_multipliers_post(self, **kwargs):  # noqa: E501
        """Возвращает прогнозные мультипликаторы для PD  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_pd_multipliers_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentPDMultipliersBody body:
        :return: list[EfirDataHubModelsModelsEmitentPDMultipliersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_pd_multipliers_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_pd_multipliers_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_pd_multipliers_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает прогнозные мультипликаторы для PD  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_pd_multipliers_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentPDMultipliersBody body:
        :return: list[EfirDataHubModelsModelsEmitentPDMultipliersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_pd_multipliers_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/PDMultipliers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentPDMultipliersFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_pit_coefficient_post(self, **kwargs):  # noqa: E501
        """Возвращает значение коэффициента коррекции скоринговой величины PD ( (probability of default)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_pit_coefficient_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentPITCoefficientBody body:
        :return: EfirDataHubModelsModelsEmitentPitCoefficientResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_pit_coefficient_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_pit_coefficient_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_pit_coefficient_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает значение коэффициента коррекции скоринговой величины PD ( (probability of default)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_pit_coefficient_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentPITCoefficientBody body:
        :return: EfirDataHubModelsModelsEmitentPitCoefficientResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_pit_coefficient_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/PITCoefficient', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsEmitentPitCoefficientResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_profile_post(self, **kwargs):  # noqa: E501
        """Возвращает описание деятельности компании, планы и пр.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_profile_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentProfileBody body:
        :return: list[EfirDataHubModelsModelsEmitentProfileFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_profile_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_profile_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_profile_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает описание деятельности компании, планы и пр.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_profile_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentProfileBody body:
        :return: list[EfirDataHubModelsModelsEmitentProfileFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_profile_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/Profile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentProfileFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_scoring_coeff_weights_post(self, **kwargs):  # noqa: E501
        """Возвращает веса для коэффициентов скоринговой модели раздельно по типам отчетности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_coeff_weights_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringCoeffWeightsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringCoeffWeightsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_scoring_coeff_weights_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_scoring_coeff_weights_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_scoring_coeff_weights_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает веса для коэффициентов скоринговой модели раздельно по типам отчетности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_coeff_weights_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringCoeffWeightsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringCoeffWeightsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_scoring_coeff_weights_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/ScoringCoeffWeights', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringCoeffWeightsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_scoring_ext_fields_get(self, **kwargs):  # noqa: E501
        """Возвращает описания полей которые возвращает метод /Emitent/ScoringExt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_ext_fields_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsEmitentScoringExtFieldsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_scoring_ext_fields_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_scoring_ext_fields_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_scoring_ext_fields_get_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает описания полей которые возвращает метод /Emitent/ScoringExt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_ext_fields_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EfirDataHubModelsModelsEmitentScoringExtFieldsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_scoring_ext_fields_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/ScoringExtFields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringExtFieldsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_scoring_ext_history_post(self, **kwargs):  # noqa: E501
        """Возвращает историю расширенных скорингов для списка компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_ext_history_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringExtHistoryBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringExtHistoryFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_scoring_ext_history_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_scoring_ext_history_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_scoring_ext_history_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает историю расширенных скорингов для списка компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_ext_history_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringExtHistoryBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringExtHistoryFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_scoring_ext_history_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/ScoringExtHistory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringExtHistoryFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_scoring_ext_post(self, **kwargs):  # noqa: E501
        """Возвращает расширенные скоринговые значения по компании за период отчетности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_ext_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringExtBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_scoring_ext_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_scoring_ext_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_scoring_ext_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает расширенные скоринговые значения по компании за период отчетности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_ext_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringExtBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_scoring_ext_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/ScoringExt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringExtFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_scoring_ext_stats_post(self, **kwargs):  # noqa: E501
        """Возвращает статистики по расширенным скорингам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_ext_stats_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringExtStatsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringExtStatsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_scoring_ext_stats_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_scoring_ext_stats_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_scoring_ext_stats_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает статистики по расширенным скорингам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_ext_stats_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringExtStatsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringExtStatsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_scoring_ext_stats_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/ScoringExtStats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringExtStatsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_scoring_history_post(self, **kwargs):  # noqa: E501
        """Возвращает историю скорингов для списка компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_history_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringHistoryBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringHistoryFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_scoring_history_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_scoring_history_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_scoring_history_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает историю скорингов для списка компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_history_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringHistoryBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringHistoryFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_scoring_history_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/ScoringHistory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringHistoryFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_scoring_post(self, **kwargs):  # noqa: E501
        """Скоринг компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_scoring_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_scoring_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_scoring_post_with_http_info(self, **kwargs):  # noqa: E501
        """Скоринг компаний  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_scoring_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/Scoring', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_scoring_scale_post(self, **kwargs):  # noqa: E501
        """Возвращает описание рейтинговой шкалы - глобальной или национальной  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_scale_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringScaleBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringScaleFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_scoring_scale_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_scoring_scale_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_scoring_scale_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает описание рейтинговой шкалы - глобальной или национальной  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_scale_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringScaleBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringScaleFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_scoring_scale_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/ScoringScale', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringScaleFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_scoring_sector_weights_post(self, **kwargs):  # noqa: E501
        """Возвращает веса скоринговой модели для для групп секторов экономики  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_sector_weights_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringSectorWeightsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringSectorWeightsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_scoring_sector_weights_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_scoring_sector_weights_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_scoring_sector_weights_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает веса скоринговой модели для для групп секторов экономики  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_sector_weights_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringSectorWeightsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringSectorWeightsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_scoring_sector_weights_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/ScoringSectorWeights', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringSectorWeightsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_scoring_slopes_post(self, **kwargs):  # noqa: E501
        """Возвращает значение свободного члена регрессии для скоринговой модели по типу отчетности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_slopes_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringSlopesBody body:
        :return: EfirDataHubModelsModelsEmitentScoringSlopesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_scoring_slopes_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_scoring_slopes_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_scoring_slopes_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает значение свободного члена регрессии для скоринговой модели по типу отчетности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_slopes_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringSlopesBody body:
        :return: EfirDataHubModelsModelsEmitentScoringSlopesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_scoring_slopes_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/ScoringSlopes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsEmitentScoringSlopesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_scoring_stats_post(self, **kwargs):  # noqa: E501
        """Возвращает статистики по скорингам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_stats_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringStatsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringStatsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_scoring_stats_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_scoring_stats_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_scoring_stats_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает статистики по скорингам  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_stats_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringStatsBody body:
        :return: list[EfirDataHubModelsModelsEmitentScoringStatsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_scoring_stats_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/ScoringStats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsEmitentScoringStatsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_emitent_scoring_transformants_post(self, **kwargs):  # noqa: E501
        """Возвращает трансформанты для коэффициента скоринговой модели на дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_transformants_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringTransformantsBody body:
        :return: EfirDataHubModelsModelsEmitentScoringTransformantsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_emitent_scoring_transformants_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_emitent_scoring_transformants_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_emitent_scoring_transformants_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает трансформанты для коэффициента скоринговой модели на дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_emitent_scoring_transformants_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmitentScoringTransformantsBody body:
        :return: EfirDataHubModelsModelsEmitentScoringTransformantsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_emitent_scoring_transformants_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Emitent/ScoringTransformants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsEmitentScoringTransformantsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
