# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RiskApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_risk2_liquidity_adjustment_post(self, **kwargs):  # noqa: E501
        """v2_risk2_liquidity_adjustment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk2_liquidity_adjustment_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Model2LiquidityAdjustmentBody body:
        :return: EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk2_liquidity_adjustment_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk2_liquidity_adjustment_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk2_liquidity_adjustment_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_risk2_liquidity_adjustment_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk2_liquidity_adjustment_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Model2LiquidityAdjustmentBody body:
        :return: EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk2_liquidity_adjustment_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/2/LiquidityAdjustment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_amortisations_by_id_post(self, **kwargs):  # noqa: E501
        """Получить график погашения по FintoolId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_amortisations_by_id_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskAmortisationsByIdBody body:
        :return: EfirDataHubModelsModelsRiskAmortisationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_amortisations_by_id_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_amortisations_by_id_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_amortisations_by_id_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить график погашения по FintoolId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_amortisations_by_id_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskAmortisationsByIdBody body:
        :return: EfirDataHubModelsModelsRiskAmortisationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_amortisations_by_id_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/AmortisationsById', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskAmortisationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_amortisations_post(self, **kwargs):  # noqa: E501
        """Получить график погашения.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_amortisations_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskAmortisationsBody body:
        :return: EfirDataHubModelsModelsRiskAmortisationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_amortisations_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_amortisations_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_amortisations_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить график погашения.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_amortisations_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskAmortisationsBody body:
        :return: EfirDataHubModelsModelsRiskAmortisationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_amortisations_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/Amortisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskAmortisationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_bank_basel_class_post(self, **kwargs):  # noqa: E501
        """Возвращает классификацию банков по классам \"Базель III\"  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_bank_basel_class_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskBankBaselClassBody body:
        :return: list[EfirDataHubModelsModelsRiskBankBaselClassFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_bank_basel_class_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_bank_basel_class_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_bank_basel_class_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает классификацию банков по классам \"Базель III\"  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_bank_basel_class_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskBankBaselClassBody body:
        :return: list[EfirDataHubModelsModelsRiskBankBaselClassFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_bank_basel_class_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/BankBaselClass', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskBankBaselClassFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_bank_norm_rule_post(self, **kwargs):  # noqa: E501
        """Возвращает правило определения группы актива согласно инструкциям ЦБ РФ об обязательных нормативах банков.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_bank_norm_rule_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskBankNormRuleBody body:
        :return: EfirDataHubModelsModelsRiskBankNormRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_bank_norm_rule_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_bank_norm_rule_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_bank_norm_rule_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает правило определения группы актива согласно инструкциям ЦБ РФ об обязательных нормативах банков.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_bank_norm_rule_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskBankNormRuleBody body:
        :return: EfirDataHubModelsModelsRiskBankNormRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_bank_norm_rule_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/BankNormRule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskBankNormRuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_capital_adequacy_finalized_post(self, **kwargs):  # noqa: E501
        """Возвращает классификатор финансового инструмента и коэффициент риска для взвешивания в капитале, их расшифровку:  обоснование (номер и абзац пункта из нормативного акта),  принадлежность к ПК (операции с повышенным коэффициентам риска),  агрегат RWA и код актива по финализированному подходу,  в соответствии с инструкцией Банка России (199-И).  Метод не распространяется на активы фондов, производные финансовые инструменты.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_capital_adequacy_finalized_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskCapitaladequacyfinalizedBody body:
        :return: list[EfirDataHubModelsModelsRiskCapitalAdequacyFinalizedFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_capital_adequacy_finalized_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_capital_adequacy_finalized_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_capital_adequacy_finalized_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает классификатор финансового инструмента и коэффициент риска для взвешивания в капитале, их расшифровку:  обоснование (номер и абзац пункта из нормативного акта),  принадлежность к ПК (операции с повышенным коэффициентам риска),  агрегат RWA и код актива по финализированному подходу,  в соответствии с инструкцией Банка России (199-И).  Метод не распространяется на активы фондов, производные финансовые инструменты.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_capital_adequacy_finalized_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskCapitaladequacyfinalizedBody body:
        :return: list[EfirDataHubModelsModelsRiskCapitalAdequacyFinalizedFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_capital_adequacy_finalized_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/capital-adequacy-finalized', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskCapitalAdequacyFinalizedFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_capital_adequacy_params_post(self, **kwargs):  # noqa: E501
        """Получить классификатор инструмента и коэффициент кредитного риска, их расшифровку: обоснование (номер абзаца), группу риска и код, в соответствии с инструкцией, актуальной на дату расчета (ЦБ 180-И или 139-И).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_capital_adequacy_params_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskCapitalAdequacyParamsBody body:
        :return: EfirDataHubModelsModelsRiskCapitalAdequacyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_capital_adequacy_params_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_capital_adequacy_params_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_capital_adequacy_params_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить классификатор инструмента и коэффициент кредитного риска, их расшифровку: обоснование (номер абзаца), группу риска и код, в соответствии с инструкцией, актуальной на дату расчета (ЦБ 180-И или 139-И).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_capital_adequacy_params_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskCapitalAdequacyParamsBody body:
        :return: EfirDataHubModelsModelsRiskCapitalAdequacyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_capital_adequacy_params_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/CapitalAdequacyParams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskCapitalAdequacyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_corp_invest_class_post(self, **kwargs):  # noqa: E501
        """Возвращает информацию о принадлежности компании к инвестиционному классу в соответствии с рекомендациями \"Базель III\"  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_corp_invest_class_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskCorpInvestClassBody body:
        :return: list[EfirDataHubModelsModelsRiskCorpInvestClassFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_corp_invest_class_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_corp_invest_class_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_corp_invest_class_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает информацию о принадлежности компании к инвестиционному классу в соответствии с рекомендациями \"Базель III\"  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_corp_invest_class_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskCorpInvestClassBody body:
        :return: list[EfirDataHubModelsModelsRiskCorpInvestClassFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_corp_invest_class_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/CorpInvestClass', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskCorpInvestClassFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_coupon_yield_post(self, **kwargs):  # noqa: E501
        """Получить доходность инструмента для расчета рисков. Актуально для облигаций и привилегированных акций.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_coupon_yield_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskCouponYieldBody body:
        :return: EfirDataHubModelsModelsRiskCouponYieldResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_coupon_yield_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_coupon_yield_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_coupon_yield_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить доходность инструмента для расчета рисков. Актуально для облигаций и привилегированных акций.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_coupon_yield_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskCouponYieldBody body:
        :return: EfirDataHubModelsModelsRiskCouponYieldResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_coupon_yield_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/CouponYield', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskCouponYieldResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_equity_risk_rate_post(self, **kwargs):  # noqa: E501
        """Получить коэффициент риска.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_equity_risk_rate_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskEquityRiskRateBody body:
        :return: EfirDataHubModelsModelsRiskEquityRiskRateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_equity_risk_rate_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_equity_risk_rate_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_equity_risk_rate_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить коэффициент риска.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_equity_risk_rate_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskEquityRiskRateBody body:
        :return: EfirDataHubModelsModelsRiskEquityRiskRateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_equity_risk_rate_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/EquityRiskRate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskEquityRiskRateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_fair_value_post(self, **kwargs):  # noqa: E501
        """Получить справедливую цену.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_fair_value_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskFairValueBody body:
        :return: EfirDataHubModelsModelsRiskFairValueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_fair_value_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_fair_value_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_fair_value_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить справедливую цену.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_fair_value_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskFairValueBody body:
        :return: EfirDataHubModelsModelsRiskFairValueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_fair_value_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/FairValue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskFairValueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_fintools_risk_group_params_post(self, **kwargs):  # noqa: E501
        """Получить все или фильтрованные значения параметров группы риска для списка инструментов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_fintools_risk_group_params_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskFintoolsRiskGroupParamsBody body:
        :return: list[EfirDataHubModelsModelsRiskFintoolsRiskGroupParams]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_fintools_risk_group_params_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_fintools_risk_group_params_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_fintools_risk_group_params_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить все или фильтрованные значения параметров группы риска для списка инструментов  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_fintools_risk_group_params_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskFintoolsRiskGroupParamsBody body:
        :return: list[EfirDataHubModelsModelsRiskFintoolsRiskGroupParams]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_fintools_risk_group_params_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/FintoolsRiskGroupParams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskFintoolsRiskGroupParams]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_frozen_risk_group_params_post(self, **kwargs):  # noqa: E501
        """v2_risk_frozen_risk_group_params_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_frozen_risk_group_params_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskFrozenRiskGroupParamsBody body:
        :return: list[EfirDataHubModelsModelsRiskFrozenRiskParam]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_frozen_risk_group_params_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_frozen_risk_group_params_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_frozen_risk_group_params_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_risk_frozen_risk_group_params_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_frozen_risk_group_params_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskFrozenRiskGroupParamsBody body:
        :return: list[EfirDataHubModelsModelsRiskFrozenRiskParam]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_frozen_risk_group_params_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/FrozenRiskGroupParams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskFrozenRiskParam]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_info_shocks_post(self, **kwargs):  # noqa: E501
        """Возвращает правило определения группы актива согласно инструкциям ЦБ РФ об обязательных нормативах банков.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_info_shocks_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskInfoShocksBody body:
        :return: list[EfirDataHubModelsModelsRiskInfoShocksFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_info_shocks_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_info_shocks_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_info_shocks_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает правило определения группы актива согласно инструкциям ЦБ РФ об обязательных нормативах банков.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_info_shocks_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskInfoShocksBody body:
        :return: list[EfirDataHubModelsModelsRiskInfoShocksFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_info_shocks_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/InfoShocks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskInfoShocksFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_instrument_has_risk_post(self, **kwargs):  # noqa: E501
        """Наличие процентного и фондового рисков.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_instrument_has_risk_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskInstrumentHasRiskBody body:
        :return: EfirDataHubModelsModelsRiskHasRiskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_instrument_has_risk_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_instrument_has_risk_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_instrument_has_risk_post_with_http_info(self, **kwargs):  # noqa: E501
        """Наличие процентного и фондового рисков.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_instrument_has_risk_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskInstrumentHasRiskBody body:
        :return: EfirDataHubModelsModelsRiskHasRiskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_instrument_has_risk_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/InstrumentHasRisk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskHasRiskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_liquidity_adjustment_post(self, **kwargs):  # noqa: E501
        """Получить таблицу с коэффициентами корректировки ликвидности на заданную дату по одной или нескольким облигациям.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_liquidity_adjustment_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskLiquidityAdjustmentBody body:
        :return: list[EfirDataHubModelsModelsRiskLiquidityAdjustmentFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_liquidity_adjustment_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_liquidity_adjustment_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_liquidity_adjustment_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить таблицу с коэффициентами корректировки ликвидности на заданную дату по одной или нескольким облигациям.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_liquidity_adjustment_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskLiquidityAdjustmentBody body:
        :return: list[EfirDataHubModelsModelsRiskLiquidityAdjustmentFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_liquidity_adjustment_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/LiquidityAdjustment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskLiquidityAdjustmentFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_liquidity_params_post(self, **kwargs):  # noqa: E501
        """Получить параметры ликвидности инструмента на заданную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_liquidity_params_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskLiquidityParamsBody body:
        :return: list[EfirDataHubModelsModelsRiskLiquidityParamsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_liquidity_params_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_liquidity_params_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_liquidity_params_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить параметры ликвидности инструмента на заданную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_liquidity_params_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskLiquidityParamsBody body:
        :return: list[EfirDataHubModelsModelsRiskLiquidityParamsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_liquidity_params_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/LiquidityParams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskLiquidityParamsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_liquidity_rating_post(self, **kwargs):  # noqa: E501
        """Получить таблицу с данными по рейтингу ликвидности и используемым для его вычисления параметрам на заданную дату по одной или нескольким облигациям.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_liquidity_rating_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskLiquidityRatingBody body:
        :return: list[EfirDataHubModelsModelsRiskLiquidityRatingFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_liquidity_rating_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_liquidity_rating_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_liquidity_rating_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить таблицу с данными по рейтингу ликвидности и используемым для его вычисления параметрам на заданную дату по одной или нескольким облигациям.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_liquidity_rating_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskLiquidityRatingBody body:
        :return: list[EfirDataHubModelsModelsRiskLiquidityRatingFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_liquidity_rating_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/LiquidityRating', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskLiquidityRatingFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_market_risk_data_post(self, **kwargs):  # noqa: E501
        """Получить данные для расчета рыночного риска.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_market_risk_data_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskMarketRiskDataBody body:
        :return: list[EfirDataHubModelsModelsRiskMarketRiskDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_market_risk_data_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_market_risk_data_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_market_risk_data_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные для расчета рыночного риска.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_market_risk_data_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskMarketRiskDataBody body:
        :return: list[EfirDataHubModelsModelsRiskMarketRiskDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_market_risk_data_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/MarketRiskData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskMarketRiskDataFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_nominal_currency_post(self, **kwargs):  # noqa: E501
        """Валюта номинала.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_nominal_currency_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskNominalCurrencyBody body:
        :return: EfirDataHubModelsModelsRiskNominalCurrencyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_nominal_currency_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_nominal_currency_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_nominal_currency_post_with_http_info(self, **kwargs):  # noqa: E501
        """Валюта номинала.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_nominal_currency_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskNominalCurrencyBody body:
        :return: EfirDataHubModelsModelsRiskNominalCurrencyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_nominal_currency_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/NominalCurrency', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskNominalCurrencyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_option_params_post(self, **kwargs):  # noqa: E501
        """Получить параметры опциона.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_option_params_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskOptionParamsBody body:
        :return: EfirDataHubModelsModelsRiskOptionParamsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_option_params_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_option_params_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_option_params_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить параметры опциона.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_option_params_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskOptionParamsBody body:
        :return: EfirDataHubModelsModelsRiskOptionParamsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_option_params_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/OptionParams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskOptionParamsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_option_values_post(self, **kwargs):  # noqa: E501
        """Получить расчетные параметры опциона на заданную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_option_values_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskOptionValuesBody body:
        :return: list[EfirDataHubModelsModelsRiskOptionValuesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_option_values_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_option_values_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_option_values_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить расчетные параметры опциона на заданную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_option_values_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskOptionValuesBody body:
        :return: list[EfirDataHubModelsModelsRiskOptionValuesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_option_values_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/OptionValues', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskOptionValuesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_pfi_params_post(self, **kwargs):  # noqa: E501
        """Параметры производных финансовых инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_pfi_params_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskPfiParamsBody body:
        :return: EfirDataHubModelsModelsRiskPfiParamsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_pfi_params_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_pfi_params_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_pfi_params_post_with_http_info(self, **kwargs):  # noqa: E501
        """Параметры производных финансовых инструментов.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_pfi_params_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskPfiParamsBody body:
        :return: EfirDataHubModelsModelsRiskPfiParamsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_pfi_params_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/PfiParams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskPfiParamsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_repo_discount139_post(self, **kwargs):  # noqa: E501
        """Определение величины дисконта для расчета риска по операциям РЕПО в соответствии с инструкцией 139-И.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_repo_discount139_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRepoDiscount139Body body:
        :return: EfirDataHubModelsModelsRiskRepoDiscount139Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_repo_discount139_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_repo_discount139_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_repo_discount139_post_with_http_info(self, **kwargs):  # noqa: E501
        """Определение величины дисконта для расчета риска по операциям РЕПО в соответствии с инструкцией 139-И.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_repo_discount139_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRepoDiscount139Body body:
        :return: EfirDataHubModelsModelsRiskRepoDiscount139Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_repo_discount139_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/RepoDiscount139', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskRepoDiscount139Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_risk_date_post(self, **kwargs):  # noqa: E501
        """Получить дату, по которой вычисляется группа срочности.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_risk_date_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRiskDateBody body:
        :return: EfirDataHubModelsModelsRiskRiskDateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_risk_date_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_risk_date_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_risk_date_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить дату, по которой вычисляется группа срочности.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_risk_date_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRiskDateBody body:
        :return: EfirDataHubModelsModelsRiskRiskDateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_risk_date_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/RiskDate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskRiskDateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_risk_group_param_post(self, **kwargs):  # noqa: E501
        """Получить значение параметра для определения группы риска.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_risk_group_param_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRiskGroupParamBody body:
        :return: EfirDataHubModelsModelsRiskRiskGroupParamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_risk_group_param_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_risk_group_param_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_risk_group_param_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить значение параметра для определения группы риска.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_risk_group_param_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRiskGroupParamBody body:
        :return: EfirDataHubModelsModelsRiskRiskGroupParamResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_risk_group_param_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/RiskGroupParam', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskRiskGroupParamResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_risk_group_params_post(self, **kwargs):  # noqa: E501
        """Получить все или фильтрованные значения параметров группы риска для инструмента  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_risk_group_params_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRiskGroupParamsBody body:
        :return: list[EfirDataHubModelsModelsRiskRiskGroupParamsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_risk_group_params_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_risk_group_params_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_risk_group_params_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить все или фильтрованные значения параметров группы риска для инструмента  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_risk_group_params_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRiskGroupParamsBody body:
        :return: list[EfirDataHubModelsModelsRiskRiskGroupParamsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_risk_group_params_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/RiskGroupParams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskRiskGroupParamsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_risk_group_post(self, **kwargs):  # noqa: E501
        """Получить группу риска для инструмента  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_risk_group_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRiskGroupBody body:
        :return: EfirDataHubModelsModelsRiskRiskGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_risk_group_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_risk_group_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_risk_group_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить группу риска для инструмента  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_risk_group_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRiskGroupBody body:
        :return: EfirDataHubModelsModelsRiskRiskGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_risk_group_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/RiskGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskRiskGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_risk_group_rule_post(self, **kwargs):  # noqa: E501
        """Определить правило группы риска по положению 387-П.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_risk_group_rule_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRiskGroupRuleBody body:
        :return: EfirDataHubModelsModelsRiskRiskGroupRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_risk_group_rule_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_risk_group_rule_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_risk_group_rule_post_with_http_info(self, **kwargs):  # noqa: E501
        """Определить правило группы риска по положению 387-П.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_risk_group_rule_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRiskGroupRuleBody body:
        :return: EfirDataHubModelsModelsRiskRiskGroupRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_risk_group_rule_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/RiskGroupRule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskRiskGroupRuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_rule139_post(self, **kwargs):  # noqa: E501
        """Определить правило по инструкции 139-И.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_rule139_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRule139Body body:
        :return: EfirDataHubModelsModelsRiskRule139Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_rule139_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_rule139_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_rule139_post_with_http_info(self, **kwargs):  # noqa: E501
        """Определить правило по инструкции 139-И.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_rule139_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRule139Body body:
        :return: EfirDataHubModelsModelsRiskRule139Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_rule139_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/Rule139', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskRule139Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_rule421_post(self, **kwargs):  # noqa: E501
        """Определить правило по положению 421-П.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_rule421_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRule421Body body:
        :return: EfirDataHubModelsModelsRiskRule421Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_rule421_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_rule421_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_rule421_post_with_http_info(self, **kwargs):  # noqa: E501
        """Определить правило по положению 421-П.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_rule421_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRule421Body body:
        :return: EfirDataHubModelsModelsRiskRule421Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_rule421_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/Rule421', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskRule421Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_rule_hla_post(self, **kwargs):  # noqa: E501
        """Возвращает значения обесценения на дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_rule_hla_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRuleHLABody body:
        :return: list[EfirDataHubModelsModelsRiskRuleHlaFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_rule_hla_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_rule_hla_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_rule_hla_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает значения обесценения на дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_rule_hla_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskRuleHLABody body:
        :return: list[EfirDataHubModelsModelsRiskRuleHlaFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_rule_hla_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/RuleHLA', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsRiskRuleHlaFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_var_data_post(self, **kwargs):  # noqa: E501
        """Возвращает массив значений, необходимых для расчета показателей риска VaR (Value at Risk) или ES (Expected Shortfall) по одному инструменту.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_var_data_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskVarDataBody body:
        :return: EfirDataHubModelsModelsRiskVarDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_var_data_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_var_data_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_var_data_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает массив значений, необходимых для расчета показателей риска VaR (Value at Risk) или ES (Expected Shortfall) по одному инструменту.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_var_data_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskVarDataBody body:
        :return: EfirDataHubModelsModelsRiskVarDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_var_data_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/VarData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskVarDataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_risk_var_matrix_post(self, **kwargs):  # noqa: E501
        """Получить VaR матрицу корреляции и ковариации на определенную дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_var_matrix_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskVarMatrixBody body:
        :return: EfirDataHubModelsModelsRiskVarMatrixResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_risk_var_matrix_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_risk_var_matrix_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_risk_var_matrix_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить VaR матрицу корреляции и ковариации на определенную дату  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_risk_var_matrix_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RiskVarMatrixBody body:
        :return: EfirDataHubModelsModelsRiskVarMatrixResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_risk_var_matrix_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Risk/VarMatrix', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsRiskVarMatrixResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
