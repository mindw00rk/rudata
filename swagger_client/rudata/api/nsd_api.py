# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NsdApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_nsd_bond_coupons_post(self, **kwargs):  # noqa: E501
        """Получить данные по купонам из базы НРД.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_bond_coupons_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdBondCouponsBody body:
        :return: list[EfirDataHubModelsModelsNsdNsdBondCouponsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_nsd_bond_coupons_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_nsd_bond_coupons_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_nsd_bond_coupons_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные по купонам из базы НРД.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_bond_coupons_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdBondCouponsBody body:
        :return: list[EfirDataHubModelsModelsNsdNsdBondCouponsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_nsd_bond_coupons_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Nsd/BondCoupons', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsNsdNsdBondCouponsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_nsd_bond_offers_post(self, **kwargs):  # noqa: E501
        """Получить данные по погашениям из базы НРД.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_bond_offers_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdBondOffersBody body:
        :return: list[EfirDataHubModelsModelsNsdNsdBondOffersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_nsd_bond_offers_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_nsd_bond_offers_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_nsd_bond_offers_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные по погашениям из базы НРД.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_bond_offers_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdBondOffersBody body:
        :return: list[EfirDataHubModelsModelsNsdNsdBondOffersFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_nsd_bond_offers_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Nsd/BondOffers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsNsdNsdBondOffersFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_nsd_common_data_post(self, **kwargs):  # noqa: E501
        """Получить общие данные по бумаге из базы НРД.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_common_data_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdCommonDataBody body:
        :return: list[EfirDataHubModelsModelsNsdCommonDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_nsd_common_data_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_nsd_common_data_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_nsd_common_data_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить общие данные по бумаге из базы НРД.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_common_data_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdCommonDataBody body:
        :return: list[EfirDataHubModelsModelsNsdCommonDataFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_nsd_common_data_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Nsd/CommonData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsNsdCommonDataFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_nsd_emitent_licenses_post(self, **kwargs):  # noqa: E501
        """Получить данные по лицензиям эмитентов из базы НРД.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_emitent_licenses_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdEmitentLicensesBody body:
        :return: list[EfirDataHubModelsModelsNsdNsdEmitentLicensesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_nsd_emitent_licenses_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_nsd_emitent_licenses_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_nsd_emitent_licenses_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные по лицензиям эмитентов из базы НРД.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_emitent_licenses_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdEmitentLicensesBody body:
        :return: list[EfirDataHubModelsModelsNsdNsdEmitentLicensesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_nsd_emitent_licenses_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Nsd/EmitentLicenses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsNsdNsdEmitentLicensesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_nsd_emitents_post(self, **kwargs):  # noqa: E501
        """Получить данные по эмитентам из базы НРД.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_emitents_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdEmitentsBody body:
        :return: list[EfirDataHubModelsModelsNsdNsdEmitentsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_nsd_emitents_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_nsd_emitents_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_nsd_emitents_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить данные по эмитентам из базы НРД.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_emitents_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdEmitentsBody body:
        :return: list[EfirDataHubModelsModelsNsdNsdEmitentsFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_nsd_emitents_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Nsd/Emitents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsNsdNsdEmitentsFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_nsd_fintool_codes_post(self, **kwargs):  # noqa: E501
        """Получить присвоенные инструментам коды из базы НРД (код инструмента на МБ, в НКЦ Фортс т.п.).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_fintool_codes_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdFintoolCodesBody body:
        :return: list[EfirDataHubModelsModelsNsdNsdFintoolCodesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_nsd_fintool_codes_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_nsd_fintool_codes_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_nsd_fintool_codes_post_with_http_info(self, **kwargs):  # noqa: E501
        """Получить присвоенные инструментам коды из базы НРД (код инструмента на МБ, в НКЦ Фортс т.п.).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_fintool_codes_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdFintoolCodesBody body:
        :return: list[EfirDataHubModelsModelsNsdNsdFintoolCodesFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_nsd_fintool_codes_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Nsd/FintoolCodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsNsdNsdFintoolCodesFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_nsd_sir_file_date_get(self, _date, **kwargs):  # noqa: E501
        """Получить SIR-файл (zip-архив) НРД за указанную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_sir_file_date_get(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_nsd_sir_file_date_get_with_http_info(_date, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_nsd_sir_file_date_get_with_http_info(_date, **kwargs)  # noqa: E501
            return data

    def v2_nsd_sir_file_date_get_with_http_info(self, _date, **kwargs):  # noqa: E501
        """Получить SIR-файл (zip-архив) НРД за указанную дату.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_sir_file_date_get_with_http_info(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_nsd_sir_file_date_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `v2_nsd_sir_file_date_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Nsd/SirFile/{date}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_nsd_tax_info_post(self, **kwargs):  # noqa: E501
        """Информация о налоговых ставках  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_tax_info_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdTaxInfoBody body:
        :return: list[EfirDataHubModelsModelsNsdTaxInfoFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_nsd_tax_info_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_nsd_tax_info_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_nsd_tax_info_post_with_http_info(self, **kwargs):  # noqa: E501
        """Информация о налоговых ставках  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_nsd_tax_info_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NsdTaxInfoBody body:
        :return: list[EfirDataHubModelsModelsNsdTaxInfoFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_nsd_tax_info_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/Nsd/TaxInfo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsNsdTaxInfoFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
