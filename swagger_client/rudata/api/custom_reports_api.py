# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CustomReportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_custom_reports_calculation_status_post(self, **kwargs):  # noqa: E501
        """Возвращает статус расчета скоринга  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_calculation_status_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsCalculationstatusBody body:
        :return: list[EfirDataHubModelsModelsReportCustomReportStatusFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_custom_reports_calculation_status_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_custom_reports_calculation_status_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_custom_reports_calculation_status_post_with_http_info(self, **kwargs):  # noqa: E501
        """Возвращает статус расчета скоринга  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_calculation_status_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsCalculationstatusBody body:
        :return: list[EfirDataHubModelsModelsReportCustomReportStatusFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_custom_reports_calculation_status_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/custom-reports/calculation-status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsReportCustomReportStatusFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_custom_reports_msfo_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Метод для удаления пользовательской МСФО отчётности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_msfo_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: guid отчета (required)
        :return: EfirDataHubModelsModelsReportCustomReportDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_custom_reports_msfo_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_custom_reports_msfo_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def v2_custom_reports_msfo_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Метод для удаления пользовательской МСФО отчётности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_msfo_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: guid отчета (required)
        :return: EfirDataHubModelsModelsReportCustomReportDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_custom_reports_msfo_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `v2_custom_reports_msfo_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/custom-reports/msfo/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsReportCustomReportDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_custom_reports_msfo_put(self, **kwargs):  # noqa: E501
        """Метод для загрузки пользовательской отчётности формата МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_msfo_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsMsfoBody body:
        :return: EfirDataHubModelsModelsReportCustomReportUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_custom_reports_msfo_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_custom_reports_msfo_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_custom_reports_msfo_put_with_http_info(self, **kwargs):  # noqa: E501
        """Метод для загрузки пользовательской отчётности формата МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_msfo_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsMsfoBody body:
        :return: EfirDataHubModelsModelsReportCustomReportUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_custom_reports_msfo_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/custom-reports/msfo', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsReportCustomReportUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_custom_reports_msfo_report_list_post(self, **kwargs):  # noqa: E501
        """Метод для выгрузки пользовательских списков доступных отчетов по МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_msfo_report_list_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsMsforeportlistBody body:
        :return: list[EfirDataHubModelsModelsReportCustomReportListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_custom_reports_msfo_report_list_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_custom_reports_msfo_report_list_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_custom_reports_msfo_report_list_post_with_http_info(self, **kwargs):  # noqa: E501
        """Метод для выгрузки пользовательских списков доступных отчетов по МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_msfo_report_list_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsMsforeportlistBody body:
        :return: list[EfirDataHubModelsModelsReportCustomReportListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_custom_reports_msfo_report_list_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/custom-reports/msfo-report-list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsReportCustomReportListFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_custom_reports_msfo_report_post(self, **kwargs):  # noqa: E501
        """Метод для выгрузки пользовательской отчётности формата МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_msfo_report_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsMsforeportBody body:
        :return: EfirDataHubModelsModelsReportCustomMsfoReportFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_custom_reports_msfo_report_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_custom_reports_msfo_report_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_custom_reports_msfo_report_post_with_http_info(self, **kwargs):  # noqa: E501
        """Метод для выгрузки пользовательской отчётности формата МСФО  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_msfo_report_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsMsforeportBody body:
        :return: EfirDataHubModelsModelsReportCustomMsfoReportFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_custom_reports_msfo_report_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/custom-reports/msfo-report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsReportCustomMsfoReportFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_custom_reports_rsbu_guid_delete(self, guid, **kwargs):  # noqa: E501
        """Метод для удаления пользовательской РСБУ отчётности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_rsbu_guid_delete(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: guid отчета (required)
        :return: EfirDataHubModelsModelsReportCustomReportDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_custom_reports_rsbu_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_custom_reports_rsbu_guid_delete_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def v2_custom_reports_rsbu_guid_delete_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Метод для удаления пользовательской РСБУ отчётности  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_rsbu_guid_delete_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: guid отчета (required)
        :return: EfirDataHubModelsModelsReportCustomReportDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_custom_reports_rsbu_guid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params or
                params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `v2_custom_reports_rsbu_guid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/custom-reports/rsbu/{guid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsReportCustomReportDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_custom_reports_rsbu_put(self, **kwargs):  # noqa: E501
        """Метод для загрузки пользовательской отчётности формата РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_rsbu_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsRsbuBody body:
        :return: EfirDataHubModelsModelsReportCustomReportUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_custom_reports_rsbu_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_custom_reports_rsbu_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_custom_reports_rsbu_put_with_http_info(self, **kwargs):  # noqa: E501
        """Метод для загрузки пользовательской отчётности формата РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_rsbu_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsRsbuBody body:
        :return: EfirDataHubModelsModelsReportCustomReportUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_custom_reports_rsbu_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/custom-reports/rsbu', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsReportCustomReportUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_custom_reports_rsbu_report_list_post(self, **kwargs):  # noqa: E501
        """Метод для выгрузки пользовательских списков доступных отчетов по РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_rsbu_report_list_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsRsbureportlistBody body:
        :return: list[EfirDataHubModelsModelsReportCustomReportListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_custom_reports_rsbu_report_list_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_custom_reports_rsbu_report_list_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_custom_reports_rsbu_report_list_post_with_http_info(self, **kwargs):  # noqa: E501
        """Метод для выгрузки пользовательских списков доступных отчетов по РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_rsbu_report_list_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsRsbureportlistBody body:
        :return: list[EfirDataHubModelsModelsReportCustomReportListFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_custom_reports_rsbu_report_list_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/custom-reports/rsbu-report-list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsReportCustomReportListFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_custom_reports_rsbu_report_post(self, **kwargs):  # noqa: E501
        """Метод для выгрузки пользовательской отчётности формата РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_rsbu_report_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsRsbureportBody body:
        :return: EfirDataHubModelsModelsReportCustomRsbuReportFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_custom_reports_rsbu_report_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_custom_reports_rsbu_report_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_custom_reports_rsbu_report_post_with_http_info(self, **kwargs):  # noqa: E501
        """Метод для выгрузки пользовательской отчётности формата РСБУ  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_rsbu_report_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsRsbureportBody body:
        :return: EfirDataHubModelsModelsReportCustomRsbuReportFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_custom_reports_rsbu_report_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/custom-reports/rsbu-report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsReportCustomRsbuReportFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_custom_reports_scoring_calculate_put(self, **kwargs):  # noqa: E501
        """Добавляет запрос на расчет скоринга в очередь  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_scoring_calculate_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsScoringcalculateBody body:
        :return: EfirDataHubModelsModelsReportCustomScoringCalculateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_custom_reports_scoring_calculate_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_custom_reports_scoring_calculate_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_custom_reports_scoring_calculate_put_with_http_info(self, **kwargs):  # noqa: E501
        """Добавляет запрос на расчет скоринга в очередь  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_scoring_calculate_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsScoringcalculateBody body:
        :return: EfirDataHubModelsModelsReportCustomScoringCalculateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_custom_reports_scoring_calculate_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/custom-reports/scoring-calculate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EfirDataHubModelsModelsReportCustomScoringCalculateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_custom_reports_scoring_ext_post(self, **kwargs):  # noqa: E501
        """Метод для запроса расширенного скоринга по пользовательской отчётности.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_scoring_ext_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsScoringextBody body:
        :return: list[EfirDataHubModelsModelsCustomScoringCustomScoringExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_custom_reports_scoring_ext_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_custom_reports_scoring_ext_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_custom_reports_scoring_ext_post_with_http_info(self, **kwargs):  # noqa: E501
        """Метод для запроса расширенного скоринга по пользовательской отчётности.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_scoring_ext_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsScoringextBody body:
        :return: list[EfirDataHubModelsModelsCustomScoringCustomScoringExtFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_custom_reports_scoring_ext_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/custom-reports/scoring-ext', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsCustomScoringCustomScoringExtFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_custom_reports_scoring_post(self, **kwargs):  # noqa: E501
        """Метод для запроса скоринга по пользовательской отчётности.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_scoring_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsScoringBody body:
        :return: list[EfirDataHubModelsModelsCustomScoringCustomScoringFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_custom_reports_scoring_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_custom_reports_scoring_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_custom_reports_scoring_post_with_http_info(self, **kwargs):  # noqa: E501
        """Метод для запроса скоринга по пользовательской отчётности.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_custom_reports_scoring_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomreportsScoringBody body:
        :return: list[EfirDataHubModelsModelsCustomScoringCustomScoringFields]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_custom_reports_scoring_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v2/custom-reports/scoring', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EfirDataHubModelsModelsCustomScoringCustomScoringFields]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
