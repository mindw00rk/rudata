# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dt': 'datetime',
        'fintoolid': 'int',
        'range_id': 'int',
        'begin_range': 'int',
        'end_range': 'int',
        'risk_fall_rate': 'float',
        'risk_grow_rate': 'float',
        'lower_bound': 'float',
        'central_rate': 'float',
        'upper_bound': 'float',
        'penalty_asset': 'float',
        'penalty_rub': 'float',
        'to_ensuring': 'bool',
        'ban_short_sale': 'bool',
        'fix_date': 'datetime',
        'assetid2': 'str',
        'discount': 'float',
        'repodiscount': 'float',
        'rcl': 'float',
        'rch': 'float',
        'limit': 'float',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'dt': 'dt',
        'fintoolid': 'fintoolid',
        'range_id': 'range_id',
        'begin_range': 'begin_range',
        'end_range': 'end_range',
        'risk_fall_rate': 'risk_fall_rate',
        'risk_grow_rate': 'risk_grow_rate',
        'lower_bound': 'lower_bound',
        'central_rate': 'central_rate',
        'upper_bound': 'upper_bound',
        'penalty_asset': 'penalty_asset',
        'penalty_rub': 'penalty_rub',
        'to_ensuring': 'to_ensuring',
        'ban_short_sale': 'ban_short_sale',
        'fix_date': 'fix_date',
        'assetid2': 'assetid2',
        'discount': 'discount',
        'repodiscount': 'repodiscount',
        'rcl': 'rcl',
        'rch': 'rch',
        'limit': 'limit',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, dt=None, fintoolid=None, range_id=None, begin_range=None, end_range=None, risk_fall_rate=None, risk_grow_rate=None, lower_bound=None, central_rate=None, upper_bound=None, penalty_asset=None, penalty_rub=None, to_ensuring=None, ban_short_sale=None, fix_date=None, assetid2=None, discount=None, repodiscount=None, rcl=None, rch=None, limit=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields - a model defined in Swagger"""  # noqa: E501
        self._dt = None
        self._fintoolid = None
        self._range_id = None
        self._begin_range = None
        self._end_range = None
        self._risk_fall_rate = None
        self._risk_grow_rate = None
        self._lower_bound = None
        self._central_rate = None
        self._upper_bound = None
        self._penalty_asset = None
        self._penalty_rub = None
        self._to_ensuring = None
        self._ban_short_sale = None
        self._fix_date = None
        self._assetid2 = None
        self._discount = None
        self._repodiscount = None
        self._rcl = None
        self._rch = None
        self._limit = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if dt is not None:
            self.dt = dt
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if range_id is not None:
            self.range_id = range_id
        if begin_range is not None:
            self.begin_range = begin_range
        if end_range is not None:
            self.end_range = end_range
        if risk_fall_rate is not None:
            self.risk_fall_rate = risk_fall_rate
        if risk_grow_rate is not None:
            self.risk_grow_rate = risk_grow_rate
        if lower_bound is not None:
            self.lower_bound = lower_bound
        if central_rate is not None:
            self.central_rate = central_rate
        if upper_bound is not None:
            self.upper_bound = upper_bound
        if penalty_asset is not None:
            self.penalty_asset = penalty_asset
        if penalty_rub is not None:
            self.penalty_rub = penalty_rub
        if to_ensuring is not None:
            self.to_ensuring = to_ensuring
        if ban_short_sale is not None:
            self.ban_short_sale = ban_short_sale
        if fix_date is not None:
            self.fix_date = fix_date
        if assetid2 is not None:
            self.assetid2 = assetid2
        if discount is not None:
            self.discount = discount
        if repodiscount is not None:
            self.repodiscount = repodiscount
        if rcl is not None:
            self.rcl = rcl
        if rch is not None:
            self.rch = rch
        if limit is not None:
            self.limit = limit
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def dt(self):
        """Gets the dt of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Дата риска  # noqa: E501

        :return: The dt of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Дата риска  # noqa: E501

        :param dt: The dt of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        ID инструмента в базе Интерфакс  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        ID инструмента в базе Интерфакс  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def range_id(self):
        """Gets the range_id of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Диапазон  # noqa: E501

        :return: The range_id of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: int
        """
        return self._range_id

    @range_id.setter
    def range_id(self, range_id):
        """Sets the range_id of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Диапазон  # noqa: E501

        :param range_id: The range_id of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: int
        """

        self._range_id = range_id

    @property
    def begin_range(self):
        """Gets the begin_range of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Начало диапазона  # noqa: E501

        :return: The begin_range of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: int
        """
        return self._begin_range

    @begin_range.setter
    def begin_range(self, begin_range):
        """Sets the begin_range of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Начало диапазона  # noqa: E501

        :param begin_range: The begin_range of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: int
        """

        self._begin_range = begin_range

    @property
    def end_range(self):
        """Gets the end_range of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Конец диапазона  # noqa: E501

        :return: The end_range of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: int
        """
        return self._end_range

    @end_range.setter
    def end_range(self, end_range):
        """Sets the end_range of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Конец диапазона  # noqa: E501

        :param end_range: The end_range of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: int
        """

        self._end_range = end_range

    @property
    def risk_fall_rate(self):
        """Gets the risk_fall_rate of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Ставка риска падения цены  # noqa: E501

        :return: The risk_fall_rate of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._risk_fall_rate

    @risk_fall_rate.setter
    def risk_fall_rate(self, risk_fall_rate):
        """Sets the risk_fall_rate of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Ставка риска падения цены  # noqa: E501

        :param risk_fall_rate: The risk_fall_rate of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._risk_fall_rate = risk_fall_rate

    @property
    def risk_grow_rate(self):
        """Gets the risk_grow_rate of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Ставка риска роста цены  # noqa: E501

        :return: The risk_grow_rate of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._risk_grow_rate

    @risk_grow_rate.setter
    def risk_grow_rate(self, risk_grow_rate):
        """Sets the risk_grow_rate of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Ставка риска роста цены  # noqa: E501

        :param risk_grow_rate: The risk_grow_rate of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._risk_grow_rate = risk_grow_rate

    @property
    def lower_bound(self):
        """Gets the lower_bound of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Нижняя граница  # noqa: E501

        :return: The lower_bound of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._lower_bound

    @lower_bound.setter
    def lower_bound(self, lower_bound):
        """Sets the lower_bound of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Нижняя граница  # noqa: E501

        :param lower_bound: The lower_bound of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._lower_bound = lower_bound

    @property
    def central_rate(self):
        """Gets the central_rate of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Центральный курс, руб.  # noqa: E501

        :return: The central_rate of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._central_rate

    @central_rate.setter
    def central_rate(self, central_rate):
        """Sets the central_rate of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Центральный курс, руб.  # noqa: E501

        :param central_rate: The central_rate of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._central_rate = central_rate

    @property
    def upper_bound(self):
        """Gets the upper_bound of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Верхняя  граница  # noqa: E501

        :return: The upper_bound of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._upper_bound

    @upper_bound.setter
    def upper_bound(self, upper_bound):
        """Sets the upper_bound of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Верхняя  граница  # noqa: E501

        :param upper_bound: The upper_bound of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._upper_bound = upper_bound

    @property
    def penalty_asset(self):
        """Gets the penalty_asset of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Штрафная ставка за перенос обязательств по активу, %  # noqa: E501

        :return: The penalty_asset of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._penalty_asset

    @penalty_asset.setter
    def penalty_asset(self, penalty_asset):
        """Sets the penalty_asset of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Штрафная ставка за перенос обязательств по активу, %  # noqa: E501

        :param penalty_asset: The penalty_asset of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._penalty_asset = penalty_asset

    @property
    def penalty_rub(self):
        """Gets the penalty_rub of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Штрафная ставка за перенос обязательств по рублям, %  # noqa: E501

        :return: The penalty_rub of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._penalty_rub

    @penalty_rub.setter
    def penalty_rub(self, penalty_rub):
        """Sets the penalty_rub of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Штрафная ставка за перенос обязательств по рублям, %  # noqa: E501

        :param penalty_rub: The penalty_rub of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._penalty_rub = penalty_rub

    @property
    def to_ensuring(self):
        """Gets the to_ensuring of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Прием валюты/драг.металла в обеспечение  # noqa: E501

        :return: The to_ensuring of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: bool
        """
        return self._to_ensuring

    @to_ensuring.setter
    def to_ensuring(self, to_ensuring):
        """Sets the to_ensuring of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Прием валюты/драг.металла в обеспечение  # noqa: E501

        :param to_ensuring: The to_ensuring of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: bool
        """

        self._to_ensuring = to_ensuring

    @property
    def ban_short_sale(self):
        """Gets the ban_short_sale of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Запрет коротких продаж  # noqa: E501

        :return: The ban_short_sale of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: bool
        """
        return self._ban_short_sale

    @ban_short_sale.setter
    def ban_short_sale(self, ban_short_sale):
        """Sets the ban_short_sale of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Запрет коротких продаж  # noqa: E501

        :param ban_short_sale: The ban_short_sale of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: bool
        """

        self._ban_short_sale = ban_short_sale

    @property
    def fix_date(self):
        """Gets the fix_date of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Дата и время фиксации/ изменения параметров  # noqa: E501

        :return: The fix_date of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: datetime
        """
        return self._fix_date

    @fix_date.setter
    def fix_date(self, fix_date):
        """Sets the fix_date of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Дата и время фиксации/ изменения параметров  # noqa: E501

        :param fix_date: The fix_date of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: datetime
        """

        self._fix_date = fix_date

    @property
    def assetid2(self):
        """Gets the assetid2 of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Актив 2  # noqa: E501

        :return: The assetid2 of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: str
        """
        return self._assetid2

    @assetid2.setter
    def assetid2(self, assetid2):
        """Sets the assetid2 of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Актив 2  # noqa: E501

        :param assetid2: The assetid2 of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: str
        """

        self._assetid2 = assetid2

    @property
    def discount(self):
        """Gets the discount of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Начальное значение ставки процентного риска  # noqa: E501

        :return: The discount of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Начальное значение ставки процентного риска  # noqa: E501

        :param discount: The discount of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def repodiscount(self):
        """Gets the repodiscount of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Ставка РЕПО  # noqa: E501

        :return: The repodiscount of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._repodiscount

    @repodiscount.setter
    def repodiscount(self, repodiscount):
        """Sets the repodiscount of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Ставка РЕПО  # noqa: E501

        :param repodiscount: The repodiscount of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._repodiscount = repodiscount

    @property
    def rcl(self):
        """Gets the rcl of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Нижняя граница ценового коридора ценной бумаги  # noqa: E501

        :return: The rcl of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._rcl

    @rcl.setter
    def rcl(self, rcl):
        """Sets the rcl of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Нижняя граница ценового коридора ценной бумаги  # noqa: E501

        :param rcl: The rcl of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._rcl = rcl

    @property
    def rch(self):
        """Gets the rch of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Верхняя граница ценового коридора ценной бумаги  # noqa: E501

        :return: The rch of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._rch

    @rch.setter
    def rch(self, rch):
        """Sets the rch of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Верхняя граница ценового коридора ценной бумаги  # noqa: E501

        :param rch: The rch of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._rch = rch

    @property
    def limit(self):
        """Gets the limit of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Лимит ликвидности нетто-позиции.  # noqa: E501

        :return: The limit of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Лимит ликвидности нетто-позиции.  # noqa: E501

        :param limit: The limit of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMoexNccMarketRiskCurrencyFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
