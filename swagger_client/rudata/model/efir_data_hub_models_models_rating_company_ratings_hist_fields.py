# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRatingCompanyRatingsHistFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'hid': 'int',
        'rating_id': 'int',
        'agency': 'str',
        'rating': 'str',
        'last': 'str',
        'forecast': 'str',
        'change': 'str',
        'date_award': 'datetime',
        'fininstid': 'int'
    }

    attribute_map = {
        'id': 'id',
        'hid': 'hid',
        'rating_id': 'rating_id',
        'agency': 'agency',
        'rating': 'rating',
        'last': 'last',
        'forecast': 'forecast',
        'change': 'change',
        'date_award': 'date_award',
        'fininstid': 'fininstid'
    }

    def __init__(self, id=None, hid=None, rating_id=None, agency=None, rating=None, last=None, forecast=None, change=None, date_award=None, fininstid=None):  # noqa: E501
        """EfirDataHubModelsModelsRatingCompanyRatingsHistFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._hid = None
        self._rating_id = None
        self._agency = None
        self._rating = None
        self._last = None
        self._forecast = None
        self._change = None
        self._date_award = None
        self._fininstid = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if hid is not None:
            self.hid = hid
        if rating_id is not None:
            self.rating_id = rating_id
        if agency is not None:
            self.agency = agency
        if rating is not None:
            self.rating = rating
        if last is not None:
            self.last = last
        if forecast is not None:
            self.forecast = forecast
        if change is not None:
            self.change = change
        if date_award is not None:
            self.date_award = date_award
        if fininstid is not None:
            self.fininstid = fininstid

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501

        Идентификатор рейтинга  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.

        Идентификатор рейтинга  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def hid(self):
        """Gets the hid of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501

        Идентификатор рейтинга (устарел, надо использовать rating_id)  # noqa: E501

        :return: The hid of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :rtype: int
        """
        return self._hid

    @hid.setter
    def hid(self, hid):
        """Sets the hid of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.

        Идентификатор рейтинга (устарел, надо использовать rating_id)  # noqa: E501

        :param hid: The hid of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :type: int
        """

        self._hid = hid

    @property
    def rating_id(self):
        """Gets the rating_id of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501

        Идентификатор вида рейтинга  # noqa: E501

        :return: The rating_id of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :rtype: int
        """
        return self._rating_id

    @rating_id.setter
    def rating_id(self, rating_id):
        """Sets the rating_id of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.

        Идентификатор вида рейтинга  # noqa: E501

        :param rating_id: The rating_id of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :type: int
        """

        self._rating_id = rating_id

    @property
    def agency(self):
        """Gets the agency of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501

        Агентство  # noqa: E501

        :return: The agency of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :rtype: str
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.

        Агентство  # noqa: E501

        :param agency: The agency of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :type: str
        """

        self._agency = agency

    @property
    def rating(self):
        """Gets the rating of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501

        Символьный код рейтинга  # noqa: E501

        :return: The rating of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.

        Символьный код рейтинга  # noqa: E501

        :param rating: The rating of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :type: str
        """

        self._rating = rating

    @property
    def last(self):
        """Gets the last of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501

        Значение рейтинга  # noqa: E501

        :return: The last of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.

        Значение рейтинга  # noqa: E501

        :param last: The last of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :type: str
        """

        self._last = last

    @property
    def forecast(self):
        """Gets the forecast of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501

        Прогноз рейтинга  # noqa: E501

        :return: The forecast of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :rtype: str
        """
        return self._forecast

    @forecast.setter
    def forecast(self, forecast):
        """Sets the forecast of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.

        Прогноз рейтинга  # noqa: E501

        :param forecast: The forecast of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :type: str
        """

        self._forecast = forecast

    @property
    def change(self):
        """Gets the change of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501

        Изменение рейтинга  # noqa: E501

        :return: The change of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :rtype: str
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.

        Изменение рейтинга  # noqa: E501

        :param change: The change of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :type: str
        """

        self._change = change

    @property
    def date_award(self):
        """Gets the date_award of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501

        Дата рейтингового действия  # noqa: E501

        :return: The date_award of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :rtype: datetime
        """
        return self._date_award

    @date_award.setter
    def date_award(self, date_award):
        """Sets the date_award of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.

        Дата рейтингового действия  # noqa: E501

        :param date_award: The date_award of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :type: datetime
        """

        self._date_award = date_award

    @property
    def fininstid(self):
        """Gets the fininstid of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501

        Идентификатор компании в базе Интерфакс  # noqa: E501

        :return: The fininstid of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid

    @fininstid.setter
    def fininstid(self, fininstid):
        """Sets the fininstid of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.

        Идентификатор компании в базе Интерфакс  # noqa: E501

        :param fininstid: The fininstid of this EfirDataHubModelsModelsRatingCompanyRatingsHistFields.  # noqa: E501
        :type: int
        """

        self._fininstid = fininstid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRatingCompanyRatingsHistFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRatingCompanyRatingsHistFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
