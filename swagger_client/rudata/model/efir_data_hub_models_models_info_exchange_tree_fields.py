# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsInfoExchangeTreeFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'id_parent': 'int',
        'shortname_rus': 'str',
        'shortname_eng': 'str',
        'fullname_rus': 'str',
        'fullname_eng': 'str',
        'sort_order': 'int',
        'update_date': 'datetime',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'id': 'id',
        'id_parent': 'id_parent',
        'shortname_rus': 'shortname_rus',
        'shortname_eng': 'shortname_eng',
        'fullname_rus': 'fullname_rus',
        'fullname_eng': 'fullname_eng',
        'sort_order': 'sort_order',
        'update_date': 'update_date',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, id=None, id_parent=None, shortname_rus=None, shortname_eng=None, fullname_rus=None, fullname_eng=None, sort_order=None, update_date=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsInfoExchangeTreeFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_parent = None
        self._shortname_rus = None
        self._shortname_eng = None
        self._fullname_rus = None
        self._fullname_eng = None
        self._sort_order = None
        self._update_date = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_parent is not None:
            self.id_parent = id_parent
        if shortname_rus is not None:
            self.shortname_rus = shortname_rus
        if shortname_eng is not None:
            self.shortname_eng = shortname_eng
        if fullname_rus is not None:
            self.fullname_rus = fullname_rus
        if fullname_eng is not None:
            self.fullname_eng = fullname_eng
        if sort_order is not None:
            self.sort_order = sort_order
        if update_date is not None:
            self.update_date = update_date
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501

        Идентификатор площадки в базе Интерфакс  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsInfoExchangeTreeFields.

        Идентификатор площадки в базе Интерфакс  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def id_parent(self):
        """Gets the id_parent of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501

        Идентификатор родительской площадки в базе Интерфакс  # noqa: E501

        :return: The id_parent of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :rtype: int
        """
        return self._id_parent

    @id_parent.setter
    def id_parent(self, id_parent):
        """Sets the id_parent of this EfirDataHubModelsModelsInfoExchangeTreeFields.

        Идентификатор родительской площадки в базе Интерфакс  # noqa: E501

        :param id_parent: The id_parent of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :type: int
        """

        self._id_parent = id_parent

    @property
    def shortname_rus(self):
        """Gets the shortname_rus of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501

        Краткое наименование площадки (рус.)  # noqa: E501

        :return: The shortname_rus of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_rus

    @shortname_rus.setter
    def shortname_rus(self, shortname_rus):
        """Sets the shortname_rus of this EfirDataHubModelsModelsInfoExchangeTreeFields.

        Краткое наименование площадки (рус.)  # noqa: E501

        :param shortname_rus: The shortname_rus of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :type: str
        """

        self._shortname_rus = shortname_rus

    @property
    def shortname_eng(self):
        """Gets the shortname_eng of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501

        Краткое наименование площадки (англ.)  # noqa: E501

        :return: The shortname_eng of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_eng

    @shortname_eng.setter
    def shortname_eng(self, shortname_eng):
        """Sets the shortname_eng of this EfirDataHubModelsModelsInfoExchangeTreeFields.

        Краткое наименование площадки (англ.)  # noqa: E501

        :param shortname_eng: The shortname_eng of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :type: str
        """

        self._shortname_eng = shortname_eng

    @property
    def fullname_rus(self):
        """Gets the fullname_rus of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501

        Полное наименование площадки(рус.)  # noqa: E501

        :return: The fullname_rus of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_rus

    @fullname_rus.setter
    def fullname_rus(self, fullname_rus):
        """Sets the fullname_rus of this EfirDataHubModelsModelsInfoExchangeTreeFields.

        Полное наименование площадки(рус.)  # noqa: E501

        :param fullname_rus: The fullname_rus of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :type: str
        """

        self._fullname_rus = fullname_rus

    @property
    def fullname_eng(self):
        """Gets the fullname_eng of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501

        Полное наименование площадки(англ.)  # noqa: E501

        :return: The fullname_eng of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_eng

    @fullname_eng.setter
    def fullname_eng(self, fullname_eng):
        """Sets the fullname_eng of this EfirDataHubModelsModelsInfoExchangeTreeFields.

        Полное наименование площадки(англ.)  # noqa: E501

        :param fullname_eng: The fullname_eng of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :type: str
        """

        self._fullname_eng = fullname_eng

    @property
    def sort_order(self):
        """Gets the sort_order of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501

        Порядковый номер в иерархии  # noqa: E501

        :return: The sort_order of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this EfirDataHubModelsModelsInfoExchangeTreeFields.

        Порядковый номер в иерархии  # noqa: E501

        :param sort_order: The sort_order of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501

        Дата обновления  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsInfoExchangeTreeFields.

        Дата обновления  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsInfoExchangeTreeFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsInfoExchangeTreeFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsInfoExchangeTreeFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsInfoExchangeTreeFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsInfoExchangeTreeFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
