# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRUPriceHistoryFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nickname': 'str',
        'fintoolid': 'int',
        'fininstid': 'int',
        'isincode': 'str',
        'regcode': 'str',
        'nrdcode': 'str',
        'calcdate': 'str',
        'val_date': 'datetime',
        'current_fv': 'float',
        'faceftname': 'str',
        'date_agg': 'datetime',
        'avge_prce': 'float',
        'yield_agg': 'float',
        'z_wa_mb': 'float',
        'durmod_agg': 'float',
        'i_wa_mb': 'float',
        'method_no': 'float',
        'vp_pct': 'float',
        'vp_pc': 'float',
        'vp_pc_l': 'float',
        'vp_pc_h': 'float',
        'vp_m1': 'float',
        'y_agg_m1': 'float',
        'deal_250d': 'float',
        'q_m1': 'float',
        'r_m1': 'float',
        'vp_m2': 'float',
        'y_agg_m2': 'float',
        'i_vp_m2': 'float',
        'sigma_m2': 'float',
        'index': 'str',
        'beta1_m2': 'float',
        'beta0_m2': 'float',
        'alpha_m2': 'float',
        'gamma_m2': 'float',
        'sigma_nu': 'float',
        'rho_m2': 'float',
        'r_m2': 'float',
        'vp_m3': 'float',
        'y_agg_m3': 'float',
        'dur_agg_m3': 'float',
        'z_vp_m3': 'float',
        'r_m3': 'float',
        'factor1': 'float',
        'beta1_m3': 'float',
        'factor2': 'float',
        'beta2_m3': 'float',
        'level_pd': 'float',
        'coef_b': 'float',
        'risk_b': 'float',
        'beta3_m3': 'float',
        'is_ontherun': 'float',
        'beta4_m3': 'float',
        'hhi': 'float',
        'beta5_m3': 'float',
        'ind_liq': 'float',
        'beta6_m3': 'float',
        'ind_unliq': 'float',
        'beta7_m3': 'float',
        'sector': 'str',
        'phi_sector': 'float',
        'version': 'AllOfEfirDataHubModelsModelsRUPriceHistoryFieldsVersion',
        'valuation_currency': 'str',
        'security_type': 'str',
        'source': 'AllOfEfirDataHubModelsModelsRUPriceHistoryFieldsSource',
        'wa_duration': 'float',
        'duration_mod': 'float',
        'lbound1': 'float',
        'ubound1': 'float',
        'lbound2': 'float',
        'ubound2': 'float',
        'lbound3': 'float',
        'ubound3': 'float',
        'acc_int': 'float',
        'wap_ext_zspread': 'float',
        'mp3_ext_zspread': 'float',
        'id': 'str',
        'no_history_found': 'float',
        'not_valid_code': 'float',
        'calc_date_time': 'datetime',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'nickname': 'nickname',
        'fintoolid': 'fintoolid',
        'fininstid': 'fininstid',
        'isincode': 'isincode',
        'regcode': 'regcode',
        'nrdcode': 'nrdcode',
        'calcdate': 'calcdate',
        'val_date': 'val_date',
        'current_fv': 'current_fv',
        'faceftname': 'faceftname',
        'date_agg': 'date_agg',
        'avge_prce': 'avge_prce',
        'yield_agg': 'yield_agg',
        'z_wa_mb': 'z_wa_mb',
        'durmod_agg': 'durmod_agg',
        'i_wa_mb': 'i_wa_mb',
        'method_no': 'method_no',
        'vp_pct': 'vp_pct',
        'vp_pc': 'vp_pc',
        'vp_pc_l': 'vp_pc_l',
        'vp_pc_h': 'vp_pc_h',
        'vp_m1': 'vp_m1',
        'y_agg_m1': 'y_agg_m1',
        'deal_250d': 'deal_250d',
        'q_m1': 'q_m1',
        'r_m1': 'r_m1',
        'vp_m2': 'vp_m2',
        'y_agg_m2': 'y_agg_m2',
        'i_vp_m2': 'i_vp_m2',
        'sigma_m2': 'sigma_m2',
        'index': 'index',
        'beta1_m2': 'beta1_m2',
        'beta0_m2': 'beta0_m2',
        'alpha_m2': 'alpha_m2',
        'gamma_m2': 'gamma_m2',
        'sigma_nu': 'sigma_nu',
        'rho_m2': 'rho_m2',
        'r_m2': 'r_m2',
        'vp_m3': 'vp_m3',
        'y_agg_m3': 'y_agg_m3',
        'dur_agg_m3': 'dur_agg_m3',
        'z_vp_m3': 'z_vp_m3',
        'r_m3': 'r_m3',
        'factor1': 'factor1',
        'beta1_m3': 'beta1_m3',
        'factor2': 'factor2',
        'beta2_m3': 'beta2_m3',
        'level_pd': 'level_pd',
        'coef_b': 'coef_b',
        'risk_b': 'risk_b',
        'beta3_m3': 'beta3_m3',
        'is_ontherun': 'is_ontherun',
        'beta4_m3': 'beta4_m3',
        'hhi': 'hhi',
        'beta5_m3': 'beta5_m3',
        'ind_liq': 'ind_liq',
        'beta6_m3': 'beta6_m3',
        'ind_unliq': 'ind_unliq',
        'beta7_m3': 'beta7_m3',
        'sector': 'sector',
        'phi_sector': 'phi_sector',
        'version': 'version',
        'valuation_currency': 'valuation_currency',
        'security_type': 'security_type',
        'source': 'source',
        'wa_duration': 'wa_duration',
        'duration_mod': 'duration_mod',
        'lbound1': 'lbound1',
        'ubound1': 'ubound1',
        'lbound2': 'lbound2',
        'ubound2': 'ubound2',
        'lbound3': 'lbound3',
        'ubound3': 'ubound3',
        'acc_int': 'acc_int',
        'wap_ext_zspread': 'wap_ext_zspread',
        'mp3_ext_zspread': 'mp3_ext_zspread',
        'id': 'id',
        'no_history_found': 'no_history_found',
        'not_valid_code': 'not_valid_code',
        'calc_date_time': 'calcDateTime',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, nickname=None, fintoolid=None, fininstid=None, isincode=None, regcode=None, nrdcode=None, calcdate=None, val_date=None, current_fv=None, faceftname=None, date_agg=None, avge_prce=None, yield_agg=None, z_wa_mb=None, durmod_agg=None, i_wa_mb=None, method_no=None, vp_pct=None, vp_pc=None, vp_pc_l=None, vp_pc_h=None, vp_m1=None, y_agg_m1=None, deal_250d=None, q_m1=None, r_m1=None, vp_m2=None, y_agg_m2=None, i_vp_m2=None, sigma_m2=None, index=None, beta1_m2=None, beta0_m2=None, alpha_m2=None, gamma_m2=None, sigma_nu=None, rho_m2=None, r_m2=None, vp_m3=None, y_agg_m3=None, dur_agg_m3=None, z_vp_m3=None, r_m3=None, factor1=None, beta1_m3=None, factor2=None, beta2_m3=None, level_pd=None, coef_b=None, risk_b=None, beta3_m3=None, is_ontherun=None, beta4_m3=None, hhi=None, beta5_m3=None, ind_liq=None, beta6_m3=None, ind_unliq=None, beta7_m3=None, sector=None, phi_sector=None, version=None, valuation_currency=None, security_type=None, source=None, wa_duration=None, duration_mod=None, lbound1=None, ubound1=None, lbound2=None, ubound2=None, lbound3=None, ubound3=None, acc_int=None, wap_ext_zspread=None, mp3_ext_zspread=None, id=None, no_history_found=None, not_valid_code=None, calc_date_time=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsRUPriceHistoryFields - a model defined in Swagger"""  # noqa: E501
        self._nickname = None
        self._fintoolid = None
        self._fininstid = None
        self._isincode = None
        self._regcode = None
        self._nrdcode = None
        self._calcdate = None
        self._val_date = None
        self._current_fv = None
        self._faceftname = None
        self._date_agg = None
        self._avge_prce = None
        self._yield_agg = None
        self._z_wa_mb = None
        self._durmod_agg = None
        self._i_wa_mb = None
        self._method_no = None
        self._vp_pct = None
        self._vp_pc = None
        self._vp_pc_l = None
        self._vp_pc_h = None
        self._vp_m1 = None
        self._y_agg_m1 = None
        self._deal_250d = None
        self._q_m1 = None
        self._r_m1 = None
        self._vp_m2 = None
        self._y_agg_m2 = None
        self._i_vp_m2 = None
        self._sigma_m2 = None
        self._index = None
        self._beta1_m2 = None
        self._beta0_m2 = None
        self._alpha_m2 = None
        self._gamma_m2 = None
        self._sigma_nu = None
        self._rho_m2 = None
        self._r_m2 = None
        self._vp_m3 = None
        self._y_agg_m3 = None
        self._dur_agg_m3 = None
        self._z_vp_m3 = None
        self._r_m3 = None
        self._factor1 = None
        self._beta1_m3 = None
        self._factor2 = None
        self._beta2_m3 = None
        self._level_pd = None
        self._coef_b = None
        self._risk_b = None
        self._beta3_m3 = None
        self._is_ontherun = None
        self._beta4_m3 = None
        self._hhi = None
        self._beta5_m3 = None
        self._ind_liq = None
        self._beta6_m3 = None
        self._ind_unliq = None
        self._beta7_m3 = None
        self._sector = None
        self._phi_sector = None
        self._version = None
        self._valuation_currency = None
        self._security_type = None
        self._source = None
        self._wa_duration = None
        self._duration_mod = None
        self._lbound1 = None
        self._ubound1 = None
        self._lbound2 = None
        self._ubound2 = None
        self._lbound3 = None
        self._ubound3 = None
        self._acc_int = None
        self._wap_ext_zspread = None
        self._mp3_ext_zspread = None
        self._id = None
        self._no_history_found = None
        self._not_valid_code = None
        self._calc_date_time = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if nickname is not None:
            self.nickname = nickname
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if fininstid is not None:
            self.fininstid = fininstid
        if isincode is not None:
            self.isincode = isincode
        if regcode is not None:
            self.regcode = regcode
        if nrdcode is not None:
            self.nrdcode = nrdcode
        if calcdate is not None:
            self.calcdate = calcdate
        if val_date is not None:
            self.val_date = val_date
        if current_fv is not None:
            self.current_fv = current_fv
        if faceftname is not None:
            self.faceftname = faceftname
        if date_agg is not None:
            self.date_agg = date_agg
        if avge_prce is not None:
            self.avge_prce = avge_prce
        if yield_agg is not None:
            self.yield_agg = yield_agg
        if z_wa_mb is not None:
            self.z_wa_mb = z_wa_mb
        if durmod_agg is not None:
            self.durmod_agg = durmod_agg
        if i_wa_mb is not None:
            self.i_wa_mb = i_wa_mb
        if method_no is not None:
            self.method_no = method_no
        if vp_pct is not None:
            self.vp_pct = vp_pct
        if vp_pc is not None:
            self.vp_pc = vp_pc
        if vp_pc_l is not None:
            self.vp_pc_l = vp_pc_l
        if vp_pc_h is not None:
            self.vp_pc_h = vp_pc_h
        if vp_m1 is not None:
            self.vp_m1 = vp_m1
        if y_agg_m1 is not None:
            self.y_agg_m1 = y_agg_m1
        if deal_250d is not None:
            self.deal_250d = deal_250d
        if q_m1 is not None:
            self.q_m1 = q_m1
        if r_m1 is not None:
            self.r_m1 = r_m1
        if vp_m2 is not None:
            self.vp_m2 = vp_m2
        if y_agg_m2 is not None:
            self.y_agg_m2 = y_agg_m2
        if i_vp_m2 is not None:
            self.i_vp_m2 = i_vp_m2
        if sigma_m2 is not None:
            self.sigma_m2 = sigma_m2
        if index is not None:
            self.index = index
        if beta1_m2 is not None:
            self.beta1_m2 = beta1_m2
        if beta0_m2 is not None:
            self.beta0_m2 = beta0_m2
        if alpha_m2 is not None:
            self.alpha_m2 = alpha_m2
        if gamma_m2 is not None:
            self.gamma_m2 = gamma_m2
        if sigma_nu is not None:
            self.sigma_nu = sigma_nu
        if rho_m2 is not None:
            self.rho_m2 = rho_m2
        if r_m2 is not None:
            self.r_m2 = r_m2
        if vp_m3 is not None:
            self.vp_m3 = vp_m3
        if y_agg_m3 is not None:
            self.y_agg_m3 = y_agg_m3
        if dur_agg_m3 is not None:
            self.dur_agg_m3 = dur_agg_m3
        if z_vp_m3 is not None:
            self.z_vp_m3 = z_vp_m3
        if r_m3 is not None:
            self.r_m3 = r_m3
        if factor1 is not None:
            self.factor1 = factor1
        if beta1_m3 is not None:
            self.beta1_m3 = beta1_m3
        if factor2 is not None:
            self.factor2 = factor2
        if beta2_m3 is not None:
            self.beta2_m3 = beta2_m3
        if level_pd is not None:
            self.level_pd = level_pd
        if coef_b is not None:
            self.coef_b = coef_b
        if risk_b is not None:
            self.risk_b = risk_b
        if beta3_m3 is not None:
            self.beta3_m3 = beta3_m3
        if is_ontherun is not None:
            self.is_ontherun = is_ontherun
        if beta4_m3 is not None:
            self.beta4_m3 = beta4_m3
        if hhi is not None:
            self.hhi = hhi
        if beta5_m3 is not None:
            self.beta5_m3 = beta5_m3
        if ind_liq is not None:
            self.ind_liq = ind_liq
        if beta6_m3 is not None:
            self.beta6_m3 = beta6_m3
        if ind_unliq is not None:
            self.ind_unliq = ind_unliq
        if beta7_m3 is not None:
            self.beta7_m3 = beta7_m3
        if sector is not None:
            self.sector = sector
        if phi_sector is not None:
            self.phi_sector = phi_sector
        if version is not None:
            self.version = version
        if valuation_currency is not None:
            self.valuation_currency = valuation_currency
        if security_type is not None:
            self.security_type = security_type
        if source is not None:
            self.source = source
        if wa_duration is not None:
            self.wa_duration = wa_duration
        if duration_mod is not None:
            self.duration_mod = duration_mod
        if lbound1 is not None:
            self.lbound1 = lbound1
        if ubound1 is not None:
            self.ubound1 = ubound1
        if lbound2 is not None:
            self.lbound2 = lbound2
        if ubound2 is not None:
            self.ubound2 = ubound2
        if lbound3 is not None:
            self.lbound3 = lbound3
        if ubound3 is not None:
            self.ubound3 = ubound3
        if acc_int is not None:
            self.acc_int = acc_int
        if wap_ext_zspread is not None:
            self.wap_ext_zspread = wap_ext_zspread
        if mp3_ext_zspread is not None:
            self.mp3_ext_zspread = mp3_ext_zspread
        if id is not None:
            self.id = id
        if no_history_found is not None:
            self.no_history_found = no_history_found
        if not_valid_code is not None:
            self.not_valid_code = not_valid_code
        if calc_date_time is not None:
            self.calc_date_time = calc_date_time
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def nickname(self):
        """Gets the nickname of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Код НРД  # noqa: E501

        :return: The nickname of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Код НРД  # noqa: E501

        :param nickname: The nickname of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Уникальный идентификатор инструмента  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Уникальный идентификатор инструмента  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def fininstid(self):
        """Gets the fininstid of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Уникальный идентификатор эмитента  # noqa: E501

        :return: The fininstid of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid

    @fininstid.setter
    def fininstid(self, fininstid):
        """Sets the fininstid of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Уникальный идентификатор эмитента  # noqa: E501

        :param fininstid: The fininstid of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: int
        """

        self._fininstid = fininstid

    @property
    def isincode(self):
        """Gets the isincode of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        ISIN-код выпуска облигаций  # noqa: E501

        :return: The isincode of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._isincode

    @isincode.setter
    def isincode(self, isincode):
        """Sets the isincode of this EfirDataHubModelsModelsRUPriceHistoryFields.

        ISIN-код выпуска облигаций  # noqa: E501

        :param isincode: The isincode of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: str
        """

        self._isincode = isincode

    @property
    def regcode(self):
        """Gets the regcode of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Регистрационный номер выпуска облигаций  # noqa: E501

        :return: The regcode of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._regcode

    @regcode.setter
    def regcode(self, regcode):
        """Sets the regcode of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Регистрационный номер выпуска облигаций  # noqa: E501

        :param regcode: The regcode of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: str
        """

        self._regcode = regcode

    @property
    def nrdcode(self):
        """Gets the nrdcode of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Депозитарный код НРД  # noqa: E501

        :return: The nrdcode of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._nrdcode

    @nrdcode.setter
    def nrdcode(self, nrdcode):
        """Sets the nrdcode of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Депозитарный код НРД  # noqa: E501

        :param nrdcode: The nrdcode of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: str
        """

        self._nrdcode = nrdcode

    @property
    def calcdate(self):
        """Gets the calcdate of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Дата оценки  # noqa: E501

        :return: The calcdate of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._calcdate

    @calcdate.setter
    def calcdate(self, calcdate):
        """Sets the calcdate of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Дата оценки  # noqa: E501

        :param calcdate: The calcdate of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: str
        """

        self._calcdate = calcdate

    @property
    def val_date(self):
        """Gets the val_date of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Последняя дата, на которую проводилась оценка инструмента  # noqa: E501

        :return: The val_date of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: datetime
        """
        return self._val_date

    @val_date.setter
    def val_date(self, val_date):
        """Sets the val_date of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Последняя дата, на которую проводилась оценка инструмента  # noqa: E501

        :param val_date: The val_date of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: datetime
        """

        self._val_date = val_date

    @property
    def current_fv(self):
        """Gets the current_fv of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Текущий номинал облигации на датe оценки в валюте номинала  # noqa: E501

        :return: The current_fv of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._current_fv

    @current_fv.setter
    def current_fv(self, current_fv):
        """Sets the current_fv of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Текущий номинал облигации на датe оценки в валюте номинала  # noqa: E501

        :param current_fv: The current_fv of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._current_fv = current_fv

    @property
    def faceftname(self):
        """Gets the faceftname of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Код (alpha-3) валюты номинала облигации  # noqa: E501

        :return: The faceftname of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._faceftname

    @faceftname.setter
    def faceftname(self, faceftname):
        """Sets the faceftname of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Код (alpha-3) валюты номинала облигации  # noqa: E501

        :param faceftname: The faceftname of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: str
        """

        self._faceftname = faceftname

    @property
    def date_agg(self):
        """Gets the date_agg of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Дата (возможного) погашения - по ближайшей оферте, а если нет активной оферты, то по погашению  # noqa: E501

        :return: The date_agg of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: datetime
        """
        return self._date_agg

    @date_agg.setter
    def date_agg(self, date_agg):
        """Sets the date_agg of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Дата (возможного) погашения - по ближайшей оферте, а если нет активной оферты, то по погашению  # noqa: E501

        :param date_agg: The date_agg of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: datetime
        """

        self._date_agg = date_agg

    @property
    def avge_prce(self):
        """Gets the avge_prce of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Средневзвешенная (по объему) цена по основной площадке на дату оценки  # noqa: E501

        :return: The avge_prce of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._avge_prce

    @avge_prce.setter
    def avge_prce(self, avge_prce):
        """Sets the avge_prce of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Средневзвешенная (по объему) цена по основной площадке на дату оценки  # noqa: E501

        :param avge_prce: The avge_prce of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._avge_prce = avge_prce

    @property
    def yield_agg(self):
        """Gets the yield_agg of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Доходность облигации по средневзвешенной цене  # noqa: E501

        :return: The yield_agg of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_agg

    @yield_agg.setter
    def yield_agg(self, yield_agg):
        """Sets the yield_agg of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Доходность облигации по средневзвешенной цене  # noqa: E501

        :param yield_agg: The yield_agg of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._yield_agg = yield_agg

    @property
    def z_wa_mb(self):
        """Gets the z_wa_mb of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Z-спред по средневзвешенной цене текущего торгового дня к безрисковой кривой Мосбиржи  # noqa: E501

        :return: The z_wa_mb of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._z_wa_mb

    @z_wa_mb.setter
    def z_wa_mb(self, z_wa_mb):
        """Sets the z_wa_mb of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Z-спред по средневзвешенной цене текущего торгового дня к безрисковой кривой Мосбиржи  # noqa: E501

        :param z_wa_mb: The z_wa_mb of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._z_wa_mb = z_wa_mb

    @property
    def durmod_agg(self):
        """Gets the durmod_agg of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Модифицированная дюрация (лет), рассчитанная по Yield_agg  # noqa: E501

        :return: The durmod_agg of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._durmod_agg

    @durmod_agg.setter
    def durmod_agg(self, durmod_agg):
        """Sets the durmod_agg of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Модифицированная дюрация (лет), рассчитанная по Yield_agg  # noqa: E501

        :param durmod_agg: The durmod_agg of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._durmod_agg = durmod_agg

    @property
    def i_wa_mb(self):
        """Gets the i_wa_mb of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        I-спред (разность доходности и g-кривой в точке дюрации) по средневзвешенной цене к безрисковой кривой Мосбиржи  # noqa: E501

        :return: The i_wa_mb of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._i_wa_mb

    @i_wa_mb.setter
    def i_wa_mb(self, i_wa_mb):
        """Sets the i_wa_mb of this EfirDataHubModelsModelsRUPriceHistoryFields.

        I-спред (разность доходности и g-кривой в точке дюрации) по средневзвешенной цене к безрисковой кривой Мосбиржи  # noqa: E501

        :param i_wa_mb: The i_wa_mb of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._i_wa_mb = i_wa_mb

    @property
    def method_no(self):
        """Gets the method_no of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Номер метода, выбранный для определения справедливой стоимости облигации  # noqa: E501

        :return: The method_no of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._method_no

    @method_no.setter
    def method_no(self, method_no):
        """Sets the method_no of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Номер метода, выбранный для определения справедливой стоимости облигации  # noqa: E501

        :param method_no: The method_no of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._method_no = method_no

    @property
    def vp_pct(self):
        """Gets the vp_pct of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Справедливая стоимость облигации (в % от номинала) на дату расчета  # noqa: E501

        :return: The vp_pct of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._vp_pct

    @vp_pct.setter
    def vp_pct(self, vp_pct):
        """Sets the vp_pct of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Справедливая стоимость облигации (в % от номинала) на дату расчета  # noqa: E501

        :param vp_pct: The vp_pct of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._vp_pct = vp_pct

    @property
    def vp_pc(self):
        """Gets the vp_pc of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Справедливая стоимость облигации (в валюте номинала) на дату расчета  # noqa: E501

        :return: The vp_pc of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._vp_pc

    @vp_pc.setter
    def vp_pc(self, vp_pc):
        """Sets the vp_pc of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Справедливая стоимость облигации (в валюте номинала) на дату расчета  # noqa: E501

        :param vp_pc: The vp_pc of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._vp_pc = vp_pc

    @property
    def vp_pc_l(self):
        """Gets the vp_pc_l of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Нижняя граница доверительного интервала допустимых значений цены (уровень доверия 95%)  # noqa: E501

        :return: The vp_pc_l of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._vp_pc_l

    @vp_pc_l.setter
    def vp_pc_l(self, vp_pc_l):
        """Sets the vp_pc_l of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Нижняя граница доверительного интервала допустимых значений цены (уровень доверия 95%)  # noqa: E501

        :param vp_pc_l: The vp_pc_l of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._vp_pc_l = vp_pc_l

    @property
    def vp_pc_h(self):
        """Gets the vp_pc_h of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Верхняя граница доверительного интервала допустимых значений цены (уровень доверия 95%)  # noqa: E501

        :return: The vp_pc_h of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._vp_pc_h

    @vp_pc_h.setter
    def vp_pc_h(self, vp_pc_h):
        """Sets the vp_pc_h of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Верхняя граница доверительного интервала допустимых значений цены (уровень доверия 95%)  # noqa: E501

        :param vp_pc_h: The vp_pc_h of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._vp_pc_h = vp_pc_h

    @property
    def vp_m1(self):
        """Gets the vp_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Справедливая стоимость облигации (в % от номинала), рассчитанная 1-м методом (фактических цен)  # noqa: E501

        :return: The vp_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._vp_m1

    @vp_m1.setter
    def vp_m1(self, vp_m1):
        """Sets the vp_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Справедливая стоимость облигации (в % от номинала), рассчитанная 1-м методом (фактических цен)  # noqa: E501

        :param vp_m1: The vp_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._vp_m1 = vp_m1

    @property
    def y_agg_m1(self):
        """Gets the y_agg_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Оценка доходности облигации, основанная на методе №1  # noqa: E501

        :return: The y_agg_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._y_agg_m1

    @y_agg_m1.setter
    def y_agg_m1(self, y_agg_m1):
        """Sets the y_agg_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Оценка доходности облигации, основанная на методе №1  # noqa: E501

        :param y_agg_m1: The y_agg_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._y_agg_m1 = y_agg_m1

    @property
    def deal_250d(self):
        """Gets the deal_250d of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Количество биржевых сделок с облигацией за последние 250 торговых дней  # noqa: E501

        :return: The deal_250d of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._deal_250d

    @deal_250d.setter
    def deal_250d(self, deal_250d):
        """Sets the deal_250d of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Количество биржевых сделок с облигацией за последние 250 торговых дней  # noqa: E501

        :param deal_250d: The deal_250d of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._deal_250d = deal_250d

    @property
    def q_m1(self):
        """Gets the q_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Пороговый уровень достоверности котировки, необходимый для признания ее достоверной  # noqa: E501

        :return: The q_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._q_m1

    @q_m1.setter
    def q_m1(self, q_m1):
        """Sets the q_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Пороговый уровень достоверности котировки, необходимый для признания ее достоверной  # noqa: E501

        :param q_m1: The q_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._q_m1 = q_m1

    @property
    def r_m1(self):
        """Gets the r_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Точность оценки (R1) справедливой стоимости облигации на основе метода №1 (фактических цен)  # noqa: E501

        :return: The r_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._r_m1

    @r_m1.setter
    def r_m1(self, r_m1):
        """Sets the r_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Точность оценки (R1) справедливой стоимости облигации на основе метода №1 (фактических цен)  # noqa: E501

        :param r_m1: The r_m1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._r_m1 = r_m1

    @property
    def vp_m2(self):
        """Gets the vp_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Справедливая стоимость облигации (в % от номинала), рассчитанная 2-м методом (экстраполяции индексов)  # noqa: E501

        :return: The vp_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._vp_m2

    @vp_m2.setter
    def vp_m2(self, vp_m2):
        """Sets the vp_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Справедливая стоимость облигации (в % от номинала), рассчитанная 2-м методом (экстраполяции индексов)  # noqa: E501

        :param vp_m2: The vp_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._vp_m2 = vp_m2

    @property
    def y_agg_m2(self):
        """Gets the y_agg_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Оценка доходности облигации, основанная на методе №2  # noqa: E501

        :return: The y_agg_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._y_agg_m2

    @y_agg_m2.setter
    def y_agg_m2(self, y_agg_m2):
        """Sets the y_agg_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Оценка доходности облигации, основанная на методе №2  # noqa: E501

        :param y_agg_m2: The y_agg_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._y_agg_m2 = y_agg_m2

    @property
    def i_vp_m2(self):
        """Gets the i_vp_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Оценка i-спреда облигации, основанная на методе №2  # noqa: E501

        :return: The i_vp_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._i_vp_m2

    @i_vp_m2.setter
    def i_vp_m2(self, i_vp_m2):
        """Sets the i_vp_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Оценка i-спреда облигации, основанная на методе №2  # noqa: E501

        :param i_vp_m2: The i_vp_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._i_vp_m2 = i_vp_m2

    @property
    def sigma_m2(self):
        """Gets the sigma_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Волатильность доходности облигации  # noqa: E501

        :return: The sigma_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._sigma_m2

    @sigma_m2.setter
    def sigma_m2(self, sigma_m2):
        """Sets the sigma_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Волатильность доходности облигации  # noqa: E501

        :param sigma_m2: The sigma_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._sigma_m2 = sigma_m2

    @property
    def index(self):
        """Gets the index of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Код индекса, к которому привязан инструмент в рамках модели №2  # noqa: E501

        :return: The index of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Код индекса, к которому привязан инструмент в рамках модели №2  # noqa: E501

        :param index: The index of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: str
        """

        self._index = index

    @property
    def beta1_m2(self):
        """Gets the beta1_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэффициент модели коинтеграции коэффициент для значения индекса(коэффициент beta1 одинаков для всех облигаций, связанных с индексом)  # noqa: E501

        :return: The beta1_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._beta1_m2

    @beta1_m2.setter
    def beta1_m2(self, beta1_m2):
        """Sets the beta1_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэффициент модели коинтеграции коэффициент для значения индекса(коэффициент beta1 одинаков для всех облигаций, связанных с индексом)  # noqa: E501

        :param beta1_m2: The beta1_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._beta1_m2 = beta1_m2

    @property
    def beta0_m2(self):
        """Gets the beta0_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэффициент модели коинтеграции \"свободный член\"  # noqa: E501

        :return: The beta0_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._beta0_m2

    @beta0_m2.setter
    def beta0_m2(self, beta0_m2):
        """Sets the beta0_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэффициент модели коинтеграции \"свободный член\"  # noqa: E501

        :param beta0_m2: The beta0_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._beta0_m2 = beta0_m2

    @property
    def alpha_m2(self):
        """Gets the alpha_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэффициент модели коррекции ошибок \"alpha\"  # noqa: E501

        :return: The alpha_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._alpha_m2

    @alpha_m2.setter
    def alpha_m2(self, alpha_m2):
        """Sets the alpha_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэффициент модели коррекции ошибок \"alpha\"  # noqa: E501

        :param alpha_m2: The alpha_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._alpha_m2 = alpha_m2

    @property
    def gamma_m2(self):
        """Gets the gamma_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэффициент модели коррекции ошибок \"gamma\"  # noqa: E501

        :return: The gamma_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._gamma_m2

    @gamma_m2.setter
    def gamma_m2(self, gamma_m2):
        """Sets the gamma_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэффициент модели коррекции ошибок \"gamma\"  # noqa: E501

        :param gamma_m2: The gamma_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._gamma_m2 = gamma_m2

    @property
    def sigma_nu(self):
        """Gets the sigma_nu of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэффициент модели коррекции ошибок - стандартное отклонение нормального распределения \"nu\"  # noqa: E501

        :return: The sigma_nu of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._sigma_nu

    @sigma_nu.setter
    def sigma_nu(self, sigma_nu):
        """Sets the sigma_nu of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэффициент модели коррекции ошибок - стандартное отклонение нормального распределения \"nu\"  # noqa: E501

        :param sigma_nu: The sigma_nu of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._sigma_nu = sigma_nu

    @property
    def rho_m2(self):
        """Gets the rho_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Параметр \"rho\", который связывает точность сделки c мерой достоверности  # noqa: E501

        :return: The rho_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._rho_m2

    @rho_m2.setter
    def rho_m2(self, rho_m2):
        """Sets the rho_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Параметр \"rho\", который связывает точность сделки c мерой достоверности  # noqa: E501

        :param rho_m2: The rho_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._rho_m2 = rho_m2

    @property
    def r_m2(self):
        """Gets the r_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Точность оценки (R2) справедливой стоимости облигации на основе метода экстраполяции индексов  # noqa: E501

        :return: The r_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._r_m2

    @r_m2.setter
    def r_m2(self, r_m2):
        """Sets the r_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Точность оценки (R2) справедливой стоимости облигации на основе метода экстраполяции индексов  # noqa: E501

        :param r_m2: The r_m2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._r_m2 = r_m2

    @property
    def vp_m3(self):
        """Gets the vp_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Справедливая стоимость облигации(в % от номинала), рассчитанная 3-м методом (факторного разложения)  # noqa: E501

        :return: The vp_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._vp_m3

    @vp_m3.setter
    def vp_m3(self, vp_m3):
        """Sets the vp_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Справедливая стоимость облигации(в % от номинала), рассчитанная 3-м методом (факторного разложения)  # noqa: E501

        :param vp_m3: The vp_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._vp_m3 = vp_m3

    @property
    def y_agg_m3(self):
        """Gets the y_agg_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Оценка доходности облигации, основанная на методе №3 (факторного разложения)  # noqa: E501

        :return: The y_agg_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._y_agg_m3

    @y_agg_m3.setter
    def y_agg_m3(self, y_agg_m3):
        """Sets the y_agg_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Оценка доходности облигации, основанная на методе №3 (факторного разложения)  # noqa: E501

        :param y_agg_m3: The y_agg_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._y_agg_m3 = y_agg_m3

    @property
    def dur_agg_m3(self):
        """Gets the dur_agg_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Оценка дюрации облигации (по Маколею, в годах), основанная на методе №3 (факторного разложения)  # noqa: E501

        :return: The dur_agg_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._dur_agg_m3

    @dur_agg_m3.setter
    def dur_agg_m3(self, dur_agg_m3):
        """Sets the dur_agg_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Оценка дюрации облигации (по Маколею, в годах), основанная на методе №3 (факторного разложения)  # noqa: E501

        :param dur_agg_m3: The dur_agg_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._dur_agg_m3 = dur_agg_m3

    @property
    def z_vp_m3(self):
        """Gets the z_vp_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Оценка z-спреда облигации, основанная на методе №3  # noqa: E501

        :return: The z_vp_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._z_vp_m3

    @z_vp_m3.setter
    def z_vp_m3(self, z_vp_m3):
        """Sets the z_vp_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Оценка z-спреда облигации, основанная на методе №3  # noqa: E501

        :param z_vp_m3: The z_vp_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._z_vp_m3 = z_vp_m3

    @property
    def r_m3(self):
        """Gets the r_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Точность оценки (R3) справедливой стоимости облигации на основе метода №3 (факторного разложения)  # noqa: E501

        :return: The r_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._r_m3

    @r_m3.setter
    def r_m3(self, r_m3):
        """Sets the r_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Точность оценки (R3) справедливой стоимости облигации на основе метода №3 (факторного разложения)  # noqa: E501

        :param r_m3: The r_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._r_m3 = r_m3

    @property
    def factor1(self):
        """Gets the factor1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Значение первого фактора Фамы-Френча, характеризующего наклон кривой базовых ставок  # noqa: E501

        :return: The factor1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._factor1

    @factor1.setter
    def factor1(self, factor1):
        """Sets the factor1 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Значение первого фактора Фамы-Френча, характеризующего наклон кривой базовых ставок  # noqa: E501

        :param factor1: The factor1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._factor1 = factor1

    @property
    def beta1_m3(self):
        """Gets the beta1_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэффициент регрессии \"beta1\" для первого фактора Фамы-Френча  # noqa: E501

        :return: The beta1_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._beta1_m3

    @beta1_m3.setter
    def beta1_m3(self, beta1_m3):
        """Sets the beta1_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэффициент регрессии \"beta1\" для первого фактора Фамы-Френча  # noqa: E501

        :param beta1_m3: The beta1_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._beta1_m3 = beta1_m3

    @property
    def factor2(self):
        """Gets the factor2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Значение второго фактора Фамы-Френча, характеризующего средний уровень кредитного риска корпоративных облигаций  # noqa: E501

        :return: The factor2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._factor2

    @factor2.setter
    def factor2(self, factor2):
        """Sets the factor2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Значение второго фактора Фамы-Френча, характеризующего средний уровень кредитного риска корпоративных облигаций  # noqa: E501

        :param factor2: The factor2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._factor2 = factor2

    @property
    def beta2_m3(self):
        """Gets the beta2_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэффициент регрессии \"beta2\" для второго фактора Фамы-Френча  # noqa: E501

        :return: The beta2_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._beta2_m3

    @beta2_m3.setter
    def beta2_m3(self, beta2_m3):
        """Sets the beta2_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэффициент регрессии \"beta2\" для второго фактора Фамы-Френча  # noqa: E501

        :param beta2_m3: The beta2_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._beta2_m3 = beta2_m3

    @property
    def level_pd(self):
        """Gets the level_pd of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Значение уровня вероятности дефолта, используемого в расчете величины премии за кредитный риск  # noqa: E501

        :return: The level_pd of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._level_pd

    @level_pd.setter
    def level_pd(self, level_pd):
        """Sets the level_pd of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Значение уровня вероятности дефолта, используемого в расчете величины премии за кредитный риск  # noqa: E501

        :param level_pd: The level_pd of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._level_pd = level_pd

    @property
    def coef_b(self):
        """Gets the coef_b of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэф-т \"b\", определяющий зависимость вероятность дефолта от уровня кредитного рейтинга  # noqa: E501

        :return: The coef_b of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._coef_b

    @coef_b.setter
    def coef_b(self, coef_b):
        """Sets the coef_b of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэф-т \"b\", определяющий зависимость вероятность дефолта от уровня кредитного рейтинга  # noqa: E501

        :param coef_b: The coef_b of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._coef_b = coef_b

    @property
    def risk_b(self):
        """Gets the risk_b of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Фактор, характеризующий премию за кредитный риск (вероятность дефолта до погашения облигации)  # noqa: E501

        :return: The risk_b of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._risk_b

    @risk_b.setter
    def risk_b(self, risk_b):
        """Sets the risk_b of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Фактор, характеризующий премию за кредитный риск (вероятность дефолта до погашения облигации)  # noqa: E501

        :param risk_b: The risk_b of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._risk_b = risk_b

    @property
    def beta3_m3(self):
        """Gets the beta3_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэф-т \"beta3\" линейной регрессии для фактора кредитного риска  # noqa: E501

        :return: The beta3_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._beta3_m3

    @beta3_m3.setter
    def beta3_m3(self, beta3_m3):
        """Sets the beta3_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэф-т \"beta3\" линейной регрессии для фактора кредитного риска  # noqa: E501

        :param beta3_m3: The beta3_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._beta3_m3 = beta3_m3

    @property
    def is_ontherun(self):
        """Gets the is_ontherun of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Переменная \"on the run\", принимающая значения 1 или 0 в зависимости от того, размещался ли выпуск недавно или давно  # noqa: E501

        :return: The is_ontherun of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._is_ontherun

    @is_ontherun.setter
    def is_ontherun(self, is_ontherun):
        """Sets the is_ontherun of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Переменная \"on the run\", принимающая значения 1 или 0 в зависимости от того, размещался ли выпуск недавно или давно  # noqa: E501

        :param is_ontherun: The is_ontherun of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._is_ontherun = is_ontherun

    @property
    def beta4_m3(self):
        """Gets the beta4_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэффициент регрессии \"beta4\" для показателя \"on the run\"  # noqa: E501

        :return: The beta4_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._beta4_m3

    @beta4_m3.setter
    def beta4_m3(self, beta4_m3):
        """Sets the beta4_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэффициент регрессии \"beta4\" для показателя \"on the run\"  # noqa: E501

        :param beta4_m3: The beta4_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._beta4_m3 = beta4_m3

    @property
    def hhi(self):
        """Gets the hhi of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Значение индекса Херфиндаля-Хиршмана для структуры владения облигацией  # noqa: E501

        :return: The hhi of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._hhi

    @hhi.setter
    def hhi(self, hhi):
        """Sets the hhi of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Значение индекса Херфиндаля-Хиршмана для структуры владения облигацией  # noqa: E501

        :param hhi: The hhi of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._hhi = hhi

    @property
    def beta5_m3(self):
        """Gets the beta5_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэффициент регрессии \"beta5\" для индекса Херфиндаля-Хиршмана  # noqa: E501

        :return: The beta5_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._beta5_m3

    @beta5_m3.setter
    def beta5_m3(self, beta5_m3):
        """Sets the beta5_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэффициент регрессии \"beta5\" для индекса Херфиндаля-Хиршмана  # noqa: E501

        :param beta5_m3: The beta5_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._beta5_m3 = beta5_m3

    @property
    def ind_liq(self):
        """Gets the ind_liq of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Индекс ликвидности (IL), показывающий средний уровень значения индекса Херфиндаля-Хиршмана в портфеле «типичного» инвестора данной облигации  # noqa: E501

        :return: The ind_liq of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._ind_liq

    @ind_liq.setter
    def ind_liq(self, ind_liq):
        """Sets the ind_liq of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Индекс ликвидности (IL), показывающий средний уровень значения индекса Херфиндаля-Хиршмана в портфеле «типичного» инвестора данной облигации  # noqa: E501

        :param ind_liq: The ind_liq of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._ind_liq = ind_liq

    @property
    def beta6_m3(self):
        """Gets the beta6_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэффициент регрессии \"beta6\" для индекса ликвидности \"IL\"  # noqa: E501

        :return: The beta6_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._beta6_m3

    @beta6_m3.setter
    def beta6_m3(self, beta6_m3):
        """Sets the beta6_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэффициент регрессии \"beta6\" для индекса ликвидности \"IL\"  # noqa: E501

        :param beta6_m3: The beta6_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._beta6_m3 = beta6_m3

    @property
    def ind_unliq(self):
        """Gets the ind_unliq of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Индекс ликвидности (IL4), показывающий средний уровень для \"неликвидных\" бумаг в портфеле «типичного» инвестора данной облигации  # noqa: E501

        :return: The ind_unliq of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._ind_unliq

    @ind_unliq.setter
    def ind_unliq(self, ind_unliq):
        """Sets the ind_unliq of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Индекс ликвидности (IL4), показывающий средний уровень для \"неликвидных\" бумаг в портфеле «типичного» инвестора данной облигации  # noqa: E501

        :param ind_unliq: The ind_unliq of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._ind_unliq = ind_unliq

    @property
    def beta7_m3(self):
        """Gets the beta7_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэффициент регрессии \"beta7\" для индекса ликвидности \"IL4\"  # noqa: E501

        :return: The beta7_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._beta7_m3

    @beta7_m3.setter
    def beta7_m3(self, beta7_m3):
        """Sets the beta7_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэффициент регрессии \"beta7\" для индекса ликвидности \"IL4\"  # noqa: E501

        :param beta7_m3: The beta7_m3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._beta7_m3 = beta7_m3

    @property
    def sector(self):
        """Gets the sector of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Сектор эмитента, согласно классификации Интерфакс  # noqa: E501

        :return: The sector of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Сектор эмитента, согласно классификации Интерфакс  # noqa: E501

        :param sector: The sector of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def phi_sector(self):
        """Gets the phi_sector of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Коэффициент регрессии \"phi\" для сектора эмитента  # noqa: E501

        :return: The phi_sector of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._phi_sector

    @phi_sector.setter
    def phi_sector(self, phi_sector):
        """Sets the phi_sector of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Коэффициент регрессии \"phi\" для сектора эмитента  # noqa: E501

        :param phi_sector: The phi_sector of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._phi_sector = phi_sector

    @property
    def version(self):
        """Gets the version of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Версия методики:  0 - Обе методики; 1 - Методика НФА (старая); 2 - Методика ЦЦ НРД (новая);  0 = All  1 = NFA  2 = NRD  # noqa: E501

        :return: The version of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: AllOfEfirDataHubModelsModelsRUPriceHistoryFieldsVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Версия методики:  0 - Обе методики; 1 - Методика НФА (старая); 2 - Методика ЦЦ НРД (новая);  0 = All  1 = NFA  2 = NRD  # noqa: E501

        :param version: The version of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: AllOfEfirDataHubModelsModelsRUPriceHistoryFieldsVersion
        """

        self._version = version

    @property
    def valuation_currency(self):
        """Gets the valuation_currency of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Валюта оценки  # noqa: E501

        :return: The valuation_currency of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._valuation_currency

    @valuation_currency.setter
    def valuation_currency(self, valuation_currency):
        """Sets the valuation_currency of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Валюта оценки  # noqa: E501

        :param valuation_currency: The valuation_currency of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: str
        """

        self._valuation_currency = valuation_currency

    @property
    def security_type(self):
        """Gets the security_type of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Тип бумаги  # noqa: E501

        :return: The security_type of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Тип бумаги  # noqa: E501

        :param security_type: The security_type of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: str
        """

        self._security_type = security_type

    @property
    def source(self):
        """Gets the source of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Источник данных (1 - методика НФА (старая); 2 -  новая методика, стандартный фид; 3 -  новая методика, расширенный фид)  0 = Unspecified  1 = Nfa  2 = Standart  3 = Extended  # noqa: E501

        :return: The source of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: AllOfEfirDataHubModelsModelsRUPriceHistoryFieldsSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Источник данных (1 - методика НФА (старая); 2 -  новая методика, стандартный фид; 3 -  новая методика, расширенный фид)  0 = Unspecified  1 = Nfa  2 = Standart  3 = Extended  # noqa: E501

        :param source: The source of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: AllOfEfirDataHubModelsModelsRUPriceHistoryFieldsSource
        """

        self._source = source

    @property
    def wa_duration(self):
        """Gets the wa_duration of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Дюрация по средневзвешенной цене  # noqa: E501

        :return: The wa_duration of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._wa_duration

    @wa_duration.setter
    def wa_duration(self, wa_duration):
        """Sets the wa_duration of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Дюрация по средневзвешенной цене  # noqa: E501

        :param wa_duration: The wa_duration of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._wa_duration = wa_duration

    @property
    def duration_mod(self):
        """Gets the duration_mod of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Дюрация модифицированая  # noqa: E501

        :return: The duration_mod of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._duration_mod

    @duration_mod.setter
    def duration_mod(self, duration_mod):
        """Sets the duration_mod of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Дюрация модифицированая  # noqa: E501

        :param duration_mod: The duration_mod of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._duration_mod = duration_mod

    @property
    def lbound1(self):
        """Gets the lbound1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Нижняя граница ценового диапазона по 1-му методу  # noqa: E501

        :return: The lbound1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._lbound1

    @lbound1.setter
    def lbound1(self, lbound1):
        """Sets the lbound1 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Нижняя граница ценового диапазона по 1-му методу  # noqa: E501

        :param lbound1: The lbound1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._lbound1 = lbound1

    @property
    def ubound1(self):
        """Gets the ubound1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Верхняя граница ценового диапазона по 1-му методу  # noqa: E501

        :return: The ubound1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._ubound1

    @ubound1.setter
    def ubound1(self, ubound1):
        """Sets the ubound1 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Верхняя граница ценового диапазона по 1-му методу  # noqa: E501

        :param ubound1: The ubound1 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._ubound1 = ubound1

    @property
    def lbound2(self):
        """Gets the lbound2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Нижняя граница ценового диапазона по 2-му методу  # noqa: E501

        :return: The lbound2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._lbound2

    @lbound2.setter
    def lbound2(self, lbound2):
        """Sets the lbound2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Нижняя граница ценового диапазона по 2-му методу  # noqa: E501

        :param lbound2: The lbound2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._lbound2 = lbound2

    @property
    def ubound2(self):
        """Gets the ubound2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Верхняя граница ценового диапазона по 2-му методу  # noqa: E501

        :return: The ubound2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._ubound2

    @ubound2.setter
    def ubound2(self, ubound2):
        """Sets the ubound2 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Верхняя граница ценового диапазона по 2-му методу  # noqa: E501

        :param ubound2: The ubound2 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._ubound2 = ubound2

    @property
    def lbound3(self):
        """Gets the lbound3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Нижняя граница ценового диапазона по 3-му методу  # noqa: E501

        :return: The lbound3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._lbound3

    @lbound3.setter
    def lbound3(self, lbound3):
        """Sets the lbound3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Нижняя граница ценового диапазона по 3-му методу  # noqa: E501

        :param lbound3: The lbound3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._lbound3 = lbound3

    @property
    def ubound3(self):
        """Gets the ubound3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Верхняя граница ценового диапазона по 3-му методу  # noqa: E501

        :return: The ubound3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._ubound3

    @ubound3.setter
    def ubound3(self, ubound3):
        """Sets the ubound3 of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Верхняя граница ценового диапазона по 3-му методу  # noqa: E501

        :param ubound3: The ubound3 of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._ubound3 = ubound3

    @property
    def acc_int(self):
        """Gets the acc_int of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Накопленный купонный доход  # noqa: E501

        :return: The acc_int of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._acc_int

    @acc_int.setter
    def acc_int(self, acc_int):
        """Sets the acc_int of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Накопленный купонный доход  # noqa: E501

        :param acc_int: The acc_int of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._acc_int = acc_int

    @property
    def wap_ext_zspread(self):
        """Gets the wap_ext_zspread of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Цена, полученная по z-спреду последней средневзвешенной цены (waprice), доступной перед датой оценки  # noqa: E501

        :return: The wap_ext_zspread of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._wap_ext_zspread

    @wap_ext_zspread.setter
    def wap_ext_zspread(self, wap_ext_zspread):
        """Sets the wap_ext_zspread of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Цена, полученная по z-спреду последней средневзвешенной цены (waprice), доступной перед датой оценки  # noqa: E501

        :param wap_ext_zspread: The wap_ext_zspread of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._wap_ext_zspread = wap_ext_zspread

    @property
    def mp3_ext_zspread(self):
        """Gets the mp3_ext_zspread of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Цена, полученная по z-спреду последней рыночной цены (marketprice3), доступной перед датой оценки  # noqa: E501

        :return: The mp3_ext_zspread of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._mp3_ext_zspread

    @mp3_ext_zspread.setter
    def mp3_ext_zspread(self, mp3_ext_zspread):
        """Sets the mp3_ext_zspread of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Цена, полученная по z-спреду последней рыночной цены (marketprice3), доступной перед датой оценки  # noqa: E501

        :param mp3_ext_zspread: The mp3_ext_zspread of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._mp3_ext_zspread = mp3_ext_zspread

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501


        :return: The id of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsRUPriceHistoryFields.


        :param id: The id of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def no_history_found(self):
        """Gets the no_history_found of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501


        :return: The no_history_found of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._no_history_found

    @no_history_found.setter
    def no_history_found(self, no_history_found):
        """Sets the no_history_found of this EfirDataHubModelsModelsRUPriceHistoryFields.


        :param no_history_found: The no_history_found of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._no_history_found = no_history_found

    @property
    def not_valid_code(self):
        """Gets the not_valid_code of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501


        :return: The not_valid_code of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._not_valid_code

    @not_valid_code.setter
    def not_valid_code(self, not_valid_code):
        """Sets the not_valid_code of this EfirDataHubModelsModelsRUPriceHistoryFields.


        :param not_valid_code: The not_valid_code of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: float
        """

        self._not_valid_code = not_valid_code

    @property
    def calc_date_time(self):
        """Gets the calc_date_time of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501


        :return: The calc_date_time of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: datetime
        """
        return self._calc_date_time

    @calc_date_time.setter
    def calc_date_time(self, calc_date_time):
        """Sets the calc_date_time of this EfirDataHubModelsModelsRUPriceHistoryFields.


        :param calc_date_time: The calc_date_time of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: datetime
        """

        self._calc_date_time = calc_date_time

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsRUPriceHistoryFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsRUPriceHistoryFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRUPriceHistoryFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRUPriceHistoryFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
