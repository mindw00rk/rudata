# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'use_reinsurer_ratings': 'bool',
        'scale_code': 'int',
        'fintool_ids': 'list[int]',
        '_date': 'datetime',
        'use_freezing': 'bool',
        'freezing_type': 'AllOfEfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequestFreezingType'
    }

    attribute_map = {
        'use_reinsurer_ratings': 'useReinsurerRatings',
        'scale_code': 'scaleCode',
        'fintool_ids': 'fintoolIds',
        '_date': 'date',
        'use_freezing': 'useFreezing',
        'freezing_type': 'freezingType'
    }

    def __init__(self, use_reinsurer_ratings=None, scale_code=2, fintool_ids=None, _date=None, use_freezing=False, freezing_type=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest - a model defined in Swagger"""  # noqa: E501
        self._use_reinsurer_ratings = None
        self._scale_code = None
        self._fintool_ids = None
        self.__date = None
        self._use_freezing = None
        self._freezing_type = None
        self.discriminator = None
        self.use_reinsurer_ratings = use_reinsurer_ratings
        if scale_code is not None:
            self.scale_code = scale_code
        self.fintool_ids = fintool_ids
        if _date is not None:
            self._date = _date
        if use_freezing is not None:
            self.use_freezing = use_freezing
        if freezing_type is not None:
            self.freezing_type = freezing_type

    @property
    def use_reinsurer_ratings(self):
        """Gets the use_reinsurer_ratings of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501

        Использовать рейтинги перестраховщиков  # noqa: E501

        :return: The use_reinsurer_ratings of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_reinsurer_ratings

    @use_reinsurer_ratings.setter
    def use_reinsurer_ratings(self, use_reinsurer_ratings):
        """Sets the use_reinsurer_ratings of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.

        Использовать рейтинги перестраховщиков  # noqa: E501

        :param use_reinsurer_ratings: The use_reinsurer_ratings of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501
        :type: bool
        """
        if use_reinsurer_ratings is None:
            raise ValueError("Invalid value for `use_reinsurer_ratings`, must not be `None`")  # noqa: E501

        self._use_reinsurer_ratings = use_reinsurer_ratings

    @property
    def scale_code(self):
        """Gets the scale_code of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501

        Идентификатор соотношения шкал. Допустимые значения см. Rating/AggregationScaleRatios.  # noqa: E501

        :return: The scale_code of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501
        :rtype: int
        """
        return self._scale_code

    @scale_code.setter
    def scale_code(self, scale_code):
        """Sets the scale_code of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.

        Идентификатор соотношения шкал. Допустимые значения см. Rating/AggregationScaleRatios.  # noqa: E501

        :param scale_code: The scale_code of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501
        :type: int
        """

        self._scale_code = scale_code

    @property
    def fintool_ids(self):
        """Gets the fintool_ids of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501

        Идентификаторы инструментов в базе Интерфакс;  Максимальное количество элементов: 100  # noqa: E501

        :return: The fintool_ids of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._fintool_ids

    @fintool_ids.setter
    def fintool_ids(self, fintool_ids):
        """Sets the fintool_ids of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.

        Идентификаторы инструментов в базе Интерфакс;  Максимальное количество элементов: 100  # noqa: E501

        :param fintool_ids: The fintool_ids of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501
        :type: list[int]
        """
        if fintool_ids is None:
            raise ValueError("Invalid value for `fintool_ids`, must not be `None`")  # noqa: E501

        self._fintool_ids = fintool_ids

    @property
    def _date(self):
        """Gets the _date of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501

        Дата, на которую получаются рейтинги; по умолчанию текущая  # noqa: E501

        :return: The _date of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.

        Дата, на которую получаются рейтинги; по умолчанию текущая  # noqa: E501

        :param _date: The _date of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def use_freezing(self):
        """Gets the use_freezing of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501

        Использовать заморозку рейтингов BIG3  # noqa: E501

        :return: The use_freezing of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_freezing

    @use_freezing.setter
    def use_freezing(self, use_freezing):
        """Sets the use_freezing of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.

        Использовать заморозку рейтингов BIG3  # noqa: E501

        :param use_freezing: The use_freezing of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501
        :type: bool
        """

        self._use_freezing = use_freezing

    @property
    def freezing_type(self):
        """Gets the freezing_type of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501

        Способ заморозки рейтингов при useFreezing=true:  - RussianObjects - заморозка рейтингов BIG3 для российских объектов рейтинга (по умолчанию),  - AllObjects - заморозка рейтингов BIG3 для всех объектов рейтинга.  RussianObjects  AllObjects  # noqa: E501

        :return: The freezing_type of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501
        :rtype: AllOfEfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequestFreezingType
        """
        return self._freezing_type

    @freezing_type.setter
    def freezing_type(self, freezing_type):
        """Sets the freezing_type of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.

        Способ заморозки рейтингов при useFreezing=true:  - RussianObjects - заморозка рейтингов BIG3 для российских объектов рейтинга (по умолчанию),  - AllObjects - заморозка рейтингов BIG3 для всех объектов рейтинга.  RussianObjects  AllObjects  # noqa: E501

        :param freezing_type: The freezing_type of this EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest.  # noqa: E501
        :type: AllOfEfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequestFreezingType
        """

        self._freezing_type = freezing_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2SolvencyRatingAggSecurityRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
