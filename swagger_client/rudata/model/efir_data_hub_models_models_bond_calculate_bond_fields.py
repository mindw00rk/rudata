# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondCalculateBondFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_offer': 'bool',
        'offer_id': 'int',
        'price_pct': 'float',
        'accrint_pct': 'float',
        'fullprice_pct': 'float',
        'facevalcur': 'str',
        'price': 'float',
        'accrint': 'float',
        'fullprice': 'float',
        'cfaceval': 'float',
        '_date': 'datetime',
        '_yield': 'float',
        'dur': 'int',
        'durmd': 'float',
        'convx': 'float',
        'pvbp': 'float',
        'cyield': 'float',
        'syield': 'float',
        'accrint_at_date': 'float',
        'faceval_at_date': 'float',
        'error': 'str'
    }

    attribute_map = {
        'is_offer': 'is_offer',
        'offer_id': 'offer_id',
        'price_pct': 'price_pct',
        'accrint_pct': 'accrint_pct',
        'fullprice_pct': 'fullprice_pct',
        'facevalcur': 'facevalcur',
        'price': 'price',
        'accrint': 'accrint',
        'fullprice': 'fullprice',
        'cfaceval': 'cfaceval',
        '_date': 'date',
        '_yield': 'yield',
        'dur': 'dur',
        'durmd': 'durmd',
        'convx': 'convx',
        'pvbp': 'pvbp',
        'cyield': 'cyield',
        'syield': 'syield',
        'accrint_at_date': 'accrint_at_date',
        'faceval_at_date': 'faceval_at_date',
        'error': 'error'
    }

    def __init__(self, is_offer=None, offer_id=None, price_pct=None, accrint_pct=None, fullprice_pct=None, facevalcur=None, price=None, accrint=None, fullprice=None, cfaceval=None, _date=None, _yield=None, dur=None, durmd=None, convx=None, pvbp=None, cyield=None, syield=None, accrint_at_date=None, faceval_at_date=None, error=None):  # noqa: E501
        """EfirDataHubModelsModelsBondCalculateBondFields - a model defined in Swagger"""  # noqa: E501
        self._is_offer = None
        self._offer_id = None
        self._price_pct = None
        self._accrint_pct = None
        self._fullprice_pct = None
        self._facevalcur = None
        self._price = None
        self._accrint = None
        self._fullprice = None
        self._cfaceval = None
        self.__date = None
        self.__yield = None
        self._dur = None
        self._durmd = None
        self._convx = None
        self._pvbp = None
        self._cyield = None
        self._syield = None
        self._accrint_at_date = None
        self._faceval_at_date = None
        self._error = None
        self.discriminator = None
        if is_offer is not None:
            self.is_offer = is_offer
        if offer_id is not None:
            self.offer_id = offer_id
        if price_pct is not None:
            self.price_pct = price_pct
        if accrint_pct is not None:
            self.accrint_pct = accrint_pct
        if fullprice_pct is not None:
            self.fullprice_pct = fullprice_pct
        if facevalcur is not None:
            self.facevalcur = facevalcur
        if price is not None:
            self.price = price
        if accrint is not None:
            self.accrint = accrint
        if fullprice is not None:
            self.fullprice = fullprice
        if cfaceval is not None:
            self.cfaceval = cfaceval
        if _date is not None:
            self._date = _date
        if _yield is not None:
            self._yield = _yield
        if dur is not None:
            self.dur = dur
        if durmd is not None:
            self.durmd = durmd
        if convx is not None:
            self.convx = convx
        if pvbp is not None:
            self.pvbp = pvbp
        if cyield is not None:
            self.cyield = cyield
        if syield is not None:
            self.syield = syield
        if accrint_at_date is not None:
            self.accrint_at_date = accrint_at_date
        if faceval_at_date is not None:
            self.faceval_at_date = faceval_at_date
        if error is not None:
            self.error = error

    @property
    def is_offer(self):
        """Gets the is_offer of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Тип расчета: 1 – расчет к оферте; 0 – расчет к погашению.  # noqa: E501

        :return: The is_offer of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_offer

    @is_offer.setter
    def is_offer(self, is_offer):
        """Sets the is_offer of this EfirDataHubModelsModelsBondCalculateBondFields.

        Тип расчета: 1 – расчет к оферте; 0 – расчет к погашению.  # noqa: E501

        :param is_offer: The is_offer of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: bool
        """

        self._is_offer = is_offer

    @property
    def offer_id(self):
        """Gets the offer_id of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Номер оферты для которой производится расчет  # noqa: E501

        :return: The offer_id of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: int
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this EfirDataHubModelsModelsBondCalculateBondFields.

        Номер оферты для которой производится расчет  # noqa: E501

        :param offer_id: The offer_id of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: int
        """

        self._offer_id = offer_id

    @property
    def price_pct(self):
        """Gets the price_pct of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Чистая цена в % от номинала  # noqa: E501

        :return: The price_pct of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._price_pct

    @price_pct.setter
    def price_pct(self, price_pct):
        """Sets the price_pct of this EfirDataHubModelsModelsBondCalculateBondFields.

        Чистая цена в % от номинала  # noqa: E501

        :param price_pct: The price_pct of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._price_pct = price_pct

    @property
    def accrint_pct(self):
        """Gets the accrint_pct of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        НКД в % от номинала  # noqa: E501

        :return: The accrint_pct of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._accrint_pct

    @accrint_pct.setter
    def accrint_pct(self, accrint_pct):
        """Sets the accrint_pct of this EfirDataHubModelsModelsBondCalculateBondFields.

        НКД в % от номинала  # noqa: E501

        :param accrint_pct: The accrint_pct of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._accrint_pct = accrint_pct

    @property
    def fullprice_pct(self):
        """Gets the fullprice_pct of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Полная цена в % от номинала  # noqa: E501

        :return: The fullprice_pct of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._fullprice_pct

    @fullprice_pct.setter
    def fullprice_pct(self, fullprice_pct):
        """Sets the fullprice_pct of this EfirDataHubModelsModelsBondCalculateBondFields.

        Полная цена в % от номинала  # noqa: E501

        :param fullprice_pct: The fullprice_pct of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._fullprice_pct = fullprice_pct

    @property
    def facevalcur(self):
        """Gets the facevalcur of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Валюта номинала  # noqa: E501

        :return: The facevalcur of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: str
        """
        return self._facevalcur

    @facevalcur.setter
    def facevalcur(self, facevalcur):
        """Sets the facevalcur of this EfirDataHubModelsModelsBondCalculateBondFields.

        Валюта номинала  # noqa: E501

        :param facevalcur: The facevalcur of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: str
        """

        self._facevalcur = facevalcur

    @property
    def price(self):
        """Gets the price of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Чистая цена в валюте номинала  # noqa: E501

        :return: The price of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this EfirDataHubModelsModelsBondCalculateBondFields.

        Чистая цена в валюте номинала  # noqa: E501

        :param price: The price of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def accrint(self):
        """Gets the accrint of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        НКД в валюте номинала  # noqa: E501

        :return: The accrint of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._accrint

    @accrint.setter
    def accrint(self, accrint):
        """Sets the accrint of this EfirDataHubModelsModelsBondCalculateBondFields.

        НКД в валюте номинала  # noqa: E501

        :param accrint: The accrint of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._accrint = accrint

    @property
    def fullprice(self):
        """Gets the fullprice of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Полная цена в валюте номинала  # noqa: E501

        :return: The fullprice of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._fullprice

    @fullprice.setter
    def fullprice(self, fullprice):
        """Sets the fullprice of this EfirDataHubModelsModelsBondCalculateBondFields.

        Полная цена в валюте номинала  # noqa: E501

        :param fullprice: The fullprice of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._fullprice = fullprice

    @property
    def cfaceval(self):
        """Gets the cfaceval of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Номинал  # noqa: E501

        :return: The cfaceval of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._cfaceval

    @cfaceval.setter
    def cfaceval(self, cfaceval):
        """Sets the cfaceval of this EfirDataHubModelsModelsBondCalculateBondFields.

        Номинал  # noqa: E501

        :param cfaceval: The cfaceval of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._cfaceval = cfaceval

    @property
    def _date(self):
        """Gets the _date of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Дата соответствующей оферты/погашения  # noqa: E501

        :return: The _date of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EfirDataHubModelsModelsBondCalculateBondFields.

        Дата соответствующей оферты/погашения  # noqa: E501

        :param _date: The _date of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def _yield(self):
        """Gets the _yield of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Доходность по последней сделке, %  # noqa: E501

        :return: The _yield of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self.__yield

    @_yield.setter
    def _yield(self, _yield):
        """Sets the _yield of this EfirDataHubModelsModelsBondCalculateBondFields.

        Доходность по последней сделке, %  # noqa: E501

        :param _yield: The _yield of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self.__yield = _yield

    @property
    def dur(self):
        """Gets the dur of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Дюрация по Маколею, дней  # noqa: E501

        :return: The dur of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: int
        """
        return self._dur

    @dur.setter
    def dur(self, dur):
        """Sets the dur of this EfirDataHubModelsModelsBondCalculateBondFields.

        Дюрация по Маколею, дней  # noqa: E501

        :param dur: The dur of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: int
        """

        self._dur = dur

    @property
    def durmd(self):
        """Gets the durmd of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Дюрация модифицированная, %  # noqa: E501

        :return: The durmd of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._durmd

    @durmd.setter
    def durmd(self, durmd):
        """Sets the durmd of this EfirDataHubModelsModelsBondCalculateBondFields.

        Дюрация модифицированная, %  # noqa: E501

        :param durmd: The durmd of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._durmd = durmd

    @property
    def convx(self):
        """Gets the convx of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Выпуклость  # noqa: E501

        :return: The convx of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._convx

    @convx.setter
    def convx(self, convx):
        """Sets the convx of this EfirDataHubModelsModelsBondCalculateBondFields.

        Выпуклость  # noqa: E501

        :param convx: The convx of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._convx = convx

    @property
    def pvbp(self):
        """Gets the pvbp of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        PVBP  # noqa: E501

        :return: The pvbp of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._pvbp

    @pvbp.setter
    def pvbp(self, pvbp):
        """Sets the pvbp of this EfirDataHubModelsModelsBondCalculateBondFields.

        PVBP  # noqa: E501

        :param pvbp: The pvbp of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._pvbp = pvbp

    @property
    def cyield(self):
        """Gets the cyield of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Доходность текущая по последней цене, %  # noqa: E501

        :return: The cyield of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._cyield

    @cyield.setter
    def cyield(self, cyield):
        """Sets the cyield of this EfirDataHubModelsModelsBondCalculateBondFields.

        Доходность текущая по последней цене, %  # noqa: E501

        :param cyield: The cyield of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._cyield = cyield

    @property
    def syield(self):
        """Gets the syield of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Доходность простая по последней цене, %  # noqa: E501

        :return: The syield of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._syield

    @syield.setter
    def syield(self, syield):
        """Sets the syield of this EfirDataHubModelsModelsBondCalculateBondFields.

        Доходность простая по последней цене, %  # noqa: E501

        :param syield: The syield of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._syield = syield

    @property
    def accrint_at_date(self):
        """Gets the accrint_at_date of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        НКД на дату Efir.DataHub.Models.Models.Bond.CalculateBondFields.date  # noqa: E501

        :return: The accrint_at_date of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._accrint_at_date

    @accrint_at_date.setter
    def accrint_at_date(self, accrint_at_date):
        """Sets the accrint_at_date of this EfirDataHubModelsModelsBondCalculateBondFields.

        НКД на дату Efir.DataHub.Models.Models.Bond.CalculateBondFields.date  # noqa: E501

        :param accrint_at_date: The accrint_at_date of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._accrint_at_date = accrint_at_date

    @property
    def faceval_at_date(self):
        """Gets the faceval_at_date of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Остаточный номинал на дату Efir.DataHub.Models.Models.Bond.CalculateBondFields.date  # noqa: E501

        :return: The faceval_at_date of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: float
        """
        return self._faceval_at_date

    @faceval_at_date.setter
    def faceval_at_date(self, faceval_at_date):
        """Sets the faceval_at_date of this EfirDataHubModelsModelsBondCalculateBondFields.

        Остаточный номинал на дату Efir.DataHub.Models.Models.Bond.CalculateBondFields.date  # noqa: E501

        :param faceval_at_date: The faceval_at_date of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: float
        """

        self._faceval_at_date = faceval_at_date

    @property
    def error(self):
        """Gets the error of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501

        Описание ошибок расчета  # noqa: E501

        :return: The error of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EfirDataHubModelsModelsBondCalculateBondFields.

        Описание ошибок расчета  # noqa: E501

        :param error: The error of this EfirDataHubModelsModelsBondCalculateBondFields.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondCalculateBondFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondCalculateBondFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
