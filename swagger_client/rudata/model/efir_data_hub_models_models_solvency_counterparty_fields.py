# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsSolvencyCounterpartyFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_id': 'str',
        'source_type': 'str',
        'counterpartyid': 'int',
        'inn': 'str',
        'ogrn': 'str',
        'tin': 'str',
        'lei_code': 'str',
        'fininstid': 'int',
        'okpo': 'str',
        'sparkid': 'int',
        'br_txnmid': 'str',
        'br_regno': 'str',
        'reg_code': 'str',
        'shortname_rus': 'str',
        'fullname_rus': 'str',
        'shortname_eng': 'str',
        'legal_address': 'str',
        'country': 'str',
        'country_reg': 'str',
        'oecd_lvl': 'str',
        'is_riskfree': 'bool',
        'okved': 'str',
        'kpp': 'str',
        'is_finorg': 'bool',
        'is_govorg': 'bool',
        'licinfo_type': 'str',
        'licinfo_no': 'str',
        'activ_id': 'str',
        'is_lloyd': 'bool',
        'is_systinfr': 'bool',
        'is_default': 'bool',
        'capital': 'float',
        'capital_unit': 'str',
        'post_address': 'str',
        'e_mail': 'str',
        'is_gov_or_cb': 'bool',
        'on_behalf_of_state': 'bool',
        'is_subject_rf': 'bool',
        'is_branch': 'bool',
        'is_liquidated': 'bool',
        'is_govorg_ext': 'bool',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'source_id': 'source_id',
        'source_type': 'source_type',
        'counterpartyid': 'counterpartyid',
        'inn': 'inn',
        'ogrn': 'ogrn',
        'tin': 'tin',
        'lei_code': 'lei_code',
        'fininstid': 'fininstid',
        'okpo': 'okpo',
        'sparkid': 'sparkid',
        'br_txnmid': 'br_txnmid',
        'br_regno': 'br_regno',
        'reg_code': 'reg_code',
        'shortname_rus': 'shortname_rus',
        'fullname_rus': 'fullname_rus',
        'shortname_eng': 'shortname_eng',
        'legal_address': 'legal_address',
        'country': 'country',
        'country_reg': 'country_reg',
        'oecd_lvl': 'oecd_lvl',
        'is_riskfree': 'is_riskfree',
        'okved': 'okved',
        'kpp': 'kpp',
        'is_finorg': 'is_finorg',
        'is_govorg': 'is_govorg',
        'licinfo_type': 'licinfo_type',
        'licinfo_no': 'licinfo_no',
        'activ_id': 'activ_id',
        'is_lloyd': 'is_lloyd',
        'is_systinfr': 'is_systinfr',
        'is_default': 'is_default',
        'capital': 'capital',
        'capital_unit': 'capital_unit',
        'post_address': 'post_address',
        'e_mail': 'e_mail',
        'is_gov_or_cb': 'is_gov_or_cb',
        'on_behalf_of_state': 'on_behalf_of_state',
        'is_subject_rf': 'is_subject_rf',
        'is_branch': 'is_branch',
        'is_liquidated': 'is_liquidated',
        'is_govorg_ext': 'is_govorg_ext',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, source_id=None, source_type=None, counterpartyid=None, inn=None, ogrn=None, tin=None, lei_code=None, fininstid=None, okpo=None, sparkid=None, br_txnmid=None, br_regno=None, reg_code=None, shortname_rus=None, fullname_rus=None, shortname_eng=None, legal_address=None, country=None, country_reg=None, oecd_lvl=None, is_riskfree=None, okved=None, kpp=None, is_finorg=None, is_govorg=None, licinfo_type=None, licinfo_no=None, activ_id=None, is_lloyd=None, is_systinfr=None, is_default=None, capital=None, capital_unit=None, post_address=None, e_mail=None, is_gov_or_cb=None, on_behalf_of_state=None, is_subject_rf=None, is_branch=None, is_liquidated=None, is_govorg_ext=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsSolvencyCounterpartyFields - a model defined in Swagger"""  # noqa: E501
        self._source_id = None
        self._source_type = None
        self._counterpartyid = None
        self._inn = None
        self._ogrn = None
        self._tin = None
        self._lei_code = None
        self._fininstid = None
        self._okpo = None
        self._sparkid = None
        self._br_txnmid = None
        self._br_regno = None
        self._reg_code = None
        self._shortname_rus = None
        self._fullname_rus = None
        self._shortname_eng = None
        self._legal_address = None
        self._country = None
        self._country_reg = None
        self._oecd_lvl = None
        self._is_riskfree = None
        self._okved = None
        self._kpp = None
        self._is_finorg = None
        self._is_govorg = None
        self._licinfo_type = None
        self._licinfo_no = None
        self._activ_id = None
        self._is_lloyd = None
        self._is_systinfr = None
        self._is_default = None
        self._capital = None
        self._capital_unit = None
        self._post_address = None
        self._e_mail = None
        self._is_gov_or_cb = None
        self._on_behalf_of_state = None
        self._is_subject_rf = None
        self._is_branch = None
        self._is_liquidated = None
        self._is_govorg_ext = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if source_id is not None:
            self.source_id = source_id
        if source_type is not None:
            self.source_type = source_type
        if counterpartyid is not None:
            self.counterpartyid = counterpartyid
        if inn is not None:
            self.inn = inn
        if ogrn is not None:
            self.ogrn = ogrn
        if tin is not None:
            self.tin = tin
        if lei_code is not None:
            self.lei_code = lei_code
        if fininstid is not None:
            self.fininstid = fininstid
        if okpo is not None:
            self.okpo = okpo
        if sparkid is not None:
            self.sparkid = sparkid
        if br_txnmid is not None:
            self.br_txnmid = br_txnmid
        if br_regno is not None:
            self.br_regno = br_regno
        if reg_code is not None:
            self.reg_code = reg_code
        if shortname_rus is not None:
            self.shortname_rus = shortname_rus
        if fullname_rus is not None:
            self.fullname_rus = fullname_rus
        if shortname_eng is not None:
            self.shortname_eng = shortname_eng
        if legal_address is not None:
            self.legal_address = legal_address
        if country is not None:
            self.country = country
        if country_reg is not None:
            self.country_reg = country_reg
        if oecd_lvl is not None:
            self.oecd_lvl = oecd_lvl
        if is_riskfree is not None:
            self.is_riskfree = is_riskfree
        if okved is not None:
            self.okved = okved
        if kpp is not None:
            self.kpp = kpp
        if is_finorg is not None:
            self.is_finorg = is_finorg
        if is_govorg is not None:
            self.is_govorg = is_govorg
        if licinfo_type is not None:
            self.licinfo_type = licinfo_type
        if licinfo_no is not None:
            self.licinfo_no = licinfo_no
        if activ_id is not None:
            self.activ_id = activ_id
        if is_lloyd is not None:
            self.is_lloyd = is_lloyd
        if is_systinfr is not None:
            self.is_systinfr = is_systinfr
        if is_default is not None:
            self.is_default = is_default
        if capital is not None:
            self.capital = capital
        if capital_unit is not None:
            self.capital_unit = capital_unit
        if post_address is not None:
            self.post_address = post_address
        if e_mail is not None:
            self.e_mail = e_mail
        if is_gov_or_cb is not None:
            self.is_gov_or_cb = is_gov_or_cb
        if on_behalf_of_state is not None:
            self.on_behalf_of_state = on_behalf_of_state
        if is_subject_rf is not None:
            self.is_subject_rf = is_subject_rf
        if is_branch is not None:
            self.is_branch = is_branch
        if is_liquidated is not None:
            self.is_liquidated = is_liquidated
        if is_govorg_ext is not None:
            self.is_govorg_ext = is_govorg_ext
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def source_id(self):
        """Gets the source_id of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Входной идентификатор поиска контрагента  # noqa: E501

        :return: The source_id of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Входной идентификатор поиска контрагента  # noqa: E501

        :param source_id: The source_id of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Входной тип идентификатора поиска:  \"COUNTERPARTYID\",  \"INN\",  \"OGRN\",  \"TIN\",  \"LEI_CODE\",  \"FININSTID\",  \"OKPO\",  \"SPARKID\"  \"REG_CODE\"  # noqa: E501

        :return: The source_type of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Входной тип идентификатора поиска:  \"COUNTERPARTYID\",  \"INN\",  \"OGRN\",  \"TIN\",  \"LEI_CODE\",  \"FININSTID\",  \"OKPO\",  \"SPARKID\"  \"REG_CODE\"  # noqa: E501

        :param source_type: The source_type of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def counterpartyid(self):
        """Gets the counterpartyid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Уникальный идентификатор контрагента  # noqa: E501

        :return: The counterpartyid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: int
        """
        return self._counterpartyid

    @counterpartyid.setter
    def counterpartyid(self, counterpartyid):
        """Sets the counterpartyid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Уникальный идентификатор контрагента  # noqa: E501

        :param counterpartyid: The counterpartyid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: int
        """

        self._counterpartyid = counterpartyid

    @property
    def inn(self):
        """Gets the inn of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        ИНН  # noqa: E501

        :return: The inn of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._inn

    @inn.setter
    def inn(self, inn):
        """Sets the inn of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        ИНН  # noqa: E501

        :param inn: The inn of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._inn = inn

    @property
    def ogrn(self):
        """Gets the ogrn of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        ОГРН  # noqa: E501

        :return: The ogrn of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._ogrn

    @ogrn.setter
    def ogrn(self, ogrn):
        """Sets the ogrn of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        ОГРН  # noqa: E501

        :param ogrn: The ogrn of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._ogrn = ogrn

    @property
    def tin(self):
        """Gets the tin of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Идентификационный номер налогоплательщика  # noqa: E501

        :return: The tin of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._tin

    @tin.setter
    def tin(self, tin):
        """Sets the tin of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Идентификационный номер налогоплательщика  # noqa: E501

        :param tin: The tin of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._tin = tin

    @property
    def lei_code(self):
        """Gets the lei_code of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        ID юридического лица  # noqa: E501

        :return: The lei_code of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._lei_code

    @lei_code.setter
    def lei_code(self, lei_code):
        """Sets the lei_code of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        ID юридического лица  # noqa: E501

        :param lei_code: The lei_code of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._lei_code = lei_code

    @property
    def fininstid(self):
        """Gets the fininstid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        ID эмитента в БД Интерфакс  # noqa: E501

        :return: The fininstid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid

    @fininstid.setter
    def fininstid(self, fininstid):
        """Sets the fininstid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        ID эмитента в БД Интерфакс  # noqa: E501

        :param fininstid: The fininstid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: int
        """

        self._fininstid = fininstid

    @property
    def okpo(self):
        """Gets the okpo of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        ОКПО  # noqa: E501

        :return: The okpo of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._okpo

    @okpo.setter
    def okpo(self, okpo):
        """Sets the okpo of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        ОКПО  # noqa: E501

        :param okpo: The okpo of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._okpo = okpo

    @property
    def sparkid(self):
        """Gets the sparkid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        ID СПАРК  # noqa: E501

        :return: The sparkid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: int
        """
        return self._sparkid

    @sparkid.setter
    def sparkid(self, sparkid):
        """Sets the sparkid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        ID СПАРК  # noqa: E501

        :param sparkid: The sparkid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: int
        """

        self._sparkid = sparkid

    @property
    def br_txnmid(self):
        """Gets the br_txnmid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Код ЦБ контрагента  # noqa: E501

        :return: The br_txnmid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._br_txnmid

    @br_txnmid.setter
    def br_txnmid(self, br_txnmid):
        """Sets the br_txnmid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Код ЦБ контрагента  # noqa: E501

        :param br_txnmid: The br_txnmid of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._br_txnmid = br_txnmid

    @property
    def br_regno(self):
        """Gets the br_regno of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Регистрационный номер ЦБ контрагента  # noqa: E501

        :return: The br_regno of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._br_regno

    @br_regno.setter
    def br_regno(self, br_regno):
        """Sets the br_regno of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Регистрационный номер ЦБ контрагента  # noqa: E501

        :param br_regno: The br_regno of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._br_regno = br_regno

    @property
    def reg_code(self):
        """Gets the reg_code of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Регистрационный номер (ОГРН для российских компаний)  # noqa: E501

        :return: The reg_code of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._reg_code

    @reg_code.setter
    def reg_code(self, reg_code):
        """Sets the reg_code of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Регистрационный номер (ОГРН для российских компаний)  # noqa: E501

        :param reg_code: The reg_code of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._reg_code = reg_code

    @property
    def shortname_rus(self):
        """Gets the shortname_rus of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Краткое наименование, рус.  # noqa: E501

        :return: The shortname_rus of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_rus

    @shortname_rus.setter
    def shortname_rus(self, shortname_rus):
        """Sets the shortname_rus of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Краткое наименование, рус.  # noqa: E501

        :param shortname_rus: The shortname_rus of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._shortname_rus = shortname_rus

    @property
    def fullname_rus(self):
        """Gets the fullname_rus of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Полное наименование, рус.  # noqa: E501

        :return: The fullname_rus of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_rus

    @fullname_rus.setter
    def fullname_rus(self, fullname_rus):
        """Sets the fullname_rus of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Полное наименование, рус.  # noqa: E501

        :param fullname_rus: The fullname_rus of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._fullname_rus = fullname_rus

    @property
    def shortname_eng(self):
        """Gets the shortname_eng of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Краткое наименование, англ.  # noqa: E501

        :return: The shortname_eng of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_eng

    @shortname_eng.setter
    def shortname_eng(self, shortname_eng):
        """Sets the shortname_eng of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Краткое наименование, англ.  # noqa: E501

        :param shortname_eng: The shortname_eng of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._shortname_eng = shortname_eng

    @property
    def legal_address(self):
        """Gets the legal_address of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Юридический адрес  # noqa: E501

        :return: The legal_address of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._legal_address

    @legal_address.setter
    def legal_address(self, legal_address):
        """Sets the legal_address of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Юридический адрес  # noqa: E501

        :param legal_address: The legal_address of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._legal_address = legal_address

    @property
    def country(self):
        """Gets the country of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Cтрана по местонахождению, трёхбуквенный код ОКСМ  # noqa: E501

        :return: The country of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Cтрана по местонахождению, трёхбуквенный код ОКСМ  # noqa: E501

        :param country: The country of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_reg(self):
        """Gets the country_reg of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Страна регистрации организации, трехбуквенный код ОКСМ  # noqa: E501

        :return: The country_reg of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._country_reg

    @country_reg.setter
    def country_reg(self, country_reg):
        """Sets the country_reg of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Страна регистрации организации, трехбуквенный код ОКСМ  # noqa: E501

        :param country_reg: The country_reg of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._country_reg = country_reg

    @property
    def oecd_lvl(self):
        """Gets the oecd_lvl of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Классификация страны ОЭСР  # noqa: E501

        :return: The oecd_lvl of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._oecd_lvl

    @oecd_lvl.setter
    def oecd_lvl(self, oecd_lvl):
        """Sets the oecd_lvl of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Классификация страны ОЭСР  # noqa: E501

        :param oecd_lvl: The oecd_lvl of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._oecd_lvl = oecd_lvl

    @property
    def is_riskfree(self):
        """Gets the is_riskfree of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Флаг вхождения страны в списки безрисковых стран  # noqa: E501

        :return: The is_riskfree of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_riskfree

    @is_riskfree.setter
    def is_riskfree(self, is_riskfree):
        """Sets the is_riskfree of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Флаг вхождения страны в списки безрисковых стран  # noqa: E501

        :param is_riskfree: The is_riskfree of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: bool
        """

        self._is_riskfree = is_riskfree

    @property
    def okved(self):
        """Gets the okved of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Основной код ОКВЭД  # noqa: E501

        :return: The okved of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._okved

    @okved.setter
    def okved(self, okved):
        """Sets the okved of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Основной код ОКВЭД  # noqa: E501

        :param okved: The okved of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._okved = okved

    @property
    def kpp(self):
        """Gets the kpp of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Код причины постановки на учет (КПП)  # noqa: E501

        :return: The kpp of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._kpp

    @kpp.setter
    def kpp(self, kpp):
        """Sets the kpp of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Код причины постановки на учет (КПП)  # noqa: E501

        :param kpp: The kpp of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._kpp = kpp

    @property
    def is_finorg(self):
        """Gets the is_finorg of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Флаг финансовой организации  # noqa: E501

        :return: The is_finorg of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_finorg

    @is_finorg.setter
    def is_finorg(self, is_finorg):
        """Sets the is_finorg of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Флаг финансовой организации  # noqa: E501

        :param is_finorg: The is_finorg of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: bool
        """

        self._is_finorg = is_finorg

    @property
    def is_govorg(self):
        """Gets the is_govorg of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Флаг государственной организации  # noqa: E501

        :return: The is_govorg of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_govorg

    @is_govorg.setter
    def is_govorg(self, is_govorg):
        """Sets the is_govorg of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Флаг государственной организации  # noqa: E501

        :param is_govorg: The is_govorg of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: bool
        """

        self._is_govorg = is_govorg

    @property
    def licinfo_type(self):
        """Gets the licinfo_type of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Тип лицензии НФО  # noqa: E501

        :return: The licinfo_type of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._licinfo_type

    @licinfo_type.setter
    def licinfo_type(self, licinfo_type):
        """Sets the licinfo_type of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Тип лицензии НФО  # noqa: E501

        :param licinfo_type: The licinfo_type of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._licinfo_type = licinfo_type

    @property
    def licinfo_no(self):
        """Gets the licinfo_no of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Номер лицензии НФО  # noqa: E501

        :return: The licinfo_no of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._licinfo_no

    @licinfo_no.setter
    def licinfo_no(self, licinfo_no):
        """Sets the licinfo_no of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Номер лицензии НФО  # noqa: E501

        :param licinfo_no: The licinfo_no of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._licinfo_no = licinfo_no

    @property
    def activ_id(self):
        """Gets the activ_id of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Код вида деятельности  # noqa: E501

        :return: The activ_id of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._activ_id

    @activ_id.setter
    def activ_id(self, activ_id):
        """Sets the activ_id of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Код вида деятельности  # noqa: E501

        :param activ_id: The activ_id of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._activ_id = activ_id

    @property
    def is_lloyd(self):
        """Gets the is_lloyd of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Флаг отнесения к синдикатам Ллойда  # noqa: E501

        :return: The is_lloyd of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_lloyd

    @is_lloyd.setter
    def is_lloyd(self, is_lloyd):
        """Sets the is_lloyd of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Флаг отнесения к синдикатам Ллойда  # noqa: E501

        :param is_lloyd: The is_lloyd of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: bool
        """

        self._is_lloyd = is_lloyd

    @property
    def is_systinfr(self):
        """Gets the is_systinfr of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Флаг системно значимой инфраструктурной организации  # noqa: E501

        :return: The is_systinfr of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_systinfr

    @is_systinfr.setter
    def is_systinfr(self, is_systinfr):
        """Sets the is_systinfr of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Флаг системно значимой инфраструктурной организации  # noqa: E501

        :param is_systinfr: The is_systinfr of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: bool
        """

        self._is_systinfr = is_systinfr

    @property
    def is_default(self):
        """Gets the is_default of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Флаг наличия актуального дефолта  # noqa: E501

        :return: The is_default of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Флаг наличия актуального дефолта  # noqa: E501

        :param is_default: The is_default of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def capital(self):
        """Gets the capital of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Величина уставного капитала  # noqa: E501

        :return: The capital of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: float
        """
        return self._capital

    @capital.setter
    def capital(self, capital):
        """Sets the capital of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Величина уставного капитала  # noqa: E501

        :param capital: The capital of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: float
        """

        self._capital = capital

    @property
    def capital_unit(self):
        """Gets the capital_unit of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Валюта уставного капитала  # noqa: E501

        :return: The capital_unit of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._capital_unit

    @capital_unit.setter
    def capital_unit(self, capital_unit):
        """Sets the capital_unit of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Валюта уставного капитала  # noqa: E501

        :param capital_unit: The capital_unit of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._capital_unit = capital_unit

    @property
    def post_address(self):
        """Gets the post_address of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Почтовый адрес  # noqa: E501

        :return: The post_address of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._post_address

    @post_address.setter
    def post_address(self, post_address):
        """Sets the post_address of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Почтовый адрес  # noqa: E501

        :param post_address: The post_address of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._post_address = post_address

    @property
    def e_mail(self):
        """Gets the e_mail of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Адрес электронной почты  # noqa: E501

        :return: The e_mail of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: str
        """
        return self._e_mail

    @e_mail.setter
    def e_mail(self, e_mail):
        """Sets the e_mail of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Адрес электронной почты  # noqa: E501

        :param e_mail: The e_mail of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: str
        """

        self._e_mail = e_mail

    @property
    def is_gov_or_cb(self):
        """Gets the is_gov_or_cb of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Флаг правительства или центрального банка  # noqa: E501

        :return: The is_gov_or_cb of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_gov_or_cb

    @is_gov_or_cb.setter
    def is_gov_or_cb(self, is_gov_or_cb):
        """Sets the is_gov_or_cb of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Флаг правительства или центрального банка  # noqa: E501

        :param is_gov_or_cb: The is_gov_or_cb of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: bool
        """

        self._is_gov_or_cb = is_gov_or_cb

    @property
    def on_behalf_of_state(self):
        """Gets the on_behalf_of_state of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Флаг права заимствования от лица правительства, страны  # noqa: E501

        :return: The on_behalf_of_state of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: bool
        """
        return self._on_behalf_of_state

    @on_behalf_of_state.setter
    def on_behalf_of_state(self, on_behalf_of_state):
        """Sets the on_behalf_of_state of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Флаг права заимствования от лица правительства, страны  # noqa: E501

        :param on_behalf_of_state: The on_behalf_of_state of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: bool
        """

        self._on_behalf_of_state = on_behalf_of_state

    @property
    def is_subject_rf(self):
        """Gets the is_subject_rf of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Флаг субъекта РФ или муниципального образования РФ  # noqa: E501

        :return: The is_subject_rf of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_subject_rf

    @is_subject_rf.setter
    def is_subject_rf(self, is_subject_rf):
        """Sets the is_subject_rf of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Флаг субъекта РФ или муниципального образования РФ  # noqa: E501

        :param is_subject_rf: The is_subject_rf of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: bool
        """

        self._is_subject_rf = is_subject_rf

    @property
    def is_branch(self):
        """Gets the is_branch of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Флаг филиала  # noqa: E501

        :return: The is_branch of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_branch

    @is_branch.setter
    def is_branch(self, is_branch):
        """Sets the is_branch of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Флаг филиала  # noqa: E501

        :param is_branch: The is_branch of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: bool
        """

        self._is_branch = is_branch

    @property
    def is_liquidated(self):
        """Gets the is_liquidated of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Флаг ликвидации контрагента  # noqa: E501

        :return: The is_liquidated of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_liquidated

    @is_liquidated.setter
    def is_liquidated(self, is_liquidated):
        """Sets the is_liquidated of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Флаг ликвидации контрагента  # noqa: E501

        :param is_liquidated: The is_liquidated of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: bool
        """

        self._is_liquidated = is_liquidated

    @property
    def is_govorg_ext(self):
        """Gets the is_govorg_ext of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Флаг государственной организации, включающий принадлежность к территориальным фондам  # noqa: E501

        :return: The is_govorg_ext of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_govorg_ext

    @is_govorg_ext.setter
    def is_govorg_ext(self, is_govorg_ext):
        """Sets the is_govorg_ext of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Флаг государственной организации, включающий принадлежность к территориальным фондам  # noqa: E501

        :param is_govorg_ext: The is_govorg_ext of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: bool
        """

        self._is_govorg_ext = is_govorg_ext

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsSolvencyCounterpartyFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsSolvencyCounterpartyFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsSolvencyCounterpartyFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsSolvencyCounterpartyFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
