# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'datetime',
        'items': 'list[EfirDataHubModelsRequestsV2BondCalculateBondMultiRequestItem]',
        'fields': 'list[str]',
        'periods': 'AllOfEfirDataHubModelsRequestsV2BondCalculateBondMultiRequestPeriods'
    }

    attribute_map = {
        '_date': 'date',
        'items': 'items',
        'fields': 'fields',
        'periods': 'periods'
    }

    def __init__(self, _date=None, items=None, fields=None, periods=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._items = None
        self._fields = None
        self._periods = None
        self.discriminator = None
        self._date = _date
        self.items = items
        if fields is not None:
            self.fields = fields
        if periods is not None:
            self.periods = periods

    @property
    def _date(self):
        """Gets the _date of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.  # noqa: E501

        Дата расчёта  # noqa: E501

        :return: The _date of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.

        Дата расчёта  # noqa: E501

        :param _date: The _date of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def items(self):
        """Gets the items of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.  # noqa: E501

        Список инструментов с параметрами  # noqa: E501

        :return: The items of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.  # noqa: E501
        :rtype: list[EfirDataHubModelsRequestsV2BondCalculateBondMultiRequestItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.

        Список инструментов с параметрами  # noqa: E501

        :param items: The items of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.  # noqa: E501
        :type: list[EfirDataHubModelsRequestsV2BondCalculateBondMultiRequestItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def fields(self):
        """Gets the fields of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.  # noqa: E501

        Список требуемых полей  # noqa: E501

        :return: The fields of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.

        Список требуемых полей  # noqa: E501

        :param fields: The fields of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.  # noqa: E501
        :type: list[str]
        """

        self._fields = fields

    @property
    def periods(self):
        """Gets the periods of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.  # noqa: E501

        Определяет периоды расчёта, т.е. набор возвращаемых данных:   0 - до погашения и ближайшей оферты  1- сводные значения  2 – до погашения  3 – до погашения и всех оставшихся оферт  0 = MaturityAndOffer  1 = Consolidated  2 = Maturity  3 = MaturityAndAllOffers  # noqa: E501

        :return: The periods of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.  # noqa: E501
        :rtype: AllOfEfirDataHubModelsRequestsV2BondCalculateBondMultiRequestPeriods
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.

        Определяет периоды расчёта, т.е. набор возвращаемых данных:   0 - до погашения и ближайшей оферты  1- сводные значения  2 – до погашения  3 – до погашения и всех оставшихся оферт  0 = MaturityAndOffer  1 = Consolidated  2 = Maturity  3 = MaturityAndAllOffers  # noqa: E501

        :param periods: The periods of this EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest.  # noqa: E501
        :type: AllOfEfirDataHubModelsRequestsV2BondCalculateBondMultiRequestPeriods
        """

        self._periods = periods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2BondCalculateBondMultiRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
