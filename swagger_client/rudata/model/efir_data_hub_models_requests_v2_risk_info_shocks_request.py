# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2RiskInfoShocksRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ids': 'list[int]',
        'date_from': 'datetime',
        'date_to': 'datetime',
        'min_duration': 'float',
        'share_last_known': 'bool'
    }

    attribute_map = {
        'ids': 'ids',
        'date_from': 'dateFrom',
        'date_to': 'dateTo',
        'min_duration': 'minDuration',
        'share_last_known': 'shareLastKnown'
    }

    def __init__(self, ids=None, date_from=None, date_to=None, min_duration=None, share_last_known=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2RiskInfoShocksRequest - a model defined in Swagger"""  # noqa: E501
        self._ids = None
        self._date_from = None
        self._date_to = None
        self._min_duration = None
        self._share_last_known = None
        self.discriminator = None
        self.ids = ids
        if date_from is not None:
            self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to
        if min_duration is not None:
            self.min_duration = min_duration
        if share_last_known is not None:
            self.share_last_known = share_last_known

    @property
    def ids(self):
        """Gets the ids of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501

        Список fintoolId инструментов  # noqa: E501

        :return: The ids of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.

        Список fintoolId инструментов  # noqa: E501

        :param ids: The ids of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501
        :type: list[int]
        """
        if ids is None:
            raise ValueError("Invalid value for `ids`, must not be `None`")  # noqa: E501

        self._ids = ids

    @property
    def date_from(self):
        """Gets the date_from of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501

        Начало периода  # noqa: E501

        :return: The date_from of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.

        Начало периода  # noqa: E501

        :param date_from: The date_from of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501
        :type: datetime
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501

        Конец периода  # noqa: E501

        :return: The date_to of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.

        Конец периода  # noqa: E501

        :param date_to: The date_to of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501
        :type: datetime
        """

        self._date_to = date_to

    @property
    def min_duration(self):
        """Gets the min_duration of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501

        Минимальная дюрация  # noqa: E501

        :return: The min_duration of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501
        :rtype: float
        """
        return self._min_duration

    @min_duration.setter
    def min_duration(self, min_duration):
        """Sets the min_duration of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.

        Минимальная дюрация  # noqa: E501

        :param min_duration: The min_duration of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501
        :type: float
        """

        self._min_duration = min_duration

    @property
    def share_last_known(self):
        """Gets the share_last_known of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501

        Использовать данные рисков по акциям за последний расчитанный день  # noqa: E501

        :return: The share_last_known of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501
        :rtype: bool
        """
        return self._share_last_known

    @share_last_known.setter
    def share_last_known(self, share_last_known):
        """Sets the share_last_known of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.

        Использовать данные рисков по акциям за последний расчитанный день  # noqa: E501

        :param share_last_known: The share_last_known of this EfirDataHubModelsRequestsV2RiskInfoShocksRequest.  # noqa: E501
        :type: bool
        """

        self._share_last_known = share_last_known

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2RiskInfoShocksRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2RiskInfoShocksRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
