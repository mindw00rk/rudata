# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsScoringOwner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shortname': 'str',
        'sparkid': 'int',
        'inn': 'str',
        'ogrn': 'str',
        'sharepart_total': 'float',
        'pd': 'float',
        'scoring_rating': 'str',
        'compaggv2_rating': 'str',
        'has_ifrs': 'bool',
        'revenue': 'float',
        'guar_size': 'float',
        'liab_coverage': 'float',
        'support_prob': 'float'
    }

    attribute_map = {
        'shortname': 'shortname',
        'sparkid': 'sparkid',
        'inn': 'inn',
        'ogrn': 'ogrn',
        'sharepart_total': 'sharepart_total',
        'pd': 'pd',
        'scoring_rating': 'scoring_rating',
        'compaggv2_rating': 'compaggv2_rating',
        'has_ifrs': 'has_ifrs',
        'revenue': 'revenue',
        'guar_size': 'guar_size',
        'liab_coverage': 'liab_coverage',
        'support_prob': 'support_prob'
    }

    def __init__(self, shortname=None, sparkid=None, inn=None, ogrn=None, sharepart_total=None, pd=None, scoring_rating=None, compaggv2_rating=None, has_ifrs=None, revenue=None, guar_size=None, liab_coverage=None, support_prob=None):  # noqa: E501
        """EfirDataHubModelsModelsScoringOwner - a model defined in Swagger"""  # noqa: E501
        self._shortname = None
        self._sparkid = None
        self._inn = None
        self._ogrn = None
        self._sharepart_total = None
        self._pd = None
        self._scoring_rating = None
        self._compaggv2_rating = None
        self._has_ifrs = None
        self._revenue = None
        self._guar_size = None
        self._liab_coverage = None
        self._support_prob = None
        self.discriminator = None
        if shortname is not None:
            self.shortname = shortname
        if sparkid is not None:
            self.sparkid = sparkid
        if inn is not None:
            self.inn = inn
        if ogrn is not None:
            self.ogrn = ogrn
        if sharepart_total is not None:
            self.sharepart_total = sharepart_total
        if pd is not None:
            self.pd = pd
        if scoring_rating is not None:
            self.scoring_rating = scoring_rating
        if compaggv2_rating is not None:
            self.compaggv2_rating = compaggv2_rating
        if has_ifrs is not None:
            self.has_ifrs = has_ifrs
        if revenue is not None:
            self.revenue = revenue
        if guar_size is not None:
            self.guar_size = guar_size
        if liab_coverage is not None:
            self.liab_coverage = liab_coverage
        if support_prob is not None:
            self.support_prob = support_prob

    @property
    def shortname(self):
        """Gets the shortname of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        Краткое наименование  # noqa: E501

        :return: The shortname of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname):
        """Sets the shortname of this EfirDataHubModelsModelsScoringOwner.

        Краткое наименование  # noqa: E501

        :param shortname: The shortname of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: str
        """

        self._shortname = shortname

    @property
    def sparkid(self):
        """Gets the sparkid of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        Идентификатор СПАРК родительской компании  # noqa: E501

        :return: The sparkid of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: int
        """
        return self._sparkid

    @sparkid.setter
    def sparkid(self, sparkid):
        """Sets the sparkid of this EfirDataHubModelsModelsScoringOwner.

        Идентификатор СПАРК родительской компании  # noqa: E501

        :param sparkid: The sparkid of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: int
        """

        self._sparkid = sparkid

    @property
    def inn(self):
        """Gets the inn of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        ИНН  # noqa: E501

        :return: The inn of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: str
        """
        return self._inn

    @inn.setter
    def inn(self, inn):
        """Sets the inn of this EfirDataHubModelsModelsScoringOwner.

        ИНН  # noqa: E501

        :param inn: The inn of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: str
        """

        self._inn = inn

    @property
    def ogrn(self):
        """Gets the ogrn of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        ОГРН  # noqa: E501

        :return: The ogrn of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: str
        """
        return self._ogrn

    @ogrn.setter
    def ogrn(self, ogrn):
        """Sets the ogrn of this EfirDataHubModelsModelsScoringOwner.

        ОГРН  # noqa: E501

        :param ogrn: The ogrn of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: str
        """

        self._ogrn = ogrn

    @property
    def sharepart_total(self):
        """Gets the sharepart_total of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        Полная доля владения в компании c учетом перекрестного владения и промежуточных акционеров (может быть больше 1 при суммировании значений у разных акционеров).  # noqa: E501

        :return: The sharepart_total of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: float
        """
        return self._sharepart_total

    @sharepart_total.setter
    def sharepart_total(self, sharepart_total):
        """Sets the sharepart_total of this EfirDataHubModelsModelsScoringOwner.

        Полная доля владения в компании c учетом перекрестного владения и промежуточных акционеров (может быть больше 1 при суммировании значений у разных акционеров).  # noqa: E501

        :param sharepart_total: The sharepart_total of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: float
        """

        self._sharepart_total = sharepart_total

    @property
    def pd(self):
        """Gets the pd of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        Вероятность дефолта, %  # noqa: E501

        :return: The pd of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: float
        """
        return self._pd

    @pd.setter
    def pd(self, pd):
        """Sets the pd of this EfirDataHubModelsModelsScoringOwner.

        Вероятность дефолта, %  # noqa: E501

        :param pd: The pd of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: float
        """

        self._pd = pd

    @property
    def scoring_rating(self):
        """Gets the scoring_rating of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        Рейтинг (по скоринговой оценке Интерфакс)  # noqa: E501

        :return: The scoring_rating of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: str
        """
        return self._scoring_rating

    @scoring_rating.setter
    def scoring_rating(self, scoring_rating):
        """Sets the scoring_rating of this EfirDataHubModelsModelsScoringOwner.

        Рейтинг (по скоринговой оценке Интерфакс)  # noqa: E501

        :param scoring_rating: The scoring_rating of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: str
        """

        self._scoring_rating = scoring_rating

    @property
    def compaggv2_rating(self):
        """Gets the compaggv2_rating of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        Рейтинг  # noqa: E501

        :return: The compaggv2_rating of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: str
        """
        return self._compaggv2_rating

    @compaggv2_rating.setter
    def compaggv2_rating(self, compaggv2_rating):
        """Sets the compaggv2_rating of this EfirDataHubModelsModelsScoringOwner.

        Рейтинг  # noqa: E501

        :param compaggv2_rating: The compaggv2_rating of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: str
        """

        self._compaggv2_rating = compaggv2_rating

    @property
    def has_ifrs(self):
        """Gets the has_ifrs of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        Флаг наличия отчетности МСФО  # noqa: E501

        :return: The has_ifrs of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: bool
        """
        return self._has_ifrs

    @has_ifrs.setter
    def has_ifrs(self, has_ifrs):
        """Sets the has_ifrs of this EfirDataHubModelsModelsScoringOwner.

        Флаг наличия отчетности МСФО  # noqa: E501

        :param has_ifrs: The has_ifrs of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: bool
        """

        self._has_ifrs = has_ifrs

    @property
    def revenue(self):
        """Gets the revenue of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        Величина выручки по отчетности, руб.  # noqa: E501

        :return: The revenue of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this EfirDataHubModelsModelsScoringOwner.

        Величина выручки по отчетности, руб.  # noqa: E501

        :param revenue: The revenue of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: float
        """

        self._revenue = revenue

    @property
    def guar_size(self):
        """Gets the guar_size of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        Величина гарантий по обязательствам, руб.  # noqa: E501

        :return: The guar_size of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: float
        """
        return self._guar_size

    @guar_size.setter
    def guar_size(self, guar_size):
        """Sets the guar_size of this EfirDataHubModelsModelsScoringOwner.

        Величина гарантий по обязательствам, руб.  # noqa: E501

        :param guar_size: The guar_size of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: float
        """

        self._guar_size = guar_size

    @property
    def liab_coverage(self):
        """Gets the liab_coverage of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        Доля обязательств, покрытых гарантиями  # noqa: E501

        :return: The liab_coverage of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: float
        """
        return self._liab_coverage

    @liab_coverage.setter
    def liab_coverage(self, liab_coverage):
        """Sets the liab_coverage of this EfirDataHubModelsModelsScoringOwner.

        Доля обязательств, покрытых гарантиями  # noqa: E501

        :param liab_coverage: The liab_coverage of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: float
        """

        self._liab_coverage = liab_coverage

    @property
    def support_prob(self):
        """Gets the support_prob of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501

        Вероятность поддержки со стороны владельцев, %  # noqa: E501

        :return: The support_prob of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :rtype: float
        """
        return self._support_prob

    @support_prob.setter
    def support_prob(self, support_prob):
        """Sets the support_prob of this EfirDataHubModelsModelsScoringOwner.

        Вероятность поддержки со стороны владельцев, %  # noqa: E501

        :param support_prob: The support_prob of this EfirDataHubModelsModelsScoringOwner.  # noqa: E501
        :type: float
        """

        self._support_prob = support_prob

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsScoringOwner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsScoringOwner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
