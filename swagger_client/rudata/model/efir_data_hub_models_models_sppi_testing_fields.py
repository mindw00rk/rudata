# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsSppiTestingFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintool_id': 'int',
        'calc_date': 'datetime',
        'isin_code': 'str',
        'overallresult': 'str',
        'full_name': 'str',
        'coupon_type': 'str',
        'mty_date': 'datetime',
        'face_value_currency': 'str',
        'rate_formula': 'str',
        'multiplier': 'float',
        'specified_rate_period': 'int',
        'base_rate_period': 'int',
        'base_rate_currency': 'str',
        'base_rate_country': 'str',
        'base_rate_type': 'str',
        'convertibility': 'bool',
        'have_early_eedemption_offer': 'bool',
        'is_subordinated': 'bool',
        'criteria_check': 'list[EfirDataHubModelsModelsSppiTestingCriteriaCheck]',
        'covenants': 'list[EfirDataHubModelsModelsSppiTestingCovenant]',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'fintool_id': 'fintoolId',
        'calc_date': 'calcDate',
        'isin_code': 'isinCode',
        'overallresult': 'overallresult',
        'full_name': 'fullName',
        'coupon_type': 'couponType',
        'mty_date': 'mtyDate',
        'face_value_currency': 'faceValueCurrency',
        'rate_formula': 'rateFormula',
        'multiplier': 'multiplier',
        'specified_rate_period': 'specifiedRatePeriod',
        'base_rate_period': 'baseRatePeriod',
        'base_rate_currency': 'baseRateCurrency',
        'base_rate_country': 'baseRateCountry',
        'base_rate_type': 'baseRateType',
        'convertibility': 'convertibility',
        'have_early_eedemption_offer': 'haveEarlyEedemptionOffer',
        'is_subordinated': 'isSubordinated',
        'criteria_check': 'criteriaCheck',
        'covenants': 'covenants',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, fintool_id=None, calc_date=None, isin_code=None, overallresult=None, full_name=None, coupon_type=None, mty_date=None, face_value_currency=None, rate_formula=None, multiplier=None, specified_rate_period=None, base_rate_period=None, base_rate_currency=None, base_rate_country=None, base_rate_type=None, convertibility=None, have_early_eedemption_offer=None, is_subordinated=None, criteria_check=None, covenants=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsSppiTestingFields - a model defined in Swagger"""  # noqa: E501
        self._fintool_id = None
        self._calc_date = None
        self._isin_code = None
        self._overallresult = None
        self._full_name = None
        self._coupon_type = None
        self._mty_date = None
        self._face_value_currency = None
        self._rate_formula = None
        self._multiplier = None
        self._specified_rate_period = None
        self._base_rate_period = None
        self._base_rate_currency = None
        self._base_rate_country = None
        self._base_rate_type = None
        self._convertibility = None
        self._have_early_eedemption_offer = None
        self._is_subordinated = None
        self._criteria_check = None
        self._covenants = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if fintool_id is not None:
            self.fintool_id = fintool_id
        if calc_date is not None:
            self.calc_date = calc_date
        if isin_code is not None:
            self.isin_code = isin_code
        if overallresult is not None:
            self.overallresult = overallresult
        if full_name is not None:
            self.full_name = full_name
        if coupon_type is not None:
            self.coupon_type = coupon_type
        if mty_date is not None:
            self.mty_date = mty_date
        if face_value_currency is not None:
            self.face_value_currency = face_value_currency
        if rate_formula is not None:
            self.rate_formula = rate_formula
        if multiplier is not None:
            self.multiplier = multiplier
        if specified_rate_period is not None:
            self.specified_rate_period = specified_rate_period
        if base_rate_period is not None:
            self.base_rate_period = base_rate_period
        if base_rate_currency is not None:
            self.base_rate_currency = base_rate_currency
        if base_rate_country is not None:
            self.base_rate_country = base_rate_country
        if base_rate_type is not None:
            self.base_rate_type = base_rate_type
        if convertibility is not None:
            self.convertibility = convertibility
        if have_early_eedemption_offer is not None:
            self.have_early_eedemption_offer = have_early_eedemption_offer
        if is_subordinated is not None:
            self.is_subordinated = is_subordinated
        if criteria_check is not None:
            self.criteria_check = criteria_check
        if covenants is not None:
            self.covenants = covenants
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def fintool_id(self):
        """Gets the fintool_id of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Идентификатор бумаги в БД Интерфакс  # noqa: E501

        :return: The fintool_id of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: int
        """
        return self._fintool_id

    @fintool_id.setter
    def fintool_id(self, fintool_id):
        """Sets the fintool_id of this EfirDataHubModelsModelsSppiTestingFields.

        Идентификатор бумаги в БД Интерфакс  # noqa: E501

        :param fintool_id: The fintool_id of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: int
        """

        self._fintool_id = fintool_id

    @property
    def calc_date(self):
        """Gets the calc_date of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Дата тестирования  # noqa: E501

        :return: The calc_date of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: datetime
        """
        return self._calc_date

    @calc_date.setter
    def calc_date(self, calc_date):
        """Sets the calc_date of this EfirDataHubModelsModelsSppiTestingFields.

        Дата тестирования  # noqa: E501

        :param calc_date: The calc_date of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: datetime
        """

        self._calc_date = calc_date

    @property
    def isin_code(self):
        """Gets the isin_code of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Код инструмента ISIN  # noqa: E501

        :return: The isin_code of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: str
        """
        return self._isin_code

    @isin_code.setter
    def isin_code(self, isin_code):
        """Sets the isin_code of this EfirDataHubModelsModelsSppiTestingFields.

        Код инструмента ISIN  # noqa: E501

        :param isin_code: The isin_code of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: str
        """

        self._isin_code = isin_code

    @property
    def overallresult(self):
        """Gets the overallresult of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Общий результат тестирования  # noqa: E501

        :return: The overallresult of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: str
        """
        return self._overallresult

    @overallresult.setter
    def overallresult(self, overallresult):
        """Sets the overallresult of this EfirDataHubModelsModelsSppiTestingFields.

        Общий результат тестирования  # noqa: E501

        :param overallresult: The overallresult of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: str
        """

        self._overallresult = overallresult

    @property
    def full_name(self):
        """Gets the full_name of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Полное наименование облигации  # noqa: E501

        :return: The full_name of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this EfirDataHubModelsModelsSppiTestingFields.

        Полное наименование облигации  # noqa: E501

        :param full_name: The full_name of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def coupon_type(self):
        """Gets the coupon_type of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Тип купона  # noqa: E501

        :return: The coupon_type of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: str
        """
        return self._coupon_type

    @coupon_type.setter
    def coupon_type(self, coupon_type):
        """Sets the coupon_type of this EfirDataHubModelsModelsSppiTestingFields.

        Тип купона  # noqa: E501

        :param coupon_type: The coupon_type of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: str
        """

        self._coupon_type = coupon_type

    @property
    def mty_date(self):
        """Gets the mty_date of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Дата погашения  # noqa: E501

        :return: The mty_date of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: datetime
        """
        return self._mty_date

    @mty_date.setter
    def mty_date(self, mty_date):
        """Sets the mty_date of this EfirDataHubModelsModelsSppiTestingFields.

        Дата погашения  # noqa: E501

        :param mty_date: The mty_date of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: datetime
        """

        self._mty_date = mty_date

    @property
    def face_value_currency(self):
        """Gets the face_value_currency of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Валюта долга  # noqa: E501

        :return: The face_value_currency of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: str
        """
        return self._face_value_currency

    @face_value_currency.setter
    def face_value_currency(self, face_value_currency):
        """Sets the face_value_currency of this EfirDataHubModelsModelsSppiTestingFields.

        Валюта долга  # noqa: E501

        :param face_value_currency: The face_value_currency of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: str
        """

        self._face_value_currency = face_value_currency

    @property
    def rate_formula(self):
        """Gets the rate_formula of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Формула для плавающей и переменной ставок  # noqa: E501

        :return: The rate_formula of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: str
        """
        return self._rate_formula

    @rate_formula.setter
    def rate_formula(self, rate_formula):
        """Sets the rate_formula of this EfirDataHubModelsModelsSppiTestingFields.

        Формула для плавающей и переменной ставок  # noqa: E501

        :param rate_formula: The rate_formula of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: str
        """

        self._rate_formula = rate_formula

    @property
    def multiplier(self):
        """Gets the multiplier of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Множитель перед рыночным показателем  # noqa: E501

        :return: The multiplier of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: float
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """Sets the multiplier of this EfirDataHubModelsModelsSppiTestingFields.

        Множитель перед рыночным показателем  # noqa: E501

        :param multiplier: The multiplier of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: float
        """

        self._multiplier = multiplier

    @property
    def specified_rate_period(self):
        """Gets the specified_rate_period of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Период действия заданной ставки купона (в месяцах)  # noqa: E501

        :return: The specified_rate_period of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: int
        """
        return self._specified_rate_period

    @specified_rate_period.setter
    def specified_rate_period(self, specified_rate_period):
        """Sets the specified_rate_period of this EfirDataHubModelsModelsSppiTestingFields.

        Период действия заданной ставки купона (в месяцах)  # noqa: E501

        :param specified_rate_period: The specified_rate_period of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: int
        """

        self._specified_rate_period = specified_rate_period

    @property
    def base_rate_period(self):
        """Gets the base_rate_period of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Срок базовой процентной ставки (в месяцах)  # noqa: E501

        :return: The base_rate_period of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: int
        """
        return self._base_rate_period

    @base_rate_period.setter
    def base_rate_period(self, base_rate_period):
        """Sets the base_rate_period of this EfirDataHubModelsModelsSppiTestingFields.

        Срок базовой процентной ставки (в месяцах)  # noqa: E501

        :param base_rate_period: The base_rate_period of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: int
        """

        self._base_rate_period = base_rate_period

    @property
    def base_rate_currency(self):
        """Gets the base_rate_currency of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Валюта базовой процентной ставки  # noqa: E501

        :return: The base_rate_currency of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: str
        """
        return self._base_rate_currency

    @base_rate_currency.setter
    def base_rate_currency(self, base_rate_currency):
        """Sets the base_rate_currency of this EfirDataHubModelsModelsSppiTestingFields.

        Валюта базовой процентной ставки  # noqa: E501

        :param base_rate_currency: The base_rate_currency of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: str
        """

        self._base_rate_currency = base_rate_currency

    @property
    def base_rate_country(self):
        """Gets the base_rate_country of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Страна базовой процентной ставки в соответствии с ОКСМ  # noqa: E501

        :return: The base_rate_country of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: str
        """
        return self._base_rate_country

    @base_rate_country.setter
    def base_rate_country(self, base_rate_country):
        """Sets the base_rate_country of this EfirDataHubModelsModelsSppiTestingFields.

        Страна базовой процентной ставки в соответствии с ОКСМ  # noqa: E501

        :param base_rate_country: The base_rate_country of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: str
        """

        self._base_rate_country = base_rate_country

    @property
    def base_rate_type(self):
        """Gets the base_rate_type of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Тип базовой процентной ставки  # noqa: E501

        :return: The base_rate_type of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: str
        """
        return self._base_rate_type

    @base_rate_type.setter
    def base_rate_type(self, base_rate_type):
        """Sets the base_rate_type of this EfirDataHubModelsModelsSppiTestingFields.

        Тип базовой процентной ставки  # noqa: E501

        :param base_rate_type: The base_rate_type of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: str
        """

        self._base_rate_type = base_rate_type

    @property
    def convertibility(self):
        """Gets the convertibility of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Конвертируемость  # noqa: E501

        :return: The convertibility of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: bool
        """
        return self._convertibility

    @convertibility.setter
    def convertibility(self, convertibility):
        """Sets the convertibility of this EfirDataHubModelsModelsSppiTestingFields.

        Конвертируемость  # noqa: E501

        :param convertibility: The convertibility of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: bool
        """

        self._convertibility = convertibility

    @property
    def have_early_eedemption_offer(self):
        """Gets the have_early_eedemption_offer of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Оферты типа \"Досрочное погашение (ковенант)\"  # noqa: E501

        :return: The have_early_eedemption_offer of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: bool
        """
        return self._have_early_eedemption_offer

    @have_early_eedemption_offer.setter
    def have_early_eedemption_offer(self, have_early_eedemption_offer):
        """Sets the have_early_eedemption_offer of this EfirDataHubModelsModelsSppiTestingFields.

        Оферты типа \"Досрочное погашение (ковенант)\"  # noqa: E501

        :param have_early_eedemption_offer: The have_early_eedemption_offer of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: bool
        """

        self._have_early_eedemption_offer = have_early_eedemption_offer

    @property
    def is_subordinated(self):
        """Gets the is_subordinated of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Субординированность  # noqa: E501

        :return: The is_subordinated of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_subordinated

    @is_subordinated.setter
    def is_subordinated(self, is_subordinated):
        """Sets the is_subordinated of this EfirDataHubModelsModelsSppiTestingFields.

        Субординированность  # noqa: E501

        :param is_subordinated: The is_subordinated of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: bool
        """

        self._is_subordinated = is_subordinated

    @property
    def criteria_check(self):
        """Gets the criteria_check of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Массив результатов тестирования по критериям  # noqa: E501

        :return: The criteria_check of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: list[EfirDataHubModelsModelsSppiTestingCriteriaCheck]
        """
        return self._criteria_check

    @criteria_check.setter
    def criteria_check(self, criteria_check):
        """Sets the criteria_check of this EfirDataHubModelsModelsSppiTestingFields.

        Массив результатов тестирования по критериям  # noqa: E501

        :param criteria_check: The criteria_check of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: list[EfirDataHubModelsModelsSppiTestingCriteriaCheck]
        """

        self._criteria_check = criteria_check

    @property
    def covenants(self):
        """Gets the covenants of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Список ковенантов  # noqa: E501

        :return: The covenants of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: list[EfirDataHubModelsModelsSppiTestingCovenant]
        """
        return self._covenants

    @covenants.setter
    def covenants(self, covenants):
        """Sets the covenants of this EfirDataHubModelsModelsSppiTestingFields.

        Список ковенантов  # noqa: E501

        :param covenants: The covenants of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: list[EfirDataHubModelsModelsSppiTestingCovenant]
        """

        self._covenants = covenants

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsSppiTestingFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsSppiTestingFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsSppiTestingFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsSppiTestingFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsSppiTestingFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
