# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2ArchiveHistoryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iss_id': 'int',
        'isin': 'str',
        'date_from': 'datetime',
        'date_to': 'datetime',
        'step': 'str',
        'row_num': 'int',
        'fields': 'list[str]',
        'official': 'bool',
        'sort': 'str',
        'trade_site': 'str'
    }

    attribute_map = {
        'iss_id': 'issId',
        'isin': 'isin',
        'date_from': 'dateFrom',
        'date_to': 'dateTo',
        'step': 'step',
        'row_num': 'rowNum',
        'fields': 'fields',
        'official': 'official',
        'sort': 'sort',
        'trade_site': 'tradeSite'
    }

    def __init__(self, iss_id=None, isin=None, date_from=None, date_to=None, step=None, row_num=None, fields=None, official=None, sort=None, trade_site=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2ArchiveHistoryRequest - a model defined in Swagger"""  # noqa: E501
        self._iss_id = None
        self._isin = None
        self._date_from = None
        self._date_to = None
        self._step = None
        self._row_num = None
        self._fields = None
        self._official = None
        self._sort = None
        self._trade_site = None
        self.discriminator = None
        if iss_id is not None:
            self.iss_id = iss_id
        if isin is not None:
            self.isin = isin
        self.date_from = date_from
        self.date_to = date_to
        self.step = step
        if row_num is not None:
            self.row_num = row_num
        if fields is not None:
            self.fields = fields
        if official is not None:
            self.official = official
        if sort is not None:
            self.sort = sort
        if trade_site is not None:
            self.trade_site = trade_site

    @property
    def iss_id(self):
        """Gets the iss_id of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501

        Идентификатор инструмента. Должен быть задан этот параметр или isin.  # noqa: E501

        :return: The iss_id of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._iss_id

    @iss_id.setter
    def iss_id(self, iss_id):
        """Sets the iss_id of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.

        Идентификатор инструмента. Должен быть задан этот параметр или isin.  # noqa: E501

        :param iss_id: The iss_id of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :type: int
        """

        self._iss_id = iss_id

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501

        ISIN инструмента. Должен быть задан этот параметр или issId.  # noqa: E501

        :return: The isin of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.

        ISIN инструмента. Должен быть задан этот параметр или issId.  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def date_from(self):
        """Gets the date_from of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501

        Дата начала периода  # noqa: E501

        :return: The date_from of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.

        Дата начала периода  # noqa: E501

        :param date_from: The date_from of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :type: datetime
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")  # noqa: E501

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501

        Дата окончания периода  # noqa: E501

        :return: The date_to of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.

        Дата окончания периода  # noqa: E501

        :param date_to: The date_to of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :type: datetime
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")  # noqa: E501

        self._date_to = date_to

    @property
    def step(self):
        """Gets the step of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501

        Шаг 5 – 5-минутки; 30 – получасовики; 60 – часовики; 1440 – EndOfDay  # noqa: E501

        :return: The step of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.

        Шаг 5 – 5-минутки; 30 – получасовики; 60 – часовики; 1440 – EndOfDay  # noqa: E501

        :param step: The step of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :type: str
        """
        if step is None:
            raise ValueError("Invalid value for `step`, must not be `None`")  # noqa: E501

        self._step = step

    @property
    def row_num(self):
        """Gets the row_num of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501

        Макимальное возвращаемое количество записей.  # noqa: E501

        :return: The row_num of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._row_num

    @row_num.setter
    def row_num(self, row_num):
        """Sets the row_num of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.

        Макимальное возвращаемое количество записей.  # noqa: E501

        :param row_num: The row_num of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :type: int
        """

        self._row_num = row_num

    @property
    def fields(self):
        """Gets the fields of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501

        Список кодовых наименований полей, колонка name из выходной таблицы метода /Info/Fields. По умолчанию выводятся все доступные поля.  # noqa: E501

        :return: The fields of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.

        Список кодовых наименований полей, колонка name из выходной таблицы метода /Info/Fields. По умолчанию выводятся все доступные поля.  # noqa: E501

        :param fields: The fields of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :type: list[str]
        """

        self._fields = fields

    @property
    def official(self):
        """Gets the official of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501

        Запрос официальных итогов:  - true – запрашивать официальные итоги   - false – запрашивать неофициальные итоги  # noqa: E501

        :return: The official of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :rtype: bool
        """
        return self._official

    @official.setter
    def official(self, official):
        """Sets the official of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.

        Запрос официальных итогов:  - true – запрашивать официальные итоги   - false – запрашивать неофициальные итоги  # noqa: E501

        :param official: The official of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :type: bool
        """

        self._official = official

    @property
    def sort(self):
        """Gets the sort of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501

        Сортировка по указанному полю,  в виде FIELD=[A|D], например \"TIME=D\" - сортировка по убыванию значений поля TIME.  По умолчанию TIME=A  # noqa: E501

        :return: The sort of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.

        Сортировка по указанному полю,  в виде FIELD=[A|D], например \"TIME=D\" - сортировка по убыванию значений поля TIME.  По умолчанию TIME=A  # noqa: E501

        :param sort: The sort of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :type: str
        """

        self._sort = sort

    @property
    def trade_site(self):
        """Gets the trade_site of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501

        Идентификатор ID из справочника «Торговые площадки» или код режима торгов МБ. Используется для уточнения указанного Isin  # noqa: E501

        :return: The trade_site of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._trade_site

    @trade_site.setter
    def trade_site(self, trade_site):
        """Sets the trade_site of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.

        Идентификатор ID из справочника «Торговые площадки» или код режима торгов МБ. Используется для уточнения указанного Isin  # noqa: E501

        :param trade_site: The trade_site of this EfirDataHubModelsRequestsV2ArchiveHistoryRequest.  # noqa: E501
        :type: str
        """

        self._trade_site = trade_site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2ArchiveHistoryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2ArchiveHistoryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
