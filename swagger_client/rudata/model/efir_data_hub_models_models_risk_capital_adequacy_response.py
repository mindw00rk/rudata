# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRiskCapitalAdequacyResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_doc': 'int',
        'doc_short_name': 'str',
        'repo_discount': 'float',
        'rules': 'list[EfirDataHubModelsModelsRiskCARule]',
        'error': 'str'
    }

    attribute_map = {
        'id_doc': 'idDoc',
        'doc_short_name': 'docShortName',
        'repo_discount': 'repoDiscount',
        'rules': 'rules',
        'error': 'error'
    }

    def __init__(self, id_doc=None, doc_short_name=None, repo_discount=None, rules=None, error=None):  # noqa: E501
        """EfirDataHubModelsModelsRiskCapitalAdequacyResponse - a model defined in Swagger"""  # noqa: E501
        self._id_doc = None
        self._doc_short_name = None
        self._repo_discount = None
        self._rules = None
        self._error = None
        self.discriminator = None
        if id_doc is not None:
            self.id_doc = id_doc
        if doc_short_name is not None:
            self.doc_short_name = doc_short_name
        if repo_discount is not None:
            self.repo_discount = repo_discount
        if rules is not None:
            self.rules = rules
        if error is not None:
            self.error = error

    @property
    def id_doc(self):
        """Gets the id_doc of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501

        Идентификатор инструкции, действующей на дату расчета  # noqa: E501

        :return: The id_doc of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501
        :rtype: int
        """
        return self._id_doc

    @id_doc.setter
    def id_doc(self, id_doc):
        """Sets the id_doc of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.

        Идентификатор инструкции, действующей на дату расчета  # noqa: E501

        :param id_doc: The id_doc of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501
        :type: int
        """

        self._id_doc = id_doc

    @property
    def doc_short_name(self):
        """Gets the doc_short_name of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501

        Краткое наименование инструкции (например, «139-И»)  # noqa: E501

        :return: The doc_short_name of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501
        :rtype: str
        """
        return self._doc_short_name

    @doc_short_name.setter
    def doc_short_name(self, doc_short_name):
        """Sets the doc_short_name of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.

        Краткое наименование инструкции (например, «139-И»)  # noqa: E501

        :param doc_short_name: The doc_short_name of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501
        :type: str
        """

        self._doc_short_name = doc_short_name

    @property
    def repo_discount(self):
        """Gets the repo_discount of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501

        Дисконт для расчета риска по операциям РЕПО  # noqa: E501

        :return: The repo_discount of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501
        :rtype: float
        """
        return self._repo_discount

    @repo_discount.setter
    def repo_discount(self, repo_discount):
        """Sets the repo_discount of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.

        Дисконт для расчета риска по операциям РЕПО  # noqa: E501

        :param repo_discount: The repo_discount of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501
        :type: float
        """

        self._repo_discount = repo_discount

    @property
    def rules(self):
        """Gets the rules of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501

        Mассив объектов класса CARule  # noqa: E501

        :return: The rules of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501
        :rtype: list[EfirDataHubModelsModelsRiskCARule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.

        Mассив объектов класса CARule  # noqa: E501

        :param rules: The rules of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501
        :type: list[EfirDataHubModelsModelsRiskCARule]
        """

        self._rules = rules

    @property
    def error(self):
        """Gets the error of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501

        Текст ошибки, если она произошла  # noqa: E501

        :return: The error of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.

        Текст ошибки, если она произошла  # noqa: E501

        :param error: The error of this EfirDataHubModelsModelsRiskCapitalAdequacyResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRiskCapitalAdequacyResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRiskCapitalAdequacyResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
