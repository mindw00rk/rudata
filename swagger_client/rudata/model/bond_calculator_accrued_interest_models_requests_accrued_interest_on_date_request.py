# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintool_ids': 'list[int]',
        'cash_flow_calc_date': 'datetime',
        'shift_days': 'int',
        'shift_type_source': 'AllOfBondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequestShiftTypeSource',
        'type_currency': 'str',
        'use_rounding': 'bool'
    }

    attribute_map = {
        'fintool_ids': 'fintoolIds',
        'cash_flow_calc_date': 'cashFlowCalcDate',
        'shift_days': 'shiftDays',
        'shift_type_source': 'shiftTypeSource',
        'type_currency': 'typeCurrency',
        'use_rounding': 'useRounding'
    }

    def __init__(self, fintool_ids=None, cash_flow_calc_date=None, shift_days=None, shift_type_source=None, type_currency=None, use_rounding=True):  # noqa: E501
        """BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest - a model defined in Swagger"""  # noqa: E501
        self._fintool_ids = None
        self._cash_flow_calc_date = None
        self._shift_days = None
        self._shift_type_source = None
        self._type_currency = None
        self._use_rounding = None
        self.discriminator = None
        if fintool_ids is not None:
            self.fintool_ids = fintool_ids
        if cash_flow_calc_date is not None:
            self.cash_flow_calc_date = cash_flow_calc_date
        if shift_days is not None:
            self.shift_days = shift_days
        if shift_type_source is not None:
            self.shift_type_source = shift_type_source
        if type_currency is not None:
            self.type_currency = type_currency
        if use_rounding is not None:
            self.use_rounding = use_rounding

    @property
    def fintool_ids(self):
        """Gets the fintool_ids of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501

        Идентификаторы инструментов в базе Интерфакс. Максимальное число элементов 100.  # noqa: E501

        :return: The fintool_ids of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._fintool_ids

    @fintool_ids.setter
    def fintool_ids(self, fintool_ids):
        """Sets the fintool_ids of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.

        Идентификаторы инструментов в базе Интерфакс. Максимальное число элементов 100.  # noqa: E501

        :param fintool_ids: The fintool_ids of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501
        :type: list[int]
        """

        self._fintool_ids = fintool_ids

    @property
    def cash_flow_calc_date(self):
        """Gets the cash_flow_calc_date of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501

        Дата расчета. Необязательный. По умолчанию используется текущая дата.  # noqa: E501

        :return: The cash_flow_calc_date of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._cash_flow_calc_date

    @cash_flow_calc_date.setter
    def cash_flow_calc_date(self, cash_flow_calc_date):
        """Sets the cash_flow_calc_date of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.

        Дата расчета. Необязательный. По умолчанию используется текущая дата.  # noqa: E501

        :param cash_flow_calc_date: The cash_flow_calc_date of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501
        :type: datetime
        """

        self._cash_flow_calc_date = cash_flow_calc_date

    @property
    def shift_days(self):
        """Gets the shift_days of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501

        Число дней смещения, число от 0 до 31 включительно.  # noqa: E501

        :return: The shift_days of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501
        :rtype: int
        """
        return self._shift_days

    @shift_days.setter
    def shift_days(self, shift_days):
        """Sets the shift_days of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.

        Число дней смещения, число от 0 до 31 включительно.  # noqa: E501

        :param shift_days: The shift_days of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501
        :type: int
        """

        self._shift_days = shift_days

    @property
    def shift_type_source(self):
        """Gets the shift_type_source of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501

        Тип смещения  - calendar - календарные дни (по умолчаню);  - workdays - рабочие дни.  0 = Calendar  1 = Workdays  # noqa: E501

        :return: The shift_type_source of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501
        :rtype: AllOfBondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequestShiftTypeSource
        """
        return self._shift_type_source

    @shift_type_source.setter
    def shift_type_source(self, shift_type_source):
        """Sets the shift_type_source of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.

        Тип смещения  - calendar - календарные дни (по умолчаню);  - workdays - рабочие дни.  0 = Calendar  1 = Workdays  # noqa: E501

        :param shift_type_source: The shift_type_source of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501
        :type: AllOfBondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequestShiftTypeSource
        """

        self._shift_type_source = shift_type_source

    @property
    def type_currency(self):
        """Gets the type_currency of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501

        Источник валюты для определения календаря рабочих дней:  - facevalue - используется календарь страны эмитента валюты номинала инструмента;  - jurisdiction - используется календарь страны выпуска;  - 3-буквенный код валюты ОКВ, например, USD.  # noqa: E501

        :return: The type_currency of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501
        :rtype: str
        """
        return self._type_currency

    @type_currency.setter
    def type_currency(self, type_currency):
        """Sets the type_currency of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.

        Источник валюты для определения календаря рабочих дней:  - facevalue - используется календарь страны эмитента валюты номинала инструмента;  - jurisdiction - используется календарь страны выпуска;  - 3-буквенный код валюты ОКВ, например, USD.  # noqa: E501

        :param type_currency: The type_currency of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501
        :type: str
        """

        self._type_currency = type_currency

    @property
    def use_rounding(self):
        """Gets the use_rounding of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501

        Производить ли округление до знака купона:  - true - да, производить до знака купона (по умолчанию),  - false - не производить.  # noqa: E501

        :return: The use_rounding of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_rounding

    @use_rounding.setter
    def use_rounding(self, use_rounding):
        """Sets the use_rounding of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.

        Производить ли округление до знака купона:  - true - да, производить до знака купона (по умолчанию),  - false - не производить.  # noqa: E501

        :param use_rounding: The use_rounding of this BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest.  # noqa: E501
        :type: bool
        """

        self._use_rounding = use_rounding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BondCalculatorAccruedInterestModelsRequestsAccruedInterestOnDateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
