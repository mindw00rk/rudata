# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsEmitentMultipliersListFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'groupname': 'str',
        'id': 'str',
        'code': 'str',
        'shortname': 'str',
        'fullname': 'str',
        'note': 'str',
        'calc_period': 'str',
        'unit': 'str',
        'ismsfobased': 'bool',
        'ismcapbased': 'bool',
        'multiplierid': 'int'
    }

    attribute_map = {
        'groupname': 'groupname',
        'id': 'id',
        'code': 'code',
        'shortname': 'shortname',
        'fullname': 'fullname',
        'note': 'note',
        'calc_period': 'calcPeriod',
        'unit': 'unit',
        'ismsfobased': 'ismsfobased',
        'ismcapbased': 'ismcapbased',
        'multiplierid': 'multiplierid'
    }

    def __init__(self, groupname=None, id=None, code=None, shortname=None, fullname=None, note=None, calc_period=None, unit=None, ismsfobased=None, ismcapbased=None, multiplierid=None):  # noqa: E501
        """EfirDataHubModelsModelsEmitentMultipliersListFields - a model defined in Swagger"""  # noqa: E501
        self._groupname = None
        self._id = None
        self._code = None
        self._shortname = None
        self._fullname = None
        self._note = None
        self._calc_period = None
        self._unit = None
        self._ismsfobased = None
        self._ismcapbased = None
        self._multiplierid = None
        self.discriminator = None
        if groupname is not None:
            self.groupname = groupname
        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if shortname is not None:
            self.shortname = shortname
        if fullname is not None:
            self.fullname = fullname
        if note is not None:
            self.note = note
        if calc_period is not None:
            self.calc_period = calc_period
        if unit is not None:
            self.unit = unit
        if ismsfobased is not None:
            self.ismsfobased = ismsfobased
        if ismcapbased is not None:
            self.ismcapbased = ismcapbased
        if multiplierid is not None:
            self.multiplierid = multiplierid

    @property
    def groupname(self):
        """Gets the groupname of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501

        Название группы мультипликатора  # noqa: E501

        :return: The groupname of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :rtype: str
        """
        return self._groupname

    @groupname.setter
    def groupname(self, groupname):
        """Sets the groupname of this EfirDataHubModelsModelsEmitentMultipliersListFields.

        Название группы мультипликатора  # noqa: E501

        :param groupname: The groupname of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :type: str
        """

        self._groupname = groupname

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501

        Индивидуальный номер мультипликатора  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsEmitentMultipliersListFields.

        Индивидуальный номер мультипликатора  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501

        Индивидуальный код мультипликатора  # noqa: E501

        :return: The code of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EfirDataHubModelsModelsEmitentMultipliersListFields.

        Индивидуальный код мультипликатора  # noqa: E501

        :param code: The code of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def shortname(self):
        """Gets the shortname of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501

        Короткое название мультипликатора  # noqa: E501

        :return: The shortname of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname):
        """Sets the shortname of this EfirDataHubModelsModelsEmitentMultipliersListFields.

        Короткое название мультипликатора  # noqa: E501

        :param shortname: The shortname of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :type: str
        """

        self._shortname = shortname

    @property
    def fullname(self):
        """Gets the fullname of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501

        Полное название мультипликатора  # noqa: E501

        :return: The fullname of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this EfirDataHubModelsModelsEmitentMultipliersListFields.

        Полное название мультипликатора  # noqa: E501

        :param fullname: The fullname of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501

        Комментарий  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsEmitentMultipliersListFields.

        Комментарий  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def calc_period(self):
        """Gets the calc_period of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501

        Период расчёта  # noqa: E501

        :return: The calc_period of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :rtype: str
        """
        return self._calc_period

    @calc_period.setter
    def calc_period(self, calc_period):
        """Sets the calc_period of this EfirDataHubModelsModelsEmitentMultipliersListFields.

        Период расчёта  # noqa: E501

        :param calc_period: The calc_period of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :type: str
        """

        self._calc_period = calc_period

    @property
    def unit(self):
        """Gets the unit of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501

        Единица измерения  # noqa: E501

        :return: The unit of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this EfirDataHubModelsModelsEmitentMultipliersListFields.

        Единица измерения  # noqa: E501

        :param unit: The unit of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def ismsfobased(self):
        """Gets the ismsfobased of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501

        Мультипликатор рассчитывается на данных отчётности МСФО  # noqa: E501

        :return: The ismsfobased of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :rtype: bool
        """
        return self._ismsfobased

    @ismsfobased.setter
    def ismsfobased(self, ismsfobased):
        """Sets the ismsfobased of this EfirDataHubModelsModelsEmitentMultipliersListFields.

        Мультипликатор рассчитывается на данных отчётности МСФО  # noqa: E501

        :param ismsfobased: The ismsfobased of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :type: bool
        """

        self._ismsfobased = ismsfobased

    @property
    def ismcapbased(self):
        """Gets the ismcapbased of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501

        Мультипликатор рассчитывается на данных капитализации  # noqa: E501

        :return: The ismcapbased of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :rtype: bool
        """
        return self._ismcapbased

    @ismcapbased.setter
    def ismcapbased(self, ismcapbased):
        """Sets the ismcapbased of this EfirDataHubModelsModelsEmitentMultipliersListFields.

        Мультипликатор рассчитывается на данных капитализации  # noqa: E501

        :param ismcapbased: The ismcapbased of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :type: bool
        """

        self._ismcapbased = ismcapbased

    @property
    def multiplierid(self):
        """Gets the multiplierid of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501

        Идентификатор мультипликатора  # noqa: E501

        :return: The multiplierid of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :rtype: int
        """
        return self._multiplierid

    @multiplierid.setter
    def multiplierid(self, multiplierid):
        """Sets the multiplierid of this EfirDataHubModelsModelsEmitentMultipliersListFields.

        Идентификатор мультипликатора  # noqa: E501

        :param multiplierid: The multiplierid of this EfirDataHubModelsModelsEmitentMultipliersListFields.  # noqa: E501
        :type: int
        """

        self._multiplierid = multiplierid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsEmitentMultipliersListFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsEmitentMultipliersListFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
