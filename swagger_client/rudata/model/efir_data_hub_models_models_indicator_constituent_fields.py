# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsIndicatorConstituentFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index_fintoolid': 'int',
        'dt': 'datetime',
        'fintoolid': 'int',
        'weight': 'float',
        'weight_chng': 'float',
        'close': 'float',
        'issue_vol': 'int',
        'mcap': 'float',
        'issue_vol_index': 'int',
        'mcap_index': 'float',
        'ff_factor': 'float',
        'weight_factor': 'float',
        'num_trades': 'int',
        'volatility': 'float',
        'factor_a': 'float',
        'factor_b': 'float',
        'influence': 'float',
        'determinant': 'float',
        'fraction': 'float',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'index_fintoolid': 'index_fintoolid',
        'dt': 'dt',
        'fintoolid': 'fintoolid',
        'weight': 'weight',
        'weight_chng': 'weight_chng',
        'close': 'close',
        'issue_vol': 'issue_vol',
        'mcap': 'mcap',
        'issue_vol_index': 'issue_vol_index',
        'mcap_index': 'mcap_index',
        'ff_factor': 'ff_factor',
        'weight_factor': 'weight_factor',
        'num_trades': 'num_trades',
        'volatility': 'volatility',
        'factor_a': 'factor_a',
        'factor_b': 'factor_b',
        'influence': 'influence',
        'determinant': 'determinant',
        'fraction': 'fraction',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, index_fintoolid=None, dt=None, fintoolid=None, weight=None, weight_chng=None, close=None, issue_vol=None, mcap=None, issue_vol_index=None, mcap_index=None, ff_factor=None, weight_factor=None, num_trades=None, volatility=None, factor_a=None, factor_b=None, influence=None, determinant=None, fraction=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsIndicatorConstituentFields - a model defined in Swagger"""  # noqa: E501
        self._index_fintoolid = None
        self._dt = None
        self._fintoolid = None
        self._weight = None
        self._weight_chng = None
        self._close = None
        self._issue_vol = None
        self._mcap = None
        self._issue_vol_index = None
        self._mcap_index = None
        self._ff_factor = None
        self._weight_factor = None
        self._num_trades = None
        self._volatility = None
        self._factor_a = None
        self._factor_b = None
        self._influence = None
        self._determinant = None
        self._fraction = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if index_fintoolid is not None:
            self.index_fintoolid = index_fintoolid
        if dt is not None:
            self.dt = dt
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if weight is not None:
            self.weight = weight
        if weight_chng is not None:
            self.weight_chng = weight_chng
        if close is not None:
            self.close = close
        if issue_vol is not None:
            self.issue_vol = issue_vol
        if mcap is not None:
            self.mcap = mcap
        if issue_vol_index is not None:
            self.issue_vol_index = issue_vol_index
        if mcap_index is not None:
            self.mcap_index = mcap_index
        if ff_factor is not None:
            self.ff_factor = ff_factor
        if weight_factor is not None:
            self.weight_factor = weight_factor
        if num_trades is not None:
            self.num_trades = num_trades
        if volatility is not None:
            self.volatility = volatility
        if factor_a is not None:
            self.factor_a = factor_a
        if factor_b is not None:
            self.factor_b = factor_b
        if influence is not None:
            self.influence = influence
        if determinant is not None:
            self.determinant = determinant
        if fraction is not None:
            self.fraction = fraction
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def index_fintoolid(self):
        """Gets the index_fintoolid of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Идентификатор индекса в базе Интерфакс  # noqa: E501

        :return: The index_fintoolid of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: int
        """
        return self._index_fintoolid

    @index_fintoolid.setter
    def index_fintoolid(self, index_fintoolid):
        """Sets the index_fintoolid of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Идентификатор индекса в базе Интерфакс  # noqa: E501

        :param index_fintoolid: The index_fintoolid of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: int
        """

        self._index_fintoolid = index_fintoolid

    @property
    def dt(self):
        """Gets the dt of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Дата расчета  # noqa: E501

        :return: The dt of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Дата расчета  # noqa: E501

        :param dt: The dt of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Идентификатор инструмента - составляющей индекса  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Идентификатор инструмента - составляющей индекса  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def weight(self):
        """Gets the weight of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Вес инструмента в составе индекса  # noqa: E501

        :return: The weight of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Вес инструмента в составе индекса  # noqa: E501

        :param weight: The weight of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def weight_chng(self):
        """Gets the weight_chng of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Изменение веса  # noqa: E501

        :return: The weight_chng of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._weight_chng

    @weight_chng.setter
    def weight_chng(self, weight_chng):
        """Sets the weight_chng of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Изменение веса  # noqa: E501

        :param weight_chng: The weight_chng of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._weight_chng = weight_chng

    @property
    def close(self):
        """Gets the close of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Цена закрытия по инструменту  # noqa: E501

        :return: The close of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Цена закрытия по инструменту  # noqa: E501

        :param close: The close of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._close = close

    @property
    def issue_vol(self):
        """Gets the issue_vol of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Объем выпуска, шт.  # noqa: E501

        :return: The issue_vol of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: int
        """
        return self._issue_vol

    @issue_vol.setter
    def issue_vol(self, issue_vol):
        """Sets the issue_vol of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Объем выпуска, шт.  # noqa: E501

        :param issue_vol: The issue_vol of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: int
        """

        self._issue_vol = issue_vol

    @property
    def mcap(self):
        """Gets the mcap of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Капитализация инструмента  # noqa: E501

        :return: The mcap of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._mcap

    @mcap.setter
    def mcap(self, mcap):
        """Sets the mcap of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Капитализация инструмента  # noqa: E501

        :param mcap: The mcap of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._mcap = mcap

    @property
    def issue_vol_index(self):
        """Gets the issue_vol_index of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Объем выпуска для расчета индекса  # noqa: E501

        :return: The issue_vol_index of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: int
        """
        return self._issue_vol_index

    @issue_vol_index.setter
    def issue_vol_index(self, issue_vol_index):
        """Sets the issue_vol_index of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Объем выпуска для расчета индекса  # noqa: E501

        :param issue_vol_index: The issue_vol_index of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: int
        """

        self._issue_vol_index = issue_vol_index

    @property
    def mcap_index(self):
        """Gets the mcap_index of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Капитализация для расчета индекса  # noqa: E501

        :return: The mcap_index of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._mcap_index

    @mcap_index.setter
    def mcap_index(self, mcap_index):
        """Sets the mcap_index of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Капитализация для расчета индекса  # noqa: E501

        :param mcap_index: The mcap_index of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._mcap_index = mcap_index

    @property
    def ff_factor(self):
        """Gets the ff_factor of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Free-float фактор  # noqa: E501

        :return: The ff_factor of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._ff_factor

    @ff_factor.setter
    def ff_factor(self, ff_factor):
        """Sets the ff_factor of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Free-float фактор  # noqa: E501

        :param ff_factor: The ff_factor of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._ff_factor = ff_factor

    @property
    def weight_factor(self):
        """Gets the weight_factor of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Ограничитель веса  # noqa: E501

        :return: The weight_factor of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._weight_factor

    @weight_factor.setter
    def weight_factor(self, weight_factor):
        """Sets the weight_factor of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Ограничитель веса  # noqa: E501

        :param weight_factor: The weight_factor of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._weight_factor = weight_factor

    @property
    def num_trades(self):
        """Gets the num_trades of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Количество сделок  # noqa: E501

        :return: The num_trades of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: int
        """
        return self._num_trades

    @num_trades.setter
    def num_trades(self, num_trades):
        """Sets the num_trades of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Количество сделок  # noqa: E501

        :param num_trades: The num_trades of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: int
        """

        self._num_trades = num_trades

    @property
    def volatility(self):
        """Gets the volatility of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Волатильность  # noqa: E501

        :return: The volatility of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._volatility

    @volatility.setter
    def volatility(self, volatility):
        """Sets the volatility of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Волатильность  # noqa: E501

        :param volatility: The volatility of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._volatility = volatility

    @property
    def factor_a(self):
        """Gets the factor_a of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Фактор Альфа  # noqa: E501

        :return: The factor_a of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._factor_a

    @factor_a.setter
    def factor_a(self, factor_a):
        """Sets the factor_a of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Фактор Альфа  # noqa: E501

        :param factor_a: The factor_a of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._factor_a = factor_a

    @property
    def factor_b(self):
        """Gets the factor_b of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Фактор Бэта  # noqa: E501

        :return: The factor_b of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._factor_b

    @factor_b.setter
    def factor_b(self, factor_b):
        """Sets the factor_b of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Фактор Бэта  # noqa: E501

        :param factor_b: The factor_b of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._factor_b = factor_b

    @property
    def influence(self):
        """Gets the influence of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Вклад инструмента в изменение индекса  # noqa: E501

        :return: The influence of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._influence

    @influence.setter
    def influence(self, influence):
        """Sets the influence of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Вклад инструмента в изменение индекса  # noqa: E501

        :param influence: The influence of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._influence = influence

    @property
    def determinant(self):
        """Gets the determinant of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Детерминант  # noqa: E501

        :return: The determinant of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._determinant

    @determinant.setter
    def determinant(self, determinant):
        """Sets the determinant of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Детерминант  # noqa: E501

        :param determinant: The determinant of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._determinant = determinant

    @property
    def fraction(self):
        """Gets the fraction of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Доля бумаги в составе индекса  # noqa: E501

        :return: The fraction of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: float
        """
        return self._fraction

    @fraction.setter
    def fraction(self, fraction):
        """Sets the fraction of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Доля бумаги в составе индекса  # noqa: E501

        :param fraction: The fraction of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: float
        """

        self._fraction = fraction

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsIndicatorConstituentFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsIndicatorConstituentFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsIndicatorConstituentFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsIndicatorConstituentFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
