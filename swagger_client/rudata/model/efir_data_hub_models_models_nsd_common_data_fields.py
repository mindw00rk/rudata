# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsNsdCommonDataFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acc_open_date_nrd': 'datetime',
        'base_month': 'str',
        'base_year': 'str',
        'basis_nrd': 'str',
        'begdistdate_nrd': 'datetime',
        'bondseries': 'str',
        'cfi': 'str',
        'cmp_code_nsd_issuer_nrd': 'str',
        'cmp_code_nsd_managing_nrd': 'str',
        'company_state_mn': 'str',
        'company_state_name_nrd': 'str',
        'contractdateto_nrd': 'datetime',
        'coupon_period_base_id': 'float',
        'coupontypename_nrd': 'str',
        'cp_type_id': 'float',
        'currentfacevalue_nrd': 'float',
        'daysall_nrd': 'float',
        'depositary_nrd': 'str',
        'dr_category_mn': 'str',
        'dr_category_name_en_nrd': 'str',
        'dr_category_name_nrd': 'str',
        'drqty': 'float',
        'enddistdate_nrd': 'datetime',
        'endmtydate_nrd': 'datetime',
        'faceftname_nrd': 'str',
        'facevalue_nrd': 'float',
        'facialacc_nrd': 'str',
        'fininstid': 'int',
        'fininstid_operator': 'float',
        'fintoolid': 'int',
        'firstcoupondate_nrd': 'datetime',
        'formarketbonds_nrd': 'float',
        'fraction_nrd': 'float',
        'fullname_nrd': 'str',
        'isincode': 'str',
        'isincodebase_nrd': 'str',
        'islombardcbr_nrd': 'float',
        'isqualified_nrd': 'int',
        'issuenumber': 'str',
        'issuername_nrd': 'str',
        'micexlist_nrd': 'str',
        'minlot_nrd': 'float',
        'nrdcode': 'str',
        'nrdcompcode': 'str',
        'numcoupons_nrd': 'float',
        'placement_type_id': 'float',
        'placementtype_nrd': 'str',
        'placeprice_nrd': 'float',
        'planmtydate_nrd': 'datetime',
        'rate_type_id': 'float',
        'ratetypenameeng_nrd': 'str',
        'ratetypenamerus_nrd': 'str',
        'regcode_nrd': 'str',
        'regdate_nrd': 'datetime',
        'regdistdate_nrd': 'datetime',
        'registrar_nrd': 'str',
        'registraracctype_nrd': 'str',
        'registraracctypedate_nrd': 'datetime',
        'regorg_nrd': 'str',
        'rpregorg_nrd': 'str',
        'rpstate_nrd': 'str',
        'sec_form_id': 'int',
        'sec_state_id': 'float',
        'sec_type_br_code': 'str',
        'sec_type_id': 'float',
        'secformnameeng_nrd': 'str',
        'secformnamerus_nrd': 'str',
        'secstateeng_nrd': 'str',
        'secstaterus_nrd': 'str',
        'sectypenamebr_nrd': 'str',
        'sectypenameeng_nrd': 'str',
        'sectypenamerus_nrd': 'str',
        'share_category_id': 'float',
        'share_category_name_en_nrd': 'str',
        'share_category_name_nrd': 'str',
        'shqty': 'float',
        'specialized_depo_nrd': 'str',
        'sumissuevol_nrd': 'float',
        'summarketvol_nrd': 'float',
        'summarketvolorig_nrd': 'float',
        'unit_name_full_nrd': 'str',
        'update_date': 'datetime',
        'nrd_sec_id': 'int',
        'instr_type_id': 'int',
        'nrd_date_from': 'datetime',
        'nrd_date_to': 'datetime',
        'is_serviced': 'bool',
        'endearlyrepaymentdate_nrd': 'datetime',
        'planearlyrepaymentdate_nrd': 'datetime',
        'sector_foreign_code': 'str',
        'sector_foreign_shortname': 'str',
        'sector_foreign_fullname': 'str',
        'fullname_en_nrd': 'str',
        'issued_size_outstanding': 'float',
        'tax_rate': 'float',
        'tax_country_id': 'int',
        'tax_country_name': 'str',
        'tax_country_name_en': 'str',
        'tax_types_id': 'int',
        'tax_types_name': 'str',
        'tax_types_name_en': 'str',
        'credit_note_type_id': 'int',
        'credit_note_type_name': 'str',
        'credit_note_type_name_en': 'str',
        'managing_id': 'int',
        'managing_name': 'str',
        'managing_name_en': 'str',
        'registrar_id': 'int',
        'credit_note_type_code': 'str',
        'counter': 'int'
    }

    attribute_map = {
        'acc_open_date_nrd': 'acc_open_date_nrd',
        'base_month': 'base_month',
        'base_year': 'base_year',
        'basis_nrd': 'basis_nrd',
        'begdistdate_nrd': 'begdistdate_nrd',
        'bondseries': 'bondseries',
        'cfi': 'cfi',
        'cmp_code_nsd_issuer_nrd': 'cmp_code_nsd_issuer_nrd',
        'cmp_code_nsd_managing_nrd': 'cmp_code_nsd_managing_nrd',
        'company_state_mn': 'company_state_mn',
        'company_state_name_nrd': 'company_state_name_nrd',
        'contractdateto_nrd': 'contractdateto_nrd',
        'coupon_period_base_id': 'coupon_period_base_id',
        'coupontypename_nrd': 'coupontypename_nrd',
        'cp_type_id': 'cp_type_id',
        'currentfacevalue_nrd': 'currentfacevalue_nrd',
        'daysall_nrd': 'daysall_nrd',
        'depositary_nrd': 'depositary_nrd',
        'dr_category_mn': 'dr_category_mn',
        'dr_category_name_en_nrd': 'dr_category_name_en_nrd',
        'dr_category_name_nrd': 'dr_category_name_nrd',
        'drqty': 'drqty',
        'enddistdate_nrd': 'enddistdate_nrd',
        'endmtydate_nrd': 'endmtydate_nrd',
        'faceftname_nrd': 'faceftname_nrd',
        'facevalue_nrd': 'facevalue_nrd',
        'facialacc_nrd': 'facialacc_nrd',
        'fininstid': 'fininstid',
        'fininstid_operator': 'fininstid_operator',
        'fintoolid': 'fintoolid',
        'firstcoupondate_nrd': 'firstcoupondate_nrd',
        'formarketbonds_nrd': 'formarketbonds_nrd',
        'fraction_nrd': 'fraction_nrd',
        'fullname_nrd': 'fullname_nrd',
        'isincode': 'isincode',
        'isincodebase_nrd': 'isincodebase_nrd',
        'islombardcbr_nrd': 'islombardcbr_nrd',
        'isqualified_nrd': 'isqualified_nrd',
        'issuenumber': 'issuenumber',
        'issuername_nrd': 'issuername_nrd',
        'micexlist_nrd': 'micexlist_nrd',
        'minlot_nrd': 'minlot_nrd',
        'nrdcode': 'nrdcode',
        'nrdcompcode': 'nrdcompcode',
        'numcoupons_nrd': 'numcoupons_nrd',
        'placement_type_id': 'placement_type_id',
        'placementtype_nrd': 'placementtype_nrd',
        'placeprice_nrd': 'placeprice_nrd',
        'planmtydate_nrd': 'planmtydate_nrd',
        'rate_type_id': 'rate_type_id',
        'ratetypenameeng_nrd': 'ratetypenameeng_nrd',
        'ratetypenamerus_nrd': 'ratetypenamerus_nrd',
        'regcode_nrd': 'regcode_nrd',
        'regdate_nrd': 'regdate_nrd',
        'regdistdate_nrd': 'regdistdate_nrd',
        'registrar_nrd': 'registrar_nrd',
        'registraracctype_nrd': 'registraracctype_nrd',
        'registraracctypedate_nrd': 'registraracctypedate_nrd',
        'regorg_nrd': 'regorg_nrd',
        'rpregorg_nrd': 'rpregorg_nrd',
        'rpstate_nrd': 'rpstate_nrd',
        'sec_form_id': 'sec_form_id',
        'sec_state_id': 'sec_state_id',
        'sec_type_br_code': 'sec_type_br_code',
        'sec_type_id': 'sec_type_id',
        'secformnameeng_nrd': 'secformnameeng_nrd',
        'secformnamerus_nrd': 'secformnamerus_nrd',
        'secstateeng_nrd': 'secstateeng_nrd',
        'secstaterus_nrd': 'secstaterus_nrd',
        'sectypenamebr_nrd': 'sectypenamebr_nrd',
        'sectypenameeng_nrd': 'sectypenameeng_nrd',
        'sectypenamerus_nrd': 'sectypenamerus_nrd',
        'share_category_id': 'share_category_id',
        'share_category_name_en_nrd': 'share_category_name_en_nrd',
        'share_category_name_nrd': 'share_category_name_nrd',
        'shqty': 'shqty',
        'specialized_depo_nrd': 'specialized_depo_nrd',
        'sumissuevol_nrd': 'sumissuevol_nrd',
        'summarketvol_nrd': 'summarketvol_nrd',
        'summarketvolorig_nrd': 'summarketvolorig_nrd',
        'unit_name_full_nrd': 'unit_name_full_nrd',
        'update_date': 'update_date',
        'nrd_sec_id': 'nrd_sec_id',
        'instr_type_id': 'instr_type_id',
        'nrd_date_from': 'nrd_date_from',
        'nrd_date_to': 'nrd_date_to',
        'is_serviced': 'is_serviced',
        'endearlyrepaymentdate_nrd': 'endearlyrepaymentdate_nrd',
        'planearlyrepaymentdate_nrd': 'planearlyrepaymentdate_nrd',
        'sector_foreign_code': 'sector_foreign_code',
        'sector_foreign_shortname': 'sector_foreign_shortname',
        'sector_foreign_fullname': 'sector_foreign_fullname',
        'fullname_en_nrd': 'fullname_en_nrd',
        'issued_size_outstanding': 'issued_size_outstanding',
        'tax_rate': 'tax_rate',
        'tax_country_id': 'tax_country_id',
        'tax_country_name': 'tax_country_name',
        'tax_country_name_en': 'tax_country_name_en',
        'tax_types_id': 'tax_types_id',
        'tax_types_name': 'tax_types_name',
        'tax_types_name_en': 'tax_types_name_en',
        'credit_note_type_id': 'credit_note_type_id',
        'credit_note_type_name': 'credit_note_type_name',
        'credit_note_type_name_en': 'credit_note_type_name_en',
        'managing_id': 'managing_id',
        'managing_name': 'managing_name',
        'managing_name_en': 'managing_name_en',
        'registrar_id': 'registrar_id',
        'credit_note_type_code': 'credit_note_type_code',
        'counter': 'counter'
    }

    def __init__(self, acc_open_date_nrd=None, base_month=None, base_year=None, basis_nrd=None, begdistdate_nrd=None, bondseries=None, cfi=None, cmp_code_nsd_issuer_nrd=None, cmp_code_nsd_managing_nrd=None, company_state_mn=None, company_state_name_nrd=None, contractdateto_nrd=None, coupon_period_base_id=None, coupontypename_nrd=None, cp_type_id=None, currentfacevalue_nrd=None, daysall_nrd=None, depositary_nrd=None, dr_category_mn=None, dr_category_name_en_nrd=None, dr_category_name_nrd=None, drqty=None, enddistdate_nrd=None, endmtydate_nrd=None, faceftname_nrd=None, facevalue_nrd=None, facialacc_nrd=None, fininstid=None, fininstid_operator=None, fintoolid=None, firstcoupondate_nrd=None, formarketbonds_nrd=None, fraction_nrd=None, fullname_nrd=None, isincode=None, isincodebase_nrd=None, islombardcbr_nrd=None, isqualified_nrd=None, issuenumber=None, issuername_nrd=None, micexlist_nrd=None, minlot_nrd=None, nrdcode=None, nrdcompcode=None, numcoupons_nrd=None, placement_type_id=None, placementtype_nrd=None, placeprice_nrd=None, planmtydate_nrd=None, rate_type_id=None, ratetypenameeng_nrd=None, ratetypenamerus_nrd=None, regcode_nrd=None, regdate_nrd=None, regdistdate_nrd=None, registrar_nrd=None, registraracctype_nrd=None, registraracctypedate_nrd=None, regorg_nrd=None, rpregorg_nrd=None, rpstate_nrd=None, sec_form_id=None, sec_state_id=None, sec_type_br_code=None, sec_type_id=None, secformnameeng_nrd=None, secformnamerus_nrd=None, secstateeng_nrd=None, secstaterus_nrd=None, sectypenamebr_nrd=None, sectypenameeng_nrd=None, sectypenamerus_nrd=None, share_category_id=None, share_category_name_en_nrd=None, share_category_name_nrd=None, shqty=None, specialized_depo_nrd=None, sumissuevol_nrd=None, summarketvol_nrd=None, summarketvolorig_nrd=None, unit_name_full_nrd=None, update_date=None, nrd_sec_id=None, instr_type_id=None, nrd_date_from=None, nrd_date_to=None, is_serviced=None, endearlyrepaymentdate_nrd=None, planearlyrepaymentdate_nrd=None, sector_foreign_code=None, sector_foreign_shortname=None, sector_foreign_fullname=None, fullname_en_nrd=None, issued_size_outstanding=None, tax_rate=None, tax_country_id=None, tax_country_name=None, tax_country_name_en=None, tax_types_id=None, tax_types_name=None, tax_types_name_en=None, credit_note_type_id=None, credit_note_type_name=None, credit_note_type_name_en=None, managing_id=None, managing_name=None, managing_name_en=None, registrar_id=None, credit_note_type_code=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsNsdCommonDataFields - a model defined in Swagger"""  # noqa: E501
        self._acc_open_date_nrd = None
        self._base_month = None
        self._base_year = None
        self._basis_nrd = None
        self._begdistdate_nrd = None
        self._bondseries = None
        self._cfi = None
        self._cmp_code_nsd_issuer_nrd = None
        self._cmp_code_nsd_managing_nrd = None
        self._company_state_mn = None
        self._company_state_name_nrd = None
        self._contractdateto_nrd = None
        self._coupon_period_base_id = None
        self._coupontypename_nrd = None
        self._cp_type_id = None
        self._currentfacevalue_nrd = None
        self._daysall_nrd = None
        self._depositary_nrd = None
        self._dr_category_mn = None
        self._dr_category_name_en_nrd = None
        self._dr_category_name_nrd = None
        self._drqty = None
        self._enddistdate_nrd = None
        self._endmtydate_nrd = None
        self._faceftname_nrd = None
        self._facevalue_nrd = None
        self._facialacc_nrd = None
        self._fininstid = None
        self._fininstid_operator = None
        self._fintoolid = None
        self._firstcoupondate_nrd = None
        self._formarketbonds_nrd = None
        self._fraction_nrd = None
        self._fullname_nrd = None
        self._isincode = None
        self._isincodebase_nrd = None
        self._islombardcbr_nrd = None
        self._isqualified_nrd = None
        self._issuenumber = None
        self._issuername_nrd = None
        self._micexlist_nrd = None
        self._minlot_nrd = None
        self._nrdcode = None
        self._nrdcompcode = None
        self._numcoupons_nrd = None
        self._placement_type_id = None
        self._placementtype_nrd = None
        self._placeprice_nrd = None
        self._planmtydate_nrd = None
        self._rate_type_id = None
        self._ratetypenameeng_nrd = None
        self._ratetypenamerus_nrd = None
        self._regcode_nrd = None
        self._regdate_nrd = None
        self._regdistdate_nrd = None
        self._registrar_nrd = None
        self._registraracctype_nrd = None
        self._registraracctypedate_nrd = None
        self._regorg_nrd = None
        self._rpregorg_nrd = None
        self._rpstate_nrd = None
        self._sec_form_id = None
        self._sec_state_id = None
        self._sec_type_br_code = None
        self._sec_type_id = None
        self._secformnameeng_nrd = None
        self._secformnamerus_nrd = None
        self._secstateeng_nrd = None
        self._secstaterus_nrd = None
        self._sectypenamebr_nrd = None
        self._sectypenameeng_nrd = None
        self._sectypenamerus_nrd = None
        self._share_category_id = None
        self._share_category_name_en_nrd = None
        self._share_category_name_nrd = None
        self._shqty = None
        self._specialized_depo_nrd = None
        self._sumissuevol_nrd = None
        self._summarketvol_nrd = None
        self._summarketvolorig_nrd = None
        self._unit_name_full_nrd = None
        self._update_date = None
        self._nrd_sec_id = None
        self._instr_type_id = None
        self._nrd_date_from = None
        self._nrd_date_to = None
        self._is_serviced = None
        self._endearlyrepaymentdate_nrd = None
        self._planearlyrepaymentdate_nrd = None
        self._sector_foreign_code = None
        self._sector_foreign_shortname = None
        self._sector_foreign_fullname = None
        self._fullname_en_nrd = None
        self._issued_size_outstanding = None
        self._tax_rate = None
        self._tax_country_id = None
        self._tax_country_name = None
        self._tax_country_name_en = None
        self._tax_types_id = None
        self._tax_types_name = None
        self._tax_types_name_en = None
        self._credit_note_type_id = None
        self._credit_note_type_name = None
        self._credit_note_type_name_en = None
        self._managing_id = None
        self._managing_name = None
        self._managing_name_en = None
        self._registrar_id = None
        self._credit_note_type_code = None
        self._counter = None
        self.discriminator = None
        if acc_open_date_nrd is not None:
            self.acc_open_date_nrd = acc_open_date_nrd
        if base_month is not None:
            self.base_month = base_month
        if base_year is not None:
            self.base_year = base_year
        if basis_nrd is not None:
            self.basis_nrd = basis_nrd
        if begdistdate_nrd is not None:
            self.begdistdate_nrd = begdistdate_nrd
        if bondseries is not None:
            self.bondseries = bondseries
        if cfi is not None:
            self.cfi = cfi
        if cmp_code_nsd_issuer_nrd is not None:
            self.cmp_code_nsd_issuer_nrd = cmp_code_nsd_issuer_nrd
        if cmp_code_nsd_managing_nrd is not None:
            self.cmp_code_nsd_managing_nrd = cmp_code_nsd_managing_nrd
        if company_state_mn is not None:
            self.company_state_mn = company_state_mn
        if company_state_name_nrd is not None:
            self.company_state_name_nrd = company_state_name_nrd
        if contractdateto_nrd is not None:
            self.contractdateto_nrd = contractdateto_nrd
        if coupon_period_base_id is not None:
            self.coupon_period_base_id = coupon_period_base_id
        if coupontypename_nrd is not None:
            self.coupontypename_nrd = coupontypename_nrd
        if cp_type_id is not None:
            self.cp_type_id = cp_type_id
        if currentfacevalue_nrd is not None:
            self.currentfacevalue_nrd = currentfacevalue_nrd
        if daysall_nrd is not None:
            self.daysall_nrd = daysall_nrd
        if depositary_nrd is not None:
            self.depositary_nrd = depositary_nrd
        if dr_category_mn is not None:
            self.dr_category_mn = dr_category_mn
        if dr_category_name_en_nrd is not None:
            self.dr_category_name_en_nrd = dr_category_name_en_nrd
        if dr_category_name_nrd is not None:
            self.dr_category_name_nrd = dr_category_name_nrd
        if drqty is not None:
            self.drqty = drqty
        if enddistdate_nrd is not None:
            self.enddistdate_nrd = enddistdate_nrd
        if endmtydate_nrd is not None:
            self.endmtydate_nrd = endmtydate_nrd
        if faceftname_nrd is not None:
            self.faceftname_nrd = faceftname_nrd
        if facevalue_nrd is not None:
            self.facevalue_nrd = facevalue_nrd
        if facialacc_nrd is not None:
            self.facialacc_nrd = facialacc_nrd
        if fininstid is not None:
            self.fininstid = fininstid
        if fininstid_operator is not None:
            self.fininstid_operator = fininstid_operator
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if firstcoupondate_nrd is not None:
            self.firstcoupondate_nrd = firstcoupondate_nrd
        if formarketbonds_nrd is not None:
            self.formarketbonds_nrd = formarketbonds_nrd
        if fraction_nrd is not None:
            self.fraction_nrd = fraction_nrd
        if fullname_nrd is not None:
            self.fullname_nrd = fullname_nrd
        if isincode is not None:
            self.isincode = isincode
        if isincodebase_nrd is not None:
            self.isincodebase_nrd = isincodebase_nrd
        if islombardcbr_nrd is not None:
            self.islombardcbr_nrd = islombardcbr_nrd
        if isqualified_nrd is not None:
            self.isqualified_nrd = isqualified_nrd
        if issuenumber is not None:
            self.issuenumber = issuenumber
        if issuername_nrd is not None:
            self.issuername_nrd = issuername_nrd
        if micexlist_nrd is not None:
            self.micexlist_nrd = micexlist_nrd
        if minlot_nrd is not None:
            self.minlot_nrd = minlot_nrd
        if nrdcode is not None:
            self.nrdcode = nrdcode
        if nrdcompcode is not None:
            self.nrdcompcode = nrdcompcode
        if numcoupons_nrd is not None:
            self.numcoupons_nrd = numcoupons_nrd
        if placement_type_id is not None:
            self.placement_type_id = placement_type_id
        if placementtype_nrd is not None:
            self.placementtype_nrd = placementtype_nrd
        if placeprice_nrd is not None:
            self.placeprice_nrd = placeprice_nrd
        if planmtydate_nrd is not None:
            self.planmtydate_nrd = planmtydate_nrd
        if rate_type_id is not None:
            self.rate_type_id = rate_type_id
        if ratetypenameeng_nrd is not None:
            self.ratetypenameeng_nrd = ratetypenameeng_nrd
        if ratetypenamerus_nrd is not None:
            self.ratetypenamerus_nrd = ratetypenamerus_nrd
        if regcode_nrd is not None:
            self.regcode_nrd = regcode_nrd
        if regdate_nrd is not None:
            self.regdate_nrd = regdate_nrd
        if regdistdate_nrd is not None:
            self.regdistdate_nrd = regdistdate_nrd
        if registrar_nrd is not None:
            self.registrar_nrd = registrar_nrd
        if registraracctype_nrd is not None:
            self.registraracctype_nrd = registraracctype_nrd
        if registraracctypedate_nrd is not None:
            self.registraracctypedate_nrd = registraracctypedate_nrd
        if regorg_nrd is not None:
            self.regorg_nrd = regorg_nrd
        if rpregorg_nrd is not None:
            self.rpregorg_nrd = rpregorg_nrd
        if rpstate_nrd is not None:
            self.rpstate_nrd = rpstate_nrd
        if sec_form_id is not None:
            self.sec_form_id = sec_form_id
        if sec_state_id is not None:
            self.sec_state_id = sec_state_id
        if sec_type_br_code is not None:
            self.sec_type_br_code = sec_type_br_code
        if sec_type_id is not None:
            self.sec_type_id = sec_type_id
        if secformnameeng_nrd is not None:
            self.secformnameeng_nrd = secformnameeng_nrd
        if secformnamerus_nrd is not None:
            self.secformnamerus_nrd = secformnamerus_nrd
        if secstateeng_nrd is not None:
            self.secstateeng_nrd = secstateeng_nrd
        if secstaterus_nrd is not None:
            self.secstaterus_nrd = secstaterus_nrd
        if sectypenamebr_nrd is not None:
            self.sectypenamebr_nrd = sectypenamebr_nrd
        if sectypenameeng_nrd is not None:
            self.sectypenameeng_nrd = sectypenameeng_nrd
        if sectypenamerus_nrd is not None:
            self.sectypenamerus_nrd = sectypenamerus_nrd
        if share_category_id is not None:
            self.share_category_id = share_category_id
        if share_category_name_en_nrd is not None:
            self.share_category_name_en_nrd = share_category_name_en_nrd
        if share_category_name_nrd is not None:
            self.share_category_name_nrd = share_category_name_nrd
        if shqty is not None:
            self.shqty = shqty
        if specialized_depo_nrd is not None:
            self.specialized_depo_nrd = specialized_depo_nrd
        if sumissuevol_nrd is not None:
            self.sumissuevol_nrd = sumissuevol_nrd
        if summarketvol_nrd is not None:
            self.summarketvol_nrd = summarketvol_nrd
        if summarketvolorig_nrd is not None:
            self.summarketvolorig_nrd = summarketvolorig_nrd
        if unit_name_full_nrd is not None:
            self.unit_name_full_nrd = unit_name_full_nrd
        if update_date is not None:
            self.update_date = update_date
        if nrd_sec_id is not None:
            self.nrd_sec_id = nrd_sec_id
        if instr_type_id is not None:
            self.instr_type_id = instr_type_id
        if nrd_date_from is not None:
            self.nrd_date_from = nrd_date_from
        if nrd_date_to is not None:
            self.nrd_date_to = nrd_date_to
        if is_serviced is not None:
            self.is_serviced = is_serviced
        if endearlyrepaymentdate_nrd is not None:
            self.endearlyrepaymentdate_nrd = endearlyrepaymentdate_nrd
        if planearlyrepaymentdate_nrd is not None:
            self.planearlyrepaymentdate_nrd = planearlyrepaymentdate_nrd
        if sector_foreign_code is not None:
            self.sector_foreign_code = sector_foreign_code
        if sector_foreign_shortname is not None:
            self.sector_foreign_shortname = sector_foreign_shortname
        if sector_foreign_fullname is not None:
            self.sector_foreign_fullname = sector_foreign_fullname
        if fullname_en_nrd is not None:
            self.fullname_en_nrd = fullname_en_nrd
        if issued_size_outstanding is not None:
            self.issued_size_outstanding = issued_size_outstanding
        if tax_rate is not None:
            self.tax_rate = tax_rate
        if tax_country_id is not None:
            self.tax_country_id = tax_country_id
        if tax_country_name is not None:
            self.tax_country_name = tax_country_name
        if tax_country_name_en is not None:
            self.tax_country_name_en = tax_country_name_en
        if tax_types_id is not None:
            self.tax_types_id = tax_types_id
        if tax_types_name is not None:
            self.tax_types_name = tax_types_name
        if tax_types_name_en is not None:
            self.tax_types_name_en = tax_types_name_en
        if credit_note_type_id is not None:
            self.credit_note_type_id = credit_note_type_id
        if credit_note_type_name is not None:
            self.credit_note_type_name = credit_note_type_name
        if credit_note_type_name_en is not None:
            self.credit_note_type_name_en = credit_note_type_name_en
        if managing_id is not None:
            self.managing_id = managing_id
        if managing_name is not None:
            self.managing_name = managing_name
        if managing_name_en is not None:
            self.managing_name_en = managing_name_en
        if registrar_id is not None:
            self.registrar_id = registrar_id
        if credit_note_type_code is not None:
            self.credit_note_type_code = credit_note_type_code
        if counter is not None:
            self.counter = counter

    @property
    def acc_open_date_nrd(self):
        """Gets the acc_open_date_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата первого открытия ЛС в реестре  # noqa: E501

        :return: The acc_open_date_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._acc_open_date_nrd

    @acc_open_date_nrd.setter
    def acc_open_date_nrd(self, acc_open_date_nrd):
        """Sets the acc_open_date_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата первого открытия ЛС в реестре  # noqa: E501

        :param acc_open_date_nrd: The acc_open_date_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._acc_open_date_nrd = acc_open_date_nrd

    @property
    def base_month(self):
        """Gets the base_month of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Базовый месяц по базе НРД  # noqa: E501

        :return: The base_month of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._base_month

    @base_month.setter
    def base_month(self, base_month):
        """Sets the base_month of this EfirDataHubModelsModelsNsdCommonDataFields.

        Базовый месяц по базе НРД  # noqa: E501

        :param base_month: The base_month of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._base_month = base_month

    @property
    def base_year(self):
        """Gets the base_year of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Базовый год по базе НРД  # noqa: E501

        :return: The base_year of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._base_year

    @base_year.setter
    def base_year(self, base_year):
        """Sets the base_year of this EfirDataHubModelsModelsNsdCommonDataFields.

        Базовый год по базе НРД  # noqa: E501

        :param base_year: The base_year of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._base_year = base_year

    @property
    def basis_nrd(self):
        """Gets the basis_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Базис НКД по базе НРД  # noqa: E501

        :return: The basis_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._basis_nrd

    @basis_nrd.setter
    def basis_nrd(self, basis_nrd):
        """Sets the basis_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Базис НКД по базе НРД  # noqa: E501

        :param basis_nrd: The basis_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._basis_nrd = basis_nrd

    @property
    def begdistdate_nrd(self):
        """Gets the begdistdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата начала размещения  # noqa: E501

        :return: The begdistdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._begdistdate_nrd

    @begdistdate_nrd.setter
    def begdistdate_nrd(self, begdistdate_nrd):
        """Sets the begdistdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата начала размещения  # noqa: E501

        :param begdistdate_nrd: The begdistdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._begdistdate_nrd = begdistdate_nrd

    @property
    def bondseries(self):
        """Gets the bondseries of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Номер серии  # noqa: E501

        :return: The bondseries of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._bondseries

    @bondseries.setter
    def bondseries(self, bondseries):
        """Sets the bondseries of this EfirDataHubModelsModelsNsdCommonDataFields.

        Номер серии  # noqa: E501

        :param bondseries: The bondseries of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._bondseries = bondseries

    @property
    def cfi(self):
        """Gets the cfi of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        CFI  # noqa: E501

        :return: The cfi of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._cfi

    @cfi.setter
    def cfi(self, cfi):
        """Sets the cfi of this EfirDataHubModelsModelsNsdCommonDataFields.

        CFI  # noqa: E501

        :param cfi: The cfi of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._cfi = cfi

    @property
    def cmp_code_nsd_issuer_nrd(self):
        """Gets the cmp_code_nsd_issuer_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Код НРД фонда/ИСУ  # noqa: E501

        :return: The cmp_code_nsd_issuer_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._cmp_code_nsd_issuer_nrd

    @cmp_code_nsd_issuer_nrd.setter
    def cmp_code_nsd_issuer_nrd(self, cmp_code_nsd_issuer_nrd):
        """Sets the cmp_code_nsd_issuer_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Код НРД фонда/ИСУ  # noqa: E501

        :param cmp_code_nsd_issuer_nrd: The cmp_code_nsd_issuer_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._cmp_code_nsd_issuer_nrd = cmp_code_nsd_issuer_nrd

    @property
    def cmp_code_nsd_managing_nrd(self):
        """Gets the cmp_code_nsd_managing_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Код НРД управляющего ипотечным покрытием  # noqa: E501

        :return: The cmp_code_nsd_managing_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._cmp_code_nsd_managing_nrd

    @cmp_code_nsd_managing_nrd.setter
    def cmp_code_nsd_managing_nrd(self, cmp_code_nsd_managing_nrd):
        """Sets the cmp_code_nsd_managing_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Код НРД управляющего ипотечным покрытием  # noqa: E501

        :param cmp_code_nsd_managing_nrd: The cmp_code_nsd_managing_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._cmp_code_nsd_managing_nrd = cmp_code_nsd_managing_nrd

    @property
    def company_state_mn(self):
        """Gets the company_state_mn of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Мнемокод состояния организации (фонда)  # noqa: E501

        :return: The company_state_mn of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._company_state_mn

    @company_state_mn.setter
    def company_state_mn(self, company_state_mn):
        """Sets the company_state_mn of this EfirDataHubModelsModelsNsdCommonDataFields.

        Мнемокод состояния организации (фонда)  # noqa: E501

        :param company_state_mn: The company_state_mn of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._company_state_mn = company_state_mn

    @property
    def company_state_name_nrd(self):
        """Gets the company_state_name_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование состояния организации (фонда)  # noqa: E501

        :return: The company_state_name_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._company_state_name_nrd

    @company_state_name_nrd.setter
    def company_state_name_nrd(self, company_state_name_nrd):
        """Sets the company_state_name_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование состояния организации (фонда)  # noqa: E501

        :param company_state_name_nrd: The company_state_name_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._company_state_name_nrd = company_state_name_nrd

    @property
    def contractdateto_nrd(self):
        """Gets the contractdateto_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата окончания срока действия договора (для паевых фондов)  # noqa: E501

        :return: The contractdateto_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._contractdateto_nrd

    @contractdateto_nrd.setter
    def contractdateto_nrd(self, contractdateto_nrd):
        """Sets the contractdateto_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата окончания срока действия договора (для паевых фондов)  # noqa: E501

        :param contractdateto_nrd: The contractdateto_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._contractdateto_nrd = contractdateto_nrd

    @property
    def coupon_period_base_id(self):
        """Gets the coupon_period_base_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Метод исчисления купонного дохода  # noqa: E501

        :return: The coupon_period_base_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._coupon_period_base_id

    @coupon_period_base_id.setter
    def coupon_period_base_id(self, coupon_period_base_id):
        """Sets the coupon_period_base_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Метод исчисления купонного дохода  # noqa: E501

        :param coupon_period_base_id: The coupon_period_base_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._coupon_period_base_id = coupon_period_base_id

    @property
    def coupontypename_nrd(self):
        """Gets the coupontypename_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование типа купонного периода  # noqa: E501

        :return: The coupontypename_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._coupontypename_nrd

    @coupontypename_nrd.setter
    def coupontypename_nrd(self, coupontypename_nrd):
        """Sets the coupontypename_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование типа купонного периода  # noqa: E501

        :param coupontypename_nrd: The coupontypename_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._coupontypename_nrd = coupontypename_nrd

    @property
    def cp_type_id(self):
        """Gets the cp_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Периодичность  выплаты купона  # noqa: E501

        :return: The cp_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._cp_type_id

    @cp_type_id.setter
    def cp_type_id(self, cp_type_id):
        """Sets the cp_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Периодичность  выплаты купона  # noqa: E501

        :param cp_type_id: The cp_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._cp_type_id = cp_type_id

    @property
    def currentfacevalue_nrd(self):
        """Gets the currentfacevalue_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Остаточная номинальная стоимость к погашению в валюте номинала  # noqa: E501

        :return: The currentfacevalue_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._currentfacevalue_nrd

    @currentfacevalue_nrd.setter
    def currentfacevalue_nrd(self, currentfacevalue_nrd):
        """Sets the currentfacevalue_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Остаточная номинальная стоимость к погашению в валюте номинала  # noqa: E501

        :param currentfacevalue_nrd: The currentfacevalue_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._currentfacevalue_nrd = currentfacevalue_nrd

    @property
    def daysall_nrd(self):
        """Gets the daysall_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Количество дней в обращении  # noqa: E501

        :return: The daysall_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._daysall_nrd

    @daysall_nrd.setter
    def daysall_nrd(self, daysall_nrd):
        """Sets the daysall_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Количество дней в обращении  # noqa: E501

        :param daysall_nrd: The daysall_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._daysall_nrd = daysall_nrd

    @property
    def depositary_nrd(self):
        """Gets the depositary_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Уполномоченный депозитарий  # noqa: E501

        :return: The depositary_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._depositary_nrd

    @depositary_nrd.setter
    def depositary_nrd(self, depositary_nrd):
        """Sets the depositary_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Уполномоченный депозитарий  # noqa: E501

        :param depositary_nrd: The depositary_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._depositary_nrd = depositary_nrd

    @property
    def dr_category_mn(self):
        """Gets the dr_category_mn of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Мнемокод категории депозитарных расписок  # noqa: E501

        :return: The dr_category_mn of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._dr_category_mn

    @dr_category_mn.setter
    def dr_category_mn(self, dr_category_mn):
        """Sets the dr_category_mn of this EfirDataHubModelsModelsNsdCommonDataFields.

        Мнемокод категории депозитарных расписок  # noqa: E501

        :param dr_category_mn: The dr_category_mn of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._dr_category_mn = dr_category_mn

    @property
    def dr_category_name_en_nrd(self):
        """Gets the dr_category_name_en_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Полное наименование категории депозитарных расписок (англ.)  # noqa: E501

        :return: The dr_category_name_en_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._dr_category_name_en_nrd

    @dr_category_name_en_nrd.setter
    def dr_category_name_en_nrd(self, dr_category_name_en_nrd):
        """Sets the dr_category_name_en_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Полное наименование категории депозитарных расписок (англ.)  # noqa: E501

        :param dr_category_name_en_nrd: The dr_category_name_en_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._dr_category_name_en_nrd = dr_category_name_en_nrd

    @property
    def dr_category_name_nrd(self):
        """Gets the dr_category_name_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Полное наименование категории депозитарных расписок (рус.)  # noqa: E501

        :return: The dr_category_name_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._dr_category_name_nrd

    @dr_category_name_nrd.setter
    def dr_category_name_nrd(self, dr_category_name_nrd):
        """Sets the dr_category_name_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Полное наименование категории депозитарных расписок (рус.)  # noqa: E501

        :param dr_category_name_nrd: The dr_category_name_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._dr_category_name_nrd = dr_category_name_nrd

    @property
    def drqty(self):
        """Gets the drqty of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Количество расписок  # noqa: E501

        :return: The drqty of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._drqty

    @drqty.setter
    def drqty(self, drqty):
        """Sets the drqty of this EfirDataHubModelsModelsNsdCommonDataFields.

        Количество расписок  # noqa: E501

        :param drqty: The drqty of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._drqty = drqty

    @property
    def enddistdate_nrd(self):
        """Gets the enddistdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата окончания размещения  # noqa: E501

        :return: The enddistdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._enddistdate_nrd

    @enddistdate_nrd.setter
    def enddistdate_nrd(self, enddistdate_nrd):
        """Sets the enddistdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата окончания размещения  # noqa: E501

        :param enddistdate_nrd: The enddistdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._enddistdate_nrd = enddistdate_nrd

    @property
    def endmtydate_nrd(self):
        """Gets the endmtydate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата окончания погашения  # noqa: E501

        :return: The endmtydate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._endmtydate_nrd

    @endmtydate_nrd.setter
    def endmtydate_nrd(self, endmtydate_nrd):
        """Sets the endmtydate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата окончания погашения  # noqa: E501

        :param endmtydate_nrd: The endmtydate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._endmtydate_nrd = endmtydate_nrd

    @property
    def faceftname_nrd(self):
        """Gets the faceftname_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Валюта номинала  # noqa: E501

        :return: The faceftname_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._faceftname_nrd

    @faceftname_nrd.setter
    def faceftname_nrd(self, faceftname_nrd):
        """Sets the faceftname_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Валюта номинала  # noqa: E501

        :param faceftname_nrd: The faceftname_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._faceftname_nrd = faceftname_nrd

    @property
    def facevalue_nrd(self):
        """Gets the facevalue_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Номинал  # noqa: E501

        :return: The facevalue_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._facevalue_nrd

    @facevalue_nrd.setter
    def facevalue_nrd(self, facevalue_nrd):
        """Sets the facevalue_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Номинал  # noqa: E501

        :param facevalue_nrd: The facevalue_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._facevalue_nrd = facevalue_nrd

    @property
    def facialacc_nrd(self):
        """Gets the facialacc_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Номер лицевого счета  # noqa: E501

        :return: The facialacc_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._facialacc_nrd

    @facialacc_nrd.setter
    def facialacc_nrd(self, facialacc_nrd):
        """Sets the facialacc_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Номер лицевого счета  # noqa: E501

        :param facialacc_nrd: The facialacc_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._facialacc_nrd = facialacc_nrd

    @property
    def fininstid(self):
        """Gets the fininstid of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор эмитента выпуска в базе Интерфакс  # noqa: E501

        :return: The fininstid of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid

    @fininstid.setter
    def fininstid(self, fininstid):
        """Sets the fininstid of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор эмитента выпуска в базе Интерфакс  # noqa: E501

        :param fininstid: The fininstid of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: int
        """

        self._fininstid = fininstid

    @property
    def fininstid_operator(self):
        """Gets the fininstid_operator of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор оператора выпуска в базе Интерфакс  # noqa: E501

        :return: The fininstid_operator of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._fininstid_operator

    @fininstid_operator.setter
    def fininstid_operator(self, fininstid_operator):
        """Sets the fininstid_operator of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор оператора выпуска в базе Интерфакс  # noqa: E501

        :param fininstid_operator: The fininstid_operator of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._fininstid_operator = fininstid_operator

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор выпуска в базе Интерфакс  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор выпуска в базе Интерфакс  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def firstcoupondate_nrd(self):
        """Gets the firstcoupondate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата начала начисления первого купона  # noqa: E501

        :return: The firstcoupondate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._firstcoupondate_nrd

    @firstcoupondate_nrd.setter
    def firstcoupondate_nrd(self, firstcoupondate_nrd):
        """Sets the firstcoupondate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата начала начисления первого купона  # noqa: E501

        :param firstcoupondate_nrd: The firstcoupondate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._firstcoupondate_nrd = firstcoupondate_nrd

    @property
    def formarketbonds_nrd(self):
        """Gets the formarketbonds_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Признак биржевой облигации  # noqa: E501

        :return: The formarketbonds_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._formarketbonds_nrd

    @formarketbonds_nrd.setter
    def formarketbonds_nrd(self, formarketbonds_nrd):
        """Sets the formarketbonds_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Признак биржевой облигации  # noqa: E501

        :param formarketbonds_nrd: The formarketbonds_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._formarketbonds_nrd = formarketbonds_nrd

    @property
    def fraction_nrd(self):
        """Gets the fraction_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Количество знаков после запятой  # noqa: E501

        :return: The fraction_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._fraction_nrd

    @fraction_nrd.setter
    def fraction_nrd(self, fraction_nrd):
        """Sets the fraction_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Количество знаков после запятой  # noqa: E501

        :param fraction_nrd: The fraction_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._fraction_nrd = fraction_nrd

    @property
    def fullname_nrd(self):
        """Gets the fullname_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Полное наименование выпуска  # noqa: E501

        :return: The fullname_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_nrd

    @fullname_nrd.setter
    def fullname_nrd(self, fullname_nrd):
        """Sets the fullname_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Полное наименование выпуска  # noqa: E501

        :param fullname_nrd: The fullname_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._fullname_nrd = fullname_nrd

    @property
    def isincode(self):
        """Gets the isincode of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        ISIN  # noqa: E501

        :return: The isincode of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._isincode

    @isincode.setter
    def isincode(self, isincode):
        """Sets the isincode of this EfirDataHubModelsModelsNsdCommonDataFields.

        ISIN  # noqa: E501

        :param isincode: The isincode of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._isincode = isincode

    @property
    def isincodebase_nrd(self):
        """Gets the isincodebase_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        ISIN представляемой бумаги (для расписок)  # noqa: E501

        :return: The isincodebase_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._isincodebase_nrd

    @isincodebase_nrd.setter
    def isincodebase_nrd(self, isincodebase_nrd):
        """Sets the isincodebase_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        ISIN представляемой бумаги (для расписок)  # noqa: E501

        :param isincodebase_nrd: The isincodebase_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._isincodebase_nrd = isincodebase_nrd

    @property
    def islombardcbr_nrd(self):
        """Gets the islombardcbr_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Признак включения в ломбардный список ЦБР (0/1)  # noqa: E501

        :return: The islombardcbr_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._islombardcbr_nrd

    @islombardcbr_nrd.setter
    def islombardcbr_nrd(self, islombardcbr_nrd):
        """Sets the islombardcbr_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Признак включения в ломбардный список ЦБР (0/1)  # noqa: E501

        :param islombardcbr_nrd: The islombardcbr_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._islombardcbr_nrd = islombardcbr_nrd

    @property
    def isqualified_nrd(self):
        """Gets the isqualified_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Признак ценной бумаги предназначенной для квалифицированных инвесторов (0/1)  # noqa: E501

        :return: The isqualified_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._isqualified_nrd

    @isqualified_nrd.setter
    def isqualified_nrd(self, isqualified_nrd):
        """Sets the isqualified_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Признак ценной бумаги предназначенной для квалифицированных инвесторов (0/1)  # noqa: E501

        :param isqualified_nrd: The isqualified_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: int
        """

        self._isqualified_nrd = isqualified_nrd

    @property
    def issuenumber(self):
        """Gets the issuenumber of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Номер выпуска  # noqa: E501

        :return: The issuenumber of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._issuenumber

    @issuenumber.setter
    def issuenumber(self, issuenumber):
        """Sets the issuenumber of this EfirDataHubModelsModelsNsdCommonDataFields.

        Номер выпуска  # noqa: E501

        :param issuenumber: The issuenumber of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._issuenumber = issuenumber

    @property
    def issuername_nrd(self):
        """Gets the issuername_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Эмитент  # noqa: E501

        :return: The issuername_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._issuername_nrd

    @issuername_nrd.setter
    def issuername_nrd(self, issuername_nrd):
        """Sets the issuername_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Эмитент  # noqa: E501

        :param issuername_nrd: The issuername_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._issuername_nrd = issuername_nrd

    @property
    def micexlist_nrd(self):
        """Gets the micexlist_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Листинг/внесписочные (ФБ ММВБ)  # noqa: E501

        :return: The micexlist_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._micexlist_nrd

    @micexlist_nrd.setter
    def micexlist_nrd(self, micexlist_nrd):
        """Sets the micexlist_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Листинг/внесписочные (ФБ ММВБ)  # noqa: E501

        :param micexlist_nrd: The micexlist_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._micexlist_nrd = micexlist_nrd

    @property
    def minlot_nrd(self):
        """Gets the minlot_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Минимальный лот (в валюте номинала) для проведения расчетов в ISCD  # noqa: E501

        :return: The minlot_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._minlot_nrd

    @minlot_nrd.setter
    def minlot_nrd(self, minlot_nrd):
        """Sets the minlot_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Минимальный лот (в валюте номинала) для проведения расчетов в ISCD  # noqa: E501

        :param minlot_nrd: The minlot_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._minlot_nrd = minlot_nrd

    @property
    def nrdcode(self):
        """Gets the nrdcode of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор выпуска в базе НРД  # noqa: E501

        :return: The nrdcode of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._nrdcode

    @nrdcode.setter
    def nrdcode(self, nrdcode):
        """Sets the nrdcode of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор выпуска в базе НРД  # noqa: E501

        :param nrdcode: The nrdcode of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._nrdcode = nrdcode

    @property
    def nrdcompcode(self):
        """Gets the nrdcompcode of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Код эмитента представляемой бумаги (для расписок)  # noqa: E501

        :return: The nrdcompcode of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._nrdcompcode

    @nrdcompcode.setter
    def nrdcompcode(self, nrdcompcode):
        """Sets the nrdcompcode of this EfirDataHubModelsModelsNsdCommonDataFields.

        Код эмитента представляемой бумаги (для расписок)  # noqa: E501

        :param nrdcompcode: The nrdcompcode of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._nrdcompcode = nrdcompcode

    @property
    def numcoupons_nrd(self):
        """Gets the numcoupons_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Количество купонов  # noqa: E501

        :return: The numcoupons_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._numcoupons_nrd

    @numcoupons_nrd.setter
    def numcoupons_nrd(self, numcoupons_nrd):
        """Sets the numcoupons_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Количество купонов  # noqa: E501

        :param numcoupons_nrd: The numcoupons_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._numcoupons_nrd = numcoupons_nrd

    @property
    def placement_type_id(self):
        """Gets the placement_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Способ размещения  # noqa: E501

        :return: The placement_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._placement_type_id

    @placement_type_id.setter
    def placement_type_id(self, placement_type_id):
        """Sets the placement_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Способ размещения  # noqa: E501

        :param placement_type_id: The placement_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._placement_type_id = placement_type_id

    @property
    def placementtype_nrd(self):
        """Gets the placementtype_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование способа размещения ценных бумаг  # noqa: E501

        :return: The placementtype_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._placementtype_nrd

    @placementtype_nrd.setter
    def placementtype_nrd(self, placementtype_nrd):
        """Sets the placementtype_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование способа размещения ценных бумаг  # noqa: E501

        :param placementtype_nrd: The placementtype_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._placementtype_nrd = placementtype_nrd

    @property
    def placeprice_nrd(self):
        """Gets the placeprice_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Цена размещения в валюте номинала  # noqa: E501

        :return: The placeprice_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._placeprice_nrd

    @placeprice_nrd.setter
    def placeprice_nrd(self, placeprice_nrd):
        """Sets the placeprice_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Цена размещения в валюте номинала  # noqa: E501

        :param placeprice_nrd: The placeprice_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._placeprice_nrd = placeprice_nrd

    @property
    def planmtydate_nrd(self):
        """Gets the planmtydate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата погашения плановая  # noqa: E501

        :return: The planmtydate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._planmtydate_nrd

    @planmtydate_nrd.setter
    def planmtydate_nrd(self, planmtydate_nrd):
        """Sets the planmtydate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата погашения плановая  # noqa: E501

        :param planmtydate_nrd: The planmtydate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._planmtydate_nrd = planmtydate_nrd

    @property
    def rate_type_id(self):
        """Gets the rate_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор вида купона (процента)  # noqa: E501

        :return: The rate_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._rate_type_id

    @rate_type_id.setter
    def rate_type_id(self, rate_type_id):
        """Sets the rate_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор вида купона (процента)  # noqa: E501

        :param rate_type_id: The rate_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._rate_type_id = rate_type_id

    @property
    def ratetypenameeng_nrd(self):
        """Gets the ratetypenameeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование вида купона (процента), английское  # noqa: E501

        :return: The ratetypenameeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ratetypenameeng_nrd

    @ratetypenameeng_nrd.setter
    def ratetypenameeng_nrd(self, ratetypenameeng_nrd):
        """Sets the ratetypenameeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование вида купона (процента), английское  # noqa: E501

        :param ratetypenameeng_nrd: The ratetypenameeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._ratetypenameeng_nrd = ratetypenameeng_nrd

    @property
    def ratetypenamerus_nrd(self):
        """Gets the ratetypenamerus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование вида купона (процента), русское  # noqa: E501

        :return: The ratetypenamerus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ratetypenamerus_nrd

    @ratetypenamerus_nrd.setter
    def ratetypenamerus_nrd(self, ratetypenamerus_nrd):
        """Sets the ratetypenamerus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование вида купона (процента), русское  # noqa: E501

        :param ratetypenamerus_nrd: The ratetypenamerus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._ratetypenamerus_nrd = ratetypenamerus_nrd

    @property
    def regcode_nrd(self):
        """Gets the regcode_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Регистрационный код  # noqa: E501

        :return: The regcode_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._regcode_nrd

    @regcode_nrd.setter
    def regcode_nrd(self, regcode_nrd):
        """Sets the regcode_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Регистрационный код  # noqa: E501

        :param regcode_nrd: The regcode_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._regcode_nrd = regcode_nrd

    @property
    def regdate_nrd(self):
        """Gets the regdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата государственной регистрации выпуска  # noqa: E501

        :return: The regdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._regdate_nrd

    @regdate_nrd.setter
    def regdate_nrd(self, regdate_nrd):
        """Sets the regdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата государственной регистрации выпуска  # noqa: E501

        :param regdate_nrd: The regdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._regdate_nrd = regdate_nrd

    @property
    def regdistdate_nrd(self):
        """Gets the regdistdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата регистрации отчета  # noqa: E501

        :return: The regdistdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._regdistdate_nrd

    @regdistdate_nrd.setter
    def regdistdate_nrd(self, regdistdate_nrd):
        """Sets the regdistdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата регистрации отчета  # noqa: E501

        :param regdistdate_nrd: The regdistdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._regdistdate_nrd = regdistdate_nrd

    @property
    def registrar_nrd(self):
        """Gets the registrar_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Реестродержатель  # noqa: E501

        :return: The registrar_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._registrar_nrd

    @registrar_nrd.setter
    def registrar_nrd(self, registrar_nrd):
        """Sets the registrar_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Реестродержатель  # noqa: E501

        :param registrar_nrd: The registrar_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._registrar_nrd = registrar_nrd

    @property
    def registraracctype_nrd(self):
        """Gets the registraracctype_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Тип лицевого счета(НД или НДЦД)  # noqa: E501

        :return: The registraracctype_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._registraracctype_nrd

    @registraracctype_nrd.setter
    def registraracctype_nrd(self, registraracctype_nrd):
        """Sets the registraracctype_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Тип лицевого счета(НД или НДЦД)  # noqa: E501

        :param registraracctype_nrd: The registraracctype_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._registraracctype_nrd = registraracctype_nrd

    @property
    def registraracctypedate_nrd(self):
        """Gets the registraracctypedate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата открытия лицевого счета / изменения типа ЛС  # noqa: E501

        :return: The registraracctypedate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._registraracctypedate_nrd

    @registraracctypedate_nrd.setter
    def registraracctypedate_nrd(self, registraracctypedate_nrd):
        """Sets the registraracctypedate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата открытия лицевого счета / изменения типа ЛС  # noqa: E501

        :param registraracctypedate_nrd: The registraracctypedate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._registraracctypedate_nrd = registraracctypedate_nrd

    @property
    def regorg_nrd(self):
        """Gets the regorg_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Регистрирующий орган  # noqa: E501

        :return: The regorg_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._regorg_nrd

    @regorg_nrd.setter
    def regorg_nrd(self, regorg_nrd):
        """Sets the regorg_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Регистрирующий орган  # noqa: E501

        :param regorg_nrd: The regorg_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._regorg_nrd = regorg_nrd

    @property
    def rpregorg_nrd(self):
        """Gets the rpregorg_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Орган осуществивший регистрацию отчета  # noqa: E501

        :return: The rpregorg_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._rpregorg_nrd

    @rpregorg_nrd.setter
    def rpregorg_nrd(self, rpregorg_nrd):
        """Sets the rpregorg_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Орган осуществивший регистрацию отчета  # noqa: E501

        :param rpregorg_nrd: The rpregorg_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._rpregorg_nrd = rpregorg_nrd

    @property
    def rpstate_nrd(self):
        """Gets the rpstate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Состояние отчета о выпуске  # noqa: E501

        :return: The rpstate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._rpstate_nrd

    @rpstate_nrd.setter
    def rpstate_nrd(self, rpstate_nrd):
        """Sets the rpstate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Состояние отчета о выпуске  # noqa: E501

        :param rpstate_nrd: The rpstate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._rpstate_nrd = rpstate_nrd

    @property
    def sec_form_id(self):
        """Gets the sec_form_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Форма выпуска ценных бумаг  # noqa: E501

        :return: The sec_form_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._sec_form_id

    @sec_form_id.setter
    def sec_form_id(self, sec_form_id):
        """Sets the sec_form_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Форма выпуска ценных бумаг  # noqa: E501

        :param sec_form_id: The sec_form_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: int
        """

        self._sec_form_id = sec_form_id

    @property
    def sec_state_id(self):
        """Gets the sec_state_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Состояние выпуска  # noqa: E501

        :return: The sec_state_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._sec_state_id

    @sec_state_id.setter
    def sec_state_id(self, sec_state_id):
        """Sets the sec_state_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Состояние выпуска  # noqa: E501

        :param sec_state_id: The sec_state_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._sec_state_id = sec_state_id

    @property
    def sec_type_br_code(self):
        """Gets the sec_type_br_code of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Тип ц.б. по классификации Банка России  # noqa: E501

        :return: The sec_type_br_code of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._sec_type_br_code

    @sec_type_br_code.setter
    def sec_type_br_code(self, sec_type_br_code):
        """Sets the sec_type_br_code of this EfirDataHubModelsModelsNsdCommonDataFields.

        Тип ц.б. по классификации Банка России  # noqa: E501

        :param sec_type_br_code: The sec_type_br_code of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._sec_type_br_code = sec_type_br_code

    @property
    def sec_type_id(self):
        """Gets the sec_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор типа ценной бумаги  # noqa: E501

        :return: The sec_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._sec_type_id

    @sec_type_id.setter
    def sec_type_id(self, sec_type_id):
        """Sets the sec_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор типа ценной бумаги  # noqa: E501

        :param sec_type_id: The sec_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._sec_type_id = sec_type_id

    @property
    def secformnameeng_nrd(self):
        """Gets the secformnameeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование формы выпуска (англ.)  # noqa: E501

        :return: The secformnameeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._secformnameeng_nrd

    @secformnameeng_nrd.setter
    def secformnameeng_nrd(self, secformnameeng_nrd):
        """Sets the secformnameeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование формы выпуска (англ.)  # noqa: E501

        :param secformnameeng_nrd: The secformnameeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._secformnameeng_nrd = secformnameeng_nrd

    @property
    def secformnamerus_nrd(self):
        """Gets the secformnamerus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование формы выпуска (рус)  # noqa: E501

        :return: The secformnamerus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._secformnamerus_nrd

    @secformnamerus_nrd.setter
    def secformnamerus_nrd(self, secformnamerus_nrd):
        """Sets the secformnamerus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование формы выпуска (рус)  # noqa: E501

        :param secformnamerus_nrd: The secformnamerus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._secformnamerus_nrd = secformnamerus_nrd

    @property
    def secstateeng_nrd(self):
        """Gets the secstateeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование состояния бумаги/выпуска/транша, англ.  # noqa: E501

        :return: The secstateeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._secstateeng_nrd

    @secstateeng_nrd.setter
    def secstateeng_nrd(self, secstateeng_nrd):
        """Sets the secstateeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование состояния бумаги/выпуска/транша, англ.  # noqa: E501

        :param secstateeng_nrd: The secstateeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._secstateeng_nrd = secstateeng_nrd

    @property
    def secstaterus_nrd(self):
        """Gets the secstaterus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование состояния бумаги/выпуска/транша, рус.  # noqa: E501

        :return: The secstaterus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._secstaterus_nrd

    @secstaterus_nrd.setter
    def secstaterus_nrd(self, secstaterus_nrd):
        """Sets the secstaterus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование состояния бумаги/выпуска/транша, рус.  # noqa: E501

        :param secstaterus_nrd: The secstaterus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._secstaterus_nrd = secstaterus_nrd

    @property
    def sectypenamebr_nrd(self):
        """Gets the sectypenamebr_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование типа ц.б. по классификации Банка России  # noqa: E501

        :return: The sectypenamebr_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._sectypenamebr_nrd

    @sectypenamebr_nrd.setter
    def sectypenamebr_nrd(self, sectypenamebr_nrd):
        """Sets the sectypenamebr_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование типа ц.б. по классификации Банка России  # noqa: E501

        :param sectypenamebr_nrd: The sectypenamebr_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._sectypenamebr_nrd = sectypenamebr_nrd

    @property
    def sectypenameeng_nrd(self):
        """Gets the sectypenameeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование типа ценных бумаг, английское  # noqa: E501

        :return: The sectypenameeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._sectypenameeng_nrd

    @sectypenameeng_nrd.setter
    def sectypenameeng_nrd(self, sectypenameeng_nrd):
        """Sets the sectypenameeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование типа ценных бумаг, английское  # noqa: E501

        :param sectypenameeng_nrd: The sectypenameeng_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._sectypenameeng_nrd = sectypenameeng_nrd

    @property
    def sectypenamerus_nrd(self):
        """Gets the sectypenamerus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование типа ценных бумаг, русское  # noqa: E501

        :return: The sectypenamerus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._sectypenamerus_nrd

    @sectypenamerus_nrd.setter
    def sectypenamerus_nrd(self, sectypenamerus_nrd):
        """Sets the sectypenamerus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование типа ценных бумаг, русское  # noqa: E501

        :param sectypenamerus_nrd: The sectypenamerus_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._sectypenamerus_nrd = sectypenamerus_nrd

    @property
    def share_category_id(self):
        """Gets the share_category_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Категория акций  # noqa: E501

        :return: The share_category_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._share_category_id

    @share_category_id.setter
    def share_category_id(self, share_category_id):
        """Sets the share_category_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Категория акций  # noqa: E501

        :param share_category_id: The share_category_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._share_category_id = share_category_id

    @property
    def share_category_name_en_nrd(self):
        """Gets the share_category_name_en_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование категории, английское  # noqa: E501

        :return: The share_category_name_en_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._share_category_name_en_nrd

    @share_category_name_en_nrd.setter
    def share_category_name_en_nrd(self, share_category_name_en_nrd):
        """Sets the share_category_name_en_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование категории, английское  # noqa: E501

        :param share_category_name_en_nrd: The share_category_name_en_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._share_category_name_en_nrd = share_category_name_en_nrd

    @property
    def share_category_name_nrd(self):
        """Gets the share_category_name_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование категории, русское  # noqa: E501

        :return: The share_category_name_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._share_category_name_nrd

    @share_category_name_nrd.setter
    def share_category_name_nrd(self, share_category_name_nrd):
        """Sets the share_category_name_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование категории, русское  # noqa: E501

        :param share_category_name_nrd: The share_category_name_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._share_category_name_nrd = share_category_name_nrd

    @property
    def shqty(self):
        """Gets the shqty of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Количество представляемых бумаг  # noqa: E501

        :return: The shqty of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._shqty

    @shqty.setter
    def shqty(self, shqty):
        """Sets the shqty of this EfirDataHubModelsModelsNsdCommonDataFields.

        Количество представляемых бумаг  # noqa: E501

        :param shqty: The shqty of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._shqty = shqty

    @property
    def specialized_depo_nrd(self):
        """Gets the specialized_depo_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Код НРД специализированного депозитария  # noqa: E501

        :return: The specialized_depo_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._specialized_depo_nrd

    @specialized_depo_nrd.setter
    def specialized_depo_nrd(self, specialized_depo_nrd):
        """Sets the specialized_depo_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Код НРД специализированного депозитария  # noqa: E501

        :param specialized_depo_nrd: The specialized_depo_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._specialized_depo_nrd = specialized_depo_nrd

    @property
    def sumissuevol_nrd(self):
        """Gets the sumissuevol_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Объем планируемый, штук  # noqa: E501

        :return: The sumissuevol_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._sumissuevol_nrd

    @sumissuevol_nrd.setter
    def sumissuevol_nrd(self, sumissuevol_nrd):
        """Sets the sumissuevol_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Объем планируемый, штук  # noqa: E501

        :param sumissuevol_nrd: The sumissuevol_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._sumissuevol_nrd = sumissuevol_nrd

    @property
    def summarketvol_nrd(self):
        """Gets the summarketvol_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Размещенное количество шт. (первоначальные данные)  # noqa: E501

        :return: The summarketvol_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._summarketvol_nrd

    @summarketvol_nrd.setter
    def summarketvol_nrd(self, summarketvol_nrd):
        """Sets the summarketvol_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Размещенное количество шт. (первоначальные данные)  # noqa: E501

        :param summarketvol_nrd: The summarketvol_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._summarketvol_nrd = summarketvol_nrd

    @property
    def summarketvolorig_nrd(self):
        """Gets the summarketvolorig_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Объем бумаг в обращении (с учетом доп. выпусков за вычетом погашенных ц.б) по остаточной номинальной стоимости  # noqa: E501

        :return: The summarketvolorig_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._summarketvolorig_nrd

    @summarketvolorig_nrd.setter
    def summarketvolorig_nrd(self, summarketvolorig_nrd):
        """Sets the summarketvolorig_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Объем бумаг в обращении (с учетом доп. выпусков за вычетом погашенных ц.б) по остаточной номинальной стоимости  # noqa: E501

        :param summarketvolorig_nrd: The summarketvolorig_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._summarketvolorig_nrd = summarketvolorig_nrd

    @property
    def unit_name_full_nrd(self):
        """Gets the unit_name_full_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Полное наименование ценной бумаги фонда  # noqa: E501

        :return: The unit_name_full_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._unit_name_full_nrd

    @unit_name_full_nrd.setter
    def unit_name_full_nrd(self, unit_name_full_nrd):
        """Sets the unit_name_full_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Полное наименование ценной бумаги фонда  # noqa: E501

        :param unit_name_full_nrd: The unit_name_full_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._unit_name_full_nrd = unit_name_full_nrd

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата/время последнего изменения записи  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата/время последнего изменения записи  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def nrd_sec_id(self):
        """Gets the nrd_sec_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор бумаги в базе НРД  # noqa: E501

        :return: The nrd_sec_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._nrd_sec_id

    @nrd_sec_id.setter
    def nrd_sec_id(self, nrd_sec_id):
        """Sets the nrd_sec_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор бумаги в базе НРД  # noqa: E501

        :param nrd_sec_id: The nrd_sec_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: int
        """

        self._nrd_sec_id = nrd_sec_id

    @property
    def instr_type_id(self):
        """Gets the instr_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор типа бумаги в базе НРД  # noqa: E501

        :return: The instr_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._instr_type_id

    @instr_type_id.setter
    def instr_type_id(self, instr_type_id):
        """Sets the instr_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор типа бумаги в базе НРД  # noqa: E501

        :param instr_type_id: The instr_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: int
        """

        self._instr_type_id = instr_type_id

    @property
    def nrd_date_from(self):
        """Gets the nrd_date_from of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата начала обслуживания в НРД  # noqa: E501

        :return: The nrd_date_from of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._nrd_date_from

    @nrd_date_from.setter
    def nrd_date_from(self, nrd_date_from):
        """Sets the nrd_date_from of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата начала обслуживания в НРД  # noqa: E501

        :param nrd_date_from: The nrd_date_from of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._nrd_date_from = nrd_date_from

    @property
    def nrd_date_to(self):
        """Gets the nrd_date_to of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата окончания обслуживания в НРД  # noqa: E501

        :return: The nrd_date_to of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._nrd_date_to

    @nrd_date_to.setter
    def nrd_date_to(self, nrd_date_to):
        """Sets the nrd_date_to of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата окончания обслуживания в НРД  # noqa: E501

        :param nrd_date_to: The nrd_date_to of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._nrd_date_to = nrd_date_to

    @property
    def is_serviced(self):
        """Gets the is_serviced of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Флаг «обслуживается НРД»  # noqa: E501

        :return: The is_serviced of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_serviced

    @is_serviced.setter
    def is_serviced(self, is_serviced):
        """Sets the is_serviced of this EfirDataHubModelsModelsNsdCommonDataFields.

        Флаг «обслуживается НРД»  # noqa: E501

        :param is_serviced: The is_serviced of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: bool
        """

        self._is_serviced = is_serviced

    @property
    def endearlyrepaymentdate_nrd(self):
        """Gets the endearlyrepaymentdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата досрочного погашения (расчетная)  # noqa: E501

        :return: The endearlyrepaymentdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._endearlyrepaymentdate_nrd

    @endearlyrepaymentdate_nrd.setter
    def endearlyrepaymentdate_nrd(self, endearlyrepaymentdate_nrd):
        """Sets the endearlyrepaymentdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата досрочного погашения (расчетная)  # noqa: E501

        :param endearlyrepaymentdate_nrd: The endearlyrepaymentdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._endearlyrepaymentdate_nrd = endearlyrepaymentdate_nrd

    @property
    def planearlyrepaymentdate_nrd(self):
        """Gets the planearlyrepaymentdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Дата досрочного погашения (плановая)  # noqa: E501

        :return: The planearlyrepaymentdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._planearlyrepaymentdate_nrd

    @planearlyrepaymentdate_nrd.setter
    def planearlyrepaymentdate_nrd(self, planearlyrepaymentdate_nrd):
        """Sets the planearlyrepaymentdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Дата досрочного погашения (плановая)  # noqa: E501

        :param planearlyrepaymentdate_nrd: The planearlyrepaymentdate_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._planearlyrepaymentdate_nrd = planearlyrepaymentdate_nrd

    @property
    def sector_foreign_code(self):
        """Gets the sector_foreign_code of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Код сектора экономики иностранного эмитента  # noqa: E501

        :return: The sector_foreign_code of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._sector_foreign_code

    @sector_foreign_code.setter
    def sector_foreign_code(self, sector_foreign_code):
        """Sets the sector_foreign_code of this EfirDataHubModelsModelsNsdCommonDataFields.

        Код сектора экономики иностранного эмитента  # noqa: E501

        :param sector_foreign_code: The sector_foreign_code of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._sector_foreign_code = sector_foreign_code

    @property
    def sector_foreign_shortname(self):
        """Gets the sector_foreign_shortname of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Краткое наименование сектора экономики иностранного эмитента  # noqa: E501

        :return: The sector_foreign_shortname of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._sector_foreign_shortname

    @sector_foreign_shortname.setter
    def sector_foreign_shortname(self, sector_foreign_shortname):
        """Sets the sector_foreign_shortname of this EfirDataHubModelsModelsNsdCommonDataFields.

        Краткое наименование сектора экономики иностранного эмитента  # noqa: E501

        :param sector_foreign_shortname: The sector_foreign_shortname of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._sector_foreign_shortname = sector_foreign_shortname

    @property
    def sector_foreign_fullname(self):
        """Gets the sector_foreign_fullname of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Полное наименование сектора экономики иностранного эмитента  # noqa: E501

        :return: The sector_foreign_fullname of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._sector_foreign_fullname

    @sector_foreign_fullname.setter
    def sector_foreign_fullname(self, sector_foreign_fullname):
        """Sets the sector_foreign_fullname of this EfirDataHubModelsModelsNsdCommonDataFields.

        Полное наименование сектора экономики иностранного эмитента  # noqa: E501

        :param sector_foreign_fullname: The sector_foreign_fullname of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._sector_foreign_fullname = sector_foreign_fullname

    @property
    def fullname_en_nrd(self):
        """Gets the fullname_en_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Полное наименование выпуска на английском языке  # noqa: E501

        :return: The fullname_en_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_en_nrd

    @fullname_en_nrd.setter
    def fullname_en_nrd(self, fullname_en_nrd):
        """Sets the fullname_en_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.

        Полное наименование выпуска на английском языке  # noqa: E501

        :param fullname_en_nrd: The fullname_en_nrd of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._fullname_en_nrd = fullname_en_nrd

    @property
    def issued_size_outstanding(self):
        """Gets the issued_size_outstanding of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Бумаги в обращении с учетом доп. выпусков за вычетом погашенных ц.б. шт.  # noqa: E501

        :return: The issued_size_outstanding of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._issued_size_outstanding

    @issued_size_outstanding.setter
    def issued_size_outstanding(self, issued_size_outstanding):
        """Sets the issued_size_outstanding of this EfirDataHubModelsModelsNsdCommonDataFields.

        Бумаги в обращении с учетом доп. выпусков за вычетом погашенных ц.б. шт.  # noqa: E501

        :param issued_size_outstanding: The issued_size_outstanding of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._issued_size_outstanding = issued_size_outstanding

    @property
    def tax_rate(self):
        """Gets the tax_rate of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Cтавка налога на доход % без предоставления налоговых освобождений  # noqa: E501

        :return: The tax_rate of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this EfirDataHubModelsModelsNsdCommonDataFields.

        Cтавка налога на доход % без предоставления налоговых освобождений  # noqa: E501

        :param tax_rate: The tax_rate of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: float
        """

        self._tax_rate = tax_rate

    @property
    def tax_country_id(self):
        """Gets the tax_country_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор страны налогообложения  # noqa: E501

        :return: The tax_country_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._tax_country_id

    @tax_country_id.setter
    def tax_country_id(self, tax_country_id):
        """Sets the tax_country_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор страны налогообложения  # noqa: E501

        :param tax_country_id: The tax_country_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: int
        """

        self._tax_country_id = tax_country_id

    @property
    def tax_country_name(self):
        """Gets the tax_country_name of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование страны налогообложения  # noqa: E501

        :return: The tax_country_name of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._tax_country_name

    @tax_country_name.setter
    def tax_country_name(self, tax_country_name):
        """Sets the tax_country_name of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование страны налогообложения  # noqa: E501

        :param tax_country_name: The tax_country_name of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._tax_country_name = tax_country_name

    @property
    def tax_country_name_en(self):
        """Gets the tax_country_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Код страны налогообложения на англ. языке  # noqa: E501

        :return: The tax_country_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._tax_country_name_en

    @tax_country_name_en.setter
    def tax_country_name_en(self, tax_country_name_en):
        """Sets the tax_country_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.

        Код страны налогообложения на англ. языке  # noqa: E501

        :param tax_country_name_en: The tax_country_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._tax_country_name_en = tax_country_name_en

    @property
    def tax_types_id(self):
        """Gets the tax_types_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор типа налога  # noqa: E501

        :return: The tax_types_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._tax_types_id

    @tax_types_id.setter
    def tax_types_id(self, tax_types_id):
        """Sets the tax_types_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор типа налога  # noqa: E501

        :param tax_types_id: The tax_types_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: int
        """

        self._tax_types_id = tax_types_id

    @property
    def tax_types_name(self):
        """Gets the tax_types_name of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование типа налога  # noqa: E501

        :return: The tax_types_name of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._tax_types_name

    @tax_types_name.setter
    def tax_types_name(self, tax_types_name):
        """Sets the tax_types_name of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование типа налога  # noqa: E501

        :param tax_types_name: The tax_types_name of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._tax_types_name = tax_types_name

    @property
    def tax_types_name_en(self):
        """Gets the tax_types_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование типа налога на англ. языке  # noqa: E501

        :return: The tax_types_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._tax_types_name_en

    @tax_types_name_en.setter
    def tax_types_name_en(self, tax_types_name_en):
        """Sets the tax_types_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование типа налога на англ. языке  # noqa: E501

        :param tax_types_name_en: The tax_types_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._tax_types_name_en = tax_types_name_en

    @property
    def credit_note_type_id(self):
        """Gets the credit_note_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор типа долгового инструмента  # noqa: E501

        :return: The credit_note_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._credit_note_type_id

    @credit_note_type_id.setter
    def credit_note_type_id(self, credit_note_type_id):
        """Sets the credit_note_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор типа долгового инструмента  # noqa: E501

        :param credit_note_type_id: The credit_note_type_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: int
        """

        self._credit_note_type_id = credit_note_type_id

    @property
    def credit_note_type_name(self):
        """Gets the credit_note_type_name of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование типа долгового инструмента  # noqa: E501

        :return: The credit_note_type_name of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._credit_note_type_name

    @credit_note_type_name.setter
    def credit_note_type_name(self, credit_note_type_name):
        """Sets the credit_note_type_name of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование типа долгового инструмента  # noqa: E501

        :param credit_note_type_name: The credit_note_type_name of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._credit_note_type_name = credit_note_type_name

    @property
    def credit_note_type_name_en(self):
        """Gets the credit_note_type_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование типа долгового инструмента на англ. языке  # noqa: E501

        :return: The credit_note_type_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._credit_note_type_name_en

    @credit_note_type_name_en.setter
    def credit_note_type_name_en(self, credit_note_type_name_en):
        """Sets the credit_note_type_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование типа долгового инструмента на англ. языке  # noqa: E501

        :param credit_note_type_name_en: The credit_note_type_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._credit_note_type_name_en = credit_note_type_name_en

    @property
    def managing_id(self):
        """Gets the managing_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор компании в базе НРД. Ссылка на company_id в методе /Nsd/Emitents  # noqa: E501

        :return: The managing_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._managing_id

    @managing_id.setter
    def managing_id(self, managing_id):
        """Sets the managing_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор компании в базе НРД. Ссылка на company_id в методе /Nsd/Emitents  # noqa: E501

        :param managing_id: The managing_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: int
        """

        self._managing_id = managing_id

    @property
    def managing_name(self):
        """Gets the managing_name of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование управляющей компании  # noqa: E501

        :return: The managing_name of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._managing_name

    @managing_name.setter
    def managing_name(self, managing_name):
        """Sets the managing_name of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование управляющей компании  # noqa: E501

        :param managing_name: The managing_name of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._managing_name = managing_name

    @property
    def managing_name_en(self):
        """Gets the managing_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Наименование управляющей компании на англ. языке  # noqa: E501

        :return: The managing_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._managing_name_en

    @managing_name_en.setter
    def managing_name_en(self, managing_name_en):
        """Sets the managing_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.

        Наименование управляющей компании на англ. языке  # noqa: E501

        :param managing_name_en: The managing_name_en of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._managing_name_en = managing_name_en

    @property
    def registrar_id(self):
        """Gets the registrar_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Идентификатор компании в базе НРД. Ссылка на company_id в методе /Nsd/Emitents  # noqa: E501

        :return: The registrar_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._registrar_id

    @registrar_id.setter
    def registrar_id(self, registrar_id):
        """Sets the registrar_id of this EfirDataHubModelsModelsNsdCommonDataFields.

        Идентификатор компании в базе НРД. Ссылка на company_id в методе /Nsd/Emitents  # noqa: E501

        :param registrar_id: The registrar_id of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: int
        """

        self._registrar_id = registrar_id

    @property
    def credit_note_type_code(self):
        """Gets the credit_note_type_code of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Кодовое наименование типа долгового инструмента в НРД  # noqa: E501

        :return: The credit_note_type_code of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._credit_note_type_code

    @credit_note_type_code.setter
    def credit_note_type_code(self, credit_note_type_code):
        """Sets the credit_note_type_code of this EfirDataHubModelsModelsNsdCommonDataFields.

        Кодовое наименование типа долгового инструмента в НРД  # noqa: E501

        :param credit_note_type_code: The credit_note_type_code of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: str
        """

        self._credit_note_type_code = credit_note_type_code

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsNsdCommonDataFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsNsdCommonDataFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsNsdCommonDataFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsNsdCommonDataFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
