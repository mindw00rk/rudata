# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'member_inns': 'list[str]',
        'actual_date': 'datetime',
        'stop_when': 'AllOfEfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequestStopWhen',
        'min_share_part': 'int',
        'use_management_relations': 'bool'
    }

    attribute_map = {
        'member_inns': 'memberInns',
        'actual_date': 'actualDate',
        'stop_when': 'stopWhen',
        'min_share_part': 'minSharePart',
        'use_management_relations': 'useManagementRelations'
    }

    def __init__(self, member_inns=None, actual_date=None, stop_when=None, min_share_part=None, use_management_relations=True):  # noqa: E501
        """EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest - a model defined in Swagger"""  # noqa: E501
        self._member_inns = None
        self._actual_date = None
        self._stop_when = None
        self._min_share_part = None
        self._use_management_relations = None
        self.discriminator = None
        if member_inns is not None:
            self.member_inns = member_inns
        if actual_date is not None:
            self.actual_date = actual_date
        if stop_when is not None:
            self.stop_when = stop_when
        if min_share_part is not None:
            self.min_share_part = min_share_part
        if use_management_relations is not None:
            self.use_management_relations = use_management_relations

    @property
    def member_inns(self):
        """Gets the member_inns of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501

        Массив ИНН компаний, обязательный, не более 100 шт  # noqa: E501

        :return: The member_inns of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_inns

    @member_inns.setter
    def member_inns(self, member_inns):
        """Sets the member_inns of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.

        Массив ИНН компаний, обязательный, не более 100 шт  # noqa: E501

        :param member_inns: The member_inns of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501
        :type: list[str]
        """

        self._member_inns = member_inns

    @property
    def actual_date(self):
        """Gets the actual_date of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501

        Дата актуальности. Необязательный, по умолчанию текущая дата  # noqa: E501

        :return: The actual_date of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_date

    @actual_date.setter
    def actual_date(self, actual_date):
        """Sets the actual_date of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.

        Дата актуальности. Необязательный, по умолчанию текущая дата  # noqa: E501

        :param actual_date: The actual_date of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501
        :type: datetime
        """

        self._actual_date = actual_date

    @property
    def stop_when(self):
        """Gets the stop_when of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501

        Условие окончания построения цепочки связей:  1 - до головной компании группы,  2 - до ближайшего эмитента.  Необязательный, по умолчанию 1.  1 = GroupRoot  2 = NearestIssuer  # noqa: E501

        :return: The stop_when of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501
        :rtype: AllOfEfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequestStopWhen
        """
        return self._stop_when

    @stop_when.setter
    def stop_when(self, stop_when):
        """Sets the stop_when of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.

        Условие окончания построения цепочки связей:  1 - до головной компании группы,  2 - до ближайшего эмитента.  Необязательный, по умолчанию 1.  1 = GroupRoot  2 = NearestIssuer  # noqa: E501

        :param stop_when: The stop_when of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501
        :type: AllOfEfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequestStopWhen
        """

        self._stop_when = stop_when

    @property
    def min_share_part(self):
        """Gets the min_share_part of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501

        Минимальное значение доли владения. Необязательный, по умолчанию 20.  # noqa: E501

        :return: The min_share_part of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501
        :rtype: int
        """
        return self._min_share_part

    @min_share_part.setter
    def min_share_part(self, min_share_part):
        """Sets the min_share_part of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.

        Минимальное значение доли владения. Необязательный, по умолчанию 20.  # noqa: E501

        :param min_share_part: The min_share_part of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501
        :type: int
        """

        self._min_share_part = min_share_part

    @property
    def use_management_relations(self):
        """Gets the use_management_relations of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501

        Использовать связи управления. Необязательный, по умолчанию true.  # noqa: E501

        :return: The use_management_relations of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_management_relations

    @use_management_relations.setter
    def use_management_relations(self, use_management_relations):
        """Sets the use_management_relations of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.

        Использовать связи управления. Необязательный, по умолчанию true.  # noqa: E501

        :param use_management_relations: The use_management_relations of this EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest.  # noqa: E501
        :type: bool
        """

        self._use_management_relations = use_management_relations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2AffiliatesCompanyGroupChainsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
