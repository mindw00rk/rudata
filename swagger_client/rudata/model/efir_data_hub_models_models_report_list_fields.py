# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsReportListFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'size': 'int',
        'create_date_utc': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'size': 'size',
        'create_date_utc': 'createDateUtc'
    }

    def __init__(self, name=None, size=None, create_date_utc=None):  # noqa: E501
        """EfirDataHubModelsModelsReportListFields - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._size = None
        self._create_date_utc = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if create_date_utc is not None:
            self.create_date_utc = create_date_utc

    @property
    def name(self):
        """Gets the name of this EfirDataHubModelsModelsReportListFields.  # noqa: E501

        Имя файла  # noqa: E501

        :return: The name of this EfirDataHubModelsModelsReportListFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EfirDataHubModelsModelsReportListFields.

        Имя файла  # noqa: E501

        :param name: The name of this EfirDataHubModelsModelsReportListFields.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this EfirDataHubModelsModelsReportListFields.  # noqa: E501

        Размер файла в байтах  # noqa: E501

        :return: The size of this EfirDataHubModelsModelsReportListFields.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this EfirDataHubModelsModelsReportListFields.

        Размер файла в байтах  # noqa: E501

        :param size: The size of this EfirDataHubModelsModelsReportListFields.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def create_date_utc(self):
        """Gets the create_date_utc of this EfirDataHubModelsModelsReportListFields.  # noqa: E501

        UTC время создания файла  # noqa: E501

        :return: The create_date_utc of this EfirDataHubModelsModelsReportListFields.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date_utc

    @create_date_utc.setter
    def create_date_utc(self, create_date_utc):
        """Sets the create_date_utc of this EfirDataHubModelsModelsReportListFields.

        UTC время создания файла  # noqa: E501

        :param create_date_utc: The create_date_utc of this EfirDataHubModelsModelsReportListFields.  # noqa: E501
        :type: datetime
        """

        self._create_date_utc = create_date_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsReportListFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsReportListFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
