# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRiskLiquidityParamsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'operation': 'float',
        'omega': 'float',
        'ro': 'float',
        'gamma': 'float',
        'volmax': 'float'
    }

    attribute_map = {
        'id': 'id',
        'operation': 'operation',
        'omega': 'omega',
        'ro': 'ro',
        'gamma': 'gamma',
        'volmax': 'volmax'
    }

    def __init__(self, id=None, operation=None, omega=None, ro=None, gamma=None, volmax=None):  # noqa: E501
        """EfirDataHubModelsModelsRiskLiquidityParamsFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._operation = None
        self._omega = None
        self._ro = None
        self._gamma = None
        self._volmax = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if operation is not None:
            self.operation = operation
        if omega is not None:
            self.omega = omega
        if ro is not None:
            self.ro = ro
        if gamma is not None:
            self.gamma = gamma
        if volmax is not None:
            self.volmax = volmax

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501

        Идентификатор торгового инструмента. См. метод /Info/Securities.  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsRiskLiquidityParamsFields.

        Идентификатор торгового инструмента. См. метод /Info/Securities.  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def operation(self):
        """Gets the operation of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501

        Направление операции. Равно входному параметру operation.  # noqa: E501

        :return: The operation of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501
        :rtype: float
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this EfirDataHubModelsModelsRiskLiquidityParamsFields.

        Направление операции. Равно входному параметру operation.  # noqa: E501

        :param operation: The operation of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501
        :type: float
        """

        self._operation = operation

    @property
    def omega(self):
        """Gets the omega of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501

        Экспоненциальное среднее логарифма объема, который надо купить/продать для сдвига цены на минимальный шаг  # noqa: E501

        :return: The omega of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501
        :rtype: float
        """
        return self._omega

    @omega.setter
    def omega(self, omega):
        """Sets the omega of this EfirDataHubModelsModelsRiskLiquidityParamsFields.

        Экспоненциальное среднее логарифма объема, который надо купить/продать для сдвига цены на минимальный шаг  # noqa: E501

        :param omega: The omega of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501
        :type: float
        """

        self._omega = omega

    @property
    def ro(self):
        """Gets the ro of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501

        Экспоненциальное среднее разности между оценкой лучшей цены покупки/продажи, рассчитанной по модели, и фактическим значением лучшей цены  # noqa: E501

        :return: The ro of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501
        :rtype: float
        """
        return self._ro

    @ro.setter
    def ro(self, ro):
        """Sets the ro of this EfirDataHubModelsModelsRiskLiquidityParamsFields.

        Экспоненциальное среднее разности между оценкой лучшей цены покупки/продажи, рассчитанной по модели, и фактическим значением лучшей цены  # noqa: E501

        :param ro: The ro of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501
        :type: float
        """

        self._ro = ro

    @property
    def gamma(self):
        """Gets the gamma of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501

        Экспоненциальное среднее стандартной ошибки модели  # noqa: E501

        :return: The gamma of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501
        :rtype: float
        """
        return self._gamma

    @gamma.setter
    def gamma(self, gamma):
        """Sets the gamma of this EfirDataHubModelsModelsRiskLiquidityParamsFields.

        Экспоненциальное среднее стандартной ошибки модели  # noqa: E501

        :param gamma: The gamma of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501
        :type: float
        """

        self._gamma = gamma

    @property
    def volmax(self):
        """Gets the volmax of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501

        Максимальный объем покупки/продажи, для которого применима модель оценки сдвига цены  # noqa: E501

        :return: The volmax of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501
        :rtype: float
        """
        return self._volmax

    @volmax.setter
    def volmax(self, volmax):
        """Sets the volmax of this EfirDataHubModelsModelsRiskLiquidityParamsFields.

        Максимальный объем покупки/продажи, для которого применима модель оценки сдвига цены  # noqa: E501

        :param volmax: The volmax of this EfirDataHubModelsModelsRiskLiquidityParamsFields.  # noqa: E501
        :type: float
        """

        self._volmax = volmax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRiskLiquidityParamsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRiskLiquidityParamsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
