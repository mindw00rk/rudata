# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2BondDateOptionsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        '_date': 'datetime',
        'is_close_register': 'bool',
        'coupon_forecast': 'str',
        'coupon_binding': 'str',
        'use_fix_date': 'bool'
    }

    attribute_map = {
        'symbol': 'symbol',
        '_date': 'date',
        'is_close_register': 'isCloseRegister',
        'coupon_forecast': 'couponForecast',
        'coupon_binding': 'couponBinding',
        'use_fix_date': 'useFixDate'
    }

    def __init__(self, symbol=None, _date=None, is_close_register=None, coupon_forecast=None, coupon_binding=None, use_fix_date=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2BondDateOptionsRequest - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self.__date = None
        self._is_close_register = None
        self._coupon_forecast = None
        self._coupon_binding = None
        self._use_fix_date = None
        self.discriminator = None
        self.symbol = symbol
        if _date is not None:
            self._date = _date
        if is_close_register is not None:
            self.is_close_register = is_close_register
        if coupon_forecast is not None:
            self.coupon_forecast = coupon_forecast
        if coupon_binding is not None:
            self.coupon_binding = coupon_binding
        if use_fix_date is not None:
            self.use_fix_date = use_fix_date

    @property
    def symbol(self):
        """Gets the symbol of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501

        ISIN, либо регистрационный номер, либо торговый код ID_ISS  # noqa: E501

        :return: The symbol of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.

        ISIN, либо регистрационный номер, либо торговый код ID_ISS  # noqa: E501

        :param symbol: The symbol of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def _date(self):
        """Gets the _date of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501

        Дата определения параметров; если не указана, возвращаются параметры на текущую дату.  # noqa: E501

        :return: The _date of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.

        Дата определения параметров; если не указана, возвращаются параметры на текущую дату.  # noqa: E501

        :param _date: The _date of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def is_close_register(self):
        """Gets the is_close_register of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501

        True указывает на то, что при расчете НКД по амортизируемым бумагам, текущий номинал бумаги будет определяться по датам закрытия реестра, а не по датам непосредственно амортизационных выплат.  # noqa: E501

        :return: The is_close_register of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_close_register

    @is_close_register.setter
    def is_close_register(self, is_close_register):
        """Sets the is_close_register of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.

        True указывает на то, что при расчете НКД по амортизируемым бумагам, текущий номинал бумаги будет определяться по датам закрытия реестра, а не по датам непосредственно амортизационных выплат.  # noqa: E501

        :param is_close_register: The is_close_register of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501
        :type: bool
        """

        self._is_close_register = is_close_register

    @property
    def coupon_forecast(self):
        """Gets the coupon_forecast of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501

        Пользовательские значения доходности для неизвестных купонов. Разделитель «;».  # noqa: E501

        :return: The coupon_forecast of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._coupon_forecast

    @coupon_forecast.setter
    def coupon_forecast(self, coupon_forecast):
        """Sets the coupon_forecast of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.

        Пользовательские значения доходности для неизвестных купонов. Разделитель «;».  # noqa: E501

        :param coupon_forecast: The coupon_forecast of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501
        :type: str
        """

        self._coupon_forecast = coupon_forecast

    @property
    def coupon_binding(self):
        """Gets the coupon_binding of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501

        Даты пользовательских купонов, заданных в параметре couponForecast. Разделитель «;».  # noqa: E501

        :return: The coupon_binding of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._coupon_binding

    @coupon_binding.setter
    def coupon_binding(self, coupon_binding):
        """Sets the coupon_binding of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.

        Даты пользовательских купонов, заданных в параметре couponForecast. Разделитель «;».  # noqa: E501

        :param coupon_binding: The coupon_binding of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501
        :type: str
        """

        self._coupon_binding = coupon_binding

    @property
    def use_fix_date(self):
        """Gets the use_fix_date of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501

        True - использовать дату фиксации для определения купонного периода, актуального на дату расчета  Если не указано - false  # noqa: E501

        :return: The use_fix_date of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_fix_date

    @use_fix_date.setter
    def use_fix_date(self, use_fix_date):
        """Sets the use_fix_date of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.

        True - использовать дату фиксации для определения купонного периода, актуального на дату расчета  Если не указано - false  # noqa: E501

        :param use_fix_date: The use_fix_date of this EfirDataHubModelsRequestsV2BondDateOptionsRequest.  # noqa: E501
        :type: bool
        """

        self._use_fix_date = use_fix_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2BondDateOptionsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2BondDateOptionsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
