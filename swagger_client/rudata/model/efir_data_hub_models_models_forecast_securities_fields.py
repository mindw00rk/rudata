# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsForecastSecuritiesFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'fininstid': 'int',
        'fintoolid': 'int',
        'fullname': 'str',
        'isin': 'str',
        'exchange_code': 'str',
        'exchange_name': 'str',
        'currency': 'str',
        'decimals': 'int',
        'fintooltype': 'str',
        'securitytype': 'str',
        'drqty': 'float',
        'shqty': 'float'
    }

    attribute_map = {
        'name': 'name',
        'fininstid': 'fininstid',
        'fintoolid': 'fintoolid',
        'fullname': 'fullname',
        'isin': 'isin',
        'exchange_code': 'exchange_code',
        'exchange_name': 'exchange_name',
        'currency': 'currency',
        'decimals': 'decimals',
        'fintooltype': 'fintooltype',
        'securitytype': 'securitytype',
        'drqty': 'drqty',
        'shqty': 'shqty'
    }

    def __init__(self, name=None, fininstid=None, fintoolid=None, fullname=None, isin=None, exchange_code=None, exchange_name=None, currency=None, decimals=None, fintooltype=None, securitytype=None, drqty=None, shqty=None):  # noqa: E501
        """EfirDataHubModelsModelsForecastSecuritiesFields - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._fininstid = None
        self._fintoolid = None
        self._fullname = None
        self._isin = None
        self._exchange_code = None
        self._exchange_name = None
        self._currency = None
        self._decimals = None
        self._fintooltype = None
        self._securitytype = None
        self._drqty = None
        self._shqty = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if fininstid is not None:
            self.fininstid = fininstid
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if fullname is not None:
            self.fullname = fullname
        if isin is not None:
            self.isin = isin
        if exchange_code is not None:
            self.exchange_code = exchange_code
        if exchange_name is not None:
            self.exchange_name = exchange_name
        if currency is not None:
            self.currency = currency
        if decimals is not None:
            self.decimals = decimals
        if fintooltype is not None:
            self.fintooltype = fintooltype
        if securitytype is not None:
            self.securitytype = securitytype
        if drqty is not None:
            self.drqty = drqty
        if shqty is not None:
            self.shqty = shqty

    @property
    def name(self):
        """Gets the name of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        Краткое наименование бумаги  # noqa: E501

        :return: The name of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EfirDataHubModelsModelsForecastSecuritiesFields.

        Краткое наименование бумаги  # noqa: E501

        :param name: The name of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def fininstid(self):
        """Gets the fininstid of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        Идентификатор эмитента бумаги в базе Интерфакс  # noqa: E501

        :return: The fininstid of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid

    @fininstid.setter
    def fininstid(self, fininstid):
        """Sets the fininstid of this EfirDataHubModelsModelsForecastSecuritiesFields.

        Идентификатор эмитента бумаги в базе Интерфакс  # noqa: E501

        :param fininstid: The fininstid of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: int
        """

        self._fininstid = fininstid

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        Идентификатор бумаги  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsForecastSecuritiesFields.

        Идентификатор бумаги  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def fullname(self):
        """Gets the fullname of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        Полное наименование бумаги  # noqa: E501

        :return: The fullname of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this EfirDataHubModelsModelsForecastSecuritiesFields.

        Полное наименование бумаги  # noqa: E501

        :param fullname: The fullname of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        ISIN  # noqa: E501

        :return: The isin of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsModelsForecastSecuritiesFields.

        ISIN  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def exchange_code(self):
        """Gets the exchange_code of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        Биржевой код  # noqa: E501

        :return: The exchange_code of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._exchange_code

    @exchange_code.setter
    def exchange_code(self, exchange_code):
        """Sets the exchange_code of this EfirDataHubModelsModelsForecastSecuritiesFields.

        Биржевой код  # noqa: E501

        :param exchange_code: The exchange_code of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._exchange_code = exchange_code

    @property
    def exchange_name(self):
        """Gets the exchange_name of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        Биржевое наименование  # noqa: E501

        :return: The exchange_name of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._exchange_name

    @exchange_name.setter
    def exchange_name(self, exchange_name):
        """Sets the exchange_name of this EfirDataHubModelsModelsForecastSecuritiesFields.

        Биржевое наименование  # noqa: E501

        :param exchange_name: The exchange_name of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._exchange_name = exchange_name

    @property
    def currency(self):
        """Gets the currency of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        Валюта консенсуса  # noqa: E501

        :return: The currency of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EfirDataHubModelsModelsForecastSecuritiesFields.

        Валюта консенсуса  # noqa: E501

        :param currency: The currency of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def decimals(self):
        """Gets the decimals of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        Точность расчета консенсуса  # noqa: E501

        :return: The decimals of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this EfirDataHubModelsModelsForecastSecuritiesFields.

        Точность расчета консенсуса  # noqa: E501

        :param decimals: The decimals of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    @property
    def fintooltype(self):
        """Gets the fintooltype of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        Тип финансового инструмента (наименование). Список возможных значений возвращает метод /Info/EnumValues.  # noqa: E501

        :return: The fintooltype of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._fintooltype

    @fintooltype.setter
    def fintooltype(self, fintooltype):
        """Sets the fintooltype of this EfirDataHubModelsModelsForecastSecuritiesFields.

        Тип финансового инструмента (наименование). Список возможных значений возвращает метод /Info/EnumValues.  # noqa: E501

        :param fintooltype: The fintooltype of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._fintooltype = fintooltype

    @property
    def securitytype(self):
        """Gets the securitytype of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        Тип выпуска/расписки/фонда.Список возможных значений возвращает метод /Info/EnumValues.  # noqa: E501

        :return: The securitytype of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._securitytype

    @securitytype.setter
    def securitytype(self, securitytype):
        """Sets the securitytype of this EfirDataHubModelsModelsForecastSecuritiesFields.

        Тип выпуска/расписки/фонда.Список возможных значений возвращает метод /Info/EnumValues.  # noqa: E501

        :param securitytype: The securitytype of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._securitytype = securitytype

    @property
    def drqty(self):
        """Gets the drqty of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        Количество расписок  # noqa: E501

        :return: The drqty of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: float
        """
        return self._drqty

    @drqty.setter
    def drqty(self, drqty):
        """Sets the drqty of this EfirDataHubModelsModelsForecastSecuritiesFields.

        Количество расписок  # noqa: E501

        :param drqty: The drqty of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: float
        """

        self._drqty = drqty

    @property
    def shqty(self):
        """Gets the shqty of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501

        Количество представляемых бумаг  # noqa: E501

        :return: The shqty of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :rtype: float
        """
        return self._shqty

    @shqty.setter
    def shqty(self, shqty):
        """Sets the shqty of this EfirDataHubModelsModelsForecastSecuritiesFields.

        Количество представляемых бумаг  # noqa: E501

        :param shqty: The shqty of this EfirDataHubModelsModelsForecastSecuritiesFields.  # noqa: E501
        :type: float
        """

        self._shqty = shqty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsForecastSecuritiesFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsForecastSecuritiesFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
