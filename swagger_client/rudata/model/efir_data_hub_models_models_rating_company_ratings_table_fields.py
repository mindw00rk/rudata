# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRatingCompanyRatingsTableFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name_ra': 'str',
        'dt': 'datetime',
        'last': 'str',
        'last_dt': 'datetime',
        'change': 'str',
        'forecast': 'str',
        'advanced': 'str',
        'prev': 'str',
        'prev_dt': 'datetime',
        'id_rating': 'int',
        'code': 'str',
        'code_type': 'str',
        'company_name': 'str'
    }

    attribute_map = {
        'name_ra': 'name_ra',
        'dt': 'dt',
        'last': 'last',
        'last_dt': 'last_dt',
        'change': 'change',
        'forecast': 'forecast',
        'advanced': 'advanced',
        'prev': 'prev',
        'prev_dt': 'prev_dt',
        'id_rating': 'id_rating',
        'code': 'code',
        'code_type': 'code_type',
        'company_name': 'company_name'
    }

    def __init__(self, name_ra=None, dt=None, last=None, last_dt=None, change=None, forecast=None, advanced=None, prev=None, prev_dt=None, id_rating=None, code=None, code_type=None, company_name=None):  # noqa: E501
        """EfirDataHubModelsModelsRatingCompanyRatingsTableFields - a model defined in Swagger"""  # noqa: E501
        self._name_ra = None
        self._dt = None
        self._last = None
        self._last_dt = None
        self._change = None
        self._forecast = None
        self._advanced = None
        self._prev = None
        self._prev_dt = None
        self._id_rating = None
        self._code = None
        self._code_type = None
        self._company_name = None
        self.discriminator = None
        if name_ra is not None:
            self.name_ra = name_ra
        if dt is not None:
            self.dt = dt
        if last is not None:
            self.last = last
        if last_dt is not None:
            self.last_dt = last_dt
        if change is not None:
            self.change = change
        if forecast is not None:
            self.forecast = forecast
        if advanced is not None:
            self.advanced = advanced
        if prev is not None:
            self.prev = prev
        if prev_dt is not None:
            self.prev_dt = prev_dt
        if id_rating is not None:
            self.id_rating = id_rating
        if code is not None:
            self.code = code
        if code_type is not None:
            self.code_type = code_type
        if company_name is not None:
            self.company_name = company_name

    @property
    def name_ra(self):
        """Gets the name_ra of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Краткое наименование рейтингового действия  # noqa: E501

        :return: The name_ra of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._name_ra

    @name_ra.setter
    def name_ra(self, name_ra):
        """Sets the name_ra of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Краткое наименование рейтингового действия  # noqa: E501

        :param name_ra: The name_ra of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: str
        """

        self._name_ra = name_ra

    @property
    def dt(self):
        """Gets the dt of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Дата рейтингового события  # noqa: E501

        :return: The dt of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Дата рейтингового события  # noqa: E501

        :param dt: The dt of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def last(self):
        """Gets the last of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Значение рейтинга по шкале конкретного рейтингового агентства. Например, «Baaa1» для рейтинга Moody’s.  # noqa: E501

        :return: The last of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Значение рейтинга по шкале конкретного рейтингового агентства. Например, «Baaa1» для рейтинга Moody’s.  # noqa: E501

        :param last: The last of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: str
        """

        self._last = last

    @property
    def last_dt(self):
        """Gets the last_dt of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Дата последнего события  # noqa: E501

        :return: The last_dt of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._last_dt

    @last_dt.setter
    def last_dt(self, last_dt):
        """Sets the last_dt of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Дата последнего события  # noqa: E501

        :param last_dt: The last_dt of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: datetime
        """

        self._last_dt = last_dt

    @property
    def change(self):
        """Gets the change of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Изменение (подтвержден, понижен, установлен и т.п.)  # noqa: E501

        :return: The change of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Изменение (подтвержден, понижен, установлен и т.п.)  # noqa: E501

        :param change: The change of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: str
        """

        self._change = change

    @property
    def forecast(self):
        """Gets the forecast of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Прогноз рейтинга  # noqa: E501

        :return: The forecast of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._forecast

    @forecast.setter
    def forecast(self, forecast):
        """Sets the forecast of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Прогноз рейтинга  # noqa: E501

        :param forecast: The forecast of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: str
        """

        self._forecast = forecast

    @property
    def advanced(self):
        """Gets the advanced of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Стадии установки рейтинга: На пересмотре, Ожидаемый, Предварительный, Основной  # noqa: E501

        :return: The advanced of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Стадии установки рейтинга: На пересмотре, Ожидаемый, Предварительный, Основной  # noqa: E501

        :param advanced: The advanced of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: str
        """

        self._advanced = advanced

    @property
    def prev(self):
        """Gets the prev of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Предыдущее значение рейтинга  # noqa: E501

        :return: The prev of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Предыдущее значение рейтинга  # noqa: E501

        :param prev: The prev of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: str
        """

        self._prev = prev

    @property
    def prev_dt(self):
        """Gets the prev_dt of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Дата, когда было присвоено предыдущее значение рейтинга  # noqa: E501

        :return: The prev_dt of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._prev_dt

    @prev_dt.setter
    def prev_dt(self, prev_dt):
        """Sets the prev_dt of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Дата, когда было присвоено предыдущее значение рейтинга  # noqa: E501

        :param prev_dt: The prev_dt of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: datetime
        """

        self._prev_dt = prev_dt

    @property
    def id_rating(self):
        """Gets the id_rating of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Идентификатор вида рейтинга  # noqa: E501

        :return: The id_rating of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: int
        """
        return self._id_rating

    @id_rating.setter
    def id_rating(self, id_rating):
        """Sets the id_rating of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Идентификатор вида рейтинга  # noqa: E501

        :param id_rating: The id_rating of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: int
        """

        self._id_rating = id_rating

    @property
    def code(self):
        """Gets the code of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Символьный код компании  # noqa: E501

        :return: The code of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Символьный код компании  # noqa: E501

        :param code: The code of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def code_type(self):
        """Gets the code_type of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Тип идентификатора компании  # noqa: E501

        :return: The code_type of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._code_type

    @code_type.setter
    def code_type(self, code_type):
        """Sets the code_type of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Тип идентификатора компании  # noqa: E501

        :param code_type: The code_type of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: str
        """

        self._code_type = code_type

    @property
    def company_name(self):
        """Gets the company_name of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501

        Наименование компании  # noqa: E501

        :return: The company_name of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.

        Наименование компании  # noqa: E501

        :param company_name: The company_name of this EfirDataHubModelsModelsRatingCompanyRatingsTableFields.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRatingCompanyRatingsTableFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRatingCompanyRatingsTableFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
