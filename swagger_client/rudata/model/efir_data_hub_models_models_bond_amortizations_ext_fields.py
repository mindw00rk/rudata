# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondAmortizationsExtFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_fintool': 'int',
        'id_tranche': 'int',
        'mty_date': 'datetime',
        'days_from_dist': 'int',
        'mty_part': 'float',
        'pay_per_bond': 'float',
        'pay_per_market': 'float',
        'mty_type': 'str',
        'rate_date': 'datetime',
        'fix_date': 'datetime',
        'pay_date': 'datetime',
        'pay_per_bond_matching': 'int',
        'pay_date_matching': 'int',
        'mty_part_matching': 'int',
        'mty_date_matching': 'int',
        'fix_date_matching': 'int',
        'update_date': 'datetime',
        'note': 'str',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'id_fintool': 'id_fintool',
        'id_tranche': 'id_tranche',
        'mty_date': 'mty_date',
        'days_from_dist': 'days_from_dist',
        'mty_part': 'mty_part',
        'pay_per_bond': 'pay_per_bond',
        'pay_per_market': 'pay_per_market',
        'mty_type': 'mty_type',
        'rate_date': 'rate_date',
        'fix_date': 'fix_date',
        'pay_date': 'pay_date',
        'pay_per_bond_matching': 'pay_per_bond_matching',
        'pay_date_matching': 'pay_date_matching',
        'mty_part_matching': 'mty_part_matching',
        'mty_date_matching': 'mty_date_matching',
        'fix_date_matching': 'fix_date_matching',
        'update_date': 'update_date',
        'note': 'note',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, id_fintool=None, id_tranche=None, mty_date=None, days_from_dist=None, mty_part=None, pay_per_bond=None, pay_per_market=None, mty_type=None, rate_date=None, fix_date=None, pay_date=None, pay_per_bond_matching=None, pay_date_matching=None, mty_part_matching=None, mty_date_matching=None, fix_date_matching=None, update_date=None, note=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsBondAmortizationsExtFields - a model defined in Swagger"""  # noqa: E501
        self._id_fintool = None
        self._id_tranche = None
        self._mty_date = None
        self._days_from_dist = None
        self._mty_part = None
        self._pay_per_bond = None
        self._pay_per_market = None
        self._mty_type = None
        self._rate_date = None
        self._fix_date = None
        self._pay_date = None
        self._pay_per_bond_matching = None
        self._pay_date_matching = None
        self._mty_part_matching = None
        self._mty_date_matching = None
        self._fix_date_matching = None
        self._update_date = None
        self._note = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if id_fintool is not None:
            self.id_fintool = id_fintool
        if id_tranche is not None:
            self.id_tranche = id_tranche
        if mty_date is not None:
            self.mty_date = mty_date
        if days_from_dist is not None:
            self.days_from_dist = days_from_dist
        if mty_part is not None:
            self.mty_part = mty_part
        if pay_per_bond is not None:
            self.pay_per_bond = pay_per_bond
        if pay_per_market is not None:
            self.pay_per_market = pay_per_market
        if mty_type is not None:
            self.mty_type = mty_type
        if rate_date is not None:
            self.rate_date = rate_date
        if fix_date is not None:
            self.fix_date = fix_date
        if pay_date is not None:
            self.pay_date = pay_date
        if pay_per_bond_matching is not None:
            self.pay_per_bond_matching = pay_per_bond_matching
        if pay_date_matching is not None:
            self.pay_date_matching = pay_date_matching
        if mty_part_matching is not None:
            self.mty_part_matching = mty_part_matching
        if mty_date_matching is not None:
            self.mty_date_matching = mty_date_matching
        if fix_date_matching is not None:
            self.fix_date_matching = fix_date_matching
        if update_date is not None:
            self.update_date = update_date
        if note is not None:
            self.note = note
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def id_fintool(self):
        """Gets the id_fintool of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Идентификатор облигации  # noqa: E501

        :return: The id_fintool of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: int
        """
        return self._id_fintool

    @id_fintool.setter
    def id_fintool(self, id_fintool):
        """Sets the id_fintool of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Идентификатор облигации  # noqa: E501

        :param id_fintool: The id_fintool of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: int
        """

        self._id_fintool = id_fintool

    @property
    def id_tranche(self):
        """Gets the id_tranche of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Номер погашения  # noqa: E501

        :return: The id_tranche of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: int
        """
        return self._id_tranche

    @id_tranche.setter
    def id_tranche(self, id_tranche):
        """Sets the id_tranche of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Номер погашения  # noqa: E501

        :param id_tranche: The id_tranche of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: int
        """

        self._id_tranche = id_tranche

    @property
    def mty_date(self):
        """Gets the mty_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Дата погашения части номинала  # noqa: E501

        :return: The mty_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: datetime
        """
        return self._mty_date

    @mty_date.setter
    def mty_date(self, mty_date):
        """Sets the mty_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Дата погашения части номинала  # noqa: E501

        :param mty_date: The mty_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: datetime
        """

        self._mty_date = mty_date

    @property
    def days_from_dist(self):
        """Gets the days_from_dist of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Количество дней от даты начала размещения до даты погашения части номинала  # noqa: E501

        :return: The days_from_dist of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: int
        """
        return self._days_from_dist

    @days_from_dist.setter
    def days_from_dist(self, days_from_dist):
        """Sets the days_from_dist of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Количество дней от даты начала размещения до даты погашения части номинала  # noqa: E501

        :param days_from_dist: The days_from_dist of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: int
        """

        self._days_from_dist = days_from_dist

    @property
    def mty_part(self):
        """Gets the mty_part of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Процент погашения  # noqa: E501

        :return: The mty_part of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: float
        """
        return self._mty_part

    @mty_part.setter
    def mty_part(self, mty_part):
        """Sets the mty_part of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Процент погашения  # noqa: E501

        :param mty_part: The mty_part of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: float
        """

        self._mty_part = mty_part

    @property
    def pay_per_bond(self):
        """Gets the pay_per_bond of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Выплата на одну облигацию  # noqa: E501

        :return: The pay_per_bond of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: float
        """
        return self._pay_per_bond

    @pay_per_bond.setter
    def pay_per_bond(self, pay_per_bond):
        """Sets the pay_per_bond of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Выплата на одну облигацию  # noqa: E501

        :param pay_per_bond: The pay_per_bond of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: float
        """

        self._pay_per_bond = pay_per_bond

    @property
    def pay_per_market(self):
        """Gets the pay_per_market of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Выплаты на все облигации в обращении  # noqa: E501

        :return: The pay_per_market of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: float
        """
        return self._pay_per_market

    @pay_per_market.setter
    def pay_per_market(self, pay_per_market):
        """Sets the pay_per_market of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Выплаты на все облигации в обращении  # noqa: E501

        :param pay_per_market: The pay_per_market of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: float
        """

        self._pay_per_market = pay_per_market

    @property
    def mty_type(self):
        """Gets the mty_type of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Тип досрочного погашения  # noqa: E501

        :return: The mty_type of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: str
        """
        return self._mty_type

    @mty_type.setter
    def mty_type(self, mty_type):
        """Sets the mty_type of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Тип досрочного погашения  # noqa: E501

        :param mty_type: The mty_type of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: str
        """

        self._mty_type = mty_type

    @property
    def rate_date(self):
        """Gets the rate_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Дата объявления погашения  # noqa: E501

        :return: The rate_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: datetime
        """
        return self._rate_date

    @rate_date.setter
    def rate_date(self, rate_date):
        """Sets the rate_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Дата объявления погашения  # noqa: E501

        :param rate_date: The rate_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: datetime
        """

        self._rate_date = rate_date

    @property
    def fix_date(self):
        """Gets the fix_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Дата фиксации списка  # noqa: E501

        :return: The fix_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: datetime
        """
        return self._fix_date

    @fix_date.setter
    def fix_date(self, fix_date):
        """Sets the fix_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Дата фиксации списка  # noqa: E501

        :param fix_date: The fix_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: datetime
        """

        self._fix_date = fix_date

    @property
    def pay_date(self):
        """Gets the pay_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Реальная дата погашения/выплаты  # noqa: E501

        :return: The pay_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: datetime
        """
        return self._pay_date

    @pay_date.setter
    def pay_date(self, pay_date):
        """Sets the pay_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Реальная дата погашения/выплаты  # noqa: E501

        :param pay_date: The pay_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: datetime
        """

        self._pay_date = pay_date

    @property
    def pay_per_bond_matching(self):
        """Gets the pay_per_bond_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Дата/время последнего изменения записи  # noqa: E501

        :return: The pay_per_bond_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: int
        """
        return self._pay_per_bond_matching

    @pay_per_bond_matching.setter
    def pay_per_bond_matching(self, pay_per_bond_matching):
        """Sets the pay_per_bond_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Дата/время последнего изменения записи  # noqa: E501

        :param pay_per_bond_matching: The pay_per_bond_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: int
        """

        self._pay_per_bond_matching = pay_per_bond_matching

    @property
    def pay_date_matching(self):
        """Gets the pay_date_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Соответствие реальной даты погашения/выплаты  # noqa: E501

        :return: The pay_date_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: int
        """
        return self._pay_date_matching

    @pay_date_matching.setter
    def pay_date_matching(self, pay_date_matching):
        """Sets the pay_date_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Соответствие реальной даты погашения/выплаты  # noqa: E501

        :param pay_date_matching: The pay_date_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: int
        """

        self._pay_date_matching = pay_date_matching

    @property
    def mty_part_matching(self):
        """Gets the mty_part_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Соответствие процента погашения  # noqa: E501

        :return: The mty_part_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: int
        """
        return self._mty_part_matching

    @mty_part_matching.setter
    def mty_part_matching(self, mty_part_matching):
        """Sets the mty_part_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Соответствие процента погашения  # noqa: E501

        :param mty_part_matching: The mty_part_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: int
        """

        self._mty_part_matching = mty_part_matching

    @property
    def mty_date_matching(self):
        """Gets the mty_date_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Соответствие даты погашения части номинала  # noqa: E501

        :return: The mty_date_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: int
        """
        return self._mty_date_matching

    @mty_date_matching.setter
    def mty_date_matching(self, mty_date_matching):
        """Sets the mty_date_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Соответствие даты погашения части номинала  # noqa: E501

        :param mty_date_matching: The mty_date_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: int
        """

        self._mty_date_matching = mty_date_matching

    @property
    def fix_date_matching(self):
        """Gets the fix_date_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Соответствие даты фиксации списка  # noqa: E501

        :return: The fix_date_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: int
        """
        return self._fix_date_matching

    @fix_date_matching.setter
    def fix_date_matching(self, fix_date_matching):
        """Sets the fix_date_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Соответствие даты фиксации списка  # noqa: E501

        :param fix_date_matching: The fix_date_matching of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: int
        """

        self._fix_date_matching = fix_date_matching

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Дата/время последнего изменения записи  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Дата/время последнего изменения записи  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Примечание  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Примечание  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsBondAmortizationsExtFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsBondAmortizationsExtFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondAmortizationsExtFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondAmortizationsExtFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
