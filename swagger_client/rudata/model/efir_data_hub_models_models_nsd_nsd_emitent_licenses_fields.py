# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsNsdNsdEmitentLicensesFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issuer': 'str',
        'licence_activity': 'str',
        'licence_date': 'datetime',
        'licence_num': 'str',
        'licence_activity_id': 'int',
        'activity_code': 'str',
        'type': 'str',
        'type_code': 'str',
        'counter': 'int'
    }

    attribute_map = {
        'issuer': 'issuer',
        'licence_activity': 'licence_activity',
        'licence_date': 'licence_date',
        'licence_num': 'licence_num',
        'licence_activity_id': 'licence_activity_id',
        'activity_code': 'activity_code',
        'type': 'type',
        'type_code': 'type_code',
        'counter': 'counter'
    }

    def __init__(self, issuer=None, licence_activity=None, licence_date=None, licence_num=None, licence_activity_id=None, activity_code=None, type=None, type_code=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsNsdNsdEmitentLicensesFields - a model defined in Swagger"""  # noqa: E501
        self._issuer = None
        self._licence_activity = None
        self._licence_date = None
        self._licence_num = None
        self._licence_activity_id = None
        self._activity_code = None
        self._type = None
        self._type_code = None
        self._counter = None
        self.discriminator = None
        if issuer is not None:
            self.issuer = issuer
        if licence_activity is not None:
            self.licence_activity = licence_activity
        if licence_date is not None:
            self.licence_date = licence_date
        if licence_num is not None:
            self.licence_num = licence_num
        if licence_activity_id is not None:
            self.licence_activity_id = licence_activity_id
        if activity_code is not None:
            self.activity_code = activity_code
        if type is not None:
            self.type = type
        if type_code is not None:
            self.type_code = type_code
        if counter is not None:
            self.counter = counter

    @property
    def issuer(self):
        """Gets the issuer of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501

        Идентификатор эмитента в базе НРД  # noqa: E501

        :return: The issuer of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.

        Идентификатор эмитента в базе НРД  # noqa: E501

        :param issuer: The issuer of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def licence_activity(self):
        """Gets the licence_activity of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501

        Вид деятельности по лицензии  # noqa: E501

        :return: The licence_activity of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :rtype: str
        """
        return self._licence_activity

    @licence_activity.setter
    def licence_activity(self, licence_activity):
        """Sets the licence_activity of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.

        Вид деятельности по лицензии  # noqa: E501

        :param licence_activity: The licence_activity of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :type: str
        """

        self._licence_activity = licence_activity

    @property
    def licence_date(self):
        """Gets the licence_date of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501

        Дата выдачи по виду деятельности  # noqa: E501

        :return: The licence_date of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._licence_date

    @licence_date.setter
    def licence_date(self, licence_date):
        """Sets the licence_date of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.

        Дата выдачи по виду деятельности  # noqa: E501

        :param licence_date: The licence_date of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :type: datetime
        """

        self._licence_date = licence_date

    @property
    def licence_num(self):
        """Gets the licence_num of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501

        Номер лицензии, выданной Банком России  # noqa: E501

        :return: The licence_num of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :rtype: str
        """
        return self._licence_num

    @licence_num.setter
    def licence_num(self, licence_num):
        """Sets the licence_num of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.

        Номер лицензии, выданной Банком России  # noqa: E501

        :param licence_num: The licence_num of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :type: str
        """

        self._licence_num = licence_num

    @property
    def licence_activity_id(self):
        """Gets the licence_activity_id of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501

        Идентификатор лицензируемого вида деятельности  # noqa: E501

        :return: The licence_activity_id of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :rtype: int
        """
        return self._licence_activity_id

    @licence_activity_id.setter
    def licence_activity_id(self, licence_activity_id):
        """Sets the licence_activity_id of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.

        Идентификатор лицензируемого вида деятельности  # noqa: E501

        :param licence_activity_id: The licence_activity_id of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :type: int
        """

        self._licence_activity_id = licence_activity_id

    @property
    def activity_code(self):
        """Gets the activity_code of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501

        Код вида деятельности  # noqa: E501

        :return: The activity_code of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :rtype: str
        """
        return self._activity_code

    @activity_code.setter
    def activity_code(self, activity_code):
        """Sets the activity_code of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.

        Код вида деятельности  # noqa: E501

        :param activity_code: The activity_code of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :type: str
        """

        self._activity_code = activity_code

    @property
    def type(self):
        """Gets the type of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501

        Тип лицензии  # noqa: E501

        :return: The type of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.

        Тип лицензии  # noqa: E501

        :param type: The type of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def type_code(self):
        """Gets the type_code of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501

        Мнемокод типа лицензии  # noqa: E501

        :return: The type_code of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.

        Мнемокод типа лицензии  # noqa: E501

        :param type_code: The type_code of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :type: str
        """

        self._type_code = type_code

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsNsdNsdEmitentLicensesFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsNsdNsdEmitentLicensesFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsNsdNsdEmitentLicensesFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
