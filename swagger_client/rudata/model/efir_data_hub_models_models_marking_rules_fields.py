# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMarkingRulesFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'rule_shortname_rus': 'str',
        'rule_fullname_rus': 'str',
        'id_code': 'int',
        'qualified_test_id': 'int',
        'counter': 'int'
    }

    attribute_map = {
        'id': 'id',
        'rule_shortname_rus': 'rule_shortname_rus',
        'rule_fullname_rus': 'rule_fullname_rus',
        'id_code': 'id_code',
        'qualified_test_id': 'qualified_test_id',
        'counter': 'counter'
    }

    def __init__(self, id=None, rule_shortname_rus=None, rule_fullname_rus=None, id_code=None, qualified_test_id=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsMarkingRulesFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._rule_shortname_rus = None
        self._rule_fullname_rus = None
        self._id_code = None
        self._qualified_test_id = None
        self._counter = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if rule_shortname_rus is not None:
            self.rule_shortname_rus = rule_shortname_rus
        if rule_fullname_rus is not None:
            self.rule_fullname_rus = rule_fullname_rus
        if id_code is not None:
            self.id_code = id_code
        if qualified_test_id is not None:
            self.qualified_test_id = qualified_test_id
        if counter is not None:
            self.counter = counter

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501

        Идентификатор правила  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsMarkingRulesFields.

        Идентификатор правила  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def rule_shortname_rus(self):
        """Gets the rule_shortname_rus of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501

        Краткое наименование правила  # noqa: E501

        :return: The rule_shortname_rus of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501
        :rtype: str
        """
        return self._rule_shortname_rus

    @rule_shortname_rus.setter
    def rule_shortname_rus(self, rule_shortname_rus):
        """Sets the rule_shortname_rus of this EfirDataHubModelsModelsMarkingRulesFields.

        Краткое наименование правила  # noqa: E501

        :param rule_shortname_rus: The rule_shortname_rus of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501
        :type: str
        """

        self._rule_shortname_rus = rule_shortname_rus

    @property
    def rule_fullname_rus(self):
        """Gets the rule_fullname_rus of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501

        Полное наименование правила  # noqa: E501

        :return: The rule_fullname_rus of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501
        :rtype: str
        """
        return self._rule_fullname_rus

    @rule_fullname_rus.setter
    def rule_fullname_rus(self, rule_fullname_rus):
        """Sets the rule_fullname_rus of this EfirDataHubModelsModelsMarkingRulesFields.

        Полное наименование правила  # noqa: E501

        :param rule_fullname_rus: The rule_fullname_rus of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501
        :type: str
        """

        self._rule_fullname_rus = rule_fullname_rus

    @property
    def id_code(self):
        """Gets the id_code of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501

        Идентификатор классификатора маркировки (значение поля id_code из метода Marking/Codes)  # noqa: E501

        :return: The id_code of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501
        :rtype: int
        """
        return self._id_code

    @id_code.setter
    def id_code(self, id_code):
        """Sets the id_code of this EfirDataHubModelsModelsMarkingRulesFields.

        Идентификатор классификатора маркировки (значение поля id_code из метода Marking/Codes)  # noqa: E501

        :param id_code: The id_code of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501
        :type: int
        """

        self._id_code = id_code

    @property
    def qualified_test_id(self):
        """Gets the qualified_test_id of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501

        Номер теста  # noqa: E501

        :return: The qualified_test_id of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501
        :rtype: int
        """
        return self._qualified_test_id

    @qualified_test_id.setter
    def qualified_test_id(self, qualified_test_id):
        """Sets the qualified_test_id of this EfirDataHubModelsModelsMarkingRulesFields.

        Номер теста  # noqa: E501

        :param qualified_test_id: The qualified_test_id of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501
        :type: int
        """

        self._qualified_test_id = qualified_test_id

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsMarkingRulesFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsMarkingRulesFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMarkingRulesFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMarkingRulesFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
