# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMoexOptionsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_options': 'int',
        'secid': 'str',
        'boardid': 'str',
        'board_title': 'str',
        'board_group': 'str',
        'board_group_title': 'str',
        'market': 'str',
        'engine': 'str',
        'underlying_symbol': 'str',
        'full_name': 'str',
        'option_type': 'str',
        'lotsize': 'int',
        'currency': 'str',
        'strike_price': 'float',
        'point': 'float',
        'point_amount': 'float',
        'start_trade': 'datetime',
        'end_trade': 'datetime',
        'start_option_exp': 'datetime',
        'end_option_exp': 'datetime',
        'secid_full': 'str',
        'update_date': 'datetime',
        'short_name': 'str',
        'counter': 'int'
    }

    attribute_map = {
        'id_options': 'id_options',
        'secid': 'secid',
        'boardid': 'boardid',
        'board_title': 'board_title',
        'board_group': 'board_group',
        'board_group_title': 'board_group_title',
        'market': 'market',
        'engine': 'engine',
        'underlying_symbol': 'underlying_symbol',
        'full_name': 'full_name',
        'option_type': 'option_type',
        'lotsize': 'lotsize',
        'currency': 'currency',
        'strike_price': 'strike_price',
        'point': 'point',
        'point_amount': 'point_amount',
        'start_trade': 'start_trade',
        'end_trade': 'end_trade',
        'start_option_exp': 'start_option_exp',
        'end_option_exp': 'end_option_exp',
        'secid_full': 'secid_full',
        'update_date': 'update_date',
        'short_name': 'short_name',
        'counter': 'counter'
    }

    def __init__(self, id_options=None, secid=None, boardid=None, board_title=None, board_group=None, board_group_title=None, market=None, engine=None, underlying_symbol=None, full_name=None, option_type=None, lotsize=None, currency=None, strike_price=None, point=None, point_amount=None, start_trade=None, end_trade=None, start_option_exp=None, end_option_exp=None, secid_full=None, update_date=None, short_name=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsMoexOptionsFields - a model defined in Swagger"""  # noqa: E501
        self._id_options = None
        self._secid = None
        self._boardid = None
        self._board_title = None
        self._board_group = None
        self._board_group_title = None
        self._market = None
        self._engine = None
        self._underlying_symbol = None
        self._full_name = None
        self._option_type = None
        self._lotsize = None
        self._currency = None
        self._strike_price = None
        self._point = None
        self._point_amount = None
        self._start_trade = None
        self._end_trade = None
        self._start_option_exp = None
        self._end_option_exp = None
        self._secid_full = None
        self._update_date = None
        self._short_name = None
        self._counter = None
        self.discriminator = None
        if id_options is not None:
            self.id_options = id_options
        if secid is not None:
            self.secid = secid
        if boardid is not None:
            self.boardid = boardid
        if board_title is not None:
            self.board_title = board_title
        if board_group is not None:
            self.board_group = board_group
        if board_group_title is not None:
            self.board_group_title = board_group_title
        if market is not None:
            self.market = market
        if engine is not None:
            self.engine = engine
        if underlying_symbol is not None:
            self.underlying_symbol = underlying_symbol
        if full_name is not None:
            self.full_name = full_name
        if option_type is not None:
            self.option_type = option_type
        if lotsize is not None:
            self.lotsize = lotsize
        if currency is not None:
            self.currency = currency
        if strike_price is not None:
            self.strike_price = strike_price
        if point is not None:
            self.point = point
        if point_amount is not None:
            self.point_amount = point_amount
        if start_trade is not None:
            self.start_trade = start_trade
        if end_trade is not None:
            self.end_trade = end_trade
        if start_option_exp is not None:
            self.start_option_exp = start_option_exp
        if end_option_exp is not None:
            self.end_option_exp = end_option_exp
        if secid_full is not None:
            self.secid_full = secid_full
        if update_date is not None:
            self.update_date = update_date
        if short_name is not None:
            self.short_name = short_name
        if counter is not None:
            self.counter = counter

    @property
    def id_options(self):
        """Gets the id_options of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Идентификатор опциона в базе Интерфакс  # noqa: E501

        :return: The id_options of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._id_options

    @id_options.setter
    def id_options(self, id_options):
        """Sets the id_options of this EfirDataHubModelsModelsMoexOptionsFields.

        Идентификатор опциона в базе Интерфакс  # noqa: E501

        :param id_options: The id_options of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: int
        """

        self._id_options = id_options

    @property
    def secid(self):
        """Gets the secid of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Торговый код на МБ  # noqa: E501

        :return: The secid of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._secid

    @secid.setter
    def secid(self, secid):
        """Sets the secid of this EfirDataHubModelsModelsMoexOptionsFields.

        Торговый код на МБ  # noqa: E501

        :param secid: The secid of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._secid = secid

    @property
    def boardid(self):
        """Gets the boardid of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Код режима торгов  # noqa: E501

        :return: The boardid of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._boardid

    @boardid.setter
    def boardid(self, boardid):
        """Sets the boardid of this EfirDataHubModelsModelsMoexOptionsFields.

        Код режима торгов  # noqa: E501

        :param boardid: The boardid of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._boardid = boardid

    @property
    def board_title(self):
        """Gets the board_title of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Наименование режима торгов  # noqa: E501

        :return: The board_title of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._board_title

    @board_title.setter
    def board_title(self, board_title):
        """Sets the board_title of this EfirDataHubModelsModelsMoexOptionsFields.

        Наименование режима торгов  # noqa: E501

        :param board_title: The board_title of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._board_title = board_title

    @property
    def board_group(self):
        """Gets the board_group of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Код группы режимов торгов  # noqa: E501

        :return: The board_group of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._board_group

    @board_group.setter
    def board_group(self, board_group):
        """Sets the board_group of this EfirDataHubModelsModelsMoexOptionsFields.

        Код группы режимов торгов  # noqa: E501

        :param board_group: The board_group of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._board_group = board_group

    @property
    def board_group_title(self):
        """Gets the board_group_title of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Наименование группы режимов торгов  # noqa: E501

        :return: The board_group_title of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._board_group_title

    @board_group_title.setter
    def board_group_title(self, board_group_title):
        """Sets the board_group_title of this EfirDataHubModelsModelsMoexOptionsFields.

        Наименование группы режимов торгов  # noqa: E501

        :param board_group_title: The board_group_title of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._board_group_title = board_group_title

    @property
    def market(self):
        """Gets the market of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Код рынка  # noqa: E501

        :return: The market of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this EfirDataHubModelsModelsMoexOptionsFields.

        Код рынка  # noqa: E501

        :param market: The market of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def engine(self):
        """Gets the engine of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Код торговой системы  # noqa: E501

        :return: The engine of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this EfirDataHubModelsModelsMoexOptionsFields.

        Код торговой системы  # noqa: E501

        :param engine: The engine of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def underlying_symbol(self):
        """Gets the underlying_symbol of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Код базового актива  # noqa: E501

        :return: The underlying_symbol of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._underlying_symbol

    @underlying_symbol.setter
    def underlying_symbol(self, underlying_symbol):
        """Sets the underlying_symbol of this EfirDataHubModelsModelsMoexOptionsFields.

        Код базового актива  # noqa: E501

        :param underlying_symbol: The underlying_symbol of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._underlying_symbol = underlying_symbol

    @property
    def full_name(self):
        """Gets the full_name of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Полное наименование опциона  # noqa: E501

        :return: The full_name of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this EfirDataHubModelsModelsMoexOptionsFields.

        Полное наименование опциона  # noqa: E501

        :param full_name: The full_name of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def option_type(self):
        """Gets the option_type of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Тип опциона (Put или Call)  # noqa: E501

        :return: The option_type of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._option_type

    @option_type.setter
    def option_type(self, option_type):
        """Sets the option_type of this EfirDataHubModelsModelsMoexOptionsFields.

        Тип опциона (Put или Call)  # noqa: E501

        :param option_type: The option_type of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._option_type = option_type

    @property
    def lotsize(self):
        """Gets the lotsize of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Размер лота  # noqa: E501

        :return: The lotsize of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._lotsize

    @lotsize.setter
    def lotsize(self, lotsize):
        """Sets the lotsize of this EfirDataHubModelsModelsMoexOptionsFields.

        Размер лота  # noqa: E501

        :param lotsize: The lotsize of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: int
        """

        self._lotsize = lotsize

    @property
    def currency(self):
        """Gets the currency of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Валюта  # noqa: E501

        :return: The currency of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EfirDataHubModelsModelsMoexOptionsFields.

        Валюта  # noqa: E501

        :param currency: The currency of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def strike_price(self):
        """Gets the strike_price of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Цена страйк  # noqa: E501

        :return: The strike_price of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._strike_price

    @strike_price.setter
    def strike_price(self, strike_price):
        """Sets the strike_price of this EfirDataHubModelsModelsMoexOptionsFields.

        Цена страйк  # noqa: E501

        :param strike_price: The strike_price of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: float
        """

        self._strike_price = strike_price

    @property
    def point(self):
        """Gets the point of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Минимальный шаг цены в валюте торгов  # noqa: E501

        :return: The point of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this EfirDataHubModelsModelsMoexOptionsFields.

        Минимальный шаг цены в валюте торгов  # noqa: E501

        :param point: The point of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: float
        """

        self._point = point

    @property
    def point_amount(self):
        """Gets the point_amount of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Стоимость шага цены  # noqa: E501

        :return: The point_amount of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._point_amount

    @point_amount.setter
    def point_amount(self, point_amount):
        """Sets the point_amount of this EfirDataHubModelsModelsMoexOptionsFields.

        Стоимость шага цены  # noqa: E501

        :param point_amount: The point_amount of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: float
        """

        self._point_amount = point_amount

    @property
    def start_trade(self):
        """Gets the start_trade of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Дата начала торгов  # noqa: E501

        :return: The start_trade of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._start_trade

    @start_trade.setter
    def start_trade(self, start_trade):
        """Sets the start_trade of this EfirDataHubModelsModelsMoexOptionsFields.

        Дата начала торгов  # noqa: E501

        :param start_trade: The start_trade of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: datetime
        """

        self._start_trade = start_trade

    @property
    def end_trade(self):
        """Gets the end_trade of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Дата окончания торгов  # noqa: E501

        :return: The end_trade of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._end_trade

    @end_trade.setter
    def end_trade(self, end_trade):
        """Sets the end_trade of this EfirDataHubModelsModelsMoexOptionsFields.

        Дата окончания торгов  # noqa: E501

        :param end_trade: The end_trade of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: datetime
        """

        self._end_trade = end_trade

    @property
    def start_option_exp(self):
        """Gets the start_option_exp of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Дата начала экспирации опциона  # noqa: E501

        :return: The start_option_exp of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._start_option_exp

    @start_option_exp.setter
    def start_option_exp(self, start_option_exp):
        """Sets the start_option_exp of this EfirDataHubModelsModelsMoexOptionsFields.

        Дата начала экспирации опциона  # noqa: E501

        :param start_option_exp: The start_option_exp of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: datetime
        """

        self._start_option_exp = start_option_exp

    @property
    def end_option_exp(self):
        """Gets the end_option_exp of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Дата окончания экспирации опциона  # noqa: E501

        :return: The end_option_exp of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._end_option_exp

    @end_option_exp.setter
    def end_option_exp(self, end_option_exp):
        """Sets the end_option_exp of this EfirDataHubModelsModelsMoexOptionsFields.

        Дата окончания экспирации опциона  # noqa: E501

        :param end_option_exp: The end_option_exp of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: datetime
        """

        self._end_option_exp = end_option_exp

    @property
    def secid_full(self):
        """Gets the secid_full of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Полный код опциона  # noqa: E501

        :return: The secid_full of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._secid_full

    @secid_full.setter
    def secid_full(self, secid_full):
        """Sets the secid_full of this EfirDataHubModelsModelsMoexOptionsFields.

        Полный код опциона  # noqa: E501

        :param secid_full: The secid_full of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._secid_full = secid_full

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Дата обновления  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsMoexOptionsFields.

        Дата обновления  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def short_name(self):
        """Gets the short_name of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Краткое наименование контракта  # noqa: E501

        :return: The short_name of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this EfirDataHubModelsModelsMoexOptionsFields.

        Краткое наименование контракта  # noqa: E501

        :param short_name: The short_name of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsMoexOptionsFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsMoexOptionsFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMoexOptionsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMoexOptionsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
