# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_currency': 'str',
        'quoted_currency': 'str',
        'date_from': 'datetime',
        'date_to': 'datetime',
        'with_holidays': 'bool',
        'page_num': 'int',
        'page_size': 'int'
    }

    attribute_map = {
        'base_currency': 'baseCurrency',
        'quoted_currency': 'quotedCurrency',
        'date_from': 'dateFrom',
        'date_to': 'dateTo',
        'with_holidays': 'withHolidays',
        'page_num': 'pageNum',
        'page_size': 'pageSize'
    }

    def __init__(self, base_currency='USD', quoted_currency='RUB', date_from=None, date_to=None, with_holidays=True, page_num=1, page_size=100):  # noqa: E501
        """EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest - a model defined in Swagger"""  # noqa: E501
        self._base_currency = None
        self._quoted_currency = None
        self._date_from = None
        self._date_to = None
        self._with_holidays = None
        self._page_num = None
        self._page_size = None
        self.discriminator = None
        self.base_currency = base_currency
        self.quoted_currency = quoted_currency
        if date_from is not None:
            self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to
        if with_holidays is not None:
            self.with_holidays = with_holidays
        if page_num is not None:
            self.page_num = page_num
        if page_size is not None:
            self.page_size = page_size

    @property
    def base_currency(self):
        """Gets the base_currency of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501

        Базовая валюта, чей курс нужно узнать (трехбуквенный код)  # noqa: E501

        :return: The base_currency of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._base_currency

    @base_currency.setter
    def base_currency(self, base_currency):
        """Sets the base_currency of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.

        Базовая валюта, чей курс нужно узнать (трехбуквенный код)  # noqa: E501

        :param base_currency: The base_currency of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :type: str
        """
        if base_currency is None:
            raise ValueError("Invalid value for `base_currency`, must not be `None`")  # noqa: E501

        self._base_currency = base_currency

    @property
    def quoted_currency(self):
        """Gets the quoted_currency of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501

        Котируемая валюта, в которой нужно выразить курсы (трехбуквенный код)  # noqa: E501

        :return: The quoted_currency of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._quoted_currency

    @quoted_currency.setter
    def quoted_currency(self, quoted_currency):
        """Sets the quoted_currency of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.

        Котируемая валюта, в которой нужно выразить курсы (трехбуквенный код)  # noqa: E501

        :param quoted_currency: The quoted_currency of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :type: str
        """
        if quoted_currency is None:
            raise ValueError("Invalid value for `quoted_currency`, must not be `None`")  # noqa: E501

        self._quoted_currency = quoted_currency

    @property
    def date_from(self):
        """Gets the date_from of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501

        Дата начала выборки (по умолчанию текущая дата)  # noqa: E501

        :return: The date_from of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.

        Дата начала выборки (по умолчанию текущая дата)  # noqa: E501

        :param date_from: The date_from of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :type: datetime
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501

        Дата окончания выборки (по умолчанию текущая дата)  # noqa: E501

        :return: The date_to of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.

        Дата окончания выборки (по умолчанию текущая дата)  # noqa: E501

        :param date_to: The date_to of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :type: datetime
        """

        self._date_to = date_to

    @property
    def with_holidays(self):
        """Gets the with_holidays of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501

        С курсом валюты в праздничные и выходные дни  # noqa: E501

        :return: The with_holidays of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :rtype: bool
        """
        return self._with_holidays

    @with_holidays.setter
    def with_holidays(self, with_holidays):
        """Sets the with_holidays of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.

        С курсом валюты в праздничные и выходные дни  # noqa: E501

        :param with_holidays: The with_holidays of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :type: bool
        """

        self._with_holidays = with_holidays

    @property
    def page_num(self):
        """Gets the page_num of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501

        Номер страницы для выборки (по-умолчанию 1)  # noqa: E501

        :return: The page_num of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_num

    @page_num.setter
    def page_num(self, page_num):
        """Sets the page_num of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.

        Номер страницы для выборки (по-умолчанию 1)  # noqa: E501

        :param page_num: The page_num of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :type: int
        """

        self._page_num = page_num

    @property
    def page_size(self):
        """Gets the page_size of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501

        Размер страницы выборки (по-умолчаню - 1000)  # noqa: E501

        :return: The page_size of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.

        Размер страницы выборки (по-умолчаню - 1000)  # noqa: E501

        :param page_size: The page_size of this EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2ArchiveCurrencyRateHistoryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
