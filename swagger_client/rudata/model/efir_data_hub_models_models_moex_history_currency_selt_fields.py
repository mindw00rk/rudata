# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMoexHistoryCurrencySeltFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'baserate': 'float',
        'cuttime': 'datetime',
        'highbid': 'float',
        'invcurvol': 'float',
        'lowoffer': 'float',
        'numorders': 'int',
        'numpart': 'int',
        'numtrades': 'int',
        'trendwap': 'float',
        'volcur': 'float',
        'volrur': 'float',
        'waprice': 'float',
        'engine': 'str',
        'market': 'str',
        'boardid': 'str',
        'decimals': 'int',
        'high': 'float',
        'low': 'float',
        'open': 'float',
        'close': 'float',
        'secid': 'str',
        'shortname': 'str',
        'tradedate': 'datetime',
        'tradingsession': 'int',
        'counter': 'int'
    }

    attribute_map = {
        'baserate': 'baserate',
        'cuttime': 'cuttime',
        'highbid': 'highbid',
        'invcurvol': 'invcurvol',
        'lowoffer': 'lowoffer',
        'numorders': 'numorders',
        'numpart': 'numpart',
        'numtrades': 'numtrades',
        'trendwap': 'trendwap',
        'volcur': 'volcur',
        'volrur': 'volrur',
        'waprice': 'waprice',
        'engine': 'engine',
        'market': 'market',
        'boardid': 'boardid',
        'decimals': 'decimals',
        'high': 'high',
        'low': 'low',
        'open': 'open',
        'close': 'close',
        'secid': 'secid',
        'shortname': 'shortname',
        'tradedate': 'tradedate',
        'tradingsession': 'tradingsession',
        'counter': 'counter'
    }

    def __init__(self, baserate=None, cuttime=None, highbid=None, invcurvol=None, lowoffer=None, numorders=None, numpart=None, numtrades=None, trendwap=None, volcur=None, volrur=None, waprice=None, engine=None, market=None, boardid=None, decimals=None, high=None, low=None, open=None, close=None, secid=None, shortname=None, tradedate=None, tradingsession=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsMoexHistoryCurrencySeltFields - a model defined in Swagger"""  # noqa: E501
        self._baserate = None
        self._cuttime = None
        self._highbid = None
        self._invcurvol = None
        self._lowoffer = None
        self._numorders = None
        self._numpart = None
        self._numtrades = None
        self._trendwap = None
        self._volcur = None
        self._volrur = None
        self._waprice = None
        self._engine = None
        self._market = None
        self._boardid = None
        self._decimals = None
        self._high = None
        self._low = None
        self._open = None
        self._close = None
        self._secid = None
        self._shortname = None
        self._tradedate = None
        self._tradingsession = None
        self._counter = None
        self.discriminator = None
        if baserate is not None:
            self.baserate = baserate
        if cuttime is not None:
            self.cuttime = cuttime
        if highbid is not None:
            self.highbid = highbid
        if invcurvol is not None:
            self.invcurvol = invcurvol
        if lowoffer is not None:
            self.lowoffer = lowoffer
        if numorders is not None:
            self.numorders = numorders
        if numpart is not None:
            self.numpart = numpart
        if numtrades is not None:
            self.numtrades = numtrades
        if trendwap is not None:
            self.trendwap = trendwap
        if volcur is not None:
            self.volcur = volcur
        if volrur is not None:
            self.volrur = volrur
        if waprice is not None:
            self.waprice = waprice
        if engine is not None:
            self.engine = engine
        if market is not None:
            self.market = market
        if boardid is not None:
            self.boardid = boardid
        if decimals is not None:
            self.decimals = decimals
        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        if open is not None:
            self.open = open
        if close is not None:
            self.close = close
        if secid is not None:
            self.secid = secid
        if shortname is not None:
            self.shortname = shortname
        if tradedate is not None:
            self.tradedate = tradedate
        if tradingsession is not None:
            self.tradingsession = tradingsession
        if counter is not None:
            self.counter = counter

    @property
    def baserate(self):
        """Gets the baserate of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Базовый курс при торговле СВОП инструментами  # noqa: E501

        :return: The baserate of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: float
        """
        return self._baserate

    @baserate.setter
    def baserate(self, baserate):
        """Sets the baserate of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Базовый курс при торговле СВОП инструментами  # noqa: E501

        :param baserate: The baserate of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: float
        """

        self._baserate = baserate

    @property
    def cuttime(self):
        """Gets the cuttime of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Время отсечения промежуточных итогов торгов  # noqa: E501

        :return: The cuttime of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: datetime
        """
        return self._cuttime

    @cuttime.setter
    def cuttime(self, cuttime):
        """Sets the cuttime of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Время отсечения промежуточных итогов торгов  # noqa: E501

        :param cuttime: The cuttime of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: datetime
        """

        self._cuttime = cuttime

    @property
    def highbid(self):
        """Gets the highbid of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Лучшая котировка на покупку, единиц сопряж. валюты/единицу валюты лота  # noqa: E501

        :return: The highbid of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: float
        """
        return self._highbid

    @highbid.setter
    def highbid(self, highbid):
        """Sets the highbid of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Лучшая котировка на покупку, единиц сопряж. валюты/единицу валюты лота  # noqa: E501

        :param highbid: The highbid of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: float
        """

        self._highbid = highbid

    @property
    def invcurvol(self):
        """Gets the invcurvol of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Объем сделок в сопряженной валюте  # noqa: E501

        :return: The invcurvol of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: float
        """
        return self._invcurvol

    @invcurvol.setter
    def invcurvol(self, invcurvol):
        """Sets the invcurvol of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Объем сделок в сопряженной валюте  # noqa: E501

        :param invcurvol: The invcurvol of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: float
        """

        self._invcurvol = invcurvol

    @property
    def lowoffer(self):
        """Gets the lowoffer of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Лучшая котировка на продажу, единиц сопряж. валюты/единицу валюты лота  # noqa: E501

        :return: The lowoffer of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: float
        """
        return self._lowoffer

    @lowoffer.setter
    def lowoffer(self, lowoffer):
        """Sets the lowoffer of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Лучшая котировка на продажу, единиц сопряж. валюты/единицу валюты лота  # noqa: E501

        :param lowoffer: The lowoffer of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: float
        """

        self._lowoffer = lowoffer

    @property
    def numorders(self):
        """Gets the numorders of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Количество заявок  # noqa: E501

        :return: The numorders of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: int
        """
        return self._numorders

    @numorders.setter
    def numorders(self, numorders):
        """Sets the numorders of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Количество заявок  # noqa: E501

        :param numorders: The numorders of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: int
        """

        self._numorders = numorders

    @property
    def numpart(self):
        """Gets the numpart of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Кол-во участников  # noqa: E501

        :return: The numpart of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: int
        """
        return self._numpart

    @numpart.setter
    def numpart(self, numpart):
        """Sets the numpart of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Кол-во участников  # noqa: E501

        :param numpart: The numpart of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: int
        """

        self._numpart = numpart

    @property
    def numtrades(self):
        """Gets the numtrades of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Количество сделок  # noqa: E501

        :return: The numtrades of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: int
        """
        return self._numtrades

    @numtrades.setter
    def numtrades(self, numtrades):
        """Sets the numtrades of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Количество сделок  # noqa: E501

        :param numtrades: The numtrades of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: int
        """

        self._numtrades = numtrades

    @property
    def trendwap(self):
        """Gets the trendwap of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Тренд  # noqa: E501

        :return: The trendwap of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: float
        """
        return self._trendwap

    @trendwap.setter
    def trendwap(self, trendwap):
        """Sets the trendwap of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Тренд  # noqa: E501

        :param trendwap: The trendwap of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: float
        """

        self._trendwap = trendwap

    @property
    def volcur(self):
        """Gets the volcur of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Объем сделок в валюте лота  # noqa: E501

        :return: The volcur of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: float
        """
        return self._volcur

    @volcur.setter
    def volcur(self, volcur):
        """Sets the volcur of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Объем сделок в валюте лота  # noqa: E501

        :param volcur: The volcur of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: float
        """

        self._volcur = volcur

    @property
    def volrur(self):
        """Gets the volrur of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Объем сделок в рублях  # noqa: E501

        :return: The volrur of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: float
        """
        return self._volrur

    @volrur.setter
    def volrur(self, volrur):
        """Sets the volrur of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Объем сделок в рублях  # noqa: E501

        :param volrur: The volrur of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: float
        """

        self._volrur = volrur

    @property
    def waprice(self):
        """Gets the waprice of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Средневзвешенный курс, единиц сопряж.валюты/единицу валюты лота  # noqa: E501

        :return: The waprice of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: float
        """
        return self._waprice

    @waprice.setter
    def waprice(self, waprice):
        """Sets the waprice of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Средневзвешенный курс, единиц сопряж.валюты/единицу валюты лота  # noqa: E501

        :param waprice: The waprice of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: float
        """

        self._waprice = waprice

    @property
    def engine(self):
        """Gets the engine of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501


        :return: The engine of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.


        :param engine: The engine of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def market(self):
        """Gets the market of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501


        :return: The market of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.


        :param market: The market of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def boardid(self):
        """Gets the boardid of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501


        :return: The boardid of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: str
        """
        return self._boardid

    @boardid.setter
    def boardid(self, boardid):
        """Sets the boardid of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.


        :param boardid: The boardid of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: str
        """

        self._boardid = boardid

    @property
    def decimals(self):
        """Gets the decimals of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Точность, знаков после запятой  # noqa: E501

        :return: The decimals of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Точность, знаков после запятой  # noqa: E501

        :param decimals: The decimals of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    @property
    def high(self):
        """Gets the high of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Цена сделки максимальная  # noqa: E501

        :return: The high of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Цена сделки максимальная  # noqa: E501

        :param high: The high of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: float
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Цена сделки минимальная  # noqa: E501

        :return: The low of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Цена сделки минимальная  # noqa: E501

        :param low: The low of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: float
        """

        self._low = low

    @property
    def open(self):
        """Gets the open of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Цена предторгового периода/Цена аукциона открытия  # noqa: E501

        :return: The open of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Цена предторгового периода/Цена аукциона открытия  # noqa: E501

        :param open: The open of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def close(self):
        """Gets the close of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Цена последней сделки  # noqa: E501

        :return: The close of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Цена последней сделки  # noqa: E501

        :param close: The close of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: float
        """

        self._close = close

    @property
    def secid(self):
        """Gets the secid of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Идентификатор финансового инструмента  # noqa: E501

        :return: The secid of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: str
        """
        return self._secid

    @secid.setter
    def secid(self, secid):
        """Sets the secid of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Идентификатор финансового инструмента  # noqa: E501

        :param secid: The secid of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: str
        """

        self._secid = secid

    @property
    def shortname(self):
        """Gets the shortname of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Краткое наименование  # noqa: E501

        :return: The shortname of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname):
        """Sets the shortname of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Краткое наименование  # noqa: E501

        :param shortname: The shortname of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: str
        """

        self._shortname = shortname

    @property
    def tradedate(self):
        """Gets the tradedate of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Дата торгов  # noqa: E501

        :return: The tradedate of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: datetime
        """
        return self._tradedate

    @tradedate.setter
    def tradedate(self, tradedate):
        """Sets the tradedate of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Дата торгов  # noqa: E501

        :param tradedate: The tradedate of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: datetime
        """

        self._tradedate = tradedate

    @property
    def tradingsession(self):
        """Gets the tradingsession of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Номер сессии (1 - основная, 2 - вечерняя, 3 - общие итоги)  # noqa: E501

        :return: The tradingsession of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: int
        """
        return self._tradingsession

    @tradingsession.setter
    def tradingsession(self, tradingsession):
        """Sets the tradingsession of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Номер сессии (1 - основная, 2 - вечерняя, 3 - общие итоги)  # noqa: E501

        :param tradingsession: The tradingsession of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: int
        """

        self._tradingsession = tradingsession

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501

        Общее количество записей в выборке, если указан pageNum = 1. Иначе = null  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.

        Общее количество записей в выборке, если указан pageNum = 1. Иначе = null  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsMoexHistoryCurrencySeltFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMoexHistoryCurrencySeltFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMoexHistoryCurrencySeltFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
