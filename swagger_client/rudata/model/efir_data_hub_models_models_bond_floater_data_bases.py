# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondFloaterDataBases(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_no': 'int',
        'calc_type': 'str',
        'base_fintoolid': 'int',
        'ind_shortname_rus': 'str',
        'id_iss': 'int',
        'period_num': 'int',
        'period_type': 'str',
        'shift_period_num': 'int',
        'shift_period_type': 'str',
        'calc_end_num': 'int',
        'calc_end_type': 'str',
        'premium_to_base': 'int',
        'limit_min': 'int',
        'limit_max': 'int'
    }

    attribute_map = {
        'base_no': 'base_no',
        'calc_type': 'calc_type',
        'base_fintoolid': 'base_fintoolid',
        'ind_shortname_rus': 'ind_shortname_rus',
        'id_iss': 'id_iss',
        'period_num': 'period_num',
        'period_type': 'period_type',
        'shift_period_num': 'shift_period_num',
        'shift_period_type': 'shift_period_type',
        'calc_end_num': 'calc_end_num',
        'calc_end_type': 'calc_end_type',
        'premium_to_base': 'premium_to_base',
        'limit_min': 'limit_min',
        'limit_max': 'limit_max'
    }

    def __init__(self, base_no=None, calc_type=None, base_fintoolid=None, ind_shortname_rus=None, id_iss=None, period_num=None, period_type=None, shift_period_num=None, shift_period_type=None, calc_end_num=None, calc_end_type=None, premium_to_base=None, limit_min=None, limit_max=None):  # noqa: E501
        """EfirDataHubModelsModelsBondFloaterDataBases - a model defined in Swagger"""  # noqa: E501
        self._base_no = None
        self._calc_type = None
        self._base_fintoolid = None
        self._ind_shortname_rus = None
        self._id_iss = None
        self._period_num = None
        self._period_type = None
        self._shift_period_num = None
        self._shift_period_type = None
        self._calc_end_num = None
        self._calc_end_type = None
        self._premium_to_base = None
        self._limit_min = None
        self._limit_max = None
        self.discriminator = None
        if base_no is not None:
            self.base_no = base_no
        if calc_type is not None:
            self.calc_type = calc_type
        if base_fintoolid is not None:
            self.base_fintoolid = base_fintoolid
        if ind_shortname_rus is not None:
            self.ind_shortname_rus = ind_shortname_rus
        if id_iss is not None:
            self.id_iss = id_iss
        if period_num is not None:
            self.period_num = period_num
        if period_type is not None:
            self.period_type = period_type
        if shift_period_num is not None:
            self.shift_period_num = shift_period_num
        if shift_period_type is not None:
            self.shift_period_type = shift_period_type
        if calc_end_num is not None:
            self.calc_end_num = calc_end_num
        if calc_end_type is not None:
            self.calc_end_type = calc_end_type
        if premium_to_base is not None:
            self.premium_to_base = premium_to_base
        if limit_min is not None:
            self.limit_min = limit_min
        if limit_max is not None:
            self.limit_max = limit_max

    @property
    def base_no(self):
        """Gets the base_no of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Номер базы  # noqa: E501

        :return: The base_no of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: int
        """
        return self._base_no

    @base_no.setter
    def base_no(self, base_no):
        """Sets the base_no of this EfirDataHubModelsModelsBondFloaterDataBases.

        Номер базы  # noqa: E501

        :param base_no: The base_no of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: int
        """

        self._base_no = base_no

    @property
    def calc_type(self):
        """Gets the calc_type of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Способ расчета базы - фиксация ставки, изменение за период, среднее за период  # noqa: E501

        :return: The calc_type of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: str
        """
        return self._calc_type

    @calc_type.setter
    def calc_type(self, calc_type):
        """Sets the calc_type of this EfirDataHubModelsModelsBondFloaterDataBases.

        Способ расчета базы - фиксация ставки, изменение за период, среднее за период  # noqa: E501

        :param calc_type: The calc_type of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: str
        """

        self._calc_type = calc_type

    @property
    def base_fintoolid(self):
        """Gets the base_fintoolid of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Идентификатор базового индикатора  # noqa: E501

        :return: The base_fintoolid of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: int
        """
        return self._base_fintoolid

    @base_fintoolid.setter
    def base_fintoolid(self, base_fintoolid):
        """Sets the base_fintoolid of this EfirDataHubModelsModelsBondFloaterDataBases.

        Идентификатор базового индикатора  # noqa: E501

        :param base_fintoolid: The base_fintoolid of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: int
        """

        self._base_fintoolid = base_fintoolid

    @property
    def ind_shortname_rus(self):
        """Gets the ind_shortname_rus of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Краткое наименование индикатора  # noqa: E501

        :return: The ind_shortname_rus of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: str
        """
        return self._ind_shortname_rus

    @ind_shortname_rus.setter
    def ind_shortname_rus(self, ind_shortname_rus):
        """Sets the ind_shortname_rus of this EfirDataHubModelsModelsBondFloaterDataBases.

        Краткое наименование индикатора  # noqa: E501

        :param ind_shortname_rus: The ind_shortname_rus of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: str
        """

        self._ind_shortname_rus = ind_shortname_rus

    @property
    def id_iss(self):
        """Gets the id_iss of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Ид инструмента индикатора  # noqa: E501

        :return: The id_iss of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: int
        """
        return self._id_iss

    @id_iss.setter
    def id_iss(self, id_iss):
        """Sets the id_iss of this EfirDataHubModelsModelsBondFloaterDataBases.

        Ид инструмента индикатора  # noqa: E501

        :param id_iss: The id_iss of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: int
        """

        self._id_iss = id_iss

    @property
    def period_num(self):
        """Gets the period_num of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Число периодов расчета  # noqa: E501

        :return: The period_num of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: int
        """
        return self._period_num

    @period_num.setter
    def period_num(self, period_num):
        """Sets the period_num of this EfirDataHubModelsModelsBondFloaterDataBases.

        Число периодов расчета  # noqa: E501

        :param period_num: The period_num of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: int
        """

        self._period_num = period_num

    @property
    def period_type(self):
        """Gets the period_type of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Тип периодов расчета  # noqa: E501

        :return: The period_type of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: str
        """
        return self._period_type

    @period_type.setter
    def period_type(self, period_type):
        """Sets the period_type of this EfirDataHubModelsModelsBondFloaterDataBases.

        Тип периодов расчета  # noqa: E501

        :param period_type: The period_type of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: str
        """

        self._period_type = period_type

    @property
    def shift_period_num(self):
        """Gets the shift_period_num of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Число периодов сдвига  # noqa: E501

        :return: The shift_period_num of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: int
        """
        return self._shift_period_num

    @shift_period_num.setter
    def shift_period_num(self, shift_period_num):
        """Sets the shift_period_num of this EfirDataHubModelsModelsBondFloaterDataBases.

        Число периодов сдвига  # noqa: E501

        :param shift_period_num: The shift_period_num of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: int
        """

        self._shift_period_num = shift_period_num

    @property
    def shift_period_type(self):
        """Gets the shift_period_type of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Тип периодов сдвига  # noqa: E501

        :return: The shift_period_type of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: str
        """
        return self._shift_period_type

    @shift_period_type.setter
    def shift_period_type(self, shift_period_type):
        """Sets the shift_period_type of this EfirDataHubModelsModelsBondFloaterDataBases.

        Тип периодов сдвига  # noqa: E501

        :param shift_period_type: The shift_period_type of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: str
        """

        self._shift_period_type = shift_period_type

    @property
    def calc_end_num(self):
        """Gets the calc_end_num of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Число периодов для точки окончания расчета  # noqa: E501

        :return: The calc_end_num of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: int
        """
        return self._calc_end_num

    @calc_end_num.setter
    def calc_end_num(self, calc_end_num):
        """Sets the calc_end_num of this EfirDataHubModelsModelsBondFloaterDataBases.

        Число периодов для точки окончания расчета  # noqa: E501

        :param calc_end_num: The calc_end_num of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: int
        """

        self._calc_end_num = calc_end_num

    @property
    def calc_end_type(self):
        """Gets the calc_end_type of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Тип периодов для точки окончания расчета  # noqa: E501

        :return: The calc_end_type of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: str
        """
        return self._calc_end_type

    @calc_end_type.setter
    def calc_end_type(self, calc_end_type):
        """Sets the calc_end_type of this EfirDataHubModelsModelsBondFloaterDataBases.

        Тип периодов для точки окончания расчета  # noqa: E501

        :param calc_end_type: The calc_end_type of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: str
        """

        self._calc_end_type = calc_end_type

    @property
    def premium_to_base(self):
        """Gets the premium_to_base of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Надбавка к базовой ставке  # noqa: E501

        :return: The premium_to_base of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: int
        """
        return self._premium_to_base

    @premium_to_base.setter
    def premium_to_base(self, premium_to_base):
        """Sets the premium_to_base of this EfirDataHubModelsModelsBondFloaterDataBases.

        Надбавка к базовой ставке  # noqa: E501

        :param premium_to_base: The premium_to_base of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: int
        """

        self._premium_to_base = premium_to_base

    @property
    def limit_min(self):
        """Gets the limit_min of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Верхний ограничитель итоговой ставки, % годовых  # noqa: E501

        :return: The limit_min of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: int
        """
        return self._limit_min

    @limit_min.setter
    def limit_min(self, limit_min):
        """Sets the limit_min of this EfirDataHubModelsModelsBondFloaterDataBases.

        Верхний ограничитель итоговой ставки, % годовых  # noqa: E501

        :param limit_min: The limit_min of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: int
        """

        self._limit_min = limit_min

    @property
    def limit_max(self):
        """Gets the limit_max of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501

        Нижний ограничитель итоговой ставки, % годовых  # noqa: E501

        :return: The limit_max of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :rtype: int
        """
        return self._limit_max

    @limit_max.setter
    def limit_max(self, limit_max):
        """Sets the limit_max of this EfirDataHubModelsModelsBondFloaterDataBases.

        Нижний ограничитель итоговой ставки, % годовых  # noqa: E501

        :param limit_max: The limit_max of this EfirDataHubModelsModelsBondFloaterDataBases.  # noqa: E501
        :type: int
        """

        self._limit_max = limit_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondFloaterDataBases, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondFloaterDataBases):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
