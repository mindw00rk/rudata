# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsSolvencyCounterpartyIdFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'counterparty_id': 'str',
        'error': 'str',
        'oksm': 'str',
        'entity_type': 'str',
        'tax_id': 'str',
        'reg_id': 'str',
        'additional_id': 'str'
    }

    attribute_map = {
        'counterparty_id': 'counterpartyId',
        'error': 'error',
        'oksm': 'oksm',
        'entity_type': 'entityType',
        'tax_id': 'taxId',
        'reg_id': 'regId',
        'additional_id': 'additionalId'
    }

    def __init__(self, counterparty_id=None, error=None, oksm=None, entity_type=None, tax_id=None, reg_id=None, additional_id=None):  # noqa: E501
        """EfirDataHubModelsModelsSolvencyCounterpartyIdFields - a model defined in Swagger"""  # noqa: E501
        self._counterparty_id = None
        self._error = None
        self._oksm = None
        self._entity_type = None
        self._tax_id = None
        self._reg_id = None
        self._additional_id = None
        self.discriminator = None
        if counterparty_id is not None:
            self.counterparty_id = counterparty_id
        if error is not None:
            self.error = error
        if oksm is not None:
            self.oksm = oksm
        if entity_type is not None:
            self.entity_type = entity_type
        if tax_id is not None:
            self.tax_id = tax_id
        if reg_id is not None:
            self.reg_id = reg_id
        if additional_id is not None:
            self.additional_id = additional_id

    @property
    def counterparty_id(self):
        """Gets the counterparty_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501

        Сформированный идентификатор контрагента  # noqa: E501

        :return: The counterparty_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :rtype: str
        """
        return self._counterparty_id

    @counterparty_id.setter
    def counterparty_id(self, counterparty_id):
        """Sets the counterparty_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.

        Сформированный идентификатор контрагента  # noqa: E501

        :param counterparty_id: The counterparty_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :type: str
        """

        self._counterparty_id = counterparty_id

    @property
    def error(self):
        """Gets the error of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501

        Описание ошибки при наличии, иначе null  # noqa: E501

        :return: The error of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.

        Описание ошибки при наличии, иначе null  # noqa: E501

        :param error: The error of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def oksm(self):
        """Gets the oksm of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501

        Код страны ОКСМ  # noqa: E501

        :return: The oksm of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :rtype: str
        """
        return self._oksm

    @oksm.setter
    def oksm(self, oksm):
        """Sets the oksm of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.

        Код страны ОКСМ  # noqa: E501

        :param oksm: The oksm of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :type: str
        """

        self._oksm = oksm

    @property
    def entity_type(self):
        """Gets the entity_type of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501

        Тип контрагента, возможные значения:  ЮЛ,  ФЛ,  ИП.  # noqa: E501

        :return: The entity_type of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.

        Тип контрагента, возможные значения:  ЮЛ,  ФЛ,  ИП.  # noqa: E501

        :param entity_type: The entity_type of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def tax_id(self):
        """Gets the tax_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501

        ИНН или TIN контрагента.  Для юридических лиц - резидентов РФ - ИНН, строка из 10 цифр. Если ИНН пустой, но указан ОГРН, в качестве ИНН используется 0000000000.  Для физических лиц и индивидуальных предпринимателей - резидентов РФ - ИНН, строка из 12 цифр.  Для нерезидентов РФ пробелы и подчеркивания удаляются принудительно.  # noqa: E501

        :return: The tax_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.

        ИНН или TIN контрагента.  Для юридических лиц - резидентов РФ - ИНН, строка из 10 цифр. Если ИНН пустой, но указан ОГРН, в качестве ИНН используется 0000000000.  Для физических лиц и индивидуальных предпринимателей - резидентов РФ - ИНН, строка из 12 цифр.  Для нерезидентов РФ пробелы и подчеркивания удаляются принудительно.  # noqa: E501

        :param tax_id: The tax_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :type: str
        """

        self._tax_id = tax_id

    @property
    def reg_id(self):
        """Gets the reg_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501

        Регномер или СНИЛС.  Для юридических лиц - резидентов РФ - ОГРН, строка из 13 цифр. Если ОГРН пустой, но указан ИНН, используется 0000000000000.  Для физических лиц - резидентов РФ - СНИЛС, строка в формате NNN-NNN-NNNNN, где N - цифра.  Для индивидуальных предпринимателей - резидентов РФ - ОГРНИП, строка из 15 цифр.  Для нерезидентов РФ пробелы и подчеркивания удаляются принудительно.  # noqa: E501

        :return: The reg_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :rtype: str
        """
        return self._reg_id

    @reg_id.setter
    def reg_id(self, reg_id):
        """Sets the reg_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.

        Регномер или СНИЛС.  Для юридических лиц - резидентов РФ - ОГРН, строка из 13 цифр. Если ОГРН пустой, но указан ИНН, используется 0000000000000.  Для физических лиц - резидентов РФ - СНИЛС, строка в формате NNN-NNN-NNNNN, где N - цифра.  Для индивидуальных предпринимателей - резидентов РФ - ОГРНИП, строка из 15 цифр.  Для нерезидентов РФ пробелы и подчеркивания удаляются принудительно.  # noqa: E501

        :param reg_id: The reg_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :type: str
        """

        self._reg_id = reg_id

    @property
    def additional_id(self):
        """Gets the additional_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501

        Дополнительный идентификатор. Следует использовать только в случаях,   когда это действительно необходимо, т.е. когда невозможно   идентифицировать контрагента по TaxId или RegId.  Пробелы и подчеркивания удаляются принудительно.  # noqa: E501

        :return: The additional_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :rtype: str
        """
        return self._additional_id

    @additional_id.setter
    def additional_id(self, additional_id):
        """Sets the additional_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.

        Дополнительный идентификатор. Следует использовать только в случаях,   когда это действительно необходимо, т.е. когда невозможно   идентифицировать контрагента по TaxId или RegId.  Пробелы и подчеркивания удаляются принудительно.  # noqa: E501

        :param additional_id: The additional_id of this EfirDataHubModelsModelsSolvencyCounterpartyIdFields.  # noqa: E501
        :type: str
        """

        self._additional_id = additional_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsSolvencyCounterpartyIdFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsSolvencyCounterpartyIdFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
