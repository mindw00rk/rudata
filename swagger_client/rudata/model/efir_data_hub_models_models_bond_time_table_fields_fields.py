# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondTimeTableFieldsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'group': 'str',
        'field_name': 'str',
        'field_description': 'str',
        'comment': 'str',
        'is_default': 'int',
        'default_with_group': 'str',
        'order': 'float',
        'id': 'int',
        'id_group': 'int',
        'id_composite_field': 'int'
    }

    attribute_map = {
        'type': 'type',
        'group': 'group',
        'field_name': 'field_name',
        'field_description': 'field_description',
        'comment': 'comment',
        'is_default': 'is_default',
        'default_with_group': 'default_with_group',
        'order': 'order',
        'id': 'id',
        'id_group': 'id_group',
        'id_composite_field': 'id_composite_field'
    }

    def __init__(self, type=None, group=None, field_name=None, field_description=None, comment=None, is_default=None, default_with_group=None, order=None, id=None, id_group=None, id_composite_field=None):  # noqa: E501
        """EfirDataHubModelsModelsBondTimeTableFieldsFields - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._group = None
        self._field_name = None
        self._field_description = None
        self._comment = None
        self._is_default = None
        self._default_with_group = None
        self._order = None
        self._id = None
        self._id_group = None
        self._id_composite_field = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if group is not None:
            self.group = group
        if field_name is not None:
            self.field_name = field_name
        if field_description is not None:
            self.field_description = field_description
        if comment is not None:
            self.comment = comment
        if is_default is not None:
            self.is_default = is_default
        if default_with_group is not None:
            self.default_with_group = default_with_group
        if order is not None:
            self.order = order
        if id is not None:
            self.id = id
        if id_group is not None:
            self.id_group = id_group
        if id_composite_field is not None:
            self.id_composite_field = id_composite_field

    @property
    def type(self):
        """Gets the type of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501

        Идентификатор типа инструмента, для которого может быть использовано поле.Доступные значения ‘Bond’, ‘Share’.  # noqa: E501

        :return: The type of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EfirDataHubModelsModelsBondTimeTableFieldsFields.

        Идентификатор типа инструмента, для которого может быть использовано поле.Доступные значения ‘Bond’, ‘Share’.  # noqa: E501

        :param type: The type of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def group(self):
        """Gets the group of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501

        Наименование группы полей. См.метод TimeTableFieldGroups.  # noqa: E501

        :return: The group of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this EfirDataHubModelsModelsBondTimeTableFieldsFields.

        Наименование группы полей. См.метод TimeTableFieldGroups.  # noqa: E501

        :param group: The group of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def field_name(self):
        """Gets the field_name of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501

        Код поля  # noqa: E501

        :return: The field_name of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this EfirDataHubModelsModelsBondTimeTableFieldsFields.

        Код поля  # noqa: E501

        :param field_name: The field_name of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def field_description(self):
        """Gets the field_description of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501

        Описание поля  # noqa: E501

        :return: The field_description of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._field_description

    @field_description.setter
    def field_description(self, field_description):
        """Sets the field_description of this EfirDataHubModelsModelsBondTimeTableFieldsFields.

        Описание поля  # noqa: E501

        :param field_description: The field_description of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :type: str
        """

        self._field_description = field_description

    @property
    def comment(self):
        """Gets the comment of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501

        Комментарий  # noqa: E501

        :return: The comment of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EfirDataHubModelsModelsBondTimeTableFieldsFields.

        Комментарий  # noqa: E501

        :param comment: The comment of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def is_default(self):
        """Gets the is_default of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501

        Поле присутствует в выборках по-умолчанию.  # noqa: E501

        :return: The is_default of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :rtype: int
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this EfirDataHubModelsModelsBondTimeTableFieldsFields.

        Поле присутствует в выборках по-умолчанию.  # noqa: E501

        :param is_default: The is_default of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :type: int
        """

        self._is_default = is_default

    @property
    def default_with_group(self):
        """Gets the default_with_group of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501

        Тип событий (группа полей), по которому произошел дефолт  # noqa: E501

        :return: The default_with_group of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._default_with_group

    @default_with_group.setter
    def default_with_group(self, default_with_group):
        """Sets the default_with_group of this EfirDataHubModelsModelsBondTimeTableFieldsFields.

        Тип событий (группа полей), по которому произошел дефолт  # noqa: E501

        :param default_with_group: The default_with_group of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :type: str
        """

        self._default_with_group = default_with_group

    @property
    def order(self):
        """Gets the order of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501

        Порядковый номер поля в рамках группы полей по типу инструмента.  # noqa: E501

        :return: The order of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this EfirDataHubModelsModelsBondTimeTableFieldsFields.

        Порядковый номер поля в рамках группы полей по типу инструмента.  # noqa: E501

        :param order: The order of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :type: float
        """

        self._order = order

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501

        Идентификатор поля  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsBondTimeTableFieldsFields.

        Идентификатор поля  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def id_group(self):
        """Gets the id_group of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501

        Идентификатор группы полей. См.метод TimeTableFieldGroups.  # noqa: E501

        :return: The id_group of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :rtype: int
        """
        return self._id_group

    @id_group.setter
    def id_group(self, id_group):
        """Sets the id_group of this EfirDataHubModelsModelsBondTimeTableFieldsFields.

        Идентификатор группы полей. См.метод TimeTableFieldGroups.  # noqa: E501

        :param id_group: The id_group of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :type: int
        """

        self._id_group = id_group

    @property
    def id_composite_field(self):
        """Gets the id_composite_field of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501


        :return: The id_composite_field of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :rtype: int
        """
        return self._id_composite_field

    @id_composite_field.setter
    def id_composite_field(self, id_composite_field):
        """Sets the id_composite_field of this EfirDataHubModelsModelsBondTimeTableFieldsFields.


        :param id_composite_field: The id_composite_field of this EfirDataHubModelsModelsBondTimeTableFieldsFields.  # noqa: E501
        :type: int
        """

        self._id_composite_field = id_composite_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondTimeTableFieldsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondTimeTableFieldsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
