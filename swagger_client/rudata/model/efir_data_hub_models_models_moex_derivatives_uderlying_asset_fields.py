# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'basset_group_id': 'int',
        'basset_group_name': 'str',
        'basset_code': 'str',
        'basset_name': 'str',
        'basset_fintoolid': 'int',
        'bcontract_ticker': 'str',
        'bcontract_fintoolid': 'int',
        'bcontract_name': 'str',
        'o_sh_minstartdate': 'datetime',
        'o_sh_maxenddate': 'datetime',
        'o_fut_minstartdate': 'datetime',
        'o_fut_maxenddate': 'datetime',
        'basset_neg_strike': 'bool',
        'has_futures': 'bool',
        'fut_min_exp_date': 'datetime',
        'fut_max_exp_date': 'datetime',
        'spread_min_exp_date': 'datetime',
        'spread_max_exp_date': 'datetime',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'basset_group_id': 'basset_group_id',
        'basset_group_name': 'basset_group_name',
        'basset_code': 'basset_code',
        'basset_name': 'basset_name',
        'basset_fintoolid': 'basset_fintoolid',
        'bcontract_ticker': 'bcontract_ticker',
        'bcontract_fintoolid': 'bcontract_fintoolid',
        'bcontract_name': 'bcontract_name',
        'o_sh_minstartdate': 'o_sh_minstartdate',
        'o_sh_maxenddate': 'o_sh_maxenddate',
        'o_fut_minstartdate': 'o_fut_minstartdate',
        'o_fut_maxenddate': 'o_fut_maxenddate',
        'basset_neg_strike': 'basset_neg_strike',
        'has_futures': 'has_futures',
        'fut_min_exp_date': 'fut_min_exp_date',
        'fut_max_exp_date': 'fut_max_exp_date',
        'spread_min_exp_date': 'spread_min_exp_date',
        'spread_max_exp_date': 'spread_max_exp_date',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, basset_group_id=None, basset_group_name=None, basset_code=None, basset_name=None, basset_fintoolid=None, bcontract_ticker=None, bcontract_fintoolid=None, bcontract_name=None, o_sh_minstartdate=None, o_sh_maxenddate=None, o_fut_minstartdate=None, o_fut_maxenddate=None, basset_neg_strike=None, has_futures=None, fut_min_exp_date=None, fut_max_exp_date=None, spread_min_exp_date=None, spread_max_exp_date=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields - a model defined in Swagger"""  # noqa: E501
        self._basset_group_id = None
        self._basset_group_name = None
        self._basset_code = None
        self._basset_name = None
        self._basset_fintoolid = None
        self._bcontract_ticker = None
        self._bcontract_fintoolid = None
        self._bcontract_name = None
        self._o_sh_minstartdate = None
        self._o_sh_maxenddate = None
        self._o_fut_minstartdate = None
        self._o_fut_maxenddate = None
        self._basset_neg_strike = None
        self._has_futures = None
        self._fut_min_exp_date = None
        self._fut_max_exp_date = None
        self._spread_min_exp_date = None
        self._spread_max_exp_date = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if basset_group_id is not None:
            self.basset_group_id = basset_group_id
        if basset_group_name is not None:
            self.basset_group_name = basset_group_name
        if basset_code is not None:
            self.basset_code = basset_code
        if basset_name is not None:
            self.basset_name = basset_name
        if basset_fintoolid is not None:
            self.basset_fintoolid = basset_fintoolid
        if bcontract_ticker is not None:
            self.bcontract_ticker = bcontract_ticker
        if bcontract_fintoolid is not None:
            self.bcontract_fintoolid = bcontract_fintoolid
        if bcontract_name is not None:
            self.bcontract_name = bcontract_name
        if o_sh_minstartdate is not None:
            self.o_sh_minstartdate = o_sh_minstartdate
        if o_sh_maxenddate is not None:
            self.o_sh_maxenddate = o_sh_maxenddate
        if o_fut_minstartdate is not None:
            self.o_fut_minstartdate = o_fut_minstartdate
        if o_fut_maxenddate is not None:
            self.o_fut_maxenddate = o_fut_maxenddate
        if basset_neg_strike is not None:
            self.basset_neg_strike = basset_neg_strike
        if has_futures is not None:
            self.has_futures = has_futures
        if fut_min_exp_date is not None:
            self.fut_min_exp_date = fut_min_exp_date
        if fut_max_exp_date is not None:
            self.fut_max_exp_date = fut_max_exp_date
        if spread_min_exp_date is not None:
            self.spread_min_exp_date = spread_min_exp_date
        if spread_max_exp_date is not None:
            self.spread_max_exp_date = spread_max_exp_date
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def basset_group_id(self):
        """Gets the basset_group_id of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Идентификатор группы базового актива  # noqa: E501

        :return: The basset_group_id of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: int
        """
        return self._basset_group_id

    @basset_group_id.setter
    def basset_group_id(self, basset_group_id):
        """Sets the basset_group_id of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Идентификатор группы базового актива  # noqa: E501

        :param basset_group_id: The basset_group_id of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: int
        """

        self._basset_group_id = basset_group_id

    @property
    def basset_group_name(self):
        """Gets the basset_group_name of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Наименование группы базового актива  # noqa: E501

        :return: The basset_group_name of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: str
        """
        return self._basset_group_name

    @basset_group_name.setter
    def basset_group_name(self, basset_group_name):
        """Sets the basset_group_name of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Наименование группы базового актива  # noqa: E501

        :param basset_group_name: The basset_group_name of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: str
        """

        self._basset_group_name = basset_group_name

    @property
    def basset_code(self):
        """Gets the basset_code of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Короткий код базового актива  # noqa: E501

        :return: The basset_code of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: str
        """
        return self._basset_code

    @basset_code.setter
    def basset_code(self, basset_code):
        """Sets the basset_code of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Короткий код базового актива  # noqa: E501

        :param basset_code: The basset_code of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: str
        """

        self._basset_code = basset_code

    @property
    def basset_name(self):
        """Gets the basset_name of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Наименование базового актива  # noqa: E501

        :return: The basset_name of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: str
        """
        return self._basset_name

    @basset_name.setter
    def basset_name(self, basset_name):
        """Sets the basset_name of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Наименование базового актива  # noqa: E501

        :param basset_name: The basset_name of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: str
        """

        self._basset_name = basset_name

    @property
    def basset_fintoolid(self):
        """Gets the basset_fintoolid of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Идентификатор базового актива в БД Интерфакс  Для товаров, валюты, индексов, процентных ставок, валютных пар описание базового актива может быть получено с помощью метода Indicator/List  Для акций и паев ИФ см. Info/FintoolReferenceData.  # noqa: E501

        :return: The basset_fintoolid of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: int
        """
        return self._basset_fintoolid

    @basset_fintoolid.setter
    def basset_fintoolid(self, basset_fintoolid):
        """Sets the basset_fintoolid of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Идентификатор базового актива в БД Интерфакс  Для товаров, валюты, индексов, процентных ставок, валютных пар описание базового актива может быть получено с помощью метода Indicator/List  Для акций и паев ИФ см. Info/FintoolReferenceData.  # noqa: E501

        :param basset_fintoolid: The basset_fintoolid of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: int
        """

        self._basset_fintoolid = basset_fintoolid

    @property
    def bcontract_ticker(self):
        """Gets the bcontract_ticker of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Тикер базового контракта  # noqa: E501

        :return: The bcontract_ticker of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: str
        """
        return self._bcontract_ticker

    @bcontract_ticker.setter
    def bcontract_ticker(self, bcontract_ticker):
        """Sets the bcontract_ticker of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Тикер базового контракта  # noqa: E501

        :param bcontract_ticker: The bcontract_ticker of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: str
        """

        self._bcontract_ticker = bcontract_ticker

    @property
    def bcontract_fintoolid(self):
        """Gets the bcontract_fintoolid of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Идентификатор базового контракта в БД Интерфакс  # noqa: E501

        :return: The bcontract_fintoolid of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: int
        """
        return self._bcontract_fintoolid

    @bcontract_fintoolid.setter
    def bcontract_fintoolid(self, bcontract_fintoolid):
        """Sets the bcontract_fintoolid of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Идентификатор базового контракта в БД Интерфакс  # noqa: E501

        :param bcontract_fintoolid: The bcontract_fintoolid of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: int
        """

        self._bcontract_fintoolid = bcontract_fintoolid

    @property
    def bcontract_name(self):
        """Gets the bcontract_name of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Наименование базового контракта  # noqa: E501

        :return: The bcontract_name of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: str
        """
        return self._bcontract_name

    @bcontract_name.setter
    def bcontract_name(self, bcontract_name):
        """Sets the bcontract_name of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Наименование базового контракта  # noqa: E501

        :param bcontract_name: The bcontract_name of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: str
        """

        self._bcontract_name = bcontract_name

    @property
    def o_sh_minstartdate(self):
        """Gets the o_sh_minstartdate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Минимальная дата начала обращения опционов на акции  # noqa: E501

        :return: The o_sh_minstartdate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: datetime
        """
        return self._o_sh_minstartdate

    @o_sh_minstartdate.setter
    def o_sh_minstartdate(self, o_sh_minstartdate):
        """Sets the o_sh_minstartdate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Минимальная дата начала обращения опционов на акции  # noqa: E501

        :param o_sh_minstartdate: The o_sh_minstartdate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: datetime
        """

        self._o_sh_minstartdate = o_sh_minstartdate

    @property
    def o_sh_maxenddate(self):
        """Gets the o_sh_maxenddate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Максимальная дата окончания обращения опционов на акции  # noqa: E501

        :return: The o_sh_maxenddate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: datetime
        """
        return self._o_sh_maxenddate

    @o_sh_maxenddate.setter
    def o_sh_maxenddate(self, o_sh_maxenddate):
        """Sets the o_sh_maxenddate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Максимальная дата окончания обращения опционов на акции  # noqa: E501

        :param o_sh_maxenddate: The o_sh_maxenddate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: datetime
        """

        self._o_sh_maxenddate = o_sh_maxenddate

    @property
    def o_fut_minstartdate(self):
        """Gets the o_fut_minstartdate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Минимальная дата начала обращения опционов на фьючерсы  # noqa: E501

        :return: The o_fut_minstartdate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: datetime
        """
        return self._o_fut_minstartdate

    @o_fut_minstartdate.setter
    def o_fut_minstartdate(self, o_fut_minstartdate):
        """Sets the o_fut_minstartdate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Минимальная дата начала обращения опционов на фьючерсы  # noqa: E501

        :param o_fut_minstartdate: The o_fut_minstartdate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: datetime
        """

        self._o_fut_minstartdate = o_fut_minstartdate

    @property
    def o_fut_maxenddate(self):
        """Gets the o_fut_maxenddate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Максимальная дата окончания обращения опционов на фьючерсы  # noqa: E501

        :return: The o_fut_maxenddate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: datetime
        """
        return self._o_fut_maxenddate

    @o_fut_maxenddate.setter
    def o_fut_maxenddate(self, o_fut_maxenddate):
        """Sets the o_fut_maxenddate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Максимальная дата окончания обращения опционов на фьючерсы  # noqa: E501

        :param o_fut_maxenddate: The o_fut_maxenddate of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: datetime
        """

        self._o_fut_maxenddate = o_fut_maxenddate

    @property
    def basset_neg_strike(self):
        """Gets the basset_neg_strike of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Наличие отрицательного страйка  # noqa: E501

        :return: The basset_neg_strike of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: bool
        """
        return self._basset_neg_strike

    @basset_neg_strike.setter
    def basset_neg_strike(self, basset_neg_strike):
        """Sets the basset_neg_strike of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Наличие отрицательного страйка  # noqa: E501

        :param basset_neg_strike: The basset_neg_strike of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: bool
        """

        self._basset_neg_strike = basset_neg_strike

    @property
    def has_futures(self):
        """Gets the has_futures of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Наличие фьючерсов для базового контракта  # noqa: E501

        :return: The has_futures of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: bool
        """
        return self._has_futures

    @has_futures.setter
    def has_futures(self, has_futures):
        """Sets the has_futures of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Наличие фьючерсов для базового контракта  # noqa: E501

        :param has_futures: The has_futures of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: bool
        """

        self._has_futures = has_futures

    @property
    def fut_min_exp_date(self):
        """Gets the fut_min_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Минимальная дата экспирации фьючерсов  # noqa: E501

        :return: The fut_min_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: datetime
        """
        return self._fut_min_exp_date

    @fut_min_exp_date.setter
    def fut_min_exp_date(self, fut_min_exp_date):
        """Sets the fut_min_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Минимальная дата экспирации фьючерсов  # noqa: E501

        :param fut_min_exp_date: The fut_min_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: datetime
        """

        self._fut_min_exp_date = fut_min_exp_date

    @property
    def fut_max_exp_date(self):
        """Gets the fut_max_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Максимальная дата экспирации фьючерсов  # noqa: E501

        :return: The fut_max_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: datetime
        """
        return self._fut_max_exp_date

    @fut_max_exp_date.setter
    def fut_max_exp_date(self, fut_max_exp_date):
        """Sets the fut_max_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Максимальная дата экспирации фьючерсов  # noqa: E501

        :param fut_max_exp_date: The fut_max_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: datetime
        """

        self._fut_max_exp_date = fut_max_exp_date

    @property
    def spread_min_exp_date(self):
        """Gets the spread_min_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Минимальная дата экспирации спредов  # noqa: E501

        :return: The spread_min_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: datetime
        """
        return self._spread_min_exp_date

    @spread_min_exp_date.setter
    def spread_min_exp_date(self, spread_min_exp_date):
        """Sets the spread_min_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Минимальная дата экспирации спредов  # noqa: E501

        :param spread_min_exp_date: The spread_min_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: datetime
        """

        self._spread_min_exp_date = spread_min_exp_date

    @property
    def spread_max_exp_date(self):
        """Gets the spread_max_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Максимальная дата экспирации спредов  # noqa: E501

        :return: The spread_max_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: datetime
        """
        return self._spread_max_exp_date

    @spread_max_exp_date.setter
    def spread_max_exp_date(self, spread_max_exp_date):
        """Sets the spread_max_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Максимальная дата экспирации спредов  # noqa: E501

        :param spread_max_exp_date: The spread_max_exp_date of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: datetime
        """

        self._spread_max_exp_date = spread_max_exp_date

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMoexDerivativesUderlyingAssetFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
