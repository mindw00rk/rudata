# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMoexHistoryStockIndexFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'value': 'float',
        'duration': 'int',
        '_yield': 'float',
        'capitalization': 'float',
        'currencyid': 'str',
        'divisor': 'float',
        'engine': 'str',
        'market': 'str',
        'boardid': 'str',
        'decimals': 'int',
        'high': 'float',
        'low': 'float',
        'open': 'float',
        'close': 'float',
        'secid': 'str',
        'shortname': 'str',
        'tradedate': 'datetime',
        'tradingsession': 'int',
        'counter': 'int'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'duration': 'duration',
        '_yield': 'yield',
        'capitalization': 'capitalization',
        'currencyid': 'currencyid',
        'divisor': 'divisor',
        'engine': 'engine',
        'market': 'market',
        'boardid': 'boardid',
        'decimals': 'decimals',
        'high': 'high',
        'low': 'low',
        'open': 'open',
        'close': 'close',
        'secid': 'secid',
        'shortname': 'shortname',
        'tradedate': 'tradedate',
        'tradingsession': 'tradingsession',
        'counter': 'counter'
    }

    def __init__(self, name=None, value=None, duration=None, _yield=None, capitalization=None, currencyid=None, divisor=None, engine=None, market=None, boardid=None, decimals=None, high=None, low=None, open=None, close=None, secid=None, shortname=None, tradedate=None, tradingsession=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsMoexHistoryStockIndexFields - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._value = None
        self._duration = None
        self.__yield = None
        self._capitalization = None
        self._currencyid = None
        self._divisor = None
        self._engine = None
        self._market = None
        self._boardid = None
        self._decimals = None
        self._high = None
        self._low = None
        self._open = None
        self._close = None
        self._secid = None
        self._shortname = None
        self._tradedate = None
        self._tradingsession = None
        self._counter = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if duration is not None:
            self.duration = duration
        if _yield is not None:
            self._yield = _yield
        if capitalization is not None:
            self.capitalization = capitalization
        if currencyid is not None:
            self.currencyid = currencyid
        if divisor is not None:
            self.divisor = divisor
        if engine is not None:
            self.engine = engine
        if market is not None:
            self.market = market
        if boardid is not None:
            self.boardid = boardid
        if decimals is not None:
            self.decimals = decimals
        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        if open is not None:
            self.open = open
        if close is not None:
            self.close = close
        if secid is not None:
            self.secid = secid
        if shortname is not None:
            self.shortname = shortname
        if tradedate is not None:
            self.tradedate = tradedate
        if tradingsession is not None:
            self.tradingsession = tradingsession
        if counter is not None:
            self.counter = counter

    @property
    def name(self):
        """Gets the name of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Полное наименование  # noqa: E501

        :return: The name of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Полное наименование  # noqa: E501

        :param name: The name of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Объем торгов по базе расчета  # noqa: E501

        :return: The value of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Объем торгов по базе расчета  # noqa: E501

        :param value: The value of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def duration(self):
        """Gets the duration of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Средневзвешенная дюрация облигаций, включенных в базу расчета индекса  # noqa: E501

        :return: The duration of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Средневзвешенная дюрация облигаций, включенных в базу расчета индекса  # noqa: E501

        :param duration: The duration of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def _yield(self):
        """Gets the _yield of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Средневзвешенная доходность облигаций, включенных в базу расчета индекса, %  # noqa: E501

        :return: The _yield of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: float
        """
        return self.__yield

    @_yield.setter
    def _yield(self, _yield):
        """Sets the _yield of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Средневзвешенная доходность облигаций, включенных в базу расчета индекса, %  # noqa: E501

        :param _yield: The _yield of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: float
        """

        self.__yield = _yield

    @property
    def capitalization(self):
        """Gets the capitalization of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Капитализация бумаг, входящих в индекс  # noqa: E501

        :return: The capitalization of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: float
        """
        return self._capitalization

    @capitalization.setter
    def capitalization(self, capitalization):
        """Sets the capitalization of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Капитализация бумаг, входящих в индекс  # noqa: E501

        :param capitalization: The capitalization of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: float
        """

        self._capitalization = capitalization

    @property
    def currencyid(self):
        """Gets the currencyid of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Валюта расчета  # noqa: E501

        :return: The currencyid of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: str
        """
        return self._currencyid

    @currencyid.setter
    def currencyid(self, currencyid):
        """Sets the currencyid of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Валюта расчета  # noqa: E501

        :param currencyid: The currencyid of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: str
        """

        self._currencyid = currencyid

    @property
    def divisor(self):
        """Gets the divisor of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Делитель  # noqa: E501

        :return: The divisor of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: float
        """
        return self._divisor

    @divisor.setter
    def divisor(self, divisor):
        """Sets the divisor of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Делитель  # noqa: E501

        :param divisor: The divisor of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: float
        """

        self._divisor = divisor

    @property
    def engine(self):
        """Gets the engine of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501


        :return: The engine of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.


        :param engine: The engine of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def market(self):
        """Gets the market of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501


        :return: The market of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.


        :param market: The market of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def boardid(self):
        """Gets the boardid of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501


        :return: The boardid of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: str
        """
        return self._boardid

    @boardid.setter
    def boardid(self, boardid):
        """Sets the boardid of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.


        :param boardid: The boardid of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: str
        """

        self._boardid = boardid

    @property
    def decimals(self):
        """Gets the decimals of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Точность, знаков после запятой  # noqa: E501

        :return: The decimals of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Точность, знаков после запятой  # noqa: E501

        :param decimals: The decimals of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    @property
    def high(self):
        """Gets the high of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Цена сделки максимальная  # noqa: E501

        :return: The high of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Цена сделки максимальная  # noqa: E501

        :param high: The high of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: float
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Цена сделки минимальная  # noqa: E501

        :return: The low of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Цена сделки минимальная  # noqa: E501

        :param low: The low of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: float
        """

        self._low = low

    @property
    def open(self):
        """Gets the open of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Цена предторгового периода/Цена аукциона открытия  # noqa: E501

        :return: The open of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Цена предторгового периода/Цена аукциона открытия  # noqa: E501

        :param open: The open of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def close(self):
        """Gets the close of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Цена последней сделки  # noqa: E501

        :return: The close of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Цена последней сделки  # noqa: E501

        :param close: The close of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: float
        """

        self._close = close

    @property
    def secid(self):
        """Gets the secid of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Идентификатор финансового инструмента  # noqa: E501

        :return: The secid of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: str
        """
        return self._secid

    @secid.setter
    def secid(self, secid):
        """Sets the secid of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Идентификатор финансового инструмента  # noqa: E501

        :param secid: The secid of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: str
        """

        self._secid = secid

    @property
    def shortname(self):
        """Gets the shortname of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Краткое наименование  # noqa: E501

        :return: The shortname of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname):
        """Sets the shortname of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Краткое наименование  # noqa: E501

        :param shortname: The shortname of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: str
        """

        self._shortname = shortname

    @property
    def tradedate(self):
        """Gets the tradedate of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Дата торгов  # noqa: E501

        :return: The tradedate of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: datetime
        """
        return self._tradedate

    @tradedate.setter
    def tradedate(self, tradedate):
        """Sets the tradedate of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Дата торгов  # noqa: E501

        :param tradedate: The tradedate of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: datetime
        """

        self._tradedate = tradedate

    @property
    def tradingsession(self):
        """Gets the tradingsession of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Номер сессии (1 - основная, 2 - вечерняя, 3 - общие итоги)  # noqa: E501

        :return: The tradingsession of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: int
        """
        return self._tradingsession

    @tradingsession.setter
    def tradingsession(self, tradingsession):
        """Sets the tradingsession of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Номер сессии (1 - основная, 2 - вечерняя, 3 - общие итоги)  # noqa: E501

        :param tradingsession: The tradingsession of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: int
        """

        self._tradingsession = tradingsession

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501

        Общее количество записей в выборке, если указан pageNum = 1. Иначе = null  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.

        Общее количество записей в выборке, если указан pageNum = 1. Иначе = null  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsMoexHistoryStockIndexFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMoexHistoryStockIndexFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMoexHistoryStockIndexFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
