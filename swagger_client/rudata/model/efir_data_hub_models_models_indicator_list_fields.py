# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsIndicatorListFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintoolid': 'int',
        'fininstid': 'int',
        'fullname': 'str',
        'nickname': 'str',
        'enickname': 'str',
        'country': 'str',
        'begdistdate': 'datetime',
        'endmtydate': 'datetime',
        'status': 'str',
        'facevalue': 'float',
        'isincode': 'str',
        'faceftname': 'str',
        'id_iss': 'int',
        'hasconstituents': 'int',
        'indicatorkind_id': 'int',
        'indicatorkind': 'str',
        'indicatortype_id': 'int',
        'indicatortype': 'str',
        'termtype_id': 'int',
        'termtype': 'str',
        'discounttype_id': 'int',
        'discounttype': 'str',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'fintoolid': 'fintoolid',
        'fininstid': 'fininstid',
        'fullname': 'fullname',
        'nickname': 'nickname',
        'enickname': 'enickname',
        'country': 'country',
        'begdistdate': 'begdistdate',
        'endmtydate': 'endmtydate',
        'status': 'status',
        'facevalue': 'facevalue',
        'isincode': 'isincode',
        'faceftname': 'faceftname',
        'id_iss': 'id_iss',
        'hasconstituents': 'hasconstituents',
        'indicatorkind_id': 'indicatorkind_id',
        'indicatorkind': 'indicatorkind',
        'indicatortype_id': 'indicatortype_id',
        'indicatortype': 'indicatortype',
        'termtype_id': 'termtype_id',
        'termtype': 'termtype',
        'discounttype_id': 'discounttype_id',
        'discounttype': 'discounttype',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, fintoolid=None, fininstid=None, fullname=None, nickname=None, enickname=None, country=None, begdistdate=None, endmtydate=None, status=None, facevalue=None, isincode=None, faceftname=None, id_iss=None, hasconstituents=None, indicatorkind_id=None, indicatorkind=None, indicatortype_id=None, indicatortype=None, termtype_id=None, termtype=None, discounttype_id=None, discounttype=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsIndicatorListFields - a model defined in Swagger"""  # noqa: E501
        self._fintoolid = None
        self._fininstid = None
        self._fullname = None
        self._nickname = None
        self._enickname = None
        self._country = None
        self._begdistdate = None
        self._endmtydate = None
        self._status = None
        self._facevalue = None
        self._isincode = None
        self._faceftname = None
        self._id_iss = None
        self._hasconstituents = None
        self._indicatorkind_id = None
        self._indicatorkind = None
        self._indicatortype_id = None
        self._indicatortype = None
        self._termtype_id = None
        self._termtype = None
        self._discounttype_id = None
        self._discounttype = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if fininstid is not None:
            self.fininstid = fininstid
        if fullname is not None:
            self.fullname = fullname
        if nickname is not None:
            self.nickname = nickname
        if enickname is not None:
            self.enickname = enickname
        if country is not None:
            self.country = country
        if begdistdate is not None:
            self.begdistdate = begdistdate
        if endmtydate is not None:
            self.endmtydate = endmtydate
        if status is not None:
            self.status = status
        if facevalue is not None:
            self.facevalue = facevalue
        if isincode is not None:
            self.isincode = isincode
        if faceftname is not None:
            self.faceftname = faceftname
        if id_iss is not None:
            self.id_iss = id_iss
        if hasconstituents is not None:
            self.hasconstituents = hasconstituents
        if indicatorkind_id is not None:
            self.indicatorkind_id = indicatorkind_id
        if indicatorkind is not None:
            self.indicatorkind = indicatorkind
        if indicatortype_id is not None:
            self.indicatortype_id = indicatortype_id
        if indicatortype is not None:
            self.indicatortype = indicatortype
        if termtype_id is not None:
            self.termtype_id = termtype_id
        if termtype is not None:
            self.termtype = termtype
        if discounttype_id is not None:
            self.discounttype_id = discounttype_id
        if discounttype is not None:
            self.discounttype = discounttype
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Идентификатор индикатора в базе Интерфакс  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsIndicatorListFields.

        Идентификатор индикатора в базе Интерфакс  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def fininstid(self):
        """Gets the fininstid of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Идентификатор организации в базе Интерфакс  # noqa: E501

        :return: The fininstid of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid

    @fininstid.setter
    def fininstid(self, fininstid):
        """Sets the fininstid of this EfirDataHubModelsModelsIndicatorListFields.

        Идентификатор организации в базе Интерфакс  # noqa: E501

        :param fininstid: The fininstid of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: int
        """

        self._fininstid = fininstid

    @property
    def fullname(self):
        """Gets the fullname of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Полное наименование индикатора (рус.)  # noqa: E501

        :return: The fullname of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this EfirDataHubModelsModelsIndicatorListFields.

        Полное наименование индикатора (рус.)  # noqa: E501

        :param fullname: The fullname of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def nickname(self):
        """Gets the nickname of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Краткое наименование индикатора (рус.)  # noqa: E501

        :return: The nickname of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this EfirDataHubModelsModelsIndicatorListFields.

        Краткое наименование индикатора (рус.)  # noqa: E501

        :param nickname: The nickname of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def enickname(self):
        """Gets the enickname of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Краткое наименование индикатора (анг.)  # noqa: E501

        :return: The enickname of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: str
        """
        return self._enickname

    @enickname.setter
    def enickname(self, enickname):
        """Sets the enickname of this EfirDataHubModelsModelsIndicatorListFields.

        Краткое наименование индикатора (анг.)  # noqa: E501

        :param enickname: The enickname of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: str
        """

        self._enickname = enickname

    @property
    def country(self):
        """Gets the country of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Двухбуквенный код страны в соответствии с ОКСМ  # noqa: E501

        :return: The country of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EfirDataHubModelsModelsIndicatorListFields.

        Двухбуквенный код страны в соответствии с ОКСМ  # noqa: E501

        :param country: The country of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def begdistdate(self):
        """Gets the begdistdate of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Дата начала действия  # noqa: E501

        :return: The begdistdate of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: datetime
        """
        return self._begdistdate

    @begdistdate.setter
    def begdistdate(self, begdistdate):
        """Sets the begdistdate of this EfirDataHubModelsModelsIndicatorListFields.

        Дата начала действия  # noqa: E501

        :param begdistdate: The begdistdate of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: datetime
        """

        self._begdistdate = begdistdate

    @property
    def endmtydate(self):
        """Gets the endmtydate of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Дата окончания действия  # noqa: E501

        :return: The endmtydate of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: datetime
        """
        return self._endmtydate

    @endmtydate.setter
    def endmtydate(self, endmtydate):
        """Sets the endmtydate of this EfirDataHubModelsModelsIndicatorListFields.

        Дата окончания действия  # noqa: E501

        :param endmtydate: The endmtydate of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: datetime
        """

        self._endmtydate = endmtydate

    @property
    def status(self):
        """Gets the status of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Статус  # noqa: E501

        :return: The status of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EfirDataHubModelsModelsIndicatorListFields.

        Статус  # noqa: E501

        :param status: The status of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def facevalue(self):
        """Gets the facevalue of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Номинал  # noqa: E501

        :return: The facevalue of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: float
        """
        return self._facevalue

    @facevalue.setter
    def facevalue(self, facevalue):
        """Sets the facevalue of this EfirDataHubModelsModelsIndicatorListFields.

        Номинал  # noqa: E501

        :param facevalue: The facevalue of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: float
        """

        self._facevalue = facevalue

    @property
    def isincode(self):
        """Gets the isincode of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        ISIN  # noqa: E501

        :return: The isincode of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: str
        """
        return self._isincode

    @isincode.setter
    def isincode(self, isincode):
        """Sets the isincode of this EfirDataHubModelsModelsIndicatorListFields.

        ISIN  # noqa: E501

        :param isincode: The isincode of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: str
        """

        self._isincode = isincode

    @property
    def faceftname(self):
        """Gets the faceftname of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Валюта номинала  # noqa: E501

        :return: The faceftname of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: str
        """
        return self._faceftname

    @faceftname.setter
    def faceftname(self, faceftname):
        """Sets the faceftname of this EfirDataHubModelsModelsIndicatorListFields.

        Валюта номинала  # noqa: E501

        :param faceftname: The faceftname of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: str
        """

        self._faceftname = faceftname

    @property
    def id_iss(self):
        """Gets the id_iss of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Идентификатор соответствующего торгового инструмента в базе Интерфакс  # noqa: E501

        :return: The id_iss of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: int
        """
        return self._id_iss

    @id_iss.setter
    def id_iss(self, id_iss):
        """Sets the id_iss of this EfirDataHubModelsModelsIndicatorListFields.

        Идентификатор соответствующего торгового инструмента в базе Интерфакс  # noqa: E501

        :param id_iss: The id_iss of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: int
        """

        self._id_iss = id_iss

    @property
    def hasconstituents(self):
        """Gets the hasconstituents of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Индикатор (индекс) имеет составные части (0/1)  # noqa: E501

        :return: The hasconstituents of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: int
        """
        return self._hasconstituents

    @hasconstituents.setter
    def hasconstituents(self, hasconstituents):
        """Sets the hasconstituents of this EfirDataHubModelsModelsIndicatorListFields.

        Индикатор (индекс) имеет составные части (0/1)  # noqa: E501

        :param hasconstituents: The hasconstituents of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: int
        """

        self._hasconstituents = hasconstituents

    @property
    def indicatorkind_id(self):
        """Gets the indicatorkind_id of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Идентификатор вида индикатора  # noqa: E501

        :return: The indicatorkind_id of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: int
        """
        return self._indicatorkind_id

    @indicatorkind_id.setter
    def indicatorkind_id(self, indicatorkind_id):
        """Sets the indicatorkind_id of this EfirDataHubModelsModelsIndicatorListFields.

        Идентификатор вида индикатора  # noqa: E501

        :param indicatorkind_id: The indicatorkind_id of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: int
        """

        self._indicatorkind_id = indicatorkind_id

    @property
    def indicatorkind(self):
        """Gets the indicatorkind of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Наименование вида индикатора  # noqa: E501

        :return: The indicatorkind of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: str
        """
        return self._indicatorkind

    @indicatorkind.setter
    def indicatorkind(self, indicatorkind):
        """Sets the indicatorkind of this EfirDataHubModelsModelsIndicatorListFields.

        Наименование вида индикатора  # noqa: E501

        :param indicatorkind: The indicatorkind of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: str
        """

        self._indicatorkind = indicatorkind

    @property
    def indicatortype_id(self):
        """Gets the indicatortype_id of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Идентификатор типа актива  # noqa: E501

        :return: The indicatortype_id of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: int
        """
        return self._indicatortype_id

    @indicatortype_id.setter
    def indicatortype_id(self, indicatortype_id):
        """Sets the indicatortype_id of this EfirDataHubModelsModelsIndicatorListFields.

        Идентификатор типа актива  # noqa: E501

        :param indicatortype_id: The indicatortype_id of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: int
        """

        self._indicatortype_id = indicatortype_id

    @property
    def indicatortype(self):
        """Gets the indicatortype of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Наименование типа актива  # noqa: E501

        :return: The indicatortype of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: str
        """
        return self._indicatortype

    @indicatortype.setter
    def indicatortype(self, indicatortype):
        """Sets the indicatortype of this EfirDataHubModelsModelsIndicatorListFields.

        Наименование типа актива  # noqa: E501

        :param indicatortype: The indicatortype of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: str
        """

        self._indicatortype = indicatortype

    @property
    def termtype_id(self):
        """Gets the termtype_id of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Идентификатор типа срочности  # noqa: E501

        :return: The termtype_id of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: int
        """
        return self._termtype_id

    @termtype_id.setter
    def termtype_id(self, termtype_id):
        """Sets the termtype_id of this EfirDataHubModelsModelsIndicatorListFields.

        Идентификатор типа срочности  # noqa: E501

        :param termtype_id: The termtype_id of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: int
        """

        self._termtype_id = termtype_id

    @property
    def termtype(self):
        """Gets the termtype of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Наименование типа срочности  # noqa: E501

        :return: The termtype of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: str
        """
        return self._termtype

    @termtype.setter
    def termtype(self, termtype):
        """Sets the termtype of this EfirDataHubModelsModelsIndicatorListFields.

        Наименование типа срочности  # noqa: E501

        :param termtype: The termtype of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: str
        """

        self._termtype = termtype

    @property
    def discounttype_id(self):
        """Gets the discounttype_id of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Идентификатор типа дисконта  # noqa: E501

        :return: The discounttype_id of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: int
        """
        return self._discounttype_id

    @discounttype_id.setter
    def discounttype_id(self, discounttype_id):
        """Sets the discounttype_id of this EfirDataHubModelsModelsIndicatorListFields.

        Идентификатор типа дисконта  # noqa: E501

        :param discounttype_id: The discounttype_id of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: int
        """

        self._discounttype_id = discounttype_id

    @property
    def discounttype(self):
        """Gets the discounttype of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Наименование типа дисконта  # noqa: E501

        :return: The discounttype of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: str
        """
        return self._discounttype

    @discounttype.setter
    def discounttype(self, discounttype):
        """Sets the discounttype of this EfirDataHubModelsModelsIndicatorListFields.

        Наименование типа дисконта  # noqa: E501

        :param discounttype: The discounttype of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: str
        """

        self._discounttype = discounttype

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsIndicatorListFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsIndicatorListFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsIndicatorListFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsIndicatorListFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsIndicatorListFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
