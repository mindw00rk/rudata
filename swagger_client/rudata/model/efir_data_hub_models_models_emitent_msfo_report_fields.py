# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsEmitentMsfoReportFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'fininst_id': 'int',
        'inn': 'str',
        'ogrn': 'str',
        'shortname_rus': 'str',
        'period_begin': 'datetime',
        'period_end': 'datetime',
        'power': 'float',
        'period_name': 'str',
        'cash_equivalents': 'float',
        'short_term_investments': 'float',
        'inventories': 'float',
        'receivables': 'float',
        'other_current_assets': 'float',
        'total_current_assets': 'float',
        'fixed_assets': 'float',
        'other_non_current_assets': 'float',
        'total_assets': 'float',
        'accounts_payable': 'float',
        'short_term_loans': 'float',
        'other_short_term_liabilities': 'float',
        'total_short_term_liabilities': 'float',
        'long_term_loans': 'float',
        'other_long_term_liabilities': 'float',
        'total_liabilities': 'float',
        'total_equity': 'float',
        'total_liabilities_and_equity': 'float',
        'share_minority_shareholders': 'float',
        'revenue': 'float',
        'ebit': 'float',
        'net_income': 'float',
        'net_income_shareholders': 'float',
        'amortization': 'float',
        'interest_expense': 'float',
        'income_tax_expense': 'float',
        'exchange_differences': 'float',
        'share_minority_shareholders_2': 'float',
        'dividends': 'float',
        'avg_issue_volume': 'float',
        'earn_per_share_rub': 'float',
        'cash_operating_activities': 'float',
        'cash_investing_activities': 'float',
        'cash_financial_activities': 'float',
        'cash_increase': 'float',
        'cash_begin_period': 'float',
        'cash_end_period': 'float',
        'admin_expenses': 'float',
        'operating_expenses': 'float',
        'currency': 'str',
        'source_link': 'str'
    }

    attribute_map = {
        'id': 'id',
        'fininst_id': 'fininstId',
        'inn': 'inn',
        'ogrn': 'ogrn',
        'shortname_rus': 'shortname_rus',
        'period_begin': 'period_begin',
        'period_end': 'period_end',
        'power': 'power',
        'period_name': 'period_name',
        'cash_equivalents': 'cash_equivalents',
        'short_term_investments': 'short_term_investments',
        'inventories': 'inventories',
        'receivables': 'receivables',
        'other_current_assets': 'other_current_assets',
        'total_current_assets': 'total_current_assets',
        'fixed_assets': 'fixed_assets',
        'other_non_current_assets': 'other_non_current_assets',
        'total_assets': 'total_assets',
        'accounts_payable': 'accounts_payable',
        'short_term_loans': 'short_term_loans',
        'other_short_term_liabilities': 'other_short_term_liabilities',
        'total_short_term_liabilities': 'total_short_term_liabilities',
        'long_term_loans': 'long_term_loans',
        'other_long_term_liabilities': 'other_long_term_liabilities',
        'total_liabilities': 'total_liabilities',
        'total_equity': 'total_equity',
        'total_liabilities_and_equity': 'total_liabilities_and_equity',
        'share_minority_shareholders': 'share_minority_shareholders',
        'revenue': 'revenue',
        'ebit': 'ebit',
        'net_income': 'net_income',
        'net_income_shareholders': 'net_income_shareholders',
        'amortization': 'amortization',
        'interest_expense': 'interest_expense',
        'income_tax_expense': 'income_tax_expense',
        'exchange_differences': 'exchange_differences',
        'share_minority_shareholders_2': 'share_minority_shareholders_2',
        'dividends': 'dividends',
        'avg_issue_volume': 'avg_issue_volume',
        'earn_per_share_rub': 'earn_per_share_rub',
        'cash_operating_activities': 'cash_operating_activities',
        'cash_investing_activities': 'cash_investing_activities',
        'cash_financial_activities': 'cash_financial_activities',
        'cash_increase': 'cash_increase',
        'cash_begin_period': 'cash_begin_period',
        'cash_end_period': 'cash_end_period',
        'admin_expenses': 'admin_expenses',
        'operating_expenses': 'operating_expenses',
        'currency': 'currency',
        'source_link': 'source_link'
    }

    def __init__(self, id=None, fininst_id=None, inn=None, ogrn=None, shortname_rus=None, period_begin=None, period_end=None, power=None, period_name=None, cash_equivalents=None, short_term_investments=None, inventories=None, receivables=None, other_current_assets=None, total_current_assets=None, fixed_assets=None, other_non_current_assets=None, total_assets=None, accounts_payable=None, short_term_loans=None, other_short_term_liabilities=None, total_short_term_liabilities=None, long_term_loans=None, other_long_term_liabilities=None, total_liabilities=None, total_equity=None, total_liabilities_and_equity=None, share_minority_shareholders=None, revenue=None, ebit=None, net_income=None, net_income_shareholders=None, amortization=None, interest_expense=None, income_tax_expense=None, exchange_differences=None, share_minority_shareholders_2=None, dividends=None, avg_issue_volume=None, earn_per_share_rub=None, cash_operating_activities=None, cash_investing_activities=None, cash_financial_activities=None, cash_increase=None, cash_begin_period=None, cash_end_period=None, admin_expenses=None, operating_expenses=None, currency=None, source_link=None):  # noqa: E501
        """EfirDataHubModelsModelsEmitentMsfoReportFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._fininst_id = None
        self._inn = None
        self._ogrn = None
        self._shortname_rus = None
        self._period_begin = None
        self._period_end = None
        self._power = None
        self._period_name = None
        self._cash_equivalents = None
        self._short_term_investments = None
        self._inventories = None
        self._receivables = None
        self._other_current_assets = None
        self._total_current_assets = None
        self._fixed_assets = None
        self._other_non_current_assets = None
        self._total_assets = None
        self._accounts_payable = None
        self._short_term_loans = None
        self._other_short_term_liabilities = None
        self._total_short_term_liabilities = None
        self._long_term_loans = None
        self._other_long_term_liabilities = None
        self._total_liabilities = None
        self._total_equity = None
        self._total_liabilities_and_equity = None
        self._share_minority_shareholders = None
        self._revenue = None
        self._ebit = None
        self._net_income = None
        self._net_income_shareholders = None
        self._amortization = None
        self._interest_expense = None
        self._income_tax_expense = None
        self._exchange_differences = None
        self._share_minority_shareholders_2 = None
        self._dividends = None
        self._avg_issue_volume = None
        self._earn_per_share_rub = None
        self._cash_operating_activities = None
        self._cash_investing_activities = None
        self._cash_financial_activities = None
        self._cash_increase = None
        self._cash_begin_period = None
        self._cash_end_period = None
        self._admin_expenses = None
        self._operating_expenses = None
        self._currency = None
        self._source_link = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if fininst_id is not None:
            self.fininst_id = fininst_id
        if inn is not None:
            self.inn = inn
        if ogrn is not None:
            self.ogrn = ogrn
        if shortname_rus is not None:
            self.shortname_rus = shortname_rus
        if period_begin is not None:
            self.period_begin = period_begin
        if period_end is not None:
            self.period_end = period_end
        if power is not None:
            self.power = power
        if period_name is not None:
            self.period_name = period_name
        if cash_equivalents is not None:
            self.cash_equivalents = cash_equivalents
        if short_term_investments is not None:
            self.short_term_investments = short_term_investments
        if inventories is not None:
            self.inventories = inventories
        if receivables is not None:
            self.receivables = receivables
        if other_current_assets is not None:
            self.other_current_assets = other_current_assets
        if total_current_assets is not None:
            self.total_current_assets = total_current_assets
        if fixed_assets is not None:
            self.fixed_assets = fixed_assets
        if other_non_current_assets is not None:
            self.other_non_current_assets = other_non_current_assets
        if total_assets is not None:
            self.total_assets = total_assets
        if accounts_payable is not None:
            self.accounts_payable = accounts_payable
        if short_term_loans is not None:
            self.short_term_loans = short_term_loans
        if other_short_term_liabilities is not None:
            self.other_short_term_liabilities = other_short_term_liabilities
        if total_short_term_liabilities is not None:
            self.total_short_term_liabilities = total_short_term_liabilities
        if long_term_loans is not None:
            self.long_term_loans = long_term_loans
        if other_long_term_liabilities is not None:
            self.other_long_term_liabilities = other_long_term_liabilities
        if total_liabilities is not None:
            self.total_liabilities = total_liabilities
        if total_equity is not None:
            self.total_equity = total_equity
        if total_liabilities_and_equity is not None:
            self.total_liabilities_and_equity = total_liabilities_and_equity
        if share_minority_shareholders is not None:
            self.share_minority_shareholders = share_minority_shareholders
        if revenue is not None:
            self.revenue = revenue
        if ebit is not None:
            self.ebit = ebit
        if net_income is not None:
            self.net_income = net_income
        if net_income_shareholders is not None:
            self.net_income_shareholders = net_income_shareholders
        if amortization is not None:
            self.amortization = amortization
        if interest_expense is not None:
            self.interest_expense = interest_expense
        if income_tax_expense is not None:
            self.income_tax_expense = income_tax_expense
        if exchange_differences is not None:
            self.exchange_differences = exchange_differences
        if share_minority_shareholders_2 is not None:
            self.share_minority_shareholders_2 = share_minority_shareholders_2
        if dividends is not None:
            self.dividends = dividends
        if avg_issue_volume is not None:
            self.avg_issue_volume = avg_issue_volume
        if earn_per_share_rub is not None:
            self.earn_per_share_rub = earn_per_share_rub
        if cash_operating_activities is not None:
            self.cash_operating_activities = cash_operating_activities
        if cash_investing_activities is not None:
            self.cash_investing_activities = cash_investing_activities
        if cash_financial_activities is not None:
            self.cash_financial_activities = cash_financial_activities
        if cash_increase is not None:
            self.cash_increase = cash_increase
        if cash_begin_period is not None:
            self.cash_begin_period = cash_begin_period
        if cash_end_period is not None:
            self.cash_end_period = cash_end_period
        if admin_expenses is not None:
            self.admin_expenses = admin_expenses
        if operating_expenses is not None:
            self.operating_expenses = operating_expenses
        if currency is not None:
            self.currency = currency
        if source_link is not None:
            self.source_link = source_link

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Идентификатор отчетности  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Идентификатор отчетности  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def fininst_id(self):
        """Gets the fininst_id of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Идентификатор организации в базе Интерфакс  # noqa: E501

        :return: The fininst_id of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: int
        """
        return self._fininst_id

    @fininst_id.setter
    def fininst_id(self, fininst_id):
        """Sets the fininst_id of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Идентификатор организации в базе Интерфакс  # noqa: E501

        :param fininst_id: The fininst_id of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: int
        """

        self._fininst_id = fininst_id

    @property
    def inn(self):
        """Gets the inn of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        ИНН  # noqa: E501

        :return: The inn of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: str
        """
        return self._inn

    @inn.setter
    def inn(self, inn):
        """Sets the inn of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        ИНН  # noqa: E501

        :param inn: The inn of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: str
        """

        self._inn = inn

    @property
    def ogrn(self):
        """Gets the ogrn of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        ОГРН  # noqa: E501

        :return: The ogrn of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: str
        """
        return self._ogrn

    @ogrn.setter
    def ogrn(self, ogrn):
        """Sets the ogrn of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        ОГРН  # noqa: E501

        :param ogrn: The ogrn of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: str
        """

        self._ogrn = ogrn

    @property
    def shortname_rus(self):
        """Gets the shortname_rus of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Краткое наименование организации  # noqa: E501

        :return: The shortname_rus of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_rus

    @shortname_rus.setter
    def shortname_rus(self, shortname_rus):
        """Sets the shortname_rus of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Краткое наименование организации  # noqa: E501

        :param shortname_rus: The shortname_rus of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: str
        """

        self._shortname_rus = shortname_rus

    @property
    def period_begin(self):
        """Gets the period_begin of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Дата начала отчетного периода  # noqa: E501

        :return: The period_begin of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: datetime
        """
        return self._period_begin

    @period_begin.setter
    def period_begin(self, period_begin):
        """Sets the period_begin of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Дата начала отчетного периода  # noqa: E501

        :param period_begin: The period_begin of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: datetime
        """

        self._period_begin = period_begin

    @property
    def period_end(self):
        """Gets the period_end of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Дата окончания отчетного периода  # noqa: E501

        :return: The period_end of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Дата окончания отчетного периода  # noqa: E501

        :param period_end: The period_end of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: datetime
        """

        self._period_end = period_end

    @property
    def power(self):
        """Gets the power of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Множитель  # noqa: E501

        :return: The power of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Множитель  # noqa: E501

        :param power: The power of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._power = power

    @property
    def period_name(self):
        """Gets the period_name of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Наименование отчетного периода  # noqa: E501

        :return: The period_name of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: str
        """
        return self._period_name

    @period_name.setter
    def period_name(self, period_name):
        """Sets the period_name of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Наименование отчетного периода  # noqa: E501

        :param period_name: The period_name of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: str
        """

        self._period_name = period_name

    @property
    def cash_equivalents(self):
        """Gets the cash_equivalents of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Денежные средства и их эквиваленты  # noqa: E501

        :return: The cash_equivalents of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._cash_equivalents

    @cash_equivalents.setter
    def cash_equivalents(self, cash_equivalents):
        """Sets the cash_equivalents of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Денежные средства и их эквиваленты  # noqa: E501

        :param cash_equivalents: The cash_equivalents of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._cash_equivalents = cash_equivalents

    @property
    def short_term_investments(self):
        """Gets the short_term_investments of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Краткосрочные финансовые вложения  # noqa: E501

        :return: The short_term_investments of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._short_term_investments

    @short_term_investments.setter
    def short_term_investments(self, short_term_investments):
        """Sets the short_term_investments of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Краткосрочные финансовые вложения  # noqa: E501

        :param short_term_investments: The short_term_investments of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._short_term_investments = short_term_investments

    @property
    def inventories(self):
        """Gets the inventories of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Запасы  # noqa: E501

        :return: The inventories of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._inventories

    @inventories.setter
    def inventories(self, inventories):
        """Sets the inventories of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Запасы  # noqa: E501

        :param inventories: The inventories of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._inventories = inventories

    @property
    def receivables(self):
        """Gets the receivables of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Дебиторская задолженность  # noqa: E501

        :return: The receivables of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._receivables

    @receivables.setter
    def receivables(self, receivables):
        """Sets the receivables of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Дебиторская задолженность  # noqa: E501

        :param receivables: The receivables of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._receivables = receivables

    @property
    def other_current_assets(self):
        """Gets the other_current_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Прочие оборотные активы  # noqa: E501

        :return: The other_current_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._other_current_assets

    @other_current_assets.setter
    def other_current_assets(self, other_current_assets):
        """Sets the other_current_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Прочие оборотные активы  # noqa: E501

        :param other_current_assets: The other_current_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._other_current_assets = other_current_assets

    @property
    def total_current_assets(self):
        """Gets the total_current_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Итого оборотные активы  # noqa: E501

        :return: The total_current_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._total_current_assets

    @total_current_assets.setter
    def total_current_assets(self, total_current_assets):
        """Sets the total_current_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Итого оборотные активы  # noqa: E501

        :param total_current_assets: The total_current_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._total_current_assets = total_current_assets

    @property
    def fixed_assets(self):
        """Gets the fixed_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Основные средства  # noqa: E501

        :return: The fixed_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._fixed_assets

    @fixed_assets.setter
    def fixed_assets(self, fixed_assets):
        """Sets the fixed_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Основные средства  # noqa: E501

        :param fixed_assets: The fixed_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._fixed_assets = fixed_assets

    @property
    def other_non_current_assets(self):
        """Gets the other_non_current_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Прочие внеоборотные активы  # noqa: E501

        :return: The other_non_current_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._other_non_current_assets

    @other_non_current_assets.setter
    def other_non_current_assets(self, other_non_current_assets):
        """Sets the other_non_current_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Прочие внеоборотные активы  # noqa: E501

        :param other_non_current_assets: The other_non_current_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._other_non_current_assets = other_non_current_assets

    @property
    def total_assets(self):
        """Gets the total_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Итого  активы  # noqa: E501

        :return: The total_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._total_assets

    @total_assets.setter
    def total_assets(self, total_assets):
        """Sets the total_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Итого  активы  # noqa: E501

        :param total_assets: The total_assets of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._total_assets = total_assets

    @property
    def accounts_payable(self):
        """Gets the accounts_payable of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Кредиторская задолженность  # noqa: E501

        :return: The accounts_payable of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._accounts_payable

    @accounts_payable.setter
    def accounts_payable(self, accounts_payable):
        """Sets the accounts_payable of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Кредиторская задолженность  # noqa: E501

        :param accounts_payable: The accounts_payable of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._accounts_payable = accounts_payable

    @property
    def short_term_loans(self):
        """Gets the short_term_loans of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Краткосрочные кредиты и займы  # noqa: E501

        :return: The short_term_loans of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._short_term_loans

    @short_term_loans.setter
    def short_term_loans(self, short_term_loans):
        """Sets the short_term_loans of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Краткосрочные кредиты и займы  # noqa: E501

        :param short_term_loans: The short_term_loans of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._short_term_loans = short_term_loans

    @property
    def other_short_term_liabilities(self):
        """Gets the other_short_term_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Прочие краткосрочные обязательства  # noqa: E501

        :return: The other_short_term_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._other_short_term_liabilities

    @other_short_term_liabilities.setter
    def other_short_term_liabilities(self, other_short_term_liabilities):
        """Sets the other_short_term_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Прочие краткосрочные обязательства  # noqa: E501

        :param other_short_term_liabilities: The other_short_term_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._other_short_term_liabilities = other_short_term_liabilities

    @property
    def total_short_term_liabilities(self):
        """Gets the total_short_term_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Итого краткосрочные обязательства  # noqa: E501

        :return: The total_short_term_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._total_short_term_liabilities

    @total_short_term_liabilities.setter
    def total_short_term_liabilities(self, total_short_term_liabilities):
        """Sets the total_short_term_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Итого краткосрочные обязательства  # noqa: E501

        :param total_short_term_liabilities: The total_short_term_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._total_short_term_liabilities = total_short_term_liabilities

    @property
    def long_term_loans(self):
        """Gets the long_term_loans of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Долгосрочные кредиты и займы  # noqa: E501

        :return: The long_term_loans of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._long_term_loans

    @long_term_loans.setter
    def long_term_loans(self, long_term_loans):
        """Sets the long_term_loans of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Долгосрочные кредиты и займы  # noqa: E501

        :param long_term_loans: The long_term_loans of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._long_term_loans = long_term_loans

    @property
    def other_long_term_liabilities(self):
        """Gets the other_long_term_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Прочие долгосрочные обязательства  # noqa: E501

        :return: The other_long_term_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._other_long_term_liabilities

    @other_long_term_liabilities.setter
    def other_long_term_liabilities(self, other_long_term_liabilities):
        """Sets the other_long_term_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Прочие долгосрочные обязательства  # noqa: E501

        :param other_long_term_liabilities: The other_long_term_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._other_long_term_liabilities = other_long_term_liabilities

    @property
    def total_liabilities(self):
        """Gets the total_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Итого обязательства  # noqa: E501

        :return: The total_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._total_liabilities

    @total_liabilities.setter
    def total_liabilities(self, total_liabilities):
        """Sets the total_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Итого обязательства  # noqa: E501

        :param total_liabilities: The total_liabilities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._total_liabilities = total_liabilities

    @property
    def total_equity(self):
        """Gets the total_equity of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Итого акционерный капитал  # noqa: E501

        :return: The total_equity of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._total_equity

    @total_equity.setter
    def total_equity(self, total_equity):
        """Sets the total_equity of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Итого акционерный капитал  # noqa: E501

        :param total_equity: The total_equity of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._total_equity = total_equity

    @property
    def total_liabilities_and_equity(self):
        """Gets the total_liabilities_and_equity of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Итого обязательства и акционерный капитал  # noqa: E501

        :return: The total_liabilities_and_equity of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._total_liabilities_and_equity

    @total_liabilities_and_equity.setter
    def total_liabilities_and_equity(self, total_liabilities_and_equity):
        """Sets the total_liabilities_and_equity of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Итого обязательства и акционерный капитал  # noqa: E501

        :param total_liabilities_and_equity: The total_liabilities_and_equity of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._total_liabilities_and_equity = total_liabilities_and_equity

    @property
    def share_minority_shareholders(self):
        """Gets the share_minority_shareholders of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Доля миноритарных акционеров  # noqa: E501

        :return: The share_minority_shareholders of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._share_minority_shareholders

    @share_minority_shareholders.setter
    def share_minority_shareholders(self, share_minority_shareholders):
        """Sets the share_minority_shareholders of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Доля миноритарных акционеров  # noqa: E501

        :param share_minority_shareholders: The share_minority_shareholders of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._share_minority_shareholders = share_minority_shareholders

    @property
    def revenue(self):
        """Gets the revenue of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Выручка  # noqa: E501

        :return: The revenue of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Выручка  # noqa: E501

        :param revenue: The revenue of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._revenue = revenue

    @property
    def ebit(self):
        """Gets the ebit of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Прибыль до налогов и доли меньшинства  # noqa: E501

        :return: The ebit of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._ebit

    @ebit.setter
    def ebit(self, ebit):
        """Sets the ebit of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Прибыль до налогов и доли меньшинства  # noqa: E501

        :param ebit: The ebit of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._ebit = ebit

    @property
    def net_income(self):
        """Gets the net_income of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Чистая прибыль  # noqa: E501

        :return: The net_income of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._net_income

    @net_income.setter
    def net_income(self, net_income):
        """Sets the net_income of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Чистая прибыль  # noqa: E501

        :param net_income: The net_income of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._net_income = net_income

    @property
    def net_income_shareholders(self):
        """Gets the net_income_shareholders of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Чистая прибыль, принадлежащая акционерам материнской компании  # noqa: E501

        :return: The net_income_shareholders of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._net_income_shareholders

    @net_income_shareholders.setter
    def net_income_shareholders(self, net_income_shareholders):
        """Sets the net_income_shareholders of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Чистая прибыль, принадлежащая акционерам материнской компании  # noqa: E501

        :param net_income_shareholders: The net_income_shareholders of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._net_income_shareholders = net_income_shareholders

    @property
    def amortization(self):
        """Gets the amortization of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Износ и амортизация  # noqa: E501

        :return: The amortization of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._amortization

    @amortization.setter
    def amortization(self, amortization):
        """Sets the amortization of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Износ и амортизация  # noqa: E501

        :param amortization: The amortization of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._amortization = amortization

    @property
    def interest_expense(self):
        """Gets the interest_expense of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Расходы на уплату процентов  # noqa: E501

        :return: The interest_expense of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._interest_expense

    @interest_expense.setter
    def interest_expense(self, interest_expense):
        """Sets the interest_expense of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Расходы на уплату процентов  # noqa: E501

        :param interest_expense: The interest_expense of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._interest_expense = interest_expense

    @property
    def income_tax_expense(self):
        """Gets the income_tax_expense of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Расходы по налогу на прибыль  # noqa: E501

        :return: The income_tax_expense of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._income_tax_expense

    @income_tax_expense.setter
    def income_tax_expense(self, income_tax_expense):
        """Sets the income_tax_expense of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Расходы по налогу на прибыль  # noqa: E501

        :param income_tax_expense: The income_tax_expense of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._income_tax_expense = income_tax_expense

    @property
    def exchange_differences(self):
        """Gets the exchange_differences of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Курсовые разницы  # noqa: E501

        :return: The exchange_differences of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._exchange_differences

    @exchange_differences.setter
    def exchange_differences(self, exchange_differences):
        """Sets the exchange_differences of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Курсовые разницы  # noqa: E501

        :param exchange_differences: The exchange_differences of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._exchange_differences = exchange_differences

    @property
    def share_minority_shareholders_2(self):
        """Gets the share_minority_shareholders_2 of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Доля миноритарных акционеров  # noqa: E501

        :return: The share_minority_shareholders_2 of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._share_minority_shareholders_2

    @share_minority_shareholders_2.setter
    def share_minority_shareholders_2(self, share_minority_shareholders_2):
        """Sets the share_minority_shareholders_2 of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Доля миноритарных акционеров  # noqa: E501

        :param share_minority_shareholders_2: The share_minority_shareholders_2 of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._share_minority_shareholders_2 = share_minority_shareholders_2

    @property
    def dividends(self):
        """Gets the dividends of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Дивиденды выплаченные по акциям компании  # noqa: E501

        :return: The dividends of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._dividends

    @dividends.setter
    def dividends(self, dividends):
        """Sets the dividends of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Дивиденды выплаченные по акциям компании  # noqa: E501

        :param dividends: The dividends of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._dividends = dividends

    @property
    def avg_issue_volume(self):
        """Gets the avg_issue_volume of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Среднее количество выпущенных акций  # noqa: E501

        :return: The avg_issue_volume of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._avg_issue_volume

    @avg_issue_volume.setter
    def avg_issue_volume(self, avg_issue_volume):
        """Sets the avg_issue_volume of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Среднее количество выпущенных акций  # noqa: E501

        :param avg_issue_volume: The avg_issue_volume of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._avg_issue_volume = avg_issue_volume

    @property
    def earn_per_share_rub(self):
        """Gets the earn_per_share_rub of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Прибыль на 1 акцию, руб.  # noqa: E501

        :return: The earn_per_share_rub of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._earn_per_share_rub

    @earn_per_share_rub.setter
    def earn_per_share_rub(self, earn_per_share_rub):
        """Sets the earn_per_share_rub of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Прибыль на 1 акцию, руб.  # noqa: E501

        :param earn_per_share_rub: The earn_per_share_rub of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._earn_per_share_rub = earn_per_share_rub

    @property
    def cash_operating_activities(self):
        """Gets the cash_operating_activities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Чистые денежные средства, полученные  от основной деятельности  # noqa: E501

        :return: The cash_operating_activities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._cash_operating_activities

    @cash_operating_activities.setter
    def cash_operating_activities(self, cash_operating_activities):
        """Sets the cash_operating_activities of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Чистые денежные средства, полученные  от основной деятельности  # noqa: E501

        :param cash_operating_activities: The cash_operating_activities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._cash_operating_activities = cash_operating_activities

    @property
    def cash_investing_activities(self):
        """Gets the cash_investing_activities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Чистые денежные средства, использованные для инвестиционной деятельности  # noqa: E501

        :return: The cash_investing_activities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._cash_investing_activities

    @cash_investing_activities.setter
    def cash_investing_activities(self, cash_investing_activities):
        """Sets the cash_investing_activities of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Чистые денежные средства, использованные для инвестиционной деятельности  # noqa: E501

        :param cash_investing_activities: The cash_investing_activities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._cash_investing_activities = cash_investing_activities

    @property
    def cash_financial_activities(self):
        """Gets the cash_financial_activities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Чистые денежные средства, (направленные на) полученные от финансовой деятельности  # noqa: E501

        :return: The cash_financial_activities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._cash_financial_activities

    @cash_financial_activities.setter
    def cash_financial_activities(self, cash_financial_activities):
        """Sets the cash_financial_activities of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Чистые денежные средства, (направленные на) полученные от финансовой деятельности  # noqa: E501

        :param cash_financial_activities: The cash_financial_activities of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._cash_financial_activities = cash_financial_activities

    @property
    def cash_increase(self):
        """Gets the cash_increase of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Чистое увеличение денежных средств и их эквивалентов  # noqa: E501

        :return: The cash_increase of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._cash_increase

    @cash_increase.setter
    def cash_increase(self, cash_increase):
        """Sets the cash_increase of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Чистое увеличение денежных средств и их эквивалентов  # noqa: E501

        :param cash_increase: The cash_increase of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._cash_increase = cash_increase

    @property
    def cash_begin_period(self):
        """Gets the cash_begin_period of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Денежные средства и их эквиваленты на начало отчетного периода  # noqa: E501

        :return: The cash_begin_period of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._cash_begin_period

    @cash_begin_period.setter
    def cash_begin_period(self, cash_begin_period):
        """Sets the cash_begin_period of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Денежные средства и их эквиваленты на начало отчетного периода  # noqa: E501

        :param cash_begin_period: The cash_begin_period of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._cash_begin_period = cash_begin_period

    @property
    def cash_end_period(self):
        """Gets the cash_end_period of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Денежные средства и их эквиваленты на конец отчетного периода  # noqa: E501

        :return: The cash_end_period of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._cash_end_period

    @cash_end_period.setter
    def cash_end_period(self, cash_end_period):
        """Sets the cash_end_period of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Денежные средства и их эквиваленты на конец отчетного периода  # noqa: E501

        :param cash_end_period: The cash_end_period of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._cash_end_period = cash_end_period

    @property
    def admin_expenses(self):
        """Gets the admin_expenses of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Административные расходы  # noqa: E501

        :return: The admin_expenses of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._admin_expenses

    @admin_expenses.setter
    def admin_expenses(self, admin_expenses):
        """Sets the admin_expenses of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Административные расходы  # noqa: E501

        :param admin_expenses: The admin_expenses of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._admin_expenses = admin_expenses

    @property
    def operating_expenses(self):
        """Gets the operating_expenses of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Операционные расходы  # noqa: E501

        :return: The operating_expenses of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: float
        """
        return self._operating_expenses

    @operating_expenses.setter
    def operating_expenses(self, operating_expenses):
        """Sets the operating_expenses of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Операционные расходы  # noqa: E501

        :param operating_expenses: The operating_expenses of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: float
        """

        self._operating_expenses = operating_expenses

    @property
    def currency(self):
        """Gets the currency of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Валюта отчета  # noqa: E501

        :return: The currency of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Валюта отчета  # noqa: E501

        :param currency: The currency of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def source_link(self):
        """Gets the source_link of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501

        Ссылка на исходную отчетность  # noqa: E501

        :return: The source_link of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :rtype: str
        """
        return self._source_link

    @source_link.setter
    def source_link(self, source_link):
        """Sets the source_link of this EfirDataHubModelsModelsEmitentMsfoReportFields.

        Ссылка на исходную отчетность  # noqa: E501

        :param source_link: The source_link of this EfirDataHubModelsModelsEmitentMsfoReportFields.  # noqa: E501
        :type: str
        """

        self._source_link = source_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsEmitentMsfoReportFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsEmitentMsfoReportFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
