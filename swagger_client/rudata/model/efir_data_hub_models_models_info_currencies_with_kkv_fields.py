# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsInfoCurrenciesWithKkvFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name_eng': 'str',
        'add_date': 'datetime',
        'activity': 'int',
        'not_okv': 'int',
        'full_name_eng': 'str',
        'id_parent': 'int',
        'mult': 'float',
        'countryid': 'int',
        'fintoolid': 'int',
        'status': 'str',
        'facevalue': 'float',
        'id': 'int',
        'code': 'str',
        'iso_number': 'int',
        'name_rus': 'str',
        'full_name_rus': 'str',
        'beg_date': 'datetime',
        'end_date': 'datetime',
        'note': 'str',
        'counter': 'int'
    }

    attribute_map = {
        'name_eng': 'name_eng',
        'add_date': 'add_date',
        'activity': 'activity',
        'not_okv': 'not_okv',
        'full_name_eng': 'full_name_eng',
        'id_parent': 'id_parent',
        'mult': 'mult',
        'countryid': 'countryid',
        'fintoolid': 'fintoolid',
        'status': 'status',
        'facevalue': 'facevalue',
        'id': 'id',
        'code': 'code',
        'iso_number': 'iso_number',
        'name_rus': 'name_rus',
        'full_name_rus': 'full_name_rus',
        'beg_date': 'beg_date',
        'end_date': 'end_date',
        'note': 'note',
        'counter': 'counter'
    }

    def __init__(self, name_eng=None, add_date=None, activity=None, not_okv=None, full_name_eng=None, id_parent=None, mult=None, countryid=None, fintoolid=None, status=None, facevalue=None, id=None, code=None, iso_number=None, name_rus=None, full_name_rus=None, beg_date=None, end_date=None, note=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsInfoCurrenciesWithKkvFields - a model defined in Swagger"""  # noqa: E501
        self._name_eng = None
        self._add_date = None
        self._activity = None
        self._not_okv = None
        self._full_name_eng = None
        self._id_parent = None
        self._mult = None
        self._countryid = None
        self._fintoolid = None
        self._status = None
        self._facevalue = None
        self._id = None
        self._code = None
        self._iso_number = None
        self._name_rus = None
        self._full_name_rus = None
        self._beg_date = None
        self._end_date = None
        self._note = None
        self._counter = None
        self.discriminator = None
        if name_eng is not None:
            self.name_eng = name_eng
        if add_date is not None:
            self.add_date = add_date
        if activity is not None:
            self.activity = activity
        if not_okv is not None:
            self.not_okv = not_okv
        if full_name_eng is not None:
            self.full_name_eng = full_name_eng
        if id_parent is not None:
            self.id_parent = id_parent
        if mult is not None:
            self.mult = mult
        if countryid is not None:
            self.countryid = countryid
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if status is not None:
            self.status = status
        if facevalue is not None:
            self.facevalue = facevalue
        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if iso_number is not None:
            self.iso_number = iso_number
        if name_rus is not None:
            self.name_rus = name_rus
        if full_name_rus is not None:
            self.full_name_rus = full_name_rus
        if beg_date is not None:
            self.beg_date = beg_date
        if end_date is not None:
            self.end_date = end_date
        if note is not None:
            self.note = note
        if counter is not None:
            self.counter = counter

    @property
    def name_eng(self):
        """Gets the name_eng of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Краткое наименование валюты - английское  # noqa: E501

        :return: The name_eng of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: str
        """
        return self._name_eng

    @name_eng.setter
    def name_eng(self, name_eng):
        """Sets the name_eng of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Краткое наименование валюты - английское  # noqa: E501

        :param name_eng: The name_eng of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: str
        """

        self._name_eng = name_eng

    @property
    def add_date(self):
        """Gets the add_date of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Дата добавления в БД  # noqa: E501

        :return: The add_date of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: datetime
        """
        return self._add_date

    @add_date.setter
    def add_date(self, add_date):
        """Sets the add_date of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Дата добавления в БД  # noqa: E501

        :param add_date: The add_date of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: datetime
        """

        self._add_date = add_date

    @property
    def activity(self):
        """Gets the activity of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Признак активности  # noqa: E501

        :return: The activity of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: int
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Признак активности  # noqa: E501

        :param activity: The activity of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: int
        """

        self._activity = activity

    @property
    def not_okv(self):
        """Gets the not_okv of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Не входит в ОКВ (false - входит в ККВ)  # noqa: E501

        :return: The not_okv of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: int
        """
        return self._not_okv

    @not_okv.setter
    def not_okv(self, not_okv):
        """Sets the not_okv of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Не входит в ОКВ (false - входит в ККВ)  # noqa: E501

        :param not_okv: The not_okv of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: int
        """

        self._not_okv = not_okv

    @property
    def full_name_eng(self):
        """Gets the full_name_eng of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Полное наименование валюты - английское  # noqa: E501

        :return: The full_name_eng of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: str
        """
        return self._full_name_eng

    @full_name_eng.setter
    def full_name_eng(self, full_name_eng):
        """Sets the full_name_eng of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Полное наименование валюты - английское  # noqa: E501

        :param full_name_eng: The full_name_eng of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: str
        """

        self._full_name_eng = full_name_eng

    @property
    def id_parent(self):
        """Gets the id_parent of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Идентификатор базовой валюты  # noqa: E501

        :return: The id_parent of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: int
        """
        return self._id_parent

    @id_parent.setter
    def id_parent(self, id_parent):
        """Sets the id_parent of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Идентификатор базовой валюты  # noqa: E501

        :param id_parent: The id_parent of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: int
        """

        self._id_parent = id_parent

    @property
    def mult(self):
        """Gets the mult of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Коэффициент  # noqa: E501

        :return: The mult of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: float
        """
        return self._mult

    @mult.setter
    def mult(self, mult):
        """Sets the mult of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Коэффициент  # noqa: E501

        :param mult: The mult of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: float
        """

        self._mult = mult

    @property
    def countryid(self):
        """Gets the countryid of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Идентификатор страны RU Data  # noqa: E501

        :return: The countryid of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: int
        """
        return self._countryid

    @countryid.setter
    def countryid(self, countryid):
        """Sets the countryid of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Идентификатор страны RU Data  # noqa: E501

        :param countryid: The countryid of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: int
        """

        self._countryid = countryid

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Идентификатор инструмента RU Data  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Идентификатор инструмента RU Data  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def status(self):
        """Gets the status of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Текущий статус (обращаемость валюты)  # noqa: E501

        :return: The status of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Текущий статус (обращаемость валюты)  # noqa: E501

        :param status: The status of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def facevalue(self):
        """Gets the facevalue of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Количество знаков дробной части номинала  # noqa: E501

        :return: The facevalue of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: float
        """
        return self._facevalue

    @facevalue.setter
    def facevalue(self, facevalue):
        """Sets the facevalue of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Количество знаков дробной части номинала  # noqa: E501

        :param facevalue: The facevalue of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: float
        """

        self._facevalue = facevalue

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Идентификатор валюты RU Data  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Идентификатор валюты RU Data  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Буквенный код валюты согласно ОКВ/ККВ  # noqa: E501

        :return: The code of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Буквенный код валюты согласно ОКВ/ККВ  # noqa: E501

        :param code: The code of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def iso_number(self):
        """Gets the iso_number of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Численный код валюты согласно ISO 4217  # noqa: E501

        :return: The iso_number of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: int
        """
        return self._iso_number

    @iso_number.setter
    def iso_number(self, iso_number):
        """Sets the iso_number of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Численный код валюты согласно ISO 4217  # noqa: E501

        :param iso_number: The iso_number of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: int
        """

        self._iso_number = iso_number

    @property
    def name_rus(self):
        """Gets the name_rus of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Краткое наименование валюты - русское  # noqa: E501

        :return: The name_rus of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: str
        """
        return self._name_rus

    @name_rus.setter
    def name_rus(self, name_rus):
        """Sets the name_rus of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Краткое наименование валюты - русское  # noqa: E501

        :param name_rus: The name_rus of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: str
        """

        self._name_rus = name_rus

    @property
    def full_name_rus(self):
        """Gets the full_name_rus of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Полное наименование валюты - русское  # noqa: E501

        :return: The full_name_rus of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: str
        """
        return self._full_name_rus

    @full_name_rus.setter
    def full_name_rus(self, full_name_rus):
        """Sets the full_name_rus of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Полное наименование валюты - русское  # noqa: E501

        :param full_name_rus: The full_name_rus of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: str
        """

        self._full_name_rus = full_name_rus

    @property
    def beg_date(self):
        """Gets the beg_date of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Дата начала действия кода  # noqa: E501

        :return: The beg_date of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: datetime
        """
        return self._beg_date

    @beg_date.setter
    def beg_date(self, beg_date):
        """Sets the beg_date of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Дата начала действия кода  # noqa: E501

        :param beg_date: The beg_date of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: datetime
        """

        self._beg_date = beg_date

    @property
    def end_date(self):
        """Gets the end_date of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Дата окончания действия кода  # noqa: E501

        :return: The end_date of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Дата окончания действия кода  # noqa: E501

        :param end_date: The end_date of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Примечание  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Примечание  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsInfoCurrenciesWithKkvFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsInfoCurrenciesWithKkvFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsInfoCurrenciesWithKkvFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
