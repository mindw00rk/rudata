# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondCommonDataFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'shortname_rus': 'str',
        'fullname_rus': 'str',
        'fininstid': 'int',
        'fininstid_operator': 'int',
        'okpo': 'str',
        'okpo_operator': 'str',
        'name_operator': 'str',
        'status': 'str',
        'country': 'str',
        'reg_code': 'str',
        'reg_date': 'datetime',
        'reg_org': 'str',
        'isin': 'str',
        'isin2': 'str',
        'facevalue': 'float',
        'facevalue_currency': 'str',
        'issue_vol': 'float',
        'issue_val': 'float',
        'begdist_date': 'datetime',
        'enddist_date': 'datetime',
        'regdist_date': 'datetime',
        'begmty_date': 'datetime',
        'endmty_date': 'datetime',
        'market_vol': 'float',
        'market_val': 'float',
        'num_days': 'int',
        'num_coupons': 'int',
        'coupons_per_year': 'int',
        'amortised_mty': 'int',
        'have_offer': 'int',
        'guaranteed': 'int',
        'guaranteed_val': 'float',
        'convertible': 'int',
        'have_default': 'int',
        'private_dist': 'int',
        'id_bond_program': 'int',
        'basis_name': 'str',
        'accrued_interest_calc_type': 'int',
        'update_date': 'datetime',
        'isregion': 'float',
        'nsd_service': 'str',
        'raterevisionsperyear': 'int',
        'floatratename': 'str',
        'has_covenants': 'bool',
        'note': 'str',
        'haverepayment': 'bool',
        'haveindexedfv': 'bool',
        'numdecimals': 'int',
        'couponperiod': 'int',
        'ismatched': 'bool',
        'firstcoupondate': 'datetime',
        'name_issuer': 'str',
        'fininstid_borrower': 'int',
        'okpo_borrower': 'str',
        'name_borrower': 'str',
        'iscomplicated': 'bool',
        'available_for_unqualified': 'bool',
        'counter': 'int'
    }

    attribute_map = {
        'id': 'id',
        'shortname_rus': 'shortname_rus',
        'fullname_rus': 'fullname_rus',
        'fininstid': 'fininstid',
        'fininstid_operator': 'fininstid_operator',
        'okpo': 'okpo',
        'okpo_operator': 'okpo_operator',
        'name_operator': 'name_operator',
        'status': 'status',
        'country': 'country',
        'reg_code': 'reg_code',
        'reg_date': 'reg_date',
        'reg_org': 'reg_org',
        'isin': 'isin',
        'isin2': 'isin2',
        'facevalue': 'facevalue',
        'facevalue_currency': 'facevalue_currency',
        'issue_vol': 'issue_vol',
        'issue_val': 'issue_val',
        'begdist_date': 'begdist_date',
        'enddist_date': 'enddist_date',
        'regdist_date': 'regdist_date',
        'begmty_date': 'begmty_date',
        'endmty_date': 'endmty_date',
        'market_vol': 'market_vol',
        'market_val': 'market_val',
        'num_days': 'num_days',
        'num_coupons': 'num_coupons',
        'coupons_per_year': 'coupons_per_year',
        'amortised_mty': 'amortised_mty',
        'have_offer': 'have_offer',
        'guaranteed': 'guaranteed',
        'guaranteed_val': 'guaranteed_val',
        'convertible': 'convertible',
        'have_default': 'have_default',
        'private_dist': 'private_dist',
        'id_bond_program': 'id_bond_program',
        'basis_name': 'basis_name',
        'accrued_interest_calc_type': 'accrued_interest_calc_type',
        'update_date': 'update_date',
        'isregion': 'isregion',
        'nsd_service': 'nsd_service',
        'raterevisionsperyear': 'raterevisionsperyear',
        'floatratename': 'floatratename',
        'has_covenants': 'has_covenants',
        'note': 'note',
        'haverepayment': 'haverepayment',
        'haveindexedfv': 'haveindexedfv',
        'numdecimals': 'numdecimals',
        'couponperiod': 'couponperiod',
        'ismatched': 'ismatched',
        'firstcoupondate': 'firstcoupondate',
        'name_issuer': 'name_issuer',
        'fininstid_borrower': 'fininstid_borrower',
        'okpo_borrower': 'okpo_borrower',
        'name_borrower': 'name_borrower',
        'iscomplicated': 'iscomplicated',
        'available_for_unqualified': 'available_for_unqualified',
        'counter': 'counter'
    }

    def __init__(self, id=None, shortname_rus=None, fullname_rus=None, fininstid=None, fininstid_operator=None, okpo=None, okpo_operator=None, name_operator=None, status=None, country=None, reg_code=None, reg_date=None, reg_org=None, isin=None, isin2=None, facevalue=None, facevalue_currency=None, issue_vol=None, issue_val=None, begdist_date=None, enddist_date=None, regdist_date=None, begmty_date=None, endmty_date=None, market_vol=None, market_val=None, num_days=None, num_coupons=None, coupons_per_year=None, amortised_mty=None, have_offer=None, guaranteed=None, guaranteed_val=None, convertible=None, have_default=None, private_dist=None, id_bond_program=None, basis_name=None, accrued_interest_calc_type=None, update_date=None, isregion=None, nsd_service=None, raterevisionsperyear=None, floatratename=None, has_covenants=None, note=None, haverepayment=None, haveindexedfv=None, numdecimals=None, couponperiod=None, ismatched=None, firstcoupondate=None, name_issuer=None, fininstid_borrower=None, okpo_borrower=None, name_borrower=None, iscomplicated=None, available_for_unqualified=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsBondCommonDataFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._shortname_rus = None
        self._fullname_rus = None
        self._fininstid = None
        self._fininstid_operator = None
        self._okpo = None
        self._okpo_operator = None
        self._name_operator = None
        self._status = None
        self._country = None
        self._reg_code = None
        self._reg_date = None
        self._reg_org = None
        self._isin = None
        self._isin2 = None
        self._facevalue = None
        self._facevalue_currency = None
        self._issue_vol = None
        self._issue_val = None
        self._begdist_date = None
        self._enddist_date = None
        self._regdist_date = None
        self._begmty_date = None
        self._endmty_date = None
        self._market_vol = None
        self._market_val = None
        self._num_days = None
        self._num_coupons = None
        self._coupons_per_year = None
        self._amortised_mty = None
        self._have_offer = None
        self._guaranteed = None
        self._guaranteed_val = None
        self._convertible = None
        self._have_default = None
        self._private_dist = None
        self._id_bond_program = None
        self._basis_name = None
        self._accrued_interest_calc_type = None
        self._update_date = None
        self._isregion = None
        self._nsd_service = None
        self._raterevisionsperyear = None
        self._floatratename = None
        self._has_covenants = None
        self._note = None
        self._haverepayment = None
        self._haveindexedfv = None
        self._numdecimals = None
        self._couponperiod = None
        self._ismatched = None
        self._firstcoupondate = None
        self._name_issuer = None
        self._fininstid_borrower = None
        self._okpo_borrower = None
        self._name_borrower = None
        self._iscomplicated = None
        self._available_for_unqualified = None
        self._counter = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if shortname_rus is not None:
            self.shortname_rus = shortname_rus
        if fullname_rus is not None:
            self.fullname_rus = fullname_rus
        if fininstid is not None:
            self.fininstid = fininstid
        if fininstid_operator is not None:
            self.fininstid_operator = fininstid_operator
        if okpo is not None:
            self.okpo = okpo
        if okpo_operator is not None:
            self.okpo_operator = okpo_operator
        if name_operator is not None:
            self.name_operator = name_operator
        if status is not None:
            self.status = status
        if country is not None:
            self.country = country
        if reg_code is not None:
            self.reg_code = reg_code
        if reg_date is not None:
            self.reg_date = reg_date
        if reg_org is not None:
            self.reg_org = reg_org
        if isin is not None:
            self.isin = isin
        if isin2 is not None:
            self.isin2 = isin2
        if facevalue is not None:
            self.facevalue = facevalue
        if facevalue_currency is not None:
            self.facevalue_currency = facevalue_currency
        if issue_vol is not None:
            self.issue_vol = issue_vol
        if issue_val is not None:
            self.issue_val = issue_val
        if begdist_date is not None:
            self.begdist_date = begdist_date
        if enddist_date is not None:
            self.enddist_date = enddist_date
        if regdist_date is not None:
            self.regdist_date = regdist_date
        if begmty_date is not None:
            self.begmty_date = begmty_date
        if endmty_date is not None:
            self.endmty_date = endmty_date
        if market_vol is not None:
            self.market_vol = market_vol
        if market_val is not None:
            self.market_val = market_val
        if num_days is not None:
            self.num_days = num_days
        if num_coupons is not None:
            self.num_coupons = num_coupons
        if coupons_per_year is not None:
            self.coupons_per_year = coupons_per_year
        if amortised_mty is not None:
            self.amortised_mty = amortised_mty
        if have_offer is not None:
            self.have_offer = have_offer
        if guaranteed is not None:
            self.guaranteed = guaranteed
        if guaranteed_val is not None:
            self.guaranteed_val = guaranteed_val
        if convertible is not None:
            self.convertible = convertible
        if have_default is not None:
            self.have_default = have_default
        if private_dist is not None:
            self.private_dist = private_dist
        if id_bond_program is not None:
            self.id_bond_program = id_bond_program
        if basis_name is not None:
            self.basis_name = basis_name
        if accrued_interest_calc_type is not None:
            self.accrued_interest_calc_type = accrued_interest_calc_type
        if update_date is not None:
            self.update_date = update_date
        if isregion is not None:
            self.isregion = isregion
        if nsd_service is not None:
            self.nsd_service = nsd_service
        if raterevisionsperyear is not None:
            self.raterevisionsperyear = raterevisionsperyear
        if floatratename is not None:
            self.floatratename = floatratename
        if has_covenants is not None:
            self.has_covenants = has_covenants
        if note is not None:
            self.note = note
        if haverepayment is not None:
            self.haverepayment = haverepayment
        if haveindexedfv is not None:
            self.haveindexedfv = haveindexedfv
        if numdecimals is not None:
            self.numdecimals = numdecimals
        if couponperiod is not None:
            self.couponperiod = couponperiod
        if ismatched is not None:
            self.ismatched = ismatched
        if firstcoupondate is not None:
            self.firstcoupondate = firstcoupondate
        if name_issuer is not None:
            self.name_issuer = name_issuer
        if fininstid_borrower is not None:
            self.fininstid_borrower = fininstid_borrower
        if okpo_borrower is not None:
            self.okpo_borrower = okpo_borrower
        if name_borrower is not None:
            self.name_borrower = name_borrower
        if iscomplicated is not None:
            self.iscomplicated = iscomplicated
        if available_for_unqualified is not None:
            self.available_for_unqualified = available_for_unqualified
        if counter is not None:
            self.counter = counter

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Идентификатор облигации  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsBondCommonDataFields.

        Идентификатор облигации  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def shortname_rus(self):
        """Gets the shortname_rus of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Краткое наименование выпуска  # noqa: E501

        :return: The shortname_rus of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_rus

    @shortname_rus.setter
    def shortname_rus(self, shortname_rus):
        """Sets the shortname_rus of this EfirDataHubModelsModelsBondCommonDataFields.

        Краткое наименование выпуска  # noqa: E501

        :param shortname_rus: The shortname_rus of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._shortname_rus = shortname_rus

    @property
    def fullname_rus(self):
        """Gets the fullname_rus of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Полное наименование выпуска  # noqa: E501

        :return: The fullname_rus of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_rus

    @fullname_rus.setter
    def fullname_rus(self, fullname_rus):
        """Sets the fullname_rus of this EfirDataHubModelsModelsBondCommonDataFields.

        Полное наименование выпуска  # noqa: E501

        :param fullname_rus: The fullname_rus of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._fullname_rus = fullname_rus

    @property
    def fininstid(self):
        """Gets the fininstid of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Идентификатор эмитента выпуска в базе Интерфакс  # noqa: E501

        :return: The fininstid of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid

    @fininstid.setter
    def fininstid(self, fininstid):
        """Sets the fininstid of this EfirDataHubModelsModelsBondCommonDataFields.

        Идентификатор эмитента выпуска в базе Интерфакс  # noqa: E501

        :param fininstid: The fininstid of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._fininstid = fininstid

    @property
    def fininstid_operator(self):
        """Gets the fininstid_operator of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Идентификатор оператора выпуска в базе Интерфакс  # noqa: E501

        :return: The fininstid_operator of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid_operator

    @fininstid_operator.setter
    def fininstid_operator(self, fininstid_operator):
        """Sets the fininstid_operator of this EfirDataHubModelsModelsBondCommonDataFields.

        Идентификатор оператора выпуска в базе Интерфакс  # noqa: E501

        :param fininstid_operator: The fininstid_operator of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._fininstid_operator = fininstid_operator

    @property
    def okpo(self):
        """Gets the okpo of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        ОКПО эмитента выпуска  # noqa: E501

        :return: The okpo of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._okpo

    @okpo.setter
    def okpo(self, okpo):
        """Sets the okpo of this EfirDataHubModelsModelsBondCommonDataFields.

        ОКПО эмитента выпуска  # noqa: E501

        :param okpo: The okpo of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._okpo = okpo

    @property
    def okpo_operator(self):
        """Gets the okpo_operator of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        ОКПО оператора выпуска  # noqa: E501

        :return: The okpo_operator of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._okpo_operator

    @okpo_operator.setter
    def okpo_operator(self, okpo_operator):
        """Sets the okpo_operator of this EfirDataHubModelsModelsBondCommonDataFields.

        ОКПО оператора выпуска  # noqa: E501

        :param okpo_operator: The okpo_operator of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._okpo_operator = okpo_operator

    @property
    def name_operator(self):
        """Gets the name_operator of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Наименование оператора выпуска  # noqa: E501

        :return: The name_operator of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._name_operator

    @name_operator.setter
    def name_operator(self, name_operator):
        """Sets the name_operator of this EfirDataHubModelsModelsBondCommonDataFields.

        Наименование оператора выпуска  # noqa: E501

        :param name_operator: The name_operator of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._name_operator = name_operator

    @property
    def status(self):
        """Gets the status of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Статус выпуска  # noqa: E501

        :return: The status of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EfirDataHubModelsModelsBondCommonDataFields.

        Статус выпуска  # noqa: E501

        :param status: The status of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def country(self):
        """Gets the country of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Двухбуквенный код страны в соответствии с ОКСМ  # noqa: E501

        :return: The country of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EfirDataHubModelsModelsBondCommonDataFields.

        Двухбуквенный код страны в соответствии с ОКСМ  # noqa: E501

        :param country: The country of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def reg_code(self):
        """Gets the reg_code of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Регистрационный номер выпуска  # noqa: E501

        :return: The reg_code of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._reg_code

    @reg_code.setter
    def reg_code(self, reg_code):
        """Sets the reg_code of this EfirDataHubModelsModelsBondCommonDataFields.

        Регистрационный номер выпуска  # noqa: E501

        :param reg_code: The reg_code of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._reg_code = reg_code

    @property
    def reg_date(self):
        """Gets the reg_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Дата регистрации  # noqa: E501

        :return: The reg_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._reg_date

    @reg_date.setter
    def reg_date(self, reg_date):
        """Sets the reg_date of this EfirDataHubModelsModelsBondCommonDataFields.

        Дата регистрации  # noqa: E501

        :param reg_date: The reg_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._reg_date = reg_date

    @property
    def reg_org(self):
        """Gets the reg_org of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Регистратор (ФСФР, ЦБ, МосБиржа и т.п.)  # noqa: E501

        :return: The reg_org of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._reg_org

    @reg_org.setter
    def reg_org(self, reg_org):
        """Sets the reg_org of this EfirDataHubModelsModelsBondCommonDataFields.

        Регистратор (ФСФР, ЦБ, МосБиржа и т.п.)  # noqa: E501

        :param reg_org: The reg_org of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._reg_org = reg_org

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Код ISIN  # noqa: E501

        :return: The isin of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsModelsBondCommonDataFields.

        Код ISIN  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def isin2(self):
        """Gets the isin2 of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Дополнительный ISIN (при регистрации выпуска в нескольких организациях)  # noqa: E501

        :return: The isin2 of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._isin2

    @isin2.setter
    def isin2(self, isin2):
        """Sets the isin2 of this EfirDataHubModelsModelsBondCommonDataFields.

        Дополнительный ISIN (при регистрации выпуска в нескольких организациях)  # noqa: E501

        :param isin2: The isin2 of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._isin2 = isin2

    @property
    def facevalue(self):
        """Gets the facevalue of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Начальный номинал  # noqa: E501

        :return: The facevalue of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._facevalue

    @facevalue.setter
    def facevalue(self, facevalue):
        """Sets the facevalue of this EfirDataHubModelsModelsBondCommonDataFields.

        Начальный номинал  # noqa: E501

        :param facevalue: The facevalue of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: float
        """

        self._facevalue = facevalue

    @property
    def facevalue_currency(self):
        """Gets the facevalue_currency of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Валюта номинала  # noqa: E501

        :return: The facevalue_currency of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._facevalue_currency

    @facevalue_currency.setter
    def facevalue_currency(self, facevalue_currency):
        """Sets the facevalue_currency of this EfirDataHubModelsModelsBondCommonDataFields.

        Валюта номинала  # noqa: E501

        :param facevalue_currency: The facevalue_currency of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._facevalue_currency = facevalue_currency

    @property
    def issue_vol(self):
        """Gets the issue_vol of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Объем выпуска (в штуках)  # noqa: E501

        :return: The issue_vol of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._issue_vol

    @issue_vol.setter
    def issue_vol(self, issue_vol):
        """Sets the issue_vol of this EfirDataHubModelsModelsBondCommonDataFields.

        Объем выпуска (в штуках)  # noqa: E501

        :param issue_vol: The issue_vol of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: float
        """

        self._issue_vol = issue_vol

    @property
    def issue_val(self):
        """Gets the issue_val of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Размер выпуска (в деньгах)  # noqa: E501

        :return: The issue_val of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._issue_val

    @issue_val.setter
    def issue_val(self, issue_val):
        """Sets the issue_val of this EfirDataHubModelsModelsBondCommonDataFields.

        Размер выпуска (в деньгах)  # noqa: E501

        :param issue_val: The issue_val of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: float
        """

        self._issue_val = issue_val

    @property
    def begdist_date(self):
        """Gets the begdist_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Дата начала размещения  # noqa: E501

        :return: The begdist_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._begdist_date

    @begdist_date.setter
    def begdist_date(self, begdist_date):
        """Sets the begdist_date of this EfirDataHubModelsModelsBondCommonDataFields.

        Дата начала размещения  # noqa: E501

        :param begdist_date: The begdist_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._begdist_date = begdist_date

    @property
    def enddist_date(self):
        """Gets the enddist_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Дата окончания размещения  # noqa: E501

        :return: The enddist_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._enddist_date

    @enddist_date.setter
    def enddist_date(self, enddist_date):
        """Sets the enddist_date of this EfirDataHubModelsModelsBondCommonDataFields.

        Дата окончания размещения  # noqa: E501

        :param enddist_date: The enddist_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._enddist_date = enddist_date

    @property
    def regdist_date(self):
        """Gets the regdist_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Дата регистрации отчета о выпуске облигаций / дата отсылки уведомления  # noqa: E501

        :return: The regdist_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._regdist_date

    @regdist_date.setter
    def regdist_date(self, regdist_date):
        """Sets the regdist_date of this EfirDataHubModelsModelsBondCommonDataFields.

        Дата регистрации отчета о выпуске облигаций / дата отсылки уведомления  # noqa: E501

        :param regdist_date: The regdist_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._regdist_date = regdist_date

    @property
    def begmty_date(self):
        """Gets the begmty_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Дата начала погашения. Не NULL только в случае наличия амортизационного погашения.  # noqa: E501

        :return: The begmty_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._begmty_date

    @begmty_date.setter
    def begmty_date(self, begmty_date):
        """Sets the begmty_date of this EfirDataHubModelsModelsBondCommonDataFields.

        Дата начала погашения. Не NULL только в случае наличия амортизационного погашения.  # noqa: E501

        :param begmty_date: The begmty_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._begmty_date = begmty_date

    @property
    def endmty_date(self):
        """Gets the endmty_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Дата погашения выпуска  # noqa: E501

        :return: The endmty_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._endmty_date

    @endmty_date.setter
    def endmty_date(self, endmty_date):
        """Sets the endmty_date of this EfirDataHubModelsModelsBondCommonDataFields.

        Дата погашения выпуска  # noqa: E501

        :param endmty_date: The endmty_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._endmty_date = endmty_date

    @property
    def market_vol(self):
        """Gets the market_vol of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Объем в обращении (в штуках)  # noqa: E501

        :return: The market_vol of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._market_vol

    @market_vol.setter
    def market_vol(self, market_vol):
        """Sets the market_vol of this EfirDataHubModelsModelsBondCommonDataFields.

        Объем в обращении (в штуках)  # noqa: E501

        :param market_vol: The market_vol of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: float
        """

        self._market_vol = market_vol

    @property
    def market_val(self):
        """Gets the market_val of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Объем в обращении (в деньгах)  # noqa: E501

        :return: The market_val of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._market_val

    @market_val.setter
    def market_val(self, market_val):
        """Sets the market_val of this EfirDataHubModelsModelsBondCommonDataFields.

        Объем в обращении (в деньгах)  # noqa: E501

        :param market_val: The market_val of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: float
        """

        self._market_val = market_val

    @property
    def num_days(self):
        """Gets the num_days of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Количество дней с даты начала размещения до даты окончания погашения облигации  # noqa: E501

        :return: The num_days of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._num_days

    @num_days.setter
    def num_days(self, num_days):
        """Sets the num_days of this EfirDataHubModelsModelsBondCommonDataFields.

        Количество дней с даты начала размещения до даты окончания погашения облигации  # noqa: E501

        :param num_days: The num_days of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._num_days = num_days

    @property
    def num_coupons(self):
        """Gets the num_coupons of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Количество купонов  # noqa: E501

        :return: The num_coupons of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._num_coupons

    @num_coupons.setter
    def num_coupons(self, num_coupons):
        """Sets the num_coupons of this EfirDataHubModelsModelsBondCommonDataFields.

        Количество купонов  # noqa: E501

        :param num_coupons: The num_coupons of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._num_coupons = num_coupons

    @property
    def coupons_per_year(self):
        """Gets the coupons_per_year of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Количество купонов в год  # noqa: E501

        :return: The coupons_per_year of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._coupons_per_year

    @coupons_per_year.setter
    def coupons_per_year(self, coupons_per_year):
        """Sets the coupons_per_year of this EfirDataHubModelsModelsBondCommonDataFields.

        Количество купонов в год  # noqa: E501

        :param coupons_per_year: The coupons_per_year of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._coupons_per_year = coupons_per_year

    @property
    def amortised_mty(self):
        """Gets the amortised_mty of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Признак наличия амортизационного погашения по выпуску (0/1)  # noqa: E501

        :return: The amortised_mty of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._amortised_mty

    @amortised_mty.setter
    def amortised_mty(self, amortised_mty):
        """Sets the amortised_mty of this EfirDataHubModelsModelsBondCommonDataFields.

        Признак наличия амортизационного погашения по выпуску (0/1)  # noqa: E501

        :param amortised_mty: The amortised_mty of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._amortised_mty = amortised_mty

    @property
    def have_offer(self):
        """Gets the have_offer of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Признак наличия по выпуску возможности досрочного выкупа или погашения (0/1)  # noqa: E501

        :return: The have_offer of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._have_offer

    @have_offer.setter
    def have_offer(self, have_offer):
        """Sets the have_offer of this EfirDataHubModelsModelsBondCommonDataFields.

        Признак наличия по выпуску возможности досрочного выкупа или погашения (0/1)  # noqa: E501

        :param have_offer: The have_offer of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._have_offer = have_offer

    @property
    def guaranteed(self):
        """Gets the guaranteed of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Признак наличия по выпуску гарантии (0/1)  # noqa: E501

        :return: The guaranteed of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._guaranteed

    @guaranteed.setter
    def guaranteed(self, guaranteed):
        """Sets the guaranteed of this EfirDataHubModelsModelsBondCommonDataFields.

        Признак наличия по выпуску гарантии (0/1)  # noqa: E501

        :param guaranteed: The guaranteed of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._guaranteed = guaranteed

    @property
    def guaranteed_val(self):
        """Gets the guaranteed_val of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Гарантированная сумма  # noqa: E501

        :return: The guaranteed_val of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._guaranteed_val

    @guaranteed_val.setter
    def guaranteed_val(self, guaranteed_val):
        """Sets the guaranteed_val of this EfirDataHubModelsModelsBondCommonDataFields.

        Гарантированная сумма  # noqa: E501

        :param guaranteed_val: The guaranteed_val of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: float
        """

        self._guaranteed_val = guaranteed_val

    @property
    def convertible(self):
        """Gets the convertible of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Наличие возможности конвертации / осуществленная конвертация в другой инструмент (0/1)  # noqa: E501

        :return: The convertible of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._convertible

    @convertible.setter
    def convertible(self, convertible):
        """Sets the convertible of this EfirDataHubModelsModelsBondCommonDataFields.

        Наличие возможности конвертации / осуществленная конвертация в другой инструмент (0/1)  # noqa: E501

        :param convertible: The convertible of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._convertible = convertible

    @property
    def have_default(self):
        """Gets the have_default of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Признак наличия дефолта по выпуску (0/1)  # noqa: E501

        :return: The have_default of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._have_default

    @have_default.setter
    def have_default(self, have_default):
        """Sets the have_default of this EfirDataHubModelsModelsBondCommonDataFields.

        Признак наличия дефолта по выпуску (0/1)  # noqa: E501

        :param have_default: The have_default of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._have_default = have_default

    @property
    def private_dist(self):
        """Gets the private_dist of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Признак размещения по закрытой подписке (0/1)  # noqa: E501

        :return: The private_dist of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._private_dist

    @private_dist.setter
    def private_dist(self, private_dist):
        """Sets the private_dist of this EfirDataHubModelsModelsBondCommonDataFields.

        Признак размещения по закрытой подписке (0/1)  # noqa: E501

        :param private_dist: The private_dist of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._private_dist = private_dist

    @property
    def id_bond_program(self):
        """Gets the id_bond_program of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Идентификатор программы выпуска облигаций. Cм. метод Programs.  # noqa: E501

        :return: The id_bond_program of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._id_bond_program

    @id_bond_program.setter
    def id_bond_program(self, id_bond_program):
        """Sets the id_bond_program of this EfirDataHubModelsModelsBondCommonDataFields.

        Идентификатор программы выпуска облигаций. Cм. метод Programs.  # noqa: E501

        :param id_bond_program: The id_bond_program of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._id_bond_program = id_bond_program

    @property
    def basis_name(self):
        """Gets the basis_name of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Базис расчета  # noqa: E501

        :return: The basis_name of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._basis_name

    @basis_name.setter
    def basis_name(self, basis_name):
        """Sets the basis_name of this EfirDataHubModelsModelsBondCommonDataFields.

        Базис расчета  # noqa: E501

        :param basis_name: The basis_name of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._basis_name = basis_name

    @property
    def accrued_interest_calc_type(self):
        """Gets the accrued_interest_calc_type of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Вариант расчета НКД:  - 0 - через размер купона в денежных единицах;  - 1 – через ставку купона и номинал.  # noqa: E501

        :return: The accrued_interest_calc_type of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._accrued_interest_calc_type

    @accrued_interest_calc_type.setter
    def accrued_interest_calc_type(self, accrued_interest_calc_type):
        """Sets the accrued_interest_calc_type of this EfirDataHubModelsModelsBondCommonDataFields.

        Вариант расчета НКД:  - 0 - через размер купона в денежных единицах;  - 1 – через ставку купона и номинал.  # noqa: E501

        :param accrued_interest_calc_type: The accrued_interest_calc_type of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._accrued_interest_calc_type = accrued_interest_calc_type

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Дата/время последнего изменения записи  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsBondCommonDataFields.

        Дата/время последнего изменения записи  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def isregion(self):
        """Gets the isregion of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Выпуск субъекта федерации:  - 0 – муниципальный выпуск;  - 1 – выпуск субъекта федерации;  - пусто – другое.  # noqa: E501

        :return: The isregion of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: float
        """
        return self._isregion

    @isregion.setter
    def isregion(self, isregion):
        """Sets the isregion of this EfirDataHubModelsModelsBondCommonDataFields.

        Выпуск субъекта федерации:  - 0 – муниципальный выпуск;  - 1 – выпуск субъекта федерации;  - пусто – другое.  # noqa: E501

        :param isregion: The isregion of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: float
        """

        self._isregion = isregion

    @property
    def nsd_service(self):
        """Gets the nsd_service of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Обслуживание в НРД. («На обслуживании» и т.п.). Список возможных значений возвращает метод /Info/EnumValues.  # noqa: E501

        :return: The nsd_service of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._nsd_service

    @nsd_service.setter
    def nsd_service(self, nsd_service):
        """Sets the nsd_service of this EfirDataHubModelsModelsBondCommonDataFields.

        Обслуживание в НРД. («На обслуживании» и т.п.). Список возможных значений возвращает метод /Info/EnumValues.  # noqa: E501

        :param nsd_service: The nsd_service of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._nsd_service = nsd_service

    @property
    def raterevisionsperyear(self):
        """Gets the raterevisionsperyear of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Частота пересмотра плавающей ставки купона (кол-во раз в год).  # noqa: E501

        :return: The raterevisionsperyear of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._raterevisionsperyear

    @raterevisionsperyear.setter
    def raterevisionsperyear(self, raterevisionsperyear):
        """Sets the raterevisionsperyear of this EfirDataHubModelsModelsBondCommonDataFields.

        Частота пересмотра плавающей ставки купона (кол-во раз в год).  # noqa: E501

        :param raterevisionsperyear: The raterevisionsperyear of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._raterevisionsperyear = raterevisionsperyear

    @property
    def floatratename(self):
        """Gets the floatratename of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Определение плавающей процентной ставки по купону.  # noqa: E501

        :return: The floatratename of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._floatratename

    @floatratename.setter
    def floatratename(self, floatratename):
        """Sets the floatratename of this EfirDataHubModelsModelsBondCommonDataFields.

        Определение плавающей процентной ставки по купону.  # noqa: E501

        :param floatratename: The floatratename of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._floatratename = floatratename

    @property
    def has_covenants(self):
        """Gets the has_covenants of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Флаг наличия ковенанта  # noqa: E501

        :return: The has_covenants of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: bool
        """
        return self._has_covenants

    @has_covenants.setter
    def has_covenants(self, has_covenants):
        """Sets the has_covenants of this EfirDataHubModelsModelsBondCommonDataFields.

        Флаг наличия ковенанта  # noqa: E501

        :param has_covenants: The has_covenants of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: bool
        """

        self._has_covenants = has_covenants

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Примечание  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsBondCommonDataFields.

        Примечание  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def haverepayment(self):
        """Gets the haverepayment of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Наличие возможности досрочного погашения по инициативе эмитента  # noqa: E501

        :return: The haverepayment of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: bool
        """
        return self._haverepayment

    @haverepayment.setter
    def haverepayment(self, haverepayment):
        """Sets the haverepayment of this EfirDataHubModelsModelsBondCommonDataFields.

        Наличие возможности досрочного погашения по инициативе эмитента  # noqa: E501

        :param haverepayment: The haverepayment of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: bool
        """

        self._haverepayment = haverepayment

    @property
    def haveindexedfv(self):
        """Gets the haveindexedfv of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Облигация с индексируемым номиналом  # noqa: E501

        :return: The haveindexedfv of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: bool
        """
        return self._haveindexedfv

    @haveindexedfv.setter
    def haveindexedfv(self, haveindexedfv):
        """Sets the haveindexedfv of this EfirDataHubModelsModelsBondCommonDataFields.

        Облигация с индексируемым номиналом  # noqa: E501

        :param haveindexedfv: The haveindexedfv of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: bool
        """

        self._haveindexedfv = haveindexedfv

    @property
    def numdecimals(self):
        """Gets the numdecimals of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Количество знаков после запятой, до которого выполняют округление НКД и купонных выплат  # noqa: E501

        :return: The numdecimals of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._numdecimals

    @numdecimals.setter
    def numdecimals(self, numdecimals):
        """Sets the numdecimals of this EfirDataHubModelsModelsBondCommonDataFields.

        Количество знаков после запятой, до которого выполняют округление НКД и купонных выплат  # noqa: E501

        :param numdecimals: The numdecimals of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._numdecimals = numdecimals

    @property
    def couponperiod(self):
        """Gets the couponperiod of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Продолжительность текущего на дату запроса купонного периода в днях  # noqa: E501

        :return: The couponperiod of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._couponperiod

    @couponperiod.setter
    def couponperiod(self, couponperiod):
        """Sets the couponperiod of this EfirDataHubModelsModelsBondCommonDataFields.

        Продолжительность текущего на дату запроса купонного периода в днях  # noqa: E501

        :param couponperiod: The couponperiod of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._couponperiod = couponperiod

    @property
    def ismatched(self):
        """Gets the ismatched of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Производилась ли сверка инструмента  # noqa: E501

        :return: The ismatched of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: bool
        """
        return self._ismatched

    @ismatched.setter
    def ismatched(self, ismatched):
        """Sets the ismatched of this EfirDataHubModelsModelsBondCommonDataFields.

        Производилась ли сверка инструмента  # noqa: E501

        :param ismatched: The ismatched of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: bool
        """

        self._ismatched = ismatched

    @property
    def firstcoupondate(self):
        """Gets the firstcoupondate of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Дата начала первого купонного периода  # noqa: E501

        :return: The firstcoupondate of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._firstcoupondate

    @firstcoupondate.setter
    def firstcoupondate(self, firstcoupondate):
        """Sets the firstcoupondate of this EfirDataHubModelsModelsBondCommonDataFields.

        Дата начала первого купонного периода  # noqa: E501

        :param firstcoupondate: The firstcoupondate of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: datetime
        """

        self._firstcoupondate = firstcoupondate

    @property
    def name_issuer(self):
        """Gets the name_issuer of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Наименование эмитента выпуска  # noqa: E501

        :return: The name_issuer of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._name_issuer

    @name_issuer.setter
    def name_issuer(self, name_issuer):
        """Sets the name_issuer of this EfirDataHubModelsModelsBondCommonDataFields.

        Наименование эмитента выпуска  # noqa: E501

        :param name_issuer: The name_issuer of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._name_issuer = name_issuer

    @property
    def fininstid_borrower(self):
        """Gets the fininstid_borrower of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Идентификатор заемщика в базе Интерфакс  # noqa: E501

        :return: The fininstid_borrower of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid_borrower

    @fininstid_borrower.setter
    def fininstid_borrower(self, fininstid_borrower):
        """Sets the fininstid_borrower of this EfirDataHubModelsModelsBondCommonDataFields.

        Идентификатор заемщика в базе Интерфакс  # noqa: E501

        :param fininstid_borrower: The fininstid_borrower of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._fininstid_borrower = fininstid_borrower

    @property
    def okpo_borrower(self):
        """Gets the okpo_borrower of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        ОКПО заемщика  # noqa: E501

        :return: The okpo_borrower of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._okpo_borrower

    @okpo_borrower.setter
    def okpo_borrower(self, okpo_borrower):
        """Sets the okpo_borrower of this EfirDataHubModelsModelsBondCommonDataFields.

        ОКПО заемщика  # noqa: E501

        :param okpo_borrower: The okpo_borrower of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._okpo_borrower = okpo_borrower

    @property
    def name_borrower(self):
        """Gets the name_borrower of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Наименование заемщика  # noqa: E501

        :return: The name_borrower of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: str
        """
        return self._name_borrower

    @name_borrower.setter
    def name_borrower(self, name_borrower):
        """Sets the name_borrower of this EfirDataHubModelsModelsBondCommonDataFields.

        Наименование заемщика  # noqa: E501

        :param name_borrower: The name_borrower of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: str
        """

        self._name_borrower = name_borrower

    @property
    def iscomplicated(self):
        """Gets the iscomplicated of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Выпуск является сложным  # noqa: E501

        :return: The iscomplicated of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: bool
        """
        return self._iscomplicated

    @iscomplicated.setter
    def iscomplicated(self, iscomplicated):
        """Sets the iscomplicated of this EfirDataHubModelsModelsBondCommonDataFields.

        Выпуск является сложным  # noqa: E501

        :param iscomplicated: The iscomplicated of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: bool
        """

        self._iscomplicated = iscomplicated

    @property
    def available_for_unqualified(self):
        """Gets the available_for_unqualified of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Выпуск доступен для неквалифицированных инвесторов  # noqa: E501

        :return: The available_for_unqualified of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: bool
        """
        return self._available_for_unqualified

    @available_for_unqualified.setter
    def available_for_unqualified(self, available_for_unqualified):
        """Sets the available_for_unqualified of this EfirDataHubModelsModelsBondCommonDataFields.

        Выпуск доступен для неквалифицированных инвесторов  # noqa: E501

        :param available_for_unqualified: The available_for_unqualified of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: bool
        """

        self._available_for_unqualified = available_for_unqualified

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsBondCommonDataFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsBondCommonDataFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondCommonDataFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondCommonDataFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
