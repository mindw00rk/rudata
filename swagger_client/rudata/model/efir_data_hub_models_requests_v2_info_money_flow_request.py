# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2InfoMoneyFlowRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'date1': 'datetime',
        'date2': 'datetime',
        'use_offer': 'bool',
        'use_forecast': 'bool',
        'coupon_forecasts': 'list[EfirDataHubModelsRequestsV2InfoMoneyFlowRequestForecast]'
    }

    attribute_map = {
        'id': 'id',
        'date1': 'date1',
        'date2': 'date2',
        'use_offer': 'useOffer',
        'use_forecast': 'useForecast',
        'coupon_forecasts': 'couponForecasts'
    }

    def __init__(self, id=None, date1=None, date2=None, use_offer=None, use_forecast=None, coupon_forecasts=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2InfoMoneyFlowRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._date1 = None
        self._date2 = None
        self._use_offer = None
        self._use_forecast = None
        self._coupon_forecasts = None
        self.discriminator = None
        self.id = id
        self.date1 = date1
        self.date2 = date2
        if use_offer is not None:
            self.use_offer = use_offer
        if use_forecast is not None:
            self.use_forecast = use_forecast
        if coupon_forecasts is not None:
            self.coupon_forecasts = coupon_forecasts

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501

        Идентификатор инструмента. ISIN, RegCode, NRDCode, FintoolId.  # noqa: E501

        :return: The id of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.

        Идентификатор инструмента. ISIN, RegCode, NRDCode, FintoolId.  # noqa: E501

        :param id: The id of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def date1(self):
        """Gets the date1 of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501

        Дата начала интервала времени.  # noqa: E501

        :return: The date1 of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date1

    @date1.setter
    def date1(self, date1):
        """Sets the date1 of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.

        Дата начала интервала времени.  # noqa: E501

        :param date1: The date1 of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501
        :type: datetime
        """
        if date1 is None:
            raise ValueError("Invalid value for `date1`, must not be `None`")  # noqa: E501

        self._date1 = date1

    @property
    def date2(self):
        """Gets the date2 of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501

        Дата окончания интервала времени.  # noqa: E501

        :return: The date2 of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date2

    @date2.setter
    def date2(self, date2):
        """Sets the date2 of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.

        Дата окончания интервала времени.  # noqa: E501

        :param date2: The date2 of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501
        :type: datetime
        """
        if date2 is None:
            raise ValueError("Invalid value for `date2`, must not be `None`")  # noqa: E501

        self._date2 = date2

    @property
    def use_offer(self):
        """Gets the use_offer of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501

        1 – исходя из продажи облигации в ближайшую оферту  # noqa: E501

        :return: The use_offer of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_offer

    @use_offer.setter
    def use_offer(self, use_offer):
        """Sets the use_offer of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.

        1 – исходя из продажи облигации в ближайшую оферту  # noqa: E501

        :param use_offer: The use_offer of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501
        :type: bool
        """

        self._use_offer = use_offer

    @property
    def use_forecast(self):
        """Gets the use_forecast of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501

        1 – исходя из предполагаемых дивидендов  # noqa: E501

        :return: The use_forecast of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_forecast

    @use_forecast.setter
    def use_forecast(self, use_forecast):
        """Sets the use_forecast of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.

        1 – исходя из предполагаемых дивидендов  # noqa: E501

        :param use_forecast: The use_forecast of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501
        :type: bool
        """

        self._use_forecast = use_forecast

    @property
    def coupon_forecasts(self):
        """Gets the coupon_forecasts of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501

        Пользовательские данные для описания неизвестных купонов.  # noqa: E501

        :return: The coupon_forecasts of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501
        :rtype: list[EfirDataHubModelsRequestsV2InfoMoneyFlowRequestForecast]
        """
        return self._coupon_forecasts

    @coupon_forecasts.setter
    def coupon_forecasts(self, coupon_forecasts):
        """Sets the coupon_forecasts of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.

        Пользовательские данные для описания неизвестных купонов.  # noqa: E501

        :param coupon_forecasts: The coupon_forecasts of this EfirDataHubModelsRequestsV2InfoMoneyFlowRequest.  # noqa: E501
        :type: list[EfirDataHubModelsRequestsV2InfoMoneyFlowRequestForecast]
        """

        self._coupon_forecasts = coupon_forecasts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2InfoMoneyFlowRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2InfoMoneyFlowRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
