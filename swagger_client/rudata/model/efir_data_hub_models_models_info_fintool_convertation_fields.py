# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsInfoFintoolConvertationFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'beg_conv_date': 'datetime',
        'coeficient': 'float',
        'end_conv_date': 'datetime',
        'fintoolid': 'int',
        'id_fintool_alter': 'int',
        'note': 'str',
        'type_convertation': 'str',
        'counter': 'int'
    }

    attribute_map = {
        'beg_conv_date': 'beg_conv_date',
        'coeficient': 'coeficient',
        'end_conv_date': 'end_conv_date',
        'fintoolid': 'fintoolid',
        'id_fintool_alter': 'id_fintool_alter',
        'note': 'note',
        'type_convertation': 'type_convertation',
        'counter': 'counter'
    }

    def __init__(self, beg_conv_date=None, coeficient=None, end_conv_date=None, fintoolid=None, id_fintool_alter=None, note=None, type_convertation=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsInfoFintoolConvertationFields - a model defined in Swagger"""  # noqa: E501
        self._beg_conv_date = None
        self._coeficient = None
        self._end_conv_date = None
        self._fintoolid = None
        self._id_fintool_alter = None
        self._note = None
        self._type_convertation = None
        self._counter = None
        self.discriminator = None
        if beg_conv_date is not None:
            self.beg_conv_date = beg_conv_date
        if coeficient is not None:
            self.coeficient = coeficient
        if end_conv_date is not None:
            self.end_conv_date = end_conv_date
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if id_fintool_alter is not None:
            self.id_fintool_alter = id_fintool_alter
        if note is not None:
            self.note = note
        if type_convertation is not None:
            self.type_convertation = type_convertation
        if counter is not None:
            self.counter = counter

    @property
    def beg_conv_date(self):
        """Gets the beg_conv_date of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501

        Дата начала конвертации  # noqa: E501

        :return: The beg_conv_date of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :rtype: datetime
        """
        return self._beg_conv_date

    @beg_conv_date.setter
    def beg_conv_date(self, beg_conv_date):
        """Sets the beg_conv_date of this EfirDataHubModelsModelsInfoFintoolConvertationFields.

        Дата начала конвертации  # noqa: E501

        :param beg_conv_date: The beg_conv_date of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :type: datetime
        """

        self._beg_conv_date = beg_conv_date

    @property
    def coeficient(self):
        """Gets the coeficient of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501

        Коэффициент конвертации  # noqa: E501

        :return: The coeficient of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :rtype: float
        """
        return self._coeficient

    @coeficient.setter
    def coeficient(self, coeficient):
        """Sets the coeficient of this EfirDataHubModelsModelsInfoFintoolConvertationFields.

        Коэффициент конвертации  # noqa: E501

        :param coeficient: The coeficient of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :type: float
        """

        self._coeficient = coeficient

    @property
    def end_conv_date(self):
        """Gets the end_conv_date of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501

        Дата окончания конвертации  # noqa: E501

        :return: The end_conv_date of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :rtype: datetime
        """
        return self._end_conv_date

    @end_conv_date.setter
    def end_conv_date(self, end_conv_date):
        """Sets the end_conv_date of this EfirDataHubModelsModelsInfoFintoolConvertationFields.

        Дата окончания конвертации  # noqa: E501

        :param end_conv_date: The end_conv_date of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :type: datetime
        """

        self._end_conv_date = end_conv_date

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501

        Идентификатор инструмента  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsInfoFintoolConvertationFields.

        Идентификатор инструмента  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def id_fintool_alter(self):
        """Gets the id_fintool_alter of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501

        Идентификатор выпуска ценных бумаг, в который совершается конвертация ценных бумаг.  # noqa: E501

        :return: The id_fintool_alter of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :rtype: int
        """
        return self._id_fintool_alter

    @id_fintool_alter.setter
    def id_fintool_alter(self, id_fintool_alter):
        """Sets the id_fintool_alter of this EfirDataHubModelsModelsInfoFintoolConvertationFields.

        Идентификатор выпуска ценных бумаг, в который совершается конвертация ценных бумаг.  # noqa: E501

        :param id_fintool_alter: The id_fintool_alter of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :type: int
        """

        self._id_fintool_alter = id_fintool_alter

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501

        Примечание  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsInfoFintoolConvertationFields.

        Примечание  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def type_convertation(self):
        """Gets the type_convertation of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501

        Тип конвертации  # noqa: E501

        :return: The type_convertation of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :rtype: str
        """
        return self._type_convertation

    @type_convertation.setter
    def type_convertation(self, type_convertation):
        """Sets the type_convertation of this EfirDataHubModelsModelsInfoFintoolConvertationFields.

        Тип конвертации  # noqa: E501

        :param type_convertation: The type_convertation of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :type: str
        """

        self._type_convertation = type_convertation

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsInfoFintoolConvertationFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsInfoFintoolConvertationFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsInfoFintoolConvertationFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsInfoFintoolConvertationFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
