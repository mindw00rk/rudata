# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'id_type': 'str',
        'reports': 'list[EfirDataHubModelsModelsEmitentRsbuReportFields]',
        'sector': 'int',
        'date_from': 'datetime',
        'date_to': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'id_type': 'idType',
        'reports': 'reports',
        'sector': 'sector',
        'date_from': 'dateFrom',
        'date_to': 'dateTo'
    }

    def __init__(self, id=None, id_type=None, reports=None, sector=None, date_from=None, date_to=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_type = None
        self._reports = None
        self._sector = None
        self._date_from = None
        self._date_to = None
        self.discriminator = None
        self.id = id
        self.id_type = id_type
        self.reports = reports
        self.sector = sector
        self.date_from = date_from
        self.date_to = date_to

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501

        Идентификатор компании - INN или OGRN  # noqa: E501

        :return: The id of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.

        Идентификатор компании - INN или OGRN  # noqa: E501

        :param id: The id of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_type(self):
        """Gets the id_type of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501

        Тип идентификатора - INN,OGRN  # noqa: E501

        :return: The id_type of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501
        :rtype: str
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.

        Тип идентификатора - INN,OGRN  # noqa: E501

        :param id_type: The id_type of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501
        :type: str
        """
        if id_type is None:
            raise ValueError("Invalid value for `id_type`, must not be `None`")  # noqa: E501

        self._id_type = id_type

    @property
    def reports(self):
        """Gets the reports of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501

        Массив отчётности по структуре ответа метода /v2/Emitent/{code}/MSFOReport(Ext)  # noqa: E501

        :return: The reports of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501
        :rtype: list[EfirDataHubModelsModelsEmitentRsbuReportFields]
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.

        Массив отчётности по структуре ответа метода /v2/Emitent/{code}/MSFOReport(Ext)  # noqa: E501

        :param reports: The reports of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501
        :type: list[EfirDataHubModelsModelsEmitentRsbuReportFields]
        """
        if reports is None:
            raise ValueError("Invalid value for `reports`, must not be `None`")  # noqa: E501

        self._reports = reports

    @property
    def sector(self):
        """Gets the sector of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501

        Id сектора компании из метода /Dictionary/MarketSectors  # noqa: E501

        :return: The sector of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501
        :rtype: int
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.

        Id сектора компании из метода /Dictionary/MarketSectors  # noqa: E501

        :param sector: The sector of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501
        :type: int
        """
        if sector is None:
            raise ValueError("Invalid value for `sector`, must not be `None`")  # noqa: E501

        self._sector = sector

    @property
    def date_from(self):
        """Gets the date_from of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501

        Дата начала периода отчётности  # noqa: E501

        :return: The date_from of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.

        Дата начала периода отчётности  # noqa: E501

        :param date_from: The date_from of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501
        :type: datetime
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")  # noqa: E501

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501

        Дата конца периода отчётности  # noqa: E501

        :return: The date_to of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.

        Дата конца периода отчётности  # noqa: E501

        :param date_to: The date_to of this EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest.  # noqa: E501
        :type: datetime
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")  # noqa: E501

        self._date_to = date_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2ScoringCustomScoringRsbuRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
