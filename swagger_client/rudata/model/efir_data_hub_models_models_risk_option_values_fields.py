# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRiskOptionValuesFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'strike': 'float',
        'typeopt': 'str',
        'expdate': 'datetime',
        't': 'float',
        'f': 'float',
        'futcur': 'str',
        'ba': 'float',
        'bacur': 'str',
        'r': 'float',
        'popt': 'float',
        'flot': 'float',
        'isin_ba': 'str',
        'coeff_ba_f': 'float',
        'point': 'float',
        'gamma': 'float',
        'delta': 'float',
        'vega': 'float',
        'sigma': 'float',
        'd1': 'float'
    }

    attribute_map = {
        'strike': 'strike',
        'typeopt': 'typeopt',
        'expdate': 'expdate',
        't': 't',
        'f': 'f',
        'futcur': 'futcur',
        'ba': 'ba',
        'bacur': 'bacur',
        'r': 'r',
        'popt': 'popt',
        'flot': 'flot',
        'isin_ba': 'isin_ba',
        'coeff_ba_f': 'coeff_ba_f',
        'point': 'point',
        'gamma': 'gamma',
        'delta': 'delta',
        'vega': 'vega',
        'sigma': 'sigma',
        'd1': 'd1'
    }

    def __init__(self, strike=None, typeopt=None, expdate=None, t=None, f=None, futcur=None, ba=None, bacur=None, r=None, popt=None, flot=None, isin_ba=None, coeff_ba_f=None, point=None, gamma=None, delta=None, vega=None, sigma=None, d1=None):  # noqa: E501
        """EfirDataHubModelsModelsRiskOptionValuesFields - a model defined in Swagger"""  # noqa: E501
        self._strike = None
        self._typeopt = None
        self._expdate = None
        self._t = None
        self._f = None
        self._futcur = None
        self._ba = None
        self._bacur = None
        self._r = None
        self._popt = None
        self._flot = None
        self._isin_ba = None
        self._coeff_ba_f = None
        self._point = None
        self._gamma = None
        self._delta = None
        self._vega = None
        self._sigma = None
        self._d1 = None
        self.discriminator = None
        if strike is not None:
            self.strike = strike
        if typeopt is not None:
            self.typeopt = typeopt
        if expdate is not None:
            self.expdate = expdate
        if t is not None:
            self.t = t
        if f is not None:
            self.f = f
        if futcur is not None:
            self.futcur = futcur
        if ba is not None:
            self.ba = ba
        if bacur is not None:
            self.bacur = bacur
        if r is not None:
            self.r = r
        if popt is not None:
            self.popt = popt
        if flot is not None:
            self.flot = flot
        if isin_ba is not None:
            self.isin_ba = isin_ba
        if coeff_ba_f is not None:
            self.coeff_ba_f = coeff_ba_f
        if point is not None:
            self.point = point
        if gamma is not None:
            self.gamma = gamma
        if delta is not None:
            self.delta = delta
        if vega is not None:
            self.vega = vega
        if sigma is not None:
            self.sigma = sigma
        if d1 is not None:
            self.d1 = d1

    @property
    def strike(self):
        """Gets the strike of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501


        :return: The strike of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this EfirDataHubModelsModelsRiskOptionValuesFields.


        :param strike: The strike of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._strike = strike

    @property
    def typeopt(self):
        """Gets the typeopt of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        Тип  # noqa: E501

        :return: The typeopt of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: str
        """
        return self._typeopt

    @typeopt.setter
    def typeopt(self, typeopt):
        """Sets the typeopt of this EfirDataHubModelsModelsRiskOptionValuesFields.

        Тип  # noqa: E501

        :param typeopt: The typeopt of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: str
        """

        self._typeopt = typeopt

    @property
    def expdate(self):
        """Gets the expdate of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        Дата экспирации  # noqa: E501

        :return: The expdate of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._expdate

    @expdate.setter
    def expdate(self, expdate):
        """Sets the expdate of this EfirDataHubModelsModelsRiskOptionValuesFields.

        Дата экспирации  # noqa: E501

        :param expdate: The expdate of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: datetime
        """

        self._expdate = expdate

    @property
    def t(self):
        """Gets the t of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        Срок от даты расчета до expdate в годах  # noqa: E501

        :return: The t of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this EfirDataHubModelsModelsRiskOptionValuesFields.

        Срок от даты расчета до expdate в годах  # noqa: E501

        :param t: The t of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._t = t

    @property
    def f(self):
        """Gets the f of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        Цена фьючерса опциона  # noqa: E501

        :return: The f of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._f

    @f.setter
    def f(self, f):
        """Sets the f of this EfirDataHubModelsModelsRiskOptionValuesFields.

        Цена фьючерса опциона  # noqa: E501

        :param f: The f of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._f = f

    @property
    def futcur(self):
        """Gets the futcur of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        Валюта фьючерса  # noqa: E501

        :return: The futcur of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: str
        """
        return self._futcur

    @futcur.setter
    def futcur(self, futcur):
        """Sets the futcur of this EfirDataHubModelsModelsRiskOptionValuesFields.

        Валюта фьючерса  # noqa: E501

        :param futcur: The futcur of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: str
        """

        self._futcur = futcur

    @property
    def ba(self):
        """Gets the ba of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        Цена базового актива фьючерса  # noqa: E501

        :return: The ba of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._ba

    @ba.setter
    def ba(self, ba):
        """Sets the ba of this EfirDataHubModelsModelsRiskOptionValuesFields.

        Цена базового актива фьючерса  # noqa: E501

        :param ba: The ba of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._ba = ba

    @property
    def bacur(self):
        """Gets the bacur of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        Валюта базового актива фьючерса  # noqa: E501

        :return: The bacur of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: str
        """
        return self._bacur

    @bacur.setter
    def bacur(self, bacur):
        """Sets the bacur of this EfirDataHubModelsModelsRiskOptionValuesFields.

        Валюта базового актива фьючерса  # noqa: E501

        :param bacur: The bacur of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: str
        """

        self._bacur = bacur

    @property
    def r(self):
        """Gets the r of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        Безрисковая ставка в валюте базового актива  # noqa: E501

        :return: The r of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._r

    @r.setter
    def r(self, r):
        """Sets the r of this EfirDataHubModelsModelsRiskOptionValuesFields.

        Безрисковая ставка в валюте базового актива  # noqa: E501

        :param r: The r of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._r = r

    @property
    def popt(self):
        """Gets the popt of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        Теоретическая цена опциона на дату расчета  # noqa: E501

        :return: The popt of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._popt

    @popt.setter
    def popt(self, popt):
        """Sets the popt of this EfirDataHubModelsModelsRiskOptionValuesFields.

        Теоретическая цена опциона на дату расчета  # noqa: E501

        :param popt: The popt of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._popt = popt

    @property
    def flot(self):
        """Gets the flot of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        Размер лота фьючерса  # noqa: E501

        :return: The flot of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._flot

    @flot.setter
    def flot(self, flot):
        """Sets the flot of this EfirDataHubModelsModelsRiskOptionValuesFields.

        Размер лота фьючерса  # noqa: E501

        :param flot: The flot of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._flot = flot

    @property
    def isin_ba(self):
        """Gets the isin_ba of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        ISIN базового актива  # noqa: E501

        :return: The isin_ba of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: str
        """
        return self._isin_ba

    @isin_ba.setter
    def isin_ba(self, isin_ba):
        """Sets the isin_ba of this EfirDataHubModelsModelsRiskOptionValuesFields.

        ISIN базового актива  # noqa: E501

        :param isin_ba: The isin_ba of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: str
        """

        self._isin_ba = isin_ba

    @property
    def coeff_ba_f(self):
        """Gets the coeff_ba_f of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        Количество единиц базового актива в одном фьючерсном контракте  # noqa: E501

        :return: The coeff_ba_f of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._coeff_ba_f

    @coeff_ba_f.setter
    def coeff_ba_f(self, coeff_ba_f):
        """Sets the coeff_ba_f of this EfirDataHubModelsModelsRiskOptionValuesFields.

        Количество единиц базового актива в одном фьючерсном контракте  # noqa: E501

        :param coeff_ba_f: The coeff_ba_f of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._coeff_ba_f = coeff_ba_f

    @property
    def point(self):
        """Gets the point of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501

        Стоимость одного пункта цены в валюте фьючерса  # noqa: E501

        :return: The point of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this EfirDataHubModelsModelsRiskOptionValuesFields.

        Стоимость одного пункта цены в валюте фьючерса  # noqa: E501

        :param point: The point of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._point = point

    @property
    def gamma(self):
        """Gets the gamma of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501


        :return: The gamma of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._gamma

    @gamma.setter
    def gamma(self, gamma):
        """Sets the gamma of this EfirDataHubModelsModelsRiskOptionValuesFields.


        :param gamma: The gamma of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._gamma = gamma

    @property
    def delta(self):
        """Gets the delta of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501


        :return: The delta of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this EfirDataHubModelsModelsRiskOptionValuesFields.


        :param delta: The delta of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._delta = delta

    @property
    def vega(self):
        """Gets the vega of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501


        :return: The vega of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._vega

    @vega.setter
    def vega(self, vega):
        """Sets the vega of this EfirDataHubModelsModelsRiskOptionValuesFields.


        :param vega: The vega of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._vega = vega

    @property
    def sigma(self):
        """Gets the sigma of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501


        :return: The sigma of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._sigma

    @sigma.setter
    def sigma(self, sigma):
        """Sets the sigma of this EfirDataHubModelsModelsRiskOptionValuesFields.


        :param sigma: The sigma of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._sigma = sigma

    @property
    def d1(self):
        """Gets the d1 of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501


        :return: The d1 of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :rtype: float
        """
        return self._d1

    @d1.setter
    def d1(self, d1):
        """Sets the d1 of this EfirDataHubModelsModelsRiskOptionValuesFields.


        :param d1: The d1 of this EfirDataHubModelsModelsRiskOptionValuesFields.  # noqa: E501
        :type: float
        """

        self._d1 = d1

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRiskOptionValuesFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRiskOptionValuesFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
