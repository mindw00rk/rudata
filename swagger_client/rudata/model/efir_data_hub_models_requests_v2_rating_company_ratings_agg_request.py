# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ids': 'list[str]',
        'id_types': 'list[str]',
        'company_name': 'str',
        'agg_type': 'str',
        'using_type': 'str',
        'priority_ra': 'str',
        '_date': 'datetime'
    }

    attribute_map = {
        'ids': 'ids',
        'id_types': 'idTypes',
        'company_name': 'companyName',
        'agg_type': 'aggType',
        'using_type': 'usingType',
        'priority_ra': 'priorityRA',
        '_date': 'date'
    }

    def __init__(self, ids=None, id_types=None, company_name=None, agg_type=None, using_type=None, priority_ra=None, _date=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest - a model defined in Swagger"""  # noqa: E501
        self._ids = None
        self._id_types = None
        self._company_name = None
        self._agg_type = None
        self._using_type = None
        self._priority_ra = None
        self.__date = None
        self.discriminator = None
        self.ids = ids
        if id_types is not None:
            self.id_types = id_types
        if company_name is not None:
            self.company_name = company_name
        if agg_type is not None:
            self.agg_type = agg_type
        if using_type is not None:
            self.using_type = using_type
        if priority_ra is not None:
            self.priority_ra = priority_ra
        if _date is not None:
            self._date = _date

    @property
    def ids(self):
        """Gets the ids of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501

        Список идентификаторов компаний/стран (Обязательный)  # noqa: E501

        :return: The ids of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.

        Список идентификаторов компаний/стран (Обязательный)  # noqa: E501

        :param ids: The ids of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :type: list[str]
        """
        if ids is None:
            raise ValueError("Invalid value for `ids`, must not be `None`")  # noqa: E501

        self._ids = ids

    @property
    def id_types(self):
        """Gets the id_types of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501

        Тип идентификатора компании/страны. (Необязательный) Возможные значения:  \"OKPO\" - ОКПО  \"OGRN\" - ОГРН  \"INN\" - ИНН для российских компаний, TIN для остальных  \"TIN\" - TIN (США)  \"LEI_CODE\" - LEI-код  \"SWIFT\" - Код SWIFT  \"ISSUER_NRD\" - Идентификатор эмитента в базе НРД  \"FININSTID\" - Идентификатор эмитента в базе Интерфакс  \"SPARKID\" - Идентификатор эмитента в базе СПАРК  \"A2\" - Идентификатор страны A2 по ISO 3166-1 Alpha-2  \"A3\" - Идентификатор страны A3 по ISO 3166-1 Alpha-3  # noqa: E501

        :return: The id_types of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_types

    @id_types.setter
    def id_types(self, id_types):
        """Sets the id_types of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.

        Тип идентификатора компании/страны. (Необязательный) Возможные значения:  \"OKPO\" - ОКПО  \"OGRN\" - ОГРН  \"INN\" - ИНН для российских компаний, TIN для остальных  \"TIN\" - TIN (США)  \"LEI_CODE\" - LEI-код  \"SWIFT\" - Код SWIFT  \"ISSUER_NRD\" - Идентификатор эмитента в базе НРД  \"FININSTID\" - Идентификатор эмитента в базе Интерфакс  \"SPARKID\" - Идентификатор эмитента в базе СПАРК  \"A2\" - Идентификатор страны A2 по ISO 3166-1 Alpha-2  \"A3\" - Идентификатор страны A3 по ISO 3166-1 Alpha-3  # noqa: E501

        :param id_types: The id_types of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :type: list[str]
        """

        self._id_types = id_types

    @property
    def company_name(self):
        """Gets the company_name of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501

        Тип наименования компании, выводимого в поле company_name. (Необязательный) Возможные значения:  \"SHORTNAME_RUS\"  \"FULLNAME_RUS\"  \"SHORTNAME_ENG\"  \"FULLNAME_ENG\"  \"SHORTNAME_RUS_NRD\"  \"FULLNAME_RUS_NRD\"  \"SHORTNAME_ENG_NRD\"  \"FULLNAME_ENG_NRD\"  \"SHORTNAME_RUS_SPARK\"  \"FULLNAME_RUS_SPARK\"  \"SHORTNAME_ENG_SPARK\"  \"FULLNAME_ENG_SPARK\"  # noqa: E501

        :return: The company_name of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.

        Тип наименования компании, выводимого в поле company_name. (Необязательный) Возможные значения:  \"SHORTNAME_RUS\"  \"FULLNAME_RUS\"  \"SHORTNAME_ENG\"  \"FULLNAME_ENG\"  \"SHORTNAME_RUS_NRD\"  \"FULLNAME_RUS_NRD\"  \"SHORTNAME_ENG_NRD\"  \"FULLNAME_ENG_NRD\"  \"SHORTNAME_RUS_SPARK\"  \"FULLNAME_RUS_SPARK\"  \"SHORTNAME_ENG_SPARK\"  \"FULLNAME_ENG_SPARK\"  # noqa: E501

        :param company_name: The company_name of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def agg_type(self):
        """Gets the agg_type of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501

        Идентификатор типа агрегата. (Необязательный) Допустимые значения: MIN, MAX. По умолчанию MAX.  # noqa: E501

        :return: The agg_type of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :rtype: str
        """
        return self._agg_type

    @agg_type.setter
    def agg_type(self, agg_type):
        """Sets the agg_type of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.

        Идентификатор типа агрегата. (Необязательный) Допустимые значения: MIN, MAX. По умолчанию MAX.  # noqa: E501

        :param agg_type: The agg_type of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :type: str
        """

        self._agg_type = agg_type

    @property
    def using_type(self):
        """Gets the using_type of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501

        (Необязательный, действует только на российские компании)   Вариант использования иностранных и российских рейтингов. Допустимые значения: Rus/Big3/Composite.   По умолчанию Rus – используются только российские рейтинги.   Big3 – используются только иностранные рейтинги.   Composite – при отсутствии российских рейтингов у российской компании использовать рейтинги иностранных рейтинговых агентств, но значение приводить к шкале для российских субъектов по таблице соответствия.  # noqa: E501

        :return: The using_type of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :rtype: str
        """
        return self._using_type

    @using_type.setter
    def using_type(self, using_type):
        """Sets the using_type of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.

        (Необязательный, действует только на российские компании)   Вариант использования иностранных и российских рейтингов. Допустимые значения: Rus/Big3/Composite.   По умолчанию Rus – используются только российские рейтинги.   Big3 – используются только иностранные рейтинги.   Composite – при отсутствии российских рейтингов у российской компании использовать рейтинги иностранных рейтинговых агентств, но значение приводить к шкале для российских субъектов по таблице соответствия.  # noqa: E501

        :param using_type: The using_type of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :type: str
        """

        self._using_type = using_type

    @property
    def priority_ra(self):
        """Gets the priority_ra of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501

        (Необязательный, действует только на российские компании)   Приоритетное российское рейтинговое агентство. Допустимые значения: AKRA/MAX.   По умолчанию AKRA – при прочих равных показываем рейтинги АКРА. RAEX показываем, только если рейтингов от АКРА нет совсем.   MAX – показываем АКРА, RAEX показываем, только если он лучше.  # noqa: E501

        :return: The priority_ra of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :rtype: str
        """
        return self._priority_ra

    @priority_ra.setter
    def priority_ra(self, priority_ra):
        """Sets the priority_ra of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.

        (Необязательный, действует только на российские компании)   Приоритетное российское рейтинговое агентство. Допустимые значения: AKRA/MAX.   По умолчанию AKRA – при прочих равных показываем рейтинги АКРА. RAEX показываем, только если рейтингов от АКРА нет совсем.   MAX – показываем АКРА, RAEX показываем, только если он лучше.  # noqa: E501

        :param priority_ra: The priority_ra of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :type: str
        """

        self._priority_ra = priority_ra

    @property
    def _date(self):
        """Gets the _date of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501

        (Необязательный) Дата рейтингов. Если не задано, используется текущая дата.  # noqa: E501

        :return: The _date of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.

        (Необязательный) Дата рейтингов. Если не задано, используется текущая дата.  # noqa: E501

        :param _date: The _date of this EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2RatingCompanyRatingsAggRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
