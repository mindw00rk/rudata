# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRatingRatingsHistoryFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name_ra': 'str',
        'dt': 'datetime',
        'last': 'str',
        'last_dt': 'datetime',
        'change': 'str',
        'forecast': 'str',
        'advanced': 'str',
        'prev': 'str',
        'prev_dt': 'datetime',
        'rating_agency': 'str',
        'rating_code': 'str',
        'rating_full_name_rus': 'str',
        'rating_official_name': 'str',
        'rating_object_type': 'str',
        'is_credit_rating': 'int',
        'rating_term': 'str',
        'scale_type': 'str',
        'scale_cur': 'str',
        'short_name_org': 'str',
        'inn': 'str',
        'lei': 'str',
        'sector': 'str',
        'country': 'str',
        'role': 'str',
        'short_name_issue': 'str',
        'isin': 'str',
        'reg_code': 'str',
        'sector_by_rating': 'str',
        'region': 'str',
        'is_archive': 'int',
        'is_accred_br': 'int',
        'full_name_org': 'str',
        'press_release': 'str',
        'is_sf': 'float',
        'isregion': 'float',
        'rating_id': 'int',
        'fininstid': 'int',
        'fintoolid': 'int',
        'update_date': 'datetime',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'name_ra': 'name_ra',
        'dt': 'dt',
        'last': 'last',
        'last_dt': 'last_dt',
        'change': 'change',
        'forecast': 'forecast',
        'advanced': 'advanced',
        'prev': 'prev',
        'prev_dt': 'prev_dt',
        'rating_agency': 'rating_agency',
        'rating_code': 'rating_code',
        'rating_full_name_rus': 'rating_full_name_rus',
        'rating_official_name': 'rating_official_name',
        'rating_object_type': 'rating_object_type',
        'is_credit_rating': 'is_credit_rating',
        'rating_term': 'rating_term',
        'scale_type': 'scale_type',
        'scale_cur': 'scale_cur',
        'short_name_org': 'short_name_org',
        'inn': 'inn',
        'lei': 'lei',
        'sector': 'sector',
        'country': 'country',
        'role': 'role',
        'short_name_issue': 'short_name_issue',
        'isin': 'isin',
        'reg_code': 'reg_code',
        'sector_by_rating': 'sector_by_rating',
        'region': 'region',
        'is_archive': 'is_archive',
        'is_accred_br': 'is_accred_br',
        'full_name_org': 'full_name_org',
        'press_release': 'press_release',
        'is_sf': 'is_sf',
        'isregion': 'isregion',
        'rating_id': 'rating_id',
        'fininstid': 'fininstid',
        'fintoolid': 'fintoolid',
        'update_date': 'update_date',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, name_ra=None, dt=None, last=None, last_dt=None, change=None, forecast=None, advanced=None, prev=None, prev_dt=None, rating_agency=None, rating_code=None, rating_full_name_rus=None, rating_official_name=None, rating_object_type=None, is_credit_rating=None, rating_term=None, scale_type=None, scale_cur=None, short_name_org=None, inn=None, lei=None, sector=None, country=None, role=None, short_name_issue=None, isin=None, reg_code=None, sector_by_rating=None, region=None, is_archive=None, is_accred_br=None, full_name_org=None, press_release=None, is_sf=None, isregion=None, rating_id=None, fininstid=None, fintoolid=None, update_date=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsRatingRatingsHistoryFields - a model defined in Swagger"""  # noqa: E501
        self._name_ra = None
        self._dt = None
        self._last = None
        self._last_dt = None
        self._change = None
        self._forecast = None
        self._advanced = None
        self._prev = None
        self._prev_dt = None
        self._rating_agency = None
        self._rating_code = None
        self._rating_full_name_rus = None
        self._rating_official_name = None
        self._rating_object_type = None
        self._is_credit_rating = None
        self._rating_term = None
        self._scale_type = None
        self._scale_cur = None
        self._short_name_org = None
        self._inn = None
        self._lei = None
        self._sector = None
        self._country = None
        self._role = None
        self._short_name_issue = None
        self._isin = None
        self._reg_code = None
        self._sector_by_rating = None
        self._region = None
        self._is_archive = None
        self._is_accred_br = None
        self._full_name_org = None
        self._press_release = None
        self._is_sf = None
        self._isregion = None
        self._rating_id = None
        self._fininstid = None
        self._fintoolid = None
        self._update_date = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if name_ra is not None:
            self.name_ra = name_ra
        if dt is not None:
            self.dt = dt
        if last is not None:
            self.last = last
        if last_dt is not None:
            self.last_dt = last_dt
        if change is not None:
            self.change = change
        if forecast is not None:
            self.forecast = forecast
        if advanced is not None:
            self.advanced = advanced
        if prev is not None:
            self.prev = prev
        if prev_dt is not None:
            self.prev_dt = prev_dt
        if rating_agency is not None:
            self.rating_agency = rating_agency
        if rating_code is not None:
            self.rating_code = rating_code
        if rating_full_name_rus is not None:
            self.rating_full_name_rus = rating_full_name_rus
        if rating_official_name is not None:
            self.rating_official_name = rating_official_name
        if rating_object_type is not None:
            self.rating_object_type = rating_object_type
        if is_credit_rating is not None:
            self.is_credit_rating = is_credit_rating
        if rating_term is not None:
            self.rating_term = rating_term
        if scale_type is not None:
            self.scale_type = scale_type
        if scale_cur is not None:
            self.scale_cur = scale_cur
        if short_name_org is not None:
            self.short_name_org = short_name_org
        if inn is not None:
            self.inn = inn
        if lei is not None:
            self.lei = lei
        if sector is not None:
            self.sector = sector
        if country is not None:
            self.country = country
        if role is not None:
            self.role = role
        if short_name_issue is not None:
            self.short_name_issue = short_name_issue
        if isin is not None:
            self.isin = isin
        if reg_code is not None:
            self.reg_code = reg_code
        if sector_by_rating is not None:
            self.sector_by_rating = sector_by_rating
        if region is not None:
            self.region = region
        if is_archive is not None:
            self.is_archive = is_archive
        if is_accred_br is not None:
            self.is_accred_br = is_accred_br
        if full_name_org is not None:
            self.full_name_org = full_name_org
        if press_release is not None:
            self.press_release = press_release
        if is_sf is not None:
            self.is_sf = is_sf
        if isregion is not None:
            self.isregion = isregion
        if rating_id is not None:
            self.rating_id = rating_id
        if fininstid is not None:
            self.fininstid = fininstid
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if update_date is not None:
            self.update_date = update_date
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def name_ra(self):
        """Gets the name_ra of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Описание рейтингового события  # noqa: E501

        :return: The name_ra of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._name_ra

    @name_ra.setter
    def name_ra(self, name_ra):
        """Sets the name_ra of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Описание рейтингового события  # noqa: E501

        :param name_ra: The name_ra of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._name_ra = name_ra

    @property
    def dt(self):
        """Gets the dt of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Дата рейтингового события  # noqa: E501

        :return: The dt of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Дата рейтингового события  # noqa: E501

        :param dt: The dt of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def last(self):
        """Gets the last of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Значение рейтинга  # noqa: E501

        :return: The last of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Значение рейтинга  # noqa: E501

        :param last: The last of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._last = last

    @property
    def last_dt(self):
        """Gets the last_dt of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Дата присвоения рейтинга  # noqa: E501

        :return: The last_dt of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: datetime
        """
        return self._last_dt

    @last_dt.setter
    def last_dt(self, last_dt):
        """Sets the last_dt of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Дата присвоения рейтинга  # noqa: E501

        :param last_dt: The last_dt of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: datetime
        """

        self._last_dt = last_dt

    @property
    def change(self):
        """Gets the change of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Изменение рейтинга  # noqa: E501

        :return: The change of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Изменение рейтинга  # noqa: E501

        :param change: The change of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._change = change

    @property
    def forecast(self):
        """Gets the forecast of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Прогноз рейтинга  # noqa: E501

        :return: The forecast of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._forecast

    @forecast.setter
    def forecast(self, forecast):
        """Sets the forecast of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Прогноз рейтинга  # noqa: E501

        :param forecast: The forecast of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._forecast = forecast

    @property
    def advanced(self):
        """Gets the advanced of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Дополнительные параметры рейтинга – основной, на пересмотре, ожидаемый, предварительный  # noqa: E501

        :return: The advanced of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Дополнительные параметры рейтинга – основной, на пересмотре, ожидаемый, предварительный  # noqa: E501

        :param advanced: The advanced of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._advanced = advanced

    @property
    def prev(self):
        """Gets the prev of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Предыдущее значение рейтинга  # noqa: E501

        :return: The prev of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Предыдущее значение рейтинга  # noqa: E501

        :param prev: The prev of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._prev = prev

    @property
    def prev_dt(self):
        """Gets the prev_dt of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Дата присвоения предыдущего значения рейтинга  # noqa: E501

        :return: The prev_dt of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: datetime
        """
        return self._prev_dt

    @prev_dt.setter
    def prev_dt(self, prev_dt):
        """Sets the prev_dt of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Дата присвоения предыдущего значения рейтинга  # noqa: E501

        :param prev_dt: The prev_dt of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: datetime
        """

        self._prev_dt = prev_dt

    @property
    def rating_agency(self):
        """Gets the rating_agency of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Наименование рейтингового агентства  # noqa: E501

        :return: The rating_agency of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._rating_agency

    @rating_agency.setter
    def rating_agency(self, rating_agency):
        """Sets the rating_agency of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Наименование рейтингового агентства  # noqa: E501

        :param rating_agency: The rating_agency of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._rating_agency = rating_agency

    @property
    def rating_code(self):
        """Gets the rating_code of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Кодовое наименование рейтинга  # noqa: E501

        :return: The rating_code of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._rating_code

    @rating_code.setter
    def rating_code(self, rating_code):
        """Sets the rating_code of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Кодовое наименование рейтинга  # noqa: E501

        :param rating_code: The rating_code of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._rating_code = rating_code

    @property
    def rating_full_name_rus(self):
        """Gets the rating_full_name_rus of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Полное русское наименование рейтинга  # noqa: E501

        :return: The rating_full_name_rus of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._rating_full_name_rus

    @rating_full_name_rus.setter
    def rating_full_name_rus(self, rating_full_name_rus):
        """Sets the rating_full_name_rus of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Полное русское наименование рейтинга  # noqa: E501

        :param rating_full_name_rus: The rating_full_name_rus of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._rating_full_name_rus = rating_full_name_rus

    @property
    def rating_official_name(self):
        """Gets the rating_official_name of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Оригинальное наименование рейтинга  # noqa: E501

        :return: The rating_official_name of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._rating_official_name

    @rating_official_name.setter
    def rating_official_name(self, rating_official_name):
        """Sets the rating_official_name of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Оригинальное наименование рейтинга  # noqa: E501

        :param rating_official_name: The rating_official_name of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._rating_official_name = rating_official_name

    @property
    def rating_object_type(self):
        """Gets the rating_object_type of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Объект события – компания или инструмент  # noqa: E501

        :return: The rating_object_type of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._rating_object_type

    @rating_object_type.setter
    def rating_object_type(self, rating_object_type):
        """Sets the rating_object_type of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Объект события – компания или инструмент  # noqa: E501

        :param rating_object_type: The rating_object_type of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._rating_object_type = rating_object_type

    @property
    def is_credit_rating(self):
        """Gets the is_credit_rating of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Признак кредитного рейтинга (0/1)  # noqa: E501

        :return: The is_credit_rating of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: int
        """
        return self._is_credit_rating

    @is_credit_rating.setter
    def is_credit_rating(self, is_credit_rating):
        """Sets the is_credit_rating of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Признак кредитного рейтинга (0/1)  # noqa: E501

        :param is_credit_rating: The is_credit_rating of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: int
        """

        self._is_credit_rating = is_credit_rating

    @property
    def rating_term(self):
        """Gets the rating_term of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Срочность (долгосрочный, краткосрочный, не определён)  # noqa: E501

        :return: The rating_term of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._rating_term

    @rating_term.setter
    def rating_term(self, rating_term):
        """Sets the rating_term of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Срочность (долгосрочный, краткосрочный, не определён)  # noqa: E501

        :param rating_term: The rating_term of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._rating_term = rating_term

    @property
    def scale_type(self):
        """Gets the scale_type of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Шкала (международная, национальная)  # noqa: E501

        :return: The scale_type of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._scale_type

    @scale_type.setter
    def scale_type(self, scale_type):
        """Sets the scale_type of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Шкала (международная, национальная)  # noqa: E501

        :param scale_type: The scale_type of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._scale_type = scale_type

    @property
    def scale_cur(self):
        """Gets the scale_cur of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Валюта для международной шкалы(иностранная, локальная, не определена)  # noqa: E501

        :return: The scale_cur of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._scale_cur

    @scale_cur.setter
    def scale_cur(self, scale_cur):
        """Sets the scale_cur of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Валюта для международной шкалы(иностранная, локальная, не определена)  # noqa: E501

        :param scale_cur: The scale_cur of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._scale_cur = scale_cur

    @property
    def short_name_org(self):
        """Gets the short_name_org of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Краткое русское наименование компании  # noqa: E501

        :return: The short_name_org of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._short_name_org

    @short_name_org.setter
    def short_name_org(self, short_name_org):
        """Sets the short_name_org of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Краткое русское наименование компании  # noqa: E501

        :param short_name_org: The short_name_org of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._short_name_org = short_name_org

    @property
    def inn(self):
        """Gets the inn of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        INN компании  # noqa: E501

        :return: The inn of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._inn

    @inn.setter
    def inn(self, inn):
        """Sets the inn of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        INN компании  # noqa: E501

        :param inn: The inn of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._inn = inn

    @property
    def lei(self):
        """Gets the lei of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        LEI компании  # noqa: E501

        :return: The lei of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._lei

    @lei.setter
    def lei(self, lei):
        """Sets the lei of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        LEI компании  # noqa: E501

        :param lei: The lei of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._lei = lei

    @property
    def sector(self):
        """Gets the sector of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Сектор деятельности компании  # noqa: E501

        :return: The sector of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Сектор деятельности компании  # noqa: E501

        :param sector: The sector of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def country(self):
        """Gets the country of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Страна компании  # noqa: E501

        :return: The country of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Страна компании  # noqa: E501

        :param country: The country of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def role(self):
        """Gets the role of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Роль организации по отношению к инструменту  # noqa: E501

        :return: The role of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Роль организации по отношению к инструменту  # noqa: E501

        :param role: The role of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def short_name_issue(self):
        """Gets the short_name_issue of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Краткое русское наименование инструмента.  # noqa: E501

        :return: The short_name_issue of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._short_name_issue

    @short_name_issue.setter
    def short_name_issue(self, short_name_issue):
        """Sets the short_name_issue of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Краткое русское наименование инструмента.  # noqa: E501

        :param short_name_issue: The short_name_issue of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._short_name_issue = short_name_issue

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        ISIN инструмента  # noqa: E501

        :return: The isin of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        ISIN инструмента  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def reg_code(self):
        """Gets the reg_code of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Регистрационный код инструмента  # noqa: E501

        :return: The reg_code of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._reg_code

    @reg_code.setter
    def reg_code(self, reg_code):
        """Sets the reg_code of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Регистрационный код инструмента  # noqa: E501

        :param reg_code: The reg_code of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._reg_code = reg_code

    @property
    def sector_by_rating(self):
        """Gets the sector_by_rating of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Сектор компании в соответствии с кодом рейтинга  # noqa: E501

        :return: The sector_by_rating of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._sector_by_rating

    @sector_by_rating.setter
    def sector_by_rating(self, sector_by_rating):
        """Sets the sector_by_rating of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Сектор компании в соответствии с кодом рейтинга  # noqa: E501

        :param sector_by_rating: The sector_by_rating of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._sector_by_rating = sector_by_rating

    @property
    def region(self):
        """Gets the region of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Регион, для российских эмитентов  # noqa: E501

        :return: The region of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Регион, для российских эмитентов  # noqa: E501

        :param region: The region of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def is_archive(self):
        """Gets the is_archive of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        1 - Признак неиспользуемого (архивного) рейтинга  # noqa: E501

        :return: The is_archive of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: int
        """
        return self._is_archive

    @is_archive.setter
    def is_archive(self, is_archive):
        """Sets the is_archive of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        1 - Признак неиспользуемого (архивного) рейтинга  # noqa: E501

        :param is_archive: The is_archive of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: int
        """

        self._is_archive = is_archive

    @property
    def is_accred_br(self):
        """Gets the is_accred_br of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        1 - Признак аккредитации рейтингового агентства Банком России  # noqa: E501

        :return: The is_accred_br of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: int
        """
        return self._is_accred_br

    @is_accred_br.setter
    def is_accred_br(self, is_accred_br):
        """Sets the is_accred_br of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        1 - Признак аккредитации рейтингового агентства Банком России  # noqa: E501

        :param is_accred_br: The is_accred_br of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: int
        """

        self._is_accred_br = is_accred_br

    @property
    def full_name_org(self):
        """Gets the full_name_org of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Полное русское наименование компании  # noqa: E501

        :return: The full_name_org of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._full_name_org

    @full_name_org.setter
    def full_name_org(self, full_name_org):
        """Sets the full_name_org of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Полное русское наименование компании  # noqa: E501

        :param full_name_org: The full_name_org of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._full_name_org = full_name_org

    @property
    def press_release(self):
        """Gets the press_release of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Ссылка на пресс-релиз  # noqa: E501

        :return: The press_release of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: str
        """
        return self._press_release

    @press_release.setter
    def press_release(self, press_release):
        """Sets the press_release of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Ссылка на пресс-релиз  # noqa: E501

        :param press_release: The press_release of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: str
        """

        self._press_release = press_release

    @property
    def is_sf(self):
        """Gets the is_sf of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        1 - облигация является структурированным продуктом  # noqa: E501

        :return: The is_sf of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._is_sf

    @is_sf.setter
    def is_sf(self, is_sf):
        """Sets the is_sf of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        1 - облигация является структурированным продуктом  # noqa: E501

        :param is_sf: The is_sf of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: float
        """

        self._is_sf = is_sf

    @property
    def isregion(self):
        """Gets the isregion of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        1 – субъект РФ; 0 – муниципалитет РФ; пусто – иное.  # noqa: E501

        :return: The isregion of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: float
        """
        return self._isregion

    @isregion.setter
    def isregion(self, isregion):
        """Sets the isregion of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        1 – субъект РФ; 0 – муниципалитет РФ; пусто – иное.  # noqa: E501

        :param isregion: The isregion of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: float
        """

        self._isregion = isregion

    @property
    def rating_id(self):
        """Gets the rating_id of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Идентификатор рейтинга  # noqa: E501

        :return: The rating_id of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: int
        """
        return self._rating_id

    @rating_id.setter
    def rating_id(self, rating_id):
        """Sets the rating_id of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Идентификатор рейтинга  # noqa: E501

        :param rating_id: The rating_id of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: int
        """

        self._rating_id = rating_id

    @property
    def fininstid(self):
        """Gets the fininstid of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Идентификатор компании  # noqa: E501

        :return: The fininstid of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid

    @fininstid.setter
    def fininstid(self, fininstid):
        """Sets the fininstid of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Идентификатор компании  # noqa: E501

        :param fininstid: The fininstid of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: int
        """

        self._fininstid = fininstid

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Идентификатор инструмента  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Идентификатор инструмента  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Дата обновления информации  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Дата обновления информации  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsRatingRatingsHistoryFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsRatingRatingsHistoryFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRatingRatingsHistoryFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRatingRatingsHistoryFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
