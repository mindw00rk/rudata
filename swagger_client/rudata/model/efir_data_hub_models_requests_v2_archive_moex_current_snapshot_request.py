# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'engine': 'str',
        'market': 'str',
        'board_ids': 'list[str]',
        'fintool_ids': 'list[int]',
        'instruments': 'list[str]',
        'fields': 'list[str]',
        'page_num': 'int',
        'page_size': 'int'
    }

    attribute_map = {
        'engine': 'engine',
        'market': 'market',
        'board_ids': 'boardIds',
        'fintool_ids': 'fintoolIds',
        'instruments': 'instruments',
        'fields': 'fields',
        'page_num': 'pageNum',
        'page_size': 'pageSize'
    }

    def __init__(self, engine=None, market=None, board_ids=None, fintool_ids=None, instruments=None, fields=None, page_num=1, page_size=100):  # noqa: E501
        """EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest - a model defined in Swagger"""  # noqa: E501
        self._engine = None
        self._market = None
        self._board_ids = None
        self._fintool_ids = None
        self._instruments = None
        self._fields = None
        self._page_num = None
        self._page_size = None
        self.discriminator = None
        self.engine = engine
        self.market = market
        if board_ids is not None:
            self.board_ids = board_ids
        if fintool_ids is not None:
            self.fintool_ids = fintool_ids
        if instruments is not None:
            self.instruments = instruments
        self.fields = fields
        if page_num is not None:
            self.page_num = page_num
        if page_size is not None:
            self.page_size = page_size

    @property
    def engine(self):
        """Gets the engine of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501

        Краткое наименование торговой системы Мосбиржи (англ.).  Подсистема MOEX.  Допустимые значения см. в поле name массива engines ответа метода '/v2/Moex/Boards'  Обязательный параметр.  # noqa: E501

        :return: The engine of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.

        Краткое наименование торговой системы Мосбиржи (англ.).  Подсистема MOEX.  Допустимые значения см. в поле name массива engines ответа метода '/v2/Moex/Boards'  Обязательный параметр.  # noqa: E501

        :param engine: The engine of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :type: str
        """
        if engine is None:
            raise ValueError("Invalid value for `engine`, must not be `None`")  # noqa: E501

        self._engine = engine

    @property
    def market(self):
        """Gets the market of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501

        Краткое наименование рынка Мосбиржи (англ.).  Обязательный параметр.  Допустимые значения см. в поле name массива markets ответа метода '/v2/Moex/Boards'  # noqa: E501

        :return: The market of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.

        Краткое наименование рынка Мосбиржи (англ.).  Обязательный параметр.  Допустимые значения см. в поле name массива markets ответа метода '/v2/Moex/Boards'  # noqa: E501

        :param market: The market of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :type: str
        """
        if market is None:
            raise ValueError("Invalid value for `market`, must not be `None`")  # noqa: E501

        self._market = market

    @property
    def board_ids(self):
        """Gets the board_ids of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501

        Идентификатор режима торгов. Короткое имя режима торгов или группы режимов.  Допустимые значения см. в поле boardId массива boards ответа метода '/v2/Moex/Boards'  # noqa: E501

        :return: The board_ids of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._board_ids

    @board_ids.setter
    def board_ids(self, board_ids):
        """Sets the board_ids of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.

        Идентификатор режима торгов. Короткое имя режима торгов или группы режимов.  Допустимые значения см. в поле boardId массива boards ответа метода '/v2/Moex/Boards'  # noqa: E501

        :param board_ids: The board_ids of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :type: list[str]
        """

        self._board_ids = board_ids

    @property
    def fintool_ids(self):
        """Gets the fintool_ids of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501

        Идентификаторы финансового инструмента в БД Интерфакс  Не более 100.  # noqa: E501

        :return: The fintool_ids of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._fintool_ids

    @fintool_ids.setter
    def fintool_ids(self, fintool_ids):
        """Sets the fintool_ids of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.

        Идентификаторы финансового инструмента в БД Интерфакс  Не более 100.  # noqa: E501

        :param fintool_ids: The fintool_ids of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :type: list[int]
        """

        self._fintool_ids = fintool_ids

    @property
    def instruments(self):
        """Gets the instruments of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501

        Массив идентификаторов торгуемых инструментов.  Не более 100.  Не используется, если задан Efir.DataHub.Models.Requests.V2.Archive.MoexCurrentSnapshotRequest.FintoolIds  Короткие биржевые коды, которые можно получить в сервисе Securities (поле SECID).  Например, SBER.  # noqa: E501

        :return: The instruments of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._instruments

    @instruments.setter
    def instruments(self, instruments):
        """Sets the instruments of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.

        Массив идентификаторов торгуемых инструментов.  Не более 100.  Не используется, если задан Efir.DataHub.Models.Requests.V2.Archive.MoexCurrentSnapshotRequest.FintoolIds  Короткие биржевые коды, которые можно получить в сервисе Securities (поле SECID).  Например, SBER.  # noqa: E501

        :param instruments: The instruments of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :type: list[str]
        """

        self._instruments = instruments

    @property
    def fields(self):
        """Gets the fields of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501

        Список интересующих полей.  Обязательный параметр.  # noqa: E501

        :return: The fields of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.

        Список интересующих полей.  Обязательный параметр.  # noqa: E501

        :param fields: The fields of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :type: list[str]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields

    @property
    def page_num(self):
        """Gets the page_num of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501

        Номер страницы для выборки  # noqa: E501

        :return: The page_num of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_num

    @page_num.setter
    def page_num(self, page_num):
        """Sets the page_num of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.

        Номер страницы для выборки  # noqa: E501

        :param page_num: The page_num of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :type: int
        """

        self._page_num = page_num

    @property
    def page_size(self):
        """Gets the page_size of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501

        Размер страницы выборки. Максимум - 100  # noqa: E501

        :return: The page_size of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.

        Размер страницы выборки. Максимум - 100  # noqa: E501

        :param page_size: The page_size of this EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2ArchiveMoexCurrentSnapshotRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
