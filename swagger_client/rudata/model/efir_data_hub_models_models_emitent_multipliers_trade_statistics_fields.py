# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fininst_id': 'int',
        'dt': 'datetime',
        'fintool_id': 'int',
        'beta': 'float',
        'capitalization': 'float',
        'free_float': 'float',
        'trading_volume': 'float',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'fininst_id': 'fininstId',
        'dt': 'dt',
        'fintool_id': 'fintoolId',
        'beta': 'beta',
        'capitalization': 'capitalization',
        'free_float': 'freeFloat',
        'trading_volume': 'tradingVolume',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, fininst_id=None, dt=None, fintool_id=None, beta=None, capitalization=None, free_float=None, trading_volume=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields - a model defined in Swagger"""  # noqa: E501
        self._fininst_id = None
        self._dt = None
        self._fintool_id = None
        self._beta = None
        self._capitalization = None
        self._free_float = None
        self._trading_volume = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if fininst_id is not None:
            self.fininst_id = fininst_id
        if dt is not None:
            self.dt = dt
        if fintool_id is not None:
            self.fintool_id = fintool_id
        if beta is not None:
            self.beta = beta
        if capitalization is not None:
            self.capitalization = capitalization
        if free_float is not None:
            self.free_float = free_float
        if trading_volume is not None:
            self.trading_volume = trading_volume
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def fininst_id(self):
        """Gets the fininst_id of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501

        Идентификатор эмитента в базе Интерфакс  # noqa: E501

        :return: The fininst_id of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :rtype: int
        """
        return self._fininst_id

    @fininst_id.setter
    def fininst_id(self, fininst_id):
        """Sets the fininst_id of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.

        Идентификатор эмитента в базе Интерфакс  # noqa: E501

        :param fininst_id: The fininst_id of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :type: int
        """

        self._fininst_id = fininst_id

    @property
    def dt(self):
        """Gets the dt of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501

        Дата расчета  # noqa: E501

        :return: The dt of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.

        Дата расчета  # noqa: E501

        :param dt: The dt of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def fintool_id(self):
        """Gets the fintool_id of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501

        Идентификатор финансового инструмента в базе Интерфакс  # noqa: E501

        :return: The fintool_id of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :rtype: int
        """
        return self._fintool_id

    @fintool_id.setter
    def fintool_id(self, fintool_id):
        """Sets the fintool_id of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.

        Идентификатор финансового инструмента в базе Интерфакс  # noqa: E501

        :param fintool_id: The fintool_id of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :type: int
        """

        self._fintool_id = fintool_id

    @property
    def beta(self):
        """Gets the beta of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501

        Beta финансового инструмента  # noqa: E501

        :return: The beta of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :rtype: float
        """
        return self._beta

    @beta.setter
    def beta(self, beta):
        """Sets the beta of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.

        Beta финансового инструмента  # noqa: E501

        :param beta: The beta of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :type: float
        """

        self._beta = beta

    @property
    def capitalization(self):
        """Gets the capitalization of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501

        Капитализация финансового инструмента  # noqa: E501

        :return: The capitalization of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :rtype: float
        """
        return self._capitalization

    @capitalization.setter
    def capitalization(self, capitalization):
        """Sets the capitalization of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.

        Капитализация финансового инструмента  # noqa: E501

        :param capitalization: The capitalization of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :type: float
        """

        self._capitalization = capitalization

    @property
    def free_float(self):
        """Gets the free_float of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501

        Доля акций в свободном обращении  # noqa: E501

        :return: The free_float of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :rtype: float
        """
        return self._free_float

    @free_float.setter
    def free_float(self, free_float):
        """Sets the free_float of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.

        Доля акций в свободном обращении  # noqa: E501

        :param free_float: The free_float of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :type: float
        """

        self._free_float = free_float

    @property
    def trading_volume(self):
        """Gets the trading_volume of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501

        Объем сделок за день, штук ценных бумаг  # noqa: E501

        :return: The trading_volume of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :rtype: float
        """
        return self._trading_volume

    @trading_volume.setter
    def trading_volume(self, trading_volume):
        """Sets the trading_volume of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.

        Объем сделок за день, штук ценных бумаг  # noqa: E501

        :param trading_volume: The trading_volume of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :type: float
        """

        self._trading_volume = trading_volume

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsEmitentMultipliersTradeStatisticsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
