# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2InfoHolidaysRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_id': 'int',
        'fininst_id': 'int',
        'begin_date': 'datetime',
        'end_date': 'datetime',
        'calendar_type_id': 'AllOfEfirDataHubModelsRequestsV2InfoHolidaysRequestCalendarTypeId',
        'filter': 'str'
    }

    attribute_map = {
        'country_id': 'countryId',
        'fininst_id': 'fininstId',
        'begin_date': 'beginDate',
        'end_date': 'endDate',
        'calendar_type_id': 'calendarTypeId',
        'filter': 'filter'
    }

    def __init__(self, country_id=None, fininst_id=None, begin_date=None, end_date=None, calendar_type_id=None, filter=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2InfoHolidaysRequest - a model defined in Swagger"""  # noqa: E501
        self._country_id = None
        self._fininst_id = None
        self._begin_date = None
        self._end_date = None
        self._calendar_type_id = None
        self._filter = None
        self.discriminator = None
        if country_id is not None:
            self.country_id = country_id
        if fininst_id is not None:
            self.fininst_id = fininst_id
        if begin_date is not None:
            self.begin_date = begin_date
        if end_date is not None:
            self.end_date = end_date
        if calendar_type_id is not None:
            self.calendar_type_id = calendar_type_id
        if filter is not None:
            self.filter = filter

    @property
    def country_id(self):
        """Gets the country_id of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501

        ID страны, для организации (правительства) которой выполняют запрос дат событий  # noqa: E501

        :return: The country_id of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.

        ID страны, для организации (правительства) которой выполняют запрос дат событий  # noqa: E501

        :param country_id: The country_id of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501
        :type: int
        """

        self._country_id = country_id

    @property
    def fininst_id(self):
        """Gets the fininst_id of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501

        ID организации, для которых выполняют запрос дат событий  # noqa: E501

        :return: The fininst_id of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501
        :rtype: int
        """
        return self._fininst_id

    @fininst_id.setter
    def fininst_id(self, fininst_id):
        """Sets the fininst_id of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.

        ID организации, для которых выполняют запрос дат событий  # noqa: E501

        :param fininst_id: The fininst_id of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501
        :type: int
        """

        self._fininst_id = fininst_id

    @property
    def begin_date(self):
        """Gets the begin_date of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501

        Дата начала периода  # noqa: E501

        :return: The begin_date of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.

        Дата начала периода  # noqa: E501

        :param begin_date: The begin_date of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501
        :type: datetime
        """

        self._begin_date = begin_date

    @property
    def end_date(self):
        """Gets the end_date of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501

        Дата окончания периода  # noqa: E501

        :return: The end_date of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.

        Дата окончания периода  # noqa: E501

        :param end_date: The end_date of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def calendar_type_id(self):
        """Gets the calendar_type_id of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501

        Тип календаря, к которому принадлежит событие (страновой -2 или корпоративный -3 календарь)  0 = Unknown  2 = Country  3 = Corporative  # noqa: E501

        :return: The calendar_type_id of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501
        :rtype: AllOfEfirDataHubModelsRequestsV2InfoHolidaysRequestCalendarTypeId
        """
        return self._calendar_type_id

    @calendar_type_id.setter
    def calendar_type_id(self, calendar_type_id):
        """Sets the calendar_type_id of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.

        Тип календаря, к которому принадлежит событие (страновой -2 или корпоративный -3 календарь)  0 = Unknown  2 = Country  3 = Corporative  # noqa: E501

        :param calendar_type_id: The calendar_type_id of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501
        :type: AllOfEfirDataHubModelsRequestsV2InfoHolidaysRequestCalendarTypeId
        """

        self._calendar_type_id = calendar_type_id

    @property
    def filter(self):
        """Gets the filter of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501

        Параметры фильтра данных  # noqa: E501

        :return: The filter of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.

        Параметры фильтра данных  # noqa: E501

        :param filter: The filter of this EfirDataHubModelsRequestsV2InfoHolidaysRequest.  # noqa: E501
        :type: str
        """

        self._filter = filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2InfoHolidaysRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2InfoHolidaysRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
