# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2MoexHistoryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'engine': 'str',
        'market': 'str',
        'boardid': 'list[str]',
        'instruments': 'list[str]',
        'date_from': 'datetime',
        'date_to': 'datetime',
        'trading_sessions': 'list[int]',
        'page_num': 'int',
        'page_size': 'int'
    }

    attribute_map = {
        'engine': 'engine',
        'market': 'market',
        'boardid': 'boardid',
        'instruments': 'instruments',
        'date_from': 'dateFrom',
        'date_to': 'dateTo',
        'trading_sessions': 'tradingSessions',
        'page_num': 'pageNum',
        'page_size': 'pageSize'
    }

    def __init__(self, engine=None, market=None, boardid=None, instruments=None, date_from=None, date_to=None, trading_sessions=None, page_num=None, page_size=100):  # noqa: E501
        """EfirDataHubModelsRequestsV2MoexHistoryRequest - a model defined in Swagger"""  # noqa: E501
        self._engine = None
        self._market = None
        self._boardid = None
        self._instruments = None
        self._date_from = None
        self._date_to = None
        self._trading_sessions = None
        self._page_num = None
        self._page_size = None
        self.discriminator = None
        if engine is not None:
            self.engine = engine
        if market is not None:
            self.market = market
        if boardid is not None:
            self.boardid = boardid
        if instruments is not None:
            self.instruments = instruments
        if date_from is not None:
            self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to
        if trading_sessions is not None:
            self.trading_sessions = trading_sessions
        if page_num is not None:
            self.page_num = page_num
        if page_size is not None:
            self.page_size = page_size

    @property
    def engine(self):
        """Gets the engine of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501

        Краткое наименование торговой системы Мосбиржи (англ.). Обязательный параметр. Подсистема MOEX: stock, state, currency и т.д.  # noqa: E501

        :return: The engine of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this EfirDataHubModelsRequestsV2MoexHistoryRequest.

        Краткое наименование торговой системы Мосбиржи (англ.). Обязательный параметр. Подсистема MOEX: stock, state, currency и т.д.  # noqa: E501

        :param engine: The engine of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def market(self):
        """Gets the market of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501

        Краткое наименование рынка Мосбиржи (англ.). Обязательный параметр. Рынок MOEX: index, shares, bonds, ndm и т.д.  # noqa: E501

        :return: The market of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this EfirDataHubModelsRequestsV2MoexHistoryRequest.

        Краткое наименование рынка Мосбиржи (англ.). Обязательный параметр. Рынок MOEX: index, shares, bonds, ndm и т.д.  # noqa: E501

        :param market: The market of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def boardid(self):
        """Gets the boardid of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501

        Идентификатор режима торгов Необязательный параметр. Короткое имя режима торгов или группы режимов. Может быть задано нескольких элементов через запятую.  # noqa: E501

        :return: The boardid of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._boardid

    @boardid.setter
    def boardid(self, boardid):
        """Sets the boardid of this EfirDataHubModelsRequestsV2MoexHistoryRequest.

        Идентификатор режима торгов Необязательный параметр. Короткое имя режима торгов или группы режимов. Может быть задано нескольких элементов через запятую.  # noqa: E501

        :param boardid: The boardid of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :type: list[str]
        """

        self._boardid = boardid

    @property
    def instruments(self):
        """Gets the instruments of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501

        Массив идентификаторов торгуемых инструментов. Короткие биржевые коды, которые можно получить в сервисе Securities (поле SECID). Например, SBER.  # noqa: E501

        :return: The instruments of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._instruments

    @instruments.setter
    def instruments(self, instruments):
        """Sets the instruments of this EfirDataHubModelsRequestsV2MoexHistoryRequest.

        Массив идентификаторов торгуемых инструментов. Короткие биржевые коды, которые можно получить в сервисе Securities (поле SECID). Например, SBER.  # noqa: E501

        :param instruments: The instruments of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :type: list[str]
        """

        self._instruments = instruments

    @property
    def date_from(self):
        """Gets the date_from of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501

        Дата начала периода.  # noqa: E501

        :return: The date_from of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this EfirDataHubModelsRequestsV2MoexHistoryRequest.

        Дата начала периода.  # noqa: E501

        :param date_from: The date_from of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :type: datetime
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501

        Дата окончания периода. Может совпадать с dateFrom, если требуются данные за один день.  # noqa: E501

        :return: The date_to of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this EfirDataHubModelsRequestsV2MoexHistoryRequest.

        Дата окончания периода. Может совпадать с dateFrom, если требуются данные за один день.  # noqa: E501

        :param date_to: The date_to of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :type: datetime
        """

        self._date_to = date_to

    @property
    def trading_sessions(self):
        """Gets the trading_sessions of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501

        Перечень номеров торговых сессий для отбора:  - 0 - Утренняя сессия,  - 1 - Основная сессия,  - 2 - Вечерняя сессия,  - 3 - Итоги  Если не задан, то отбор по торговым сессиям не выполняется.  # noqa: E501

        :return: The trading_sessions of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._trading_sessions

    @trading_sessions.setter
    def trading_sessions(self, trading_sessions):
        """Sets the trading_sessions of this EfirDataHubModelsRequestsV2MoexHistoryRequest.

        Перечень номеров торговых сессий для отбора:  - 0 - Утренняя сессия,  - 1 - Основная сессия,  - 2 - Вечерняя сессия,  - 3 - Итоги  Если не задан, то отбор по торговым сессиям не выполняется.  # noqa: E501

        :param trading_sessions: The trading_sessions of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :type: list[int]
        """

        self._trading_sessions = trading_sessions

    @property
    def page_num(self):
        """Gets the page_num of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501

        Номер страницы для выборки. Если не задан или меньше 1, то устанавливается 1  # noqa: E501

        :return: The page_num of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_num

    @page_num.setter
    def page_num(self, page_num):
        """Sets the page_num of this EfirDataHubModelsRequestsV2MoexHistoryRequest.

        Номер страницы для выборки. Если не задан или меньше 1, то устанавливается 1  # noqa: E501

        :param page_num: The page_num of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :type: int
        """

        self._page_num = page_num

    @property
    def page_size(self):
        """Gets the page_size of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501

        Размер страницы выборки. Если более 1000, то устанавливается 1000  # noqa: E501

        :return: The page_size of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this EfirDataHubModelsRequestsV2MoexHistoryRequest.

        Размер страницы выборки. Если более 1000, то устанавливается 1000  # noqa: E501

        :param page_size: The page_size of this EfirDataHubModelsRequestsV2MoexHistoryRequest.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2MoexHistoryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2MoexHistoryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
