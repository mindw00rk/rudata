# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instruments': 'list[str]',
        'fields': 'list[str]',
        'date_from': 'datetime',
        'date_to': 'datetime',
        'step': 'str',
        'grouping': 'int',
        'sort': 'str',
        'filter_by_price': 'int',
        'filter_by_time': 'int',
        'page_num': 'int',
        'page_size': 'int'
    }

    attribute_map = {
        'instruments': 'instruments',
        'fields': 'fields',
        'date_from': 'dateFrom',
        'date_to': 'dateTo',
        'step': 'step',
        'grouping': 'grouping',
        'sort': 'sort',
        'filter_by_price': 'filterByPrice',
        'filter_by_time': 'filterByTime',
        'page_num': 'pageNum',
        'page_size': 'pageSize'
    }

    def __init__(self, instruments=None, fields=None, date_from=None, date_to=None, step=None, grouping=None, sort=None, filter_by_price=None, filter_by_time=None, page_num=1, page_size=100):  # noqa: E501
        """EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest - a model defined in Swagger"""  # noqa: E501
        self._instruments = None
        self._fields = None
        self._date_from = None
        self._date_to = None
        self._step = None
        self._grouping = None
        self._sort = None
        self._filter_by_price = None
        self._filter_by_time = None
        self._page_num = None
        self._page_size = None
        self.discriminator = None
        self.instruments = instruments
        self.fields = fields
        if date_from is not None:
            self.date_from = date_from
        self.date_to = date_to
        self.step = step
        if grouping is not None:
            self.grouping = grouping
        if sort is not None:
            self.sort = sort
        if filter_by_price is not None:
            self.filter_by_price = filter_by_price
        if filter_by_time is not None:
            self.filter_by_time = filter_by_time
        if page_num is not None:
            self.page_num = page_num
        if page_size is not None:
            self.page_size = page_size

    @property
    def instruments(self):
        """Gets the instruments of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501

        список входных идентификаторов инструментов, могут использоваться:  - ID_ISS - внутренние идентификаторы ЭФИР,  - SYMBOL - код ЭФИР инструмента на площадке,  - FinToolID там, где определена связь FinToolID - основная площадка,  - ISIN,  - RegCode  - NRDcode  # noqa: E501

        :return: The instruments of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._instruments

    @instruments.setter
    def instruments(self, instruments):
        """Sets the instruments of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.

        список входных идентификаторов инструментов, могут использоваться:  - ID_ISS - внутренние идентификаторы ЭФИР,  - SYMBOL - код ЭФИР инструмента на площадке,  - FinToolID там, где определена связь FinToolID - основная площадка,  - ISIN,  - RegCode  - NRDcode  # noqa: E501

        :param instruments: The instruments of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :type: list[str]
        """
        if instruments is None:
            raise ValueError("Invalid value for `instruments`, must not be `None`")  # noqa: E501

        self._instruments = instruments

    @property
    def fields(self):
        """Gets the fields of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501

        список имен полей разделенных запятой  # noqa: E501

        :return: The fields of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.

        список имен полей разделенных запятой  # noqa: E501

        :param fields: The fields of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :type: list[str]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields

    @property
    def date_from(self):
        """Gets the date_from of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501

        Дата и время начала периода (если указана только дата, время считается 00:00:00)  # noqa: E501

        :return: The date_from of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.

        Дата и время начала периода (если указана только дата, время считается 00:00:00)  # noqa: E501

        :param date_from: The date_from of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :type: datetime
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501

        Дата и время окончания периода (если указана только дата, время считается 00:00:00).  Таким образом, если в dateFrom и dateTo задана одна и та же дата без указания времени, то никакие данные не будут возвращены.  # noqa: E501

        :return: The date_to of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.

        Дата и время окончания периода (если указана только дата, время считается 00:00:00).  Таким образом, если в dateFrom и dateTo задана одна и та же дата без указания времени, то никакие данные не будут возвращены.  # noqa: E501

        :param date_to: The date_to of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :type: datetime
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")  # noqa: E501

        self._date_to = date_to

    @property
    def step(self):
        """Gets the step of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501

        шаг загружаемых данных:  - 1DO - день(официальные итоги);  - 1D - день;  - 1H - час;  - 30MIN - 30 минут;  - 5MIN - 5 минут;  - 1MIN - 1 минута;  - TICK - тики;  - TRADE – сделки  # noqa: E501

        :return: The step of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.

        шаг загружаемых данных:  - 1DO - день(официальные итоги);  - 1D - день;  - 1H - час;  - 30MIN - 30 минут;  - 5MIN - 5 минут;  - 1MIN - 1 минута;  - TICK - тики;  - TRADE – сделки  # noqa: E501

        :param step: The step of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :type: str
        """
        if step is None:
            raise ValueError("Invalid value for `step`, must not be `None`")  # noqa: E501

        self._step = step

    @property
    def grouping(self):
        """Gets the grouping of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501

        Группировка   - 0 – по дате и времени (данные в выходном курсоре сортируются сначала по времени, а затем по инструменту).   - 1 – по инструменту(данные сортируются сначала по инструменту, а затем по времени). Порядок следования инструментов должен соответствовать входному массиву.  # noqa: E501

        :return: The grouping of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.

        Группировка   - 0 – по дате и времени (данные в выходном курсоре сортируются сначала по времени, а затем по инструменту).   - 1 – по инструменту(данные сортируются сначала по инструменту, а затем по времени). Порядок следования инструментов должен соответствовать входному массиву.  # noqa: E501

        :param grouping: The grouping of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :type: int
        """

        self._grouping = grouping

    @property
    def sort(self):
        """Gets the sort of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501

        Направление сортировки по времени. Возможные значения:  - A – по возрастанию,  - D – по убыванию.  # noqa: E501

        :return: The sort of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.

        Направление сортировки по времени. Возможные значения:  - A – по возрастанию,  - D – по убыванию.  # noqa: E501

        :param sort: The sort of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :type: str
        """

        self._sort = sort

    @property
    def filter_by_price(self):
        """Gets the filter_by_price of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501

        Режим фильтрации по цене. В этом режиме, каждый интервал времени (шаг) проверяется на наличие ценовых данных у всех инструментов.   Если среди полей есть любое из Open, High, Low, Last, Avge_Price, то достаточно наличия данных в одном из них.   Если же ни одно из этих полей не выбрано пользователем, но есть поле Bid или Ask, то проверяется наличие данных в них.   В противном случае, фильтр не действует.  Возможнные значения:  - 0 – без фильтрации,  - 1 – с фильтрацией  # noqa: E501

        :return: The filter_by_price of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_price

    @filter_by_price.setter
    def filter_by_price(self, filter_by_price):
        """Sets the filter_by_price of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.

        Режим фильтрации по цене. В этом режиме, каждый интервал времени (шаг) проверяется на наличие ценовых данных у всех инструментов.   Если среди полей есть любое из Open, High, Low, Last, Avge_Price, то достаточно наличия данных в одном из них.   Если же ни одно из этих полей не выбрано пользователем, но есть поле Bid или Ask, то проверяется наличие данных в них.   В противном случае, фильтр не действует.  Возможнные значения:  - 0 – без фильтрации,  - 1 – с фильтрацией  # noqa: E501

        :param filter_by_price: The filter_by_price of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :type: int
        """

        self._filter_by_price = filter_by_price

    @property
    def filter_by_time(self):
        """Gets the filter_by_time of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501

        Режим фильтрации записей по времени. Возможные значения:  - 0 - Без фильтрации(по-умолчанию) – показываются все данные.  - 1 - Предторговый период Мосбиржи – не показываются данные предторгового периода.  - 2 - Предторговый и послеторговый периоды Мосбиржи – оставляются только данные за торговый период, а всё что до него и после – не показывается.  # noqa: E501

        :return: The filter_by_time of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_time

    @filter_by_time.setter
    def filter_by_time(self, filter_by_time):
        """Sets the filter_by_time of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.

        Режим фильтрации записей по времени. Возможные значения:  - 0 - Без фильтрации(по-умолчанию) – показываются все данные.  - 1 - Предторговый период Мосбиржи – не показываются данные предторгового периода.  - 2 - Предторговый и послеторговый периоды Мосбиржи – оставляются только данные за торговый период, а всё что до него и после – не показывается.  # noqa: E501

        :param filter_by_time: The filter_by_time of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :type: int
        """

        self._filter_by_time = filter_by_time

    @property
    def page_num(self):
        """Gets the page_num of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501

        Номер страницы для выборки  # noqa: E501

        :return: The page_num of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_num

    @page_num.setter
    def page_num(self, page_num):
        """Sets the page_num of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.

        Номер страницы для выборки  # noqa: E501

        :param page_num: The page_num of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :type: int
        """

        self._page_num = page_num

    @property
    def page_size(self):
        """Gets the page_size of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501

        Размер страницы выборки. Максимум - 100.  # noqa: E501

        :return: The page_size of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.

        Размер страницы выборки. Максимум - 100.  # noqa: E501

        :param page_size: The page_size of this EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2ArchiveMultiHistoryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
