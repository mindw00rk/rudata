# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMoexBoard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'board_id': 'str',
        'title': 'str',
        'is_traded': 'bool',
        'has_candles': 'bool',
        'is_primary': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'board_id': 'boardId',
        'title': 'title',
        'is_traded': 'isTraded',
        'has_candles': 'hasCandles',
        'is_primary': 'isPrimary'
    }

    def __init__(self, id=None, board_id=None, title=None, is_traded=None, has_candles=None, is_primary=None):  # noqa: E501
        """EfirDataHubModelsModelsMoexBoard - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._board_id = None
        self._title = None
        self._is_traded = None
        self._has_candles = None
        self._is_primary = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if board_id is not None:
            self.board_id = board_id
        if title is not None:
            self.title = title
        if is_traded is not None:
            self.is_traded = is_traded
        if has_candles is not None:
            self.has_candles = has_candles
        if is_primary is not None:
            self.is_primary = is_primary

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501

        Числовой идентификатор режима торгов  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsMoexBoard.

        Числовой идентификатор режима торгов  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def board_id(self):
        """Gets the board_id of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501

        Символьный идентификатор режима торгов  # noqa: E501

        :return: The board_id of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501
        :rtype: str
        """
        return self._board_id

    @board_id.setter
    def board_id(self, board_id):
        """Sets the board_id of this EfirDataHubModelsModelsMoexBoard.

        Символьный идентификатор режима торгов  # noqa: E501

        :param board_id: The board_id of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501
        :type: str
        """

        self._board_id = board_id

    @property
    def title(self):
        """Gets the title of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501

        Наименование режима торгов  # noqa: E501

        :return: The title of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EfirDataHubModelsModelsMoexBoard.

        Наименование режима торгов  # noqa: E501

        :param title: The title of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def is_traded(self):
        """Gets the is_traded of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501


        :return: The is_traded of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501
        :rtype: bool
        """
        return self._is_traded

    @is_traded.setter
    def is_traded(self, is_traded):
        """Sets the is_traded of this EfirDataHubModelsModelsMoexBoard.


        :param is_traded: The is_traded of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501
        :type: bool
        """

        self._is_traded = is_traded

    @property
    def has_candles(self):
        """Gets the has_candles of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501


        :return: The has_candles of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501
        :rtype: bool
        """
        return self._has_candles

    @has_candles.setter
    def has_candles(self, has_candles):
        """Sets the has_candles of this EfirDataHubModelsModelsMoexBoard.


        :param has_candles: The has_candles of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501
        :type: bool
        """

        self._has_candles = has_candles

    @property
    def is_primary(self):
        """Gets the is_primary of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501


        :return: The is_primary of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this EfirDataHubModelsModelsMoexBoard.


        :param is_primary: The is_primary of this EfirDataHubModelsModelsMoexBoard.  # noqa: E501
        :type: bool
        """

        self._is_primary = is_primary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMoexBoard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMoexBoard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
