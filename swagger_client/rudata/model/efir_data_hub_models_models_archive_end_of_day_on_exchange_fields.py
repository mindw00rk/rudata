# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'fintool_id': 'int',
        'trade_site': 'int',
        'accruedint': 'float',
        'admquote': 'float',
        'ask': 'float',
        'ask_size': 'int',
        'ask_size_total': 'int',
        'avge_chng': 'float',
        'avge_chng_pct': 'float',
        'avge_prce': 'float',
        'avge_yield': 'float',
        'bid': 'float',
        'bid_size': 'int',
        'bid_size_total': 'int',
        'boardid': 'str',
        'boardname': 'str',
        'buybackdate': 'datetime',
        'buybackprice': 'float',
        'cbr_lombard': 'float',
        'cbr_pledge': 'float',
        'chng': 'float',
        'chng_m': 'float',
        'chng_m_pct': 'float',
        'chng_pct': 'float',
        'chng_w': 'float',
        'chng_w_pct': 'float',
        'chng_y': 'float',
        'chng_y_pct': 'float',
        'close': 'float',
        'comment': 'str',
        'consensus_num_est': 'int',
        'consensus_time': 'datetime',
        'convexity': 'float',
        'convexity_agg': 'float',
        'convexity_o': 'float',
        'cpn': 'float',
        'cpn_date': 'datetime',
        'cpn_period': 'int',
        'cpprice': 'float',
        'currency': 'str',
        'deal_acc': 'int',
        'discount': 'float',
        'dnt06beg': 'float',
        'dnt06max': 'float',
        'dnt06min': 'float',
        'dnt120beg': 'float',
        'dnt120max': 'float',
        'dnt120min': 'float',
        'dnt14beg': 'float',
        'dnt14max': 'float',
        'dnt14min': 'float',
        'dnt200beg': 'float',
        'dnt200max': 'float',
        'dnt200min': 'float',
        'dnt365beg': 'float',
        'dnt365max': 'float',
        'dnt365min': 'float',
        'duration': 'int',
        'duration_agg': 'int',
        'duration_n': 'float',
        'duration_o': 'int',
        'duration_on': 'float',
        'exch': 'str',
        'facevalue': 'float',
        'facevalue_currency': 'str',
        'fact_frcst_chng': 'float',
        'forecast': 'float',
        'frcst_chng': 'float',
        'high': 'float',
        'highbid': 'float',
        'isin': 'str',
        'issuer': 'str',
        'issuesize': 'int',
        'last': 'float',
        'last_quote_time': 'datetime',
        'last_time': 'datetime',
        'last_trade_time': 'datetime',
        'last_yield': 'float',
        'last2avge': 'float',
        'lastsettlecode': 'str',
        'lclose': 'float',
        'lcp_chng': 'float',
        'lcp_chng_pct': 'float',
        'lcurrentprice': 'float',
        'lnkcurrency': 'str',
        'lotsize': 'int',
        'low': 'float',
        'lowoffer': 'float',
        'mat_date': 'datetime',
        'mcap': 'float',
        'mprice': 'float',
        'mprice2': 'float',
        'name': 'str',
        'open': 'float',
        'open_inst': 'int',
        'opprice': 'float',
        'period': 'str',
        'potential': 'float',
        'prevlclose': 'float',
        'prevmprice': 'float',
        'publication_date': 'datetime',
        'pvbp': 'float',
        'pvbp_agg': 'float',
        'pvbp_o': 'float',
        'rec_buy_pct': 'float',
        'rec_change': 'float',
        'rec_hold_pct': 'float',
        'rec_sell_pct': 'float',
        'rec_val': 'float',
        'recommendation': 'str',
        'seccode': 'str',
        'secname': 'str',
        'secname_e': 'str',
        'sector': 'str',
        'settlecode': 'str',
        'shortname_eng': 'str',
        'shortname_rus': 'str',
        'spread': 'float',
        'status': 'str',
        'step': 'str',
        'target_price': 'float',
        'time': 'datetime',
        'total_return': 'float',
        'tp_chng': 'float',
        'tp_chng_m': 'float',
        'tp_chng_m_pct': 'float',
        'tp_chng_pct': 'float',
        'tp_chng_q': 'float',
        'tp_chng_q_pct': 'float',
        'tp_chng_time': 'datetime',
        'tp_chng_y': 'float',
        'tp_chng_y_pct': 'float',
        'tp_deviation': 'float',
        'tp_high': 'float',
        'tp_low': 'float',
        'tp_median': 'float',
        'val': 'float',
        'val_acc': 'float',
        'val_acc_usd': 'float',
        'val_usd': 'float',
        'vol': 'int',
        'vol_acc': 'int',
        'vol_currency': 'str',
        'vol_lots': 'int',
        'y2o_ask': 'float',
        'y2o_bid': 'float',
        'y2o_change': 'float',
        'y2o_change_pct': 'float',
        'y2o_last': 'float',
        'y2o_prev': 'float',
        'y2o_wap': 'float',
        'yield_2': 'float',
        'yield_agg': 'float',
        'yield_ask': 'float',
        'yield_average_12m': 'float',
        'yield_average_1m': 'float',
        'yield_average_2m': 'float',
        'yield_average_2w': 'float',
        'yield_average_3m': 'float',
        'yield_average_6m': 'float',
        'yield_average_o12m': 'float',
        'yield_average_o1m': 'float',
        'yield_average_o2m': 'float',
        'yield_average_o2w': 'float',
        'yield_average_o3m': 'float',
        'yield_average_o6m': 'float',
        'yield_bid': 'float',
        'yield_chng': 'float',
        'yield_cpprice': 'float',
        'yield_cwa': 'float',
        'yield_high': 'float',
        'yield_low': 'float',
        'yield_o_cwa': 'float',
        'yield_o_swa': 'float',
        'yield_open': 'float',
        'yield_prev': 'float',
        'yield_swa': 'float',
        'full_price_pct': 'float',
        'z_spread_ofz': 'float',
        'bid_price_change': 'float',
        'ask_price_change': 'float',
        'bid_yield_change': 'float',
        'ask_yield_change': 'float',
        'id_trade_site': 'int',
        'ifrs_level': 'int',
        'rd_exch': 'int',
        'rd_score': 'int',
        'add_date': 'datetime',
        'update_date': 'datetime',
        'zspread': 'float',
        'gspread': 'float',
        'counter': 'int'
    }

    attribute_map = {
        'id': 'id',
        'fintool_id': 'fintoolId',
        'trade_site': 'tradeSite',
        'accruedint': 'accruedint',
        'admquote': 'admquote',
        'ask': 'ask',
        'ask_size': 'ask_size',
        'ask_size_total': 'ask_size_total',
        'avge_chng': 'avge_chng',
        'avge_chng_pct': 'avge_chng_pct',
        'avge_prce': 'avge_prce',
        'avge_yield': 'avge_yield',
        'bid': 'bid',
        'bid_size': 'bid_size',
        'bid_size_total': 'bid_size_total',
        'boardid': 'boardid',
        'boardname': 'boardname',
        'buybackdate': 'buybackdate',
        'buybackprice': 'buybackprice',
        'cbr_lombard': 'cbr_lombard',
        'cbr_pledge': 'cbr_pledge',
        'chng': 'chng',
        'chng_m': 'chng_m',
        'chng_m_pct': 'chng_m_pct',
        'chng_pct': 'chng_pct',
        'chng_w': 'chng_w',
        'chng_w_pct': 'chng_w_pct',
        'chng_y': 'chng_y',
        'chng_y_pct': 'chng_y_pct',
        'close': 'close',
        'comment': 'comment',
        'consensus_num_est': 'consensus_num_est',
        'consensus_time': 'consensus_time',
        'convexity': 'convexity',
        'convexity_agg': 'convexity_agg',
        'convexity_o': 'convexity_o',
        'cpn': 'cpn',
        'cpn_date': 'cpn_date',
        'cpn_period': 'cpn_period',
        'cpprice': 'cpprice',
        'currency': 'currency',
        'deal_acc': 'deal_acc',
        'discount': 'discount',
        'dnt06beg': 'dnt06beg',
        'dnt06max': 'dnt06max',
        'dnt06min': 'dnt06min',
        'dnt120beg': 'dnt120beg',
        'dnt120max': 'dnt120max',
        'dnt120min': 'dnt120min',
        'dnt14beg': 'dnt14beg',
        'dnt14max': 'dnt14max',
        'dnt14min': 'dnt14min',
        'dnt200beg': 'dnt200beg',
        'dnt200max': 'dnt200max',
        'dnt200min': 'dnt200min',
        'dnt365beg': 'dnt365beg',
        'dnt365max': 'dnt365max',
        'dnt365min': 'dnt365min',
        'duration': 'duration',
        'duration_agg': 'duration_agg',
        'duration_n': 'duration_n',
        'duration_o': 'duration_o',
        'duration_on': 'duration_on',
        'exch': 'exch',
        'facevalue': 'facevalue',
        'facevalue_currency': 'facevalue_currency',
        'fact_frcst_chng': 'fact_frcst_chng',
        'forecast': 'forecast',
        'frcst_chng': 'frcst_chng',
        'high': 'high',
        'highbid': 'highbid',
        'isin': 'isin',
        'issuer': 'issuer',
        'issuesize': 'issuesize',
        'last': 'last',
        'last_quote_time': 'last_quote_time',
        'last_time': 'last_time',
        'last_trade_time': 'last_trade_time',
        'last_yield': 'last_yield',
        'last2avge': 'last2avge',
        'lastsettlecode': 'lastsettlecode',
        'lclose': 'lclose',
        'lcp_chng': 'lcp_chng',
        'lcp_chng_pct': 'lcp_chng_pct',
        'lcurrentprice': 'lcurrentprice',
        'lnkcurrency': 'lnkcurrency',
        'lotsize': 'lotsize',
        'low': 'low',
        'lowoffer': 'lowoffer',
        'mat_date': 'mat_date',
        'mcap': 'mcap',
        'mprice': 'mprice',
        'mprice2': 'mprice2',
        'name': 'name',
        'open': 'open',
        'open_inst': 'open_inst',
        'opprice': 'opprice',
        'period': 'period',
        'potential': 'potential',
        'prevlclose': 'prevlclose',
        'prevmprice': 'prevmprice',
        'publication_date': 'publication_date',
        'pvbp': 'pvbp',
        'pvbp_agg': 'pvbp_agg',
        'pvbp_o': 'pvbp_o',
        'rec_buy_pct': 'rec_buy_pct',
        'rec_change': 'rec_change',
        'rec_hold_pct': 'rec_hold_pct',
        'rec_sell_pct': 'rec_sell_pct',
        'rec_val': 'rec_val',
        'recommendation': 'recommendation',
        'seccode': 'seccode',
        'secname': 'secname',
        'secname_e': 'secname_e',
        'sector': 'sector',
        'settlecode': 'settlecode',
        'shortname_eng': 'shortname_eng',
        'shortname_rus': 'shortname_rus',
        'spread': 'spread',
        'status': 'status',
        'step': 'step',
        'target_price': 'target_price',
        'time': 'time',
        'total_return': 'total_return',
        'tp_chng': 'tp_chng',
        'tp_chng_m': 'tp_chng_m',
        'tp_chng_m_pct': 'tp_chng_m_pct',
        'tp_chng_pct': 'tp_chng_pct',
        'tp_chng_q': 'tp_chng_q',
        'tp_chng_q_pct': 'tp_chng_q_pct',
        'tp_chng_time': 'tp_chng_time',
        'tp_chng_y': 'tp_chng_y',
        'tp_chng_y_pct': 'tp_chng_y_pct',
        'tp_deviation': 'tp_deviation',
        'tp_high': 'tp_high',
        'tp_low': 'tp_low',
        'tp_median': 'tp_median',
        'val': 'val',
        'val_acc': 'val_acc',
        'val_acc_usd': 'val_acc_usd',
        'val_usd': 'val_usd',
        'vol': 'vol',
        'vol_acc': 'vol_acc',
        'vol_currency': 'vol_currency',
        'vol_lots': 'vol_lots',
        'y2o_ask': 'y2o_ask',
        'y2o_bid': 'y2o_bid',
        'y2o_change': 'y2o_change',
        'y2o_change_pct': 'y2o_change_pct',
        'y2o_last': 'y2o_last',
        'y2o_prev': 'y2o_prev',
        'y2o_wap': 'y2o_wap',
        'yield_2': 'yield_2',
        'yield_agg': 'yield_agg',
        'yield_ask': 'yield_ask',
        'yield_average_12m': 'yield_average_12m',
        'yield_average_1m': 'yield_average_1m',
        'yield_average_2m': 'yield_average_2m',
        'yield_average_2w': 'yield_average_2w',
        'yield_average_3m': 'yield_average_3m',
        'yield_average_6m': 'yield_average_6m',
        'yield_average_o12m': 'yield_average_o12m',
        'yield_average_o1m': 'yield_average_o1m',
        'yield_average_o2m': 'yield_average_o2m',
        'yield_average_o2w': 'yield_average_o2w',
        'yield_average_o3m': 'yield_average_o3m',
        'yield_average_o6m': 'yield_average_o6m',
        'yield_bid': 'yield_bid',
        'yield_chng': 'yield_chng',
        'yield_cpprice': 'yield_cpprice',
        'yield_cwa': 'yield_cwa',
        'yield_high': 'yield_high',
        'yield_low': 'yield_low',
        'yield_o_cwa': 'yield_o_cwa',
        'yield_o_swa': 'yield_o_swa',
        'yield_open': 'yield_open',
        'yield_prev': 'yield_prev',
        'yield_swa': 'yield_swa',
        'full_price_pct': 'full_price_pct',
        'z_spread_ofz': 'z_spread_ofz',
        'bid_price_change': 'bid_price_change',
        'ask_price_change': 'ask_price_change',
        'bid_yield_change': 'bid_yield_change',
        'ask_yield_change': 'ask_yield_change',
        'id_trade_site': 'id_trade_site',
        'ifrs_level': 'ifrs_level',
        'rd_exch': 'rd_exch',
        'rd_score': 'rd_score',
        'add_date': 'add_date',
        'update_date': 'update_date',
        'zspread': 'zspread',
        'gspread': 'gspread',
        'counter': 'counter'
    }

    def __init__(self, id=None, fintool_id=None, trade_site=None, accruedint=None, admquote=None, ask=None, ask_size=None, ask_size_total=None, avge_chng=None, avge_chng_pct=None, avge_prce=None, avge_yield=None, bid=None, bid_size=None, bid_size_total=None, boardid=None, boardname=None, buybackdate=None, buybackprice=None, cbr_lombard=None, cbr_pledge=None, chng=None, chng_m=None, chng_m_pct=None, chng_pct=None, chng_w=None, chng_w_pct=None, chng_y=None, chng_y_pct=None, close=None, comment=None, consensus_num_est=None, consensus_time=None, convexity=None, convexity_agg=None, convexity_o=None, cpn=None, cpn_date=None, cpn_period=None, cpprice=None, currency=None, deal_acc=None, discount=None, dnt06beg=None, dnt06max=None, dnt06min=None, dnt120beg=None, dnt120max=None, dnt120min=None, dnt14beg=None, dnt14max=None, dnt14min=None, dnt200beg=None, dnt200max=None, dnt200min=None, dnt365beg=None, dnt365max=None, dnt365min=None, duration=None, duration_agg=None, duration_n=None, duration_o=None, duration_on=None, exch=None, facevalue=None, facevalue_currency=None, fact_frcst_chng=None, forecast=None, frcst_chng=None, high=None, highbid=None, isin=None, issuer=None, issuesize=None, last=None, last_quote_time=None, last_time=None, last_trade_time=None, last_yield=None, last2avge=None, lastsettlecode=None, lclose=None, lcp_chng=None, lcp_chng_pct=None, lcurrentprice=None, lnkcurrency=None, lotsize=None, low=None, lowoffer=None, mat_date=None, mcap=None, mprice=None, mprice2=None, name=None, open=None, open_inst=None, opprice=None, period=None, potential=None, prevlclose=None, prevmprice=None, publication_date=None, pvbp=None, pvbp_agg=None, pvbp_o=None, rec_buy_pct=None, rec_change=None, rec_hold_pct=None, rec_sell_pct=None, rec_val=None, recommendation=None, seccode=None, secname=None, secname_e=None, sector=None, settlecode=None, shortname_eng=None, shortname_rus=None, spread=None, status=None, step=None, target_price=None, time=None, total_return=None, tp_chng=None, tp_chng_m=None, tp_chng_m_pct=None, tp_chng_pct=None, tp_chng_q=None, tp_chng_q_pct=None, tp_chng_time=None, tp_chng_y=None, tp_chng_y_pct=None, tp_deviation=None, tp_high=None, tp_low=None, tp_median=None, val=None, val_acc=None, val_acc_usd=None, val_usd=None, vol=None, vol_acc=None, vol_currency=None, vol_lots=None, y2o_ask=None, y2o_bid=None, y2o_change=None, y2o_change_pct=None, y2o_last=None, y2o_prev=None, y2o_wap=None, yield_2=None, yield_agg=None, yield_ask=None, yield_average_12m=None, yield_average_1m=None, yield_average_2m=None, yield_average_2w=None, yield_average_3m=None, yield_average_6m=None, yield_average_o12m=None, yield_average_o1m=None, yield_average_o2m=None, yield_average_o2w=None, yield_average_o3m=None, yield_average_o6m=None, yield_bid=None, yield_chng=None, yield_cpprice=None, yield_cwa=None, yield_high=None, yield_low=None, yield_o_cwa=None, yield_o_swa=None, yield_open=None, yield_prev=None, yield_swa=None, full_price_pct=None, z_spread_ofz=None, bid_price_change=None, ask_price_change=None, bid_yield_change=None, ask_yield_change=None, id_trade_site=None, ifrs_level=None, rd_exch=None, rd_score=None, add_date=None, update_date=None, zspread=None, gspread=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._fintool_id = None
        self._trade_site = None
        self._accruedint = None
        self._admquote = None
        self._ask = None
        self._ask_size = None
        self._ask_size_total = None
        self._avge_chng = None
        self._avge_chng_pct = None
        self._avge_prce = None
        self._avge_yield = None
        self._bid = None
        self._bid_size = None
        self._bid_size_total = None
        self._boardid = None
        self._boardname = None
        self._buybackdate = None
        self._buybackprice = None
        self._cbr_lombard = None
        self._cbr_pledge = None
        self._chng = None
        self._chng_m = None
        self._chng_m_pct = None
        self._chng_pct = None
        self._chng_w = None
        self._chng_w_pct = None
        self._chng_y = None
        self._chng_y_pct = None
        self._close = None
        self._comment = None
        self._consensus_num_est = None
        self._consensus_time = None
        self._convexity = None
        self._convexity_agg = None
        self._convexity_o = None
        self._cpn = None
        self._cpn_date = None
        self._cpn_period = None
        self._cpprice = None
        self._currency = None
        self._deal_acc = None
        self._discount = None
        self._dnt06beg = None
        self._dnt06max = None
        self._dnt06min = None
        self._dnt120beg = None
        self._dnt120max = None
        self._dnt120min = None
        self._dnt14beg = None
        self._dnt14max = None
        self._dnt14min = None
        self._dnt200beg = None
        self._dnt200max = None
        self._dnt200min = None
        self._dnt365beg = None
        self._dnt365max = None
        self._dnt365min = None
        self._duration = None
        self._duration_agg = None
        self._duration_n = None
        self._duration_o = None
        self._duration_on = None
        self._exch = None
        self._facevalue = None
        self._facevalue_currency = None
        self._fact_frcst_chng = None
        self._forecast = None
        self._frcst_chng = None
        self._high = None
        self._highbid = None
        self._isin = None
        self._issuer = None
        self._issuesize = None
        self._last = None
        self._last_quote_time = None
        self._last_time = None
        self._last_trade_time = None
        self._last_yield = None
        self._last2avge = None
        self._lastsettlecode = None
        self._lclose = None
        self._lcp_chng = None
        self._lcp_chng_pct = None
        self._lcurrentprice = None
        self._lnkcurrency = None
        self._lotsize = None
        self._low = None
        self._lowoffer = None
        self._mat_date = None
        self._mcap = None
        self._mprice = None
        self._mprice2 = None
        self._name = None
        self._open = None
        self._open_inst = None
        self._opprice = None
        self._period = None
        self._potential = None
        self._prevlclose = None
        self._prevmprice = None
        self._publication_date = None
        self._pvbp = None
        self._pvbp_agg = None
        self._pvbp_o = None
        self._rec_buy_pct = None
        self._rec_change = None
        self._rec_hold_pct = None
        self._rec_sell_pct = None
        self._rec_val = None
        self._recommendation = None
        self._seccode = None
        self._secname = None
        self._secname_e = None
        self._sector = None
        self._settlecode = None
        self._shortname_eng = None
        self._shortname_rus = None
        self._spread = None
        self._status = None
        self._step = None
        self._target_price = None
        self._time = None
        self._total_return = None
        self._tp_chng = None
        self._tp_chng_m = None
        self._tp_chng_m_pct = None
        self._tp_chng_pct = None
        self._tp_chng_q = None
        self._tp_chng_q_pct = None
        self._tp_chng_time = None
        self._tp_chng_y = None
        self._tp_chng_y_pct = None
        self._tp_deviation = None
        self._tp_high = None
        self._tp_low = None
        self._tp_median = None
        self._val = None
        self._val_acc = None
        self._val_acc_usd = None
        self._val_usd = None
        self._vol = None
        self._vol_acc = None
        self._vol_currency = None
        self._vol_lots = None
        self._y2o_ask = None
        self._y2o_bid = None
        self._y2o_change = None
        self._y2o_change_pct = None
        self._y2o_last = None
        self._y2o_prev = None
        self._y2o_wap = None
        self._yield_2 = None
        self._yield_agg = None
        self._yield_ask = None
        self._yield_average_12m = None
        self._yield_average_1m = None
        self._yield_average_2m = None
        self._yield_average_2w = None
        self._yield_average_3m = None
        self._yield_average_6m = None
        self._yield_average_o12m = None
        self._yield_average_o1m = None
        self._yield_average_o2m = None
        self._yield_average_o2w = None
        self._yield_average_o3m = None
        self._yield_average_o6m = None
        self._yield_bid = None
        self._yield_chng = None
        self._yield_cpprice = None
        self._yield_cwa = None
        self._yield_high = None
        self._yield_low = None
        self._yield_o_cwa = None
        self._yield_o_swa = None
        self._yield_open = None
        self._yield_prev = None
        self._yield_swa = None
        self._full_price_pct = None
        self._z_spread_ofz = None
        self._bid_price_change = None
        self._ask_price_change = None
        self._bid_yield_change = None
        self._ask_yield_change = None
        self._id_trade_site = None
        self._ifrs_level = None
        self._rd_exch = None
        self._rd_score = None
        self._add_date = None
        self._update_date = None
        self._zspread = None
        self._gspread = None
        self._counter = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if fintool_id is not None:
            self.fintool_id = fintool_id
        if trade_site is not None:
            self.trade_site = trade_site
        if accruedint is not None:
            self.accruedint = accruedint
        if admquote is not None:
            self.admquote = admquote
        if ask is not None:
            self.ask = ask
        if ask_size is not None:
            self.ask_size = ask_size
        if ask_size_total is not None:
            self.ask_size_total = ask_size_total
        if avge_chng is not None:
            self.avge_chng = avge_chng
        if avge_chng_pct is not None:
            self.avge_chng_pct = avge_chng_pct
        if avge_prce is not None:
            self.avge_prce = avge_prce
        if avge_yield is not None:
            self.avge_yield = avge_yield
        if bid is not None:
            self.bid = bid
        if bid_size is not None:
            self.bid_size = bid_size
        if bid_size_total is not None:
            self.bid_size_total = bid_size_total
        if boardid is not None:
            self.boardid = boardid
        if boardname is not None:
            self.boardname = boardname
        if buybackdate is not None:
            self.buybackdate = buybackdate
        if buybackprice is not None:
            self.buybackprice = buybackprice
        if cbr_lombard is not None:
            self.cbr_lombard = cbr_lombard
        if cbr_pledge is not None:
            self.cbr_pledge = cbr_pledge
        if chng is not None:
            self.chng = chng
        if chng_m is not None:
            self.chng_m = chng_m
        if chng_m_pct is not None:
            self.chng_m_pct = chng_m_pct
        if chng_pct is not None:
            self.chng_pct = chng_pct
        if chng_w is not None:
            self.chng_w = chng_w
        if chng_w_pct is not None:
            self.chng_w_pct = chng_w_pct
        if chng_y is not None:
            self.chng_y = chng_y
        if chng_y_pct is not None:
            self.chng_y_pct = chng_y_pct
        if close is not None:
            self.close = close
        if comment is not None:
            self.comment = comment
        if consensus_num_est is not None:
            self.consensus_num_est = consensus_num_est
        if consensus_time is not None:
            self.consensus_time = consensus_time
        if convexity is not None:
            self.convexity = convexity
        if convexity_agg is not None:
            self.convexity_agg = convexity_agg
        if convexity_o is not None:
            self.convexity_o = convexity_o
        if cpn is not None:
            self.cpn = cpn
        if cpn_date is not None:
            self.cpn_date = cpn_date
        if cpn_period is not None:
            self.cpn_period = cpn_period
        if cpprice is not None:
            self.cpprice = cpprice
        if currency is not None:
            self.currency = currency
        if deal_acc is not None:
            self.deal_acc = deal_acc
        if discount is not None:
            self.discount = discount
        if dnt06beg is not None:
            self.dnt06beg = dnt06beg
        if dnt06max is not None:
            self.dnt06max = dnt06max
        if dnt06min is not None:
            self.dnt06min = dnt06min
        if dnt120beg is not None:
            self.dnt120beg = dnt120beg
        if dnt120max is not None:
            self.dnt120max = dnt120max
        if dnt120min is not None:
            self.dnt120min = dnt120min
        if dnt14beg is not None:
            self.dnt14beg = dnt14beg
        if dnt14max is not None:
            self.dnt14max = dnt14max
        if dnt14min is not None:
            self.dnt14min = dnt14min
        if dnt200beg is not None:
            self.dnt200beg = dnt200beg
        if dnt200max is not None:
            self.dnt200max = dnt200max
        if dnt200min is not None:
            self.dnt200min = dnt200min
        if dnt365beg is not None:
            self.dnt365beg = dnt365beg
        if dnt365max is not None:
            self.dnt365max = dnt365max
        if dnt365min is not None:
            self.dnt365min = dnt365min
        if duration is not None:
            self.duration = duration
        if duration_agg is not None:
            self.duration_agg = duration_agg
        if duration_n is not None:
            self.duration_n = duration_n
        if duration_o is not None:
            self.duration_o = duration_o
        if duration_on is not None:
            self.duration_on = duration_on
        if exch is not None:
            self.exch = exch
        if facevalue is not None:
            self.facevalue = facevalue
        if facevalue_currency is not None:
            self.facevalue_currency = facevalue_currency
        if fact_frcst_chng is not None:
            self.fact_frcst_chng = fact_frcst_chng
        if forecast is not None:
            self.forecast = forecast
        if frcst_chng is not None:
            self.frcst_chng = frcst_chng
        if high is not None:
            self.high = high
        if highbid is not None:
            self.highbid = highbid
        if isin is not None:
            self.isin = isin
        if issuer is not None:
            self.issuer = issuer
        if issuesize is not None:
            self.issuesize = issuesize
        if last is not None:
            self.last = last
        if last_quote_time is not None:
            self.last_quote_time = last_quote_time
        if last_time is not None:
            self.last_time = last_time
        if last_trade_time is not None:
            self.last_trade_time = last_trade_time
        if last_yield is not None:
            self.last_yield = last_yield
        if last2avge is not None:
            self.last2avge = last2avge
        if lastsettlecode is not None:
            self.lastsettlecode = lastsettlecode
        if lclose is not None:
            self.lclose = lclose
        if lcp_chng is not None:
            self.lcp_chng = lcp_chng
        if lcp_chng_pct is not None:
            self.lcp_chng_pct = lcp_chng_pct
        if lcurrentprice is not None:
            self.lcurrentprice = lcurrentprice
        if lnkcurrency is not None:
            self.lnkcurrency = lnkcurrency
        if lotsize is not None:
            self.lotsize = lotsize
        if low is not None:
            self.low = low
        if lowoffer is not None:
            self.lowoffer = lowoffer
        if mat_date is not None:
            self.mat_date = mat_date
        if mcap is not None:
            self.mcap = mcap
        if mprice is not None:
            self.mprice = mprice
        if mprice2 is not None:
            self.mprice2 = mprice2
        if name is not None:
            self.name = name
        if open is not None:
            self.open = open
        if open_inst is not None:
            self.open_inst = open_inst
        if opprice is not None:
            self.opprice = opprice
        if period is not None:
            self.period = period
        if potential is not None:
            self.potential = potential
        if prevlclose is not None:
            self.prevlclose = prevlclose
        if prevmprice is not None:
            self.prevmprice = prevmprice
        if publication_date is not None:
            self.publication_date = publication_date
        if pvbp is not None:
            self.pvbp = pvbp
        if pvbp_agg is not None:
            self.pvbp_agg = pvbp_agg
        if pvbp_o is not None:
            self.pvbp_o = pvbp_o
        if rec_buy_pct is not None:
            self.rec_buy_pct = rec_buy_pct
        if rec_change is not None:
            self.rec_change = rec_change
        if rec_hold_pct is not None:
            self.rec_hold_pct = rec_hold_pct
        if rec_sell_pct is not None:
            self.rec_sell_pct = rec_sell_pct
        if rec_val is not None:
            self.rec_val = rec_val
        if recommendation is not None:
            self.recommendation = recommendation
        if seccode is not None:
            self.seccode = seccode
        if secname is not None:
            self.secname = secname
        if secname_e is not None:
            self.secname_e = secname_e
        if sector is not None:
            self.sector = sector
        if settlecode is not None:
            self.settlecode = settlecode
        if shortname_eng is not None:
            self.shortname_eng = shortname_eng
        if shortname_rus is not None:
            self.shortname_rus = shortname_rus
        if spread is not None:
            self.spread = spread
        if status is not None:
            self.status = status
        if step is not None:
            self.step = step
        if target_price is not None:
            self.target_price = target_price
        if time is not None:
            self.time = time
        if total_return is not None:
            self.total_return = total_return
        if tp_chng is not None:
            self.tp_chng = tp_chng
        if tp_chng_m is not None:
            self.tp_chng_m = tp_chng_m
        if tp_chng_m_pct is not None:
            self.tp_chng_m_pct = tp_chng_m_pct
        if tp_chng_pct is not None:
            self.tp_chng_pct = tp_chng_pct
        if tp_chng_q is not None:
            self.tp_chng_q = tp_chng_q
        if tp_chng_q_pct is not None:
            self.tp_chng_q_pct = tp_chng_q_pct
        if tp_chng_time is not None:
            self.tp_chng_time = tp_chng_time
        if tp_chng_y is not None:
            self.tp_chng_y = tp_chng_y
        if tp_chng_y_pct is not None:
            self.tp_chng_y_pct = tp_chng_y_pct
        if tp_deviation is not None:
            self.tp_deviation = tp_deviation
        if tp_high is not None:
            self.tp_high = tp_high
        if tp_low is not None:
            self.tp_low = tp_low
        if tp_median is not None:
            self.tp_median = tp_median
        if val is not None:
            self.val = val
        if val_acc is not None:
            self.val_acc = val_acc
        if val_acc_usd is not None:
            self.val_acc_usd = val_acc_usd
        if val_usd is not None:
            self.val_usd = val_usd
        if vol is not None:
            self.vol = vol
        if vol_acc is not None:
            self.vol_acc = vol_acc
        if vol_currency is not None:
            self.vol_currency = vol_currency
        if vol_lots is not None:
            self.vol_lots = vol_lots
        if y2o_ask is not None:
            self.y2o_ask = y2o_ask
        if y2o_bid is not None:
            self.y2o_bid = y2o_bid
        if y2o_change is not None:
            self.y2o_change = y2o_change
        if y2o_change_pct is not None:
            self.y2o_change_pct = y2o_change_pct
        if y2o_last is not None:
            self.y2o_last = y2o_last
        if y2o_prev is not None:
            self.y2o_prev = y2o_prev
        if y2o_wap is not None:
            self.y2o_wap = y2o_wap
        if yield_2 is not None:
            self.yield_2 = yield_2
        if yield_agg is not None:
            self.yield_agg = yield_agg
        if yield_ask is not None:
            self.yield_ask = yield_ask
        if yield_average_12m is not None:
            self.yield_average_12m = yield_average_12m
        if yield_average_1m is not None:
            self.yield_average_1m = yield_average_1m
        if yield_average_2m is not None:
            self.yield_average_2m = yield_average_2m
        if yield_average_2w is not None:
            self.yield_average_2w = yield_average_2w
        if yield_average_3m is not None:
            self.yield_average_3m = yield_average_3m
        if yield_average_6m is not None:
            self.yield_average_6m = yield_average_6m
        if yield_average_o12m is not None:
            self.yield_average_o12m = yield_average_o12m
        if yield_average_o1m is not None:
            self.yield_average_o1m = yield_average_o1m
        if yield_average_o2m is not None:
            self.yield_average_o2m = yield_average_o2m
        if yield_average_o2w is not None:
            self.yield_average_o2w = yield_average_o2w
        if yield_average_o3m is not None:
            self.yield_average_o3m = yield_average_o3m
        if yield_average_o6m is not None:
            self.yield_average_o6m = yield_average_o6m
        if yield_bid is not None:
            self.yield_bid = yield_bid
        if yield_chng is not None:
            self.yield_chng = yield_chng
        if yield_cpprice is not None:
            self.yield_cpprice = yield_cpprice
        if yield_cwa is not None:
            self.yield_cwa = yield_cwa
        if yield_high is not None:
            self.yield_high = yield_high
        if yield_low is not None:
            self.yield_low = yield_low
        if yield_o_cwa is not None:
            self.yield_o_cwa = yield_o_cwa
        if yield_o_swa is not None:
            self.yield_o_swa = yield_o_swa
        if yield_open is not None:
            self.yield_open = yield_open
        if yield_prev is not None:
            self.yield_prev = yield_prev
        if yield_swa is not None:
            self.yield_swa = yield_swa
        if full_price_pct is not None:
            self.full_price_pct = full_price_pct
        if z_spread_ofz is not None:
            self.z_spread_ofz = z_spread_ofz
        if bid_price_change is not None:
            self.bid_price_change = bid_price_change
        if ask_price_change is not None:
            self.ask_price_change = ask_price_change
        if bid_yield_change is not None:
            self.bid_yield_change = bid_yield_change
        if ask_yield_change is not None:
            self.ask_yield_change = ask_yield_change
        if id_trade_site is not None:
            self.id_trade_site = id_trade_site
        if ifrs_level is not None:
            self.ifrs_level = ifrs_level
        if rd_exch is not None:
            self.rd_exch = rd_exch
        if rd_score is not None:
            self.rd_score = rd_score
        if add_date is not None:
            self.add_date = add_date
        if update_date is not None:
            self.update_date = update_date
        if zspread is not None:
            self.zspread = zspread
        if gspread is not None:
            self.gspread = gspread
        if counter is not None:
            self.counter = counter

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Числовой идентификатор торгового инструмента в БД Интерфакс (iss_id)  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Числовой идентификатор торгового инструмента в БД Интерфакс (iss_id)  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def fintool_id(self):
        """Gets the fintool_id of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Числовой идентификатор инструмента в базе Интерфакс  # noqa: E501

        :return: The fintool_id of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._fintool_id

    @fintool_id.setter
    def fintool_id(self, fintool_id):
        """Sets the fintool_id of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Числовой идентификатор инструмента в базе Интерфакс  # noqa: E501

        :param fintool_id: The fintool_id of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._fintool_id = fintool_id

    @property
    def trade_site(self):
        """Gets the trade_site of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Id торговой площадки  # noqa: E501

        :return: The trade_site of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._trade_site

    @trade_site.setter
    def trade_site(self, trade_site):
        """Sets the trade_site of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Id торговой площадки  # noqa: E501

        :param trade_site: The trade_site of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._trade_site = trade_site

    @property
    def accruedint(self):
        """Gets the accruedint of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Накопленный купонный доход (= ставка купона * количество дней с момента начала очередного купонного периода)  # noqa: E501

        :return: The accruedint of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._accruedint

    @accruedint.setter
    def accruedint(self, accruedint):
        """Sets the accruedint of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Накопленный купонный доход (= ставка купона * количество дней с момента начала очередного купонного периода)  # noqa: E501

        :param accruedint: The accruedint of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._accruedint = accruedint

    @property
    def admquote(self):
        """Gets the admquote of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Признаваемая котировка, рассчитываемая в соответствии Положением о порядке и сроках определения стоимости чистых активов акционерных инвестиционных фондов, стоимости чистых активов паевых инвестиционных фондов, расчетной стоимости инвестиционных паев паевых инвестиционных фондов, а также стоимости чистых активов акционерных инвестиционных фондов в расчете на одну акцию (утв. приказом Федеральной службы по финансовым рынкам от 15 июня 2005 г. № 05-21/пз-н)  # noqa: E501

        :return: The admquote of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._admquote

    @admquote.setter
    def admquote(self, admquote):
        """Sets the admquote of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Признаваемая котировка, рассчитываемая в соответствии Положением о порядке и сроках определения стоимости чистых активов акционерных инвестиционных фондов, стоимости чистых активов паевых инвестиционных фондов, расчетной стоимости инвестиционных паев паевых инвестиционных фондов, а также стоимости чистых активов акционерных инвестиционных фондов в расчете на одну акцию (утв. приказом Федеральной службы по финансовым рынкам от 15 июня 2005 г. № 05-21/пз-н)  # noqa: E501

        :param admquote: The admquote of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._admquote = admquote

    @property
    def ask(self):
        """Gets the ask of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Лучшая цена продажи в валюте торгов  # noqa: E501

        :return: The ask of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Лучшая цена продажи в валюте торгов  # noqa: E501

        :param ask: The ask of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._ask = ask

    @property
    def ask_size(self):
        """Gets the ask_size of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Объем по лучшей цене продажи в штуках  # noqa: E501

        :return: The ask_size of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._ask_size

    @ask_size.setter
    def ask_size(self, ask_size):
        """Sets the ask_size of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Объем по лучшей цене продажи в штуках  # noqa: E501

        :param ask_size: The ask_size of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._ask_size = ask_size

    @property
    def ask_size_total(self):
        """Gets the ask_size_total of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Полный объем предложения  # noqa: E501

        :return: The ask_size_total of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._ask_size_total

    @ask_size_total.setter
    def ask_size_total(self, ask_size_total):
        """Sets the ask_size_total of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Полный объем предложения  # noqa: E501

        :param ask_size_total: The ask_size_total of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._ask_size_total = ask_size_total

    @property
    def avge_chng(self):
        """Gets the avge_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение средневзвешенной цены за текущий торговый день к средневзвешенной цене предыдущего торгового дня в пунктах (= средневзвешенная цена - цена закрытия предыдущего торгового дня)  # noqa: E501

        :return: The avge_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._avge_chng

    @avge_chng.setter
    def avge_chng(self, avge_chng):
        """Sets the avge_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение средневзвешенной цены за текущий торговый день к средневзвешенной цене предыдущего торгового дня в пунктах (= средневзвешенная цена - цена закрытия предыдущего торгового дня)  # noqa: E501

        :param avge_chng: The avge_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._avge_chng = avge_chng

    @property
    def avge_chng_pct(self):
        """Gets the avge_chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Относительное изменение средневзвешенной цены к средневзвешенной предыдущего дня в % (= Средневзвешенная цена / Средневзвешенная цена на закрытие предыдущего торгового дня - 1)  # noqa: E501

        :return: The avge_chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._avge_chng_pct

    @avge_chng_pct.setter
    def avge_chng_pct(self, avge_chng_pct):
        """Sets the avge_chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Относительное изменение средневзвешенной цены к средневзвешенной предыдущего дня в % (= Средневзвешенная цена / Средневзвешенная цена на закрытие предыдущего торгового дня - 1)  # noqa: E501

        :param avge_chng_pct: The avge_chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._avge_chng_pct = avge_chng_pct

    @property
    def avge_prce(self):
        """Gets the avge_prce of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средневзвешенная цена за текущий торговый день  # noqa: E501

        :return: The avge_prce of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._avge_prce

    @avge_prce.setter
    def avge_prce(self, avge_prce):
        """Sets the avge_prce of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средневзвешенная цена за текущий торговый день  # noqa: E501

        :param avge_prce: The avge_prce of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._avge_prce = avge_prce

    @property
    def avge_yield(self):
        """Gets the avge_yield of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность по средневзвешенной цене текущего торгового дня  # noqa: E501

        :return: The avge_yield of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._avge_yield

    @avge_yield.setter
    def avge_yield(self, avge_yield):
        """Sets the avge_yield of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность по средневзвешенной цене текущего торгового дня  # noqa: E501

        :param avge_yield: The avge_yield of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._avge_yield = avge_yield

    @property
    def bid(self):
        """Gets the bid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Лучшая цена покупки в валюте торгов  # noqa: E501

        :return: The bid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Лучшая цена покупки в валюте торгов  # noqa: E501

        :param bid: The bid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._bid = bid

    @property
    def bid_size(self):
        """Gets the bid_size of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Объем по лучшей цене покупки в штуках  # noqa: E501

        :return: The bid_size of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._bid_size

    @bid_size.setter
    def bid_size(self, bid_size):
        """Sets the bid_size of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Объем по лучшей цене покупки в штуках  # noqa: E501

        :param bid_size: The bid_size of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._bid_size = bid_size

    @property
    def bid_size_total(self):
        """Gets the bid_size_total of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Полный объем спроса  # noqa: E501

        :return: The bid_size_total of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._bid_size_total

    @bid_size_total.setter
    def bid_size_total(self, bid_size_total):
        """Sets the bid_size_total of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Полный объем спроса  # noqa: E501

        :param bid_size_total: The bid_size_total of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._bid_size_total = bid_size_total

    @property
    def boardid(self):
        """Gets the boardid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Код режима торгов  # noqa: E501

        :return: The boardid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._boardid

    @boardid.setter
    def boardid(self, boardid):
        """Sets the boardid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Код режима торгов  # noqa: E501

        :param boardid: The boardid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._boardid = boardid

    @property
    def boardname(self):
        """Gets the boardname of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Режим торгов и/или Котировальный лист  # noqa: E501

        :return: The boardname of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._boardname

    @boardname.setter
    def boardname(self, boardname):
        """Sets the boardname of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Режим торгов и/или Котировальный лист  # noqa: E501

        :param boardname: The boardname of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._boardname = boardname

    @property
    def buybackdate(self):
        """Gets the buybackdate of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дата обратного выкупа  # noqa: E501

        :return: The buybackdate of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._buybackdate

    @buybackdate.setter
    def buybackdate(self, buybackdate):
        """Sets the buybackdate of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дата обратного выкупа  # noqa: E501

        :param buybackdate: The buybackdate of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: datetime
        """

        self._buybackdate = buybackdate

    @property
    def buybackprice(self):
        """Gets the buybackprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Цена обратного выкупа  # noqa: E501

        :return: The buybackprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._buybackprice

    @buybackprice.setter
    def buybackprice(self, buybackprice):
        """Sets the buybackprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Цена обратного выкупа  # noqa: E501

        :param buybackprice: The buybackprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._buybackprice = buybackprice

    @property
    def cbr_lombard(self):
        """Gets the cbr_lombard of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Ломбард  # noqa: E501

        :return: The cbr_lombard of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._cbr_lombard

    @cbr_lombard.setter
    def cbr_lombard(self, cbr_lombard):
        """Sets the cbr_lombard of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Ломбард  # noqa: E501

        :param cbr_lombard: The cbr_lombard of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._cbr_lombard = cbr_lombard

    @property
    def cbr_pledge(self):
        """Gets the cbr_pledge of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Залог РЕПО  # noqa: E501

        :return: The cbr_pledge of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._cbr_pledge

    @cbr_pledge.setter
    def cbr_pledge(self, cbr_pledge):
        """Sets the cbr_pledge of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Залог РЕПО  # noqa: E501

        :param cbr_pledge: The cbr_pledge of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._cbr_pledge = cbr_pledge

    @property
    def chng(self):
        """Gets the chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение цены последней сделки к цене закрытия предыдущего дня в пунктах (= цена последней сделки - цена закрытия предыдущего торгового дня)  # noqa: E501

        :return: The chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._chng

    @chng.setter
    def chng(self, chng):
        """Sets the chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение цены последней сделки к цене закрытия предыдущего дня в пунктах (= цена последней сделки - цена закрытия предыдущего торгового дня)  # noqa: E501

        :param chng: The chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._chng = chng

    @property
    def chng_m(self):
        """Gets the chng_m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение цены последней сделки к цене закрытия месяц назад в пунктах  # noqa: E501

        :return: The chng_m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._chng_m

    @chng_m.setter
    def chng_m(self, chng_m):
        """Sets the chng_m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение цены последней сделки к цене закрытия месяц назад в пунктах  # noqa: E501

        :param chng_m: The chng_m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._chng_m = chng_m

    @property
    def chng_m_pct(self):
        """Gets the chng_m_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Относительное изменение цены последней сделки к цене закрытия месяц назад в %  # noqa: E501

        :return: The chng_m_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._chng_m_pct

    @chng_m_pct.setter
    def chng_m_pct(self, chng_m_pct):
        """Sets the chng_m_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Относительное изменение цены последней сделки к цене закрытия месяц назад в %  # noqa: E501

        :param chng_m_pct: The chng_m_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._chng_m_pct = chng_m_pct

    @property
    def chng_pct(self):
        """Gets the chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Относительное изменение цены последней сделки к цене закрытия предыдущего дня в % (= Цена последней сделки / Цена закрытия предыдущего торгового дня - 1)  # noqa: E501

        :return: The chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._chng_pct

    @chng_pct.setter
    def chng_pct(self, chng_pct):
        """Sets the chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Относительное изменение цены последней сделки к цене закрытия предыдущего дня в % (= Цена последней сделки / Цена закрытия предыдущего торгового дня - 1)  # noqa: E501

        :param chng_pct: The chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._chng_pct = chng_pct

    @property
    def chng_w(self):
        """Gets the chng_w of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение цены последней сделки к цене закрытия неделю назад в пунктах  # noqa: E501

        :return: The chng_w of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._chng_w

    @chng_w.setter
    def chng_w(self, chng_w):
        """Sets the chng_w of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение цены последней сделки к цене закрытия неделю назад в пунктах  # noqa: E501

        :param chng_w: The chng_w of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._chng_w = chng_w

    @property
    def chng_w_pct(self):
        """Gets the chng_w_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Относительное изменение цены последней сделки к цене закрытия неделю назад в %  # noqa: E501

        :return: The chng_w_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._chng_w_pct

    @chng_w_pct.setter
    def chng_w_pct(self, chng_w_pct):
        """Sets the chng_w_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Относительное изменение цены последней сделки к цене закрытия неделю назад в %  # noqa: E501

        :param chng_w_pct: The chng_w_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._chng_w_pct = chng_w_pct

    @property
    def chng_y(self):
        """Gets the chng_y of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение цены последней сделки к цене закрытия год назад в пунктах  # noqa: E501

        :return: The chng_y of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._chng_y

    @chng_y.setter
    def chng_y(self, chng_y):
        """Sets the chng_y of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение цены последней сделки к цене закрытия год назад в пунктах  # noqa: E501

        :param chng_y: The chng_y of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._chng_y = chng_y

    @property
    def chng_y_pct(self):
        """Gets the chng_y_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Относительное изменение цены последней сделки к цене закрытия год назад в %  # noqa: E501

        :return: The chng_y_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._chng_y_pct

    @chng_y_pct.setter
    def chng_y_pct(self, chng_y_pct):
        """Sets the chng_y_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Относительное изменение цены последней сделки к цене закрытия год назад в %  # noqa: E501

        :param chng_y_pct: The chng_y_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._chng_y_pct = chng_y_pct

    @property
    def close(self):
        """Gets the close of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Цена закрытия предыдущего дня в валюте торгов  # noqa: E501

        :return: The close of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Цена закрытия предыдущего дня в валюте торгов  # noqa: E501

        :param close: The close of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._close = close

    @property
    def comment(self):
        """Gets the comment of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501


        :return: The comment of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.


        :param comment: The comment of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def consensus_num_est(self):
        """Gets the consensus_num_est of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Количество рекомендаций  # noqa: E501

        :return: The consensus_num_est of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._consensus_num_est

    @consensus_num_est.setter
    def consensus_num_est(self, consensus_num_est):
        """Sets the consensus_num_est of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Количество рекомендаций  # noqa: E501

        :param consensus_num_est: The consensus_num_est of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._consensus_num_est = consensus_num_est

    @property
    def consensus_time(self):
        """Gets the consensus_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дата последней оценки (подтверждение , изменение и т.д.)  # noqa: E501

        :return: The consensus_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._consensus_time

    @consensus_time.setter
    def consensus_time(self, consensus_time):
        """Sets the consensus_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дата последней оценки (подтверждение , изменение и т.д.)  # noqa: E501

        :param consensus_time: The consensus_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: datetime
        """

        self._consensus_time = consensus_time

    @property
    def convexity(self):
        """Gets the convexity of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Выпуклость к погашению  # noqa: E501

        :return: The convexity of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._convexity

    @convexity.setter
    def convexity(self, convexity):
        """Sets the convexity of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Выпуклость к погашению  # noqa: E501

        :param convexity: The convexity of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._convexity = convexity

    @property
    def convexity_agg(self):
        """Gets the convexity_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Выпуклость сводная  # noqa: E501

        :return: The convexity_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._convexity_agg

    @convexity_agg.setter
    def convexity_agg(self, convexity_agg):
        """Sets the convexity_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Выпуклость сводная  # noqa: E501

        :param convexity_agg: The convexity_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._convexity_agg = convexity_agg

    @property
    def convexity_o(self):
        """Gets the convexity_o of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Выпуклость к оферте  # noqa: E501

        :return: The convexity_o of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._convexity_o

    @convexity_o.setter
    def convexity_o(self, convexity_o):
        """Sets the convexity_o of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Выпуклость к оферте  # noqa: E501

        :param convexity_o: The convexity_o of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._convexity_o = convexity_o

    @property
    def cpn(self):
        """Gets the cpn of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Размер ближайшего купона (облигации)  # noqa: E501

        :return: The cpn of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._cpn

    @cpn.setter
    def cpn(self, cpn):
        """Sets the cpn of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Размер ближайшего купона (облигации)  # noqa: E501

        :param cpn: The cpn of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._cpn = cpn

    @property
    def cpn_date(self):
        """Gets the cpn_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дата очередной купонной выплаты (облигации)  # noqa: E501

        :return: The cpn_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._cpn_date

    @cpn_date.setter
    def cpn_date(self, cpn_date):
        """Sets the cpn_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дата очередной купонной выплаты (облигации)  # noqa: E501

        :param cpn_date: The cpn_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: datetime
        """

        self._cpn_date = cpn_date

    @property
    def cpn_period(self):
        """Gets the cpn_period of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Купонный период в днях  # noqa: E501

        :return: The cpn_period of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._cpn_period

    @cpn_period.setter
    def cpn_period(self, cpn_period):
        """Sets the cpn_period of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Купонный период в днях  # noqa: E501

        :param cpn_period: The cpn_period of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._cpn_period = cpn_period

    @property
    def cpprice(self):
        """Gets the cpprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Цена периода закрытия в валюте торгов  # noqa: E501

        :return: The cpprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._cpprice

    @cpprice.setter
    def cpprice(self, cpprice):
        """Sets the cpprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Цена периода закрытия в валюте торгов  # noqa: E501

        :param cpprice: The cpprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._cpprice = cpprice

    @property
    def currency(self):
        """Gets the currency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Валюта торгов  # noqa: E501

        :return: The currency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Валюта торгов  # noqa: E501

        :param currency: The currency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def deal_acc(self):
        """Gets the deal_acc of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Количество сделок за текущий торговый день  # noqa: E501

        :return: The deal_acc of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._deal_acc

    @deal_acc.setter
    def deal_acc(self, deal_acc):
        """Sets the deal_acc of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Количество сделок за текущий торговый день  # noqa: E501

        :param deal_acc: The deal_acc of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._deal_acc = deal_acc

    @property
    def discount(self):
        """Gets the discount of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дисконт  # noqa: E501

        :return: The discount of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дисконт  # noqa: E501

        :param discount: The discount of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def dnt06beg(self):
        """Gets the dnt06beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Начальный дисконт для сроков РЕПО до 6 дней  # noqa: E501

        :return: The dnt06beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt06beg

    @dnt06beg.setter
    def dnt06beg(self, dnt06beg):
        """Sets the dnt06beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Начальный дисконт для сроков РЕПО до 6 дней  # noqa: E501

        :param dnt06beg: The dnt06beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt06beg = dnt06beg

    @property
    def dnt06max(self):
        """Gets the dnt06max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Максимальный дисконт для сроков РЕПО до 6 дней  # noqa: E501

        :return: The dnt06max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt06max

    @dnt06max.setter
    def dnt06max(self, dnt06max):
        """Sets the dnt06max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Максимальный дисконт для сроков РЕПО до 6 дней  # noqa: E501

        :param dnt06max: The dnt06max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt06max = dnt06max

    @property
    def dnt06min(self):
        """Gets the dnt06min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Минимальный дисконт для сроков РЕПО до 6 дней  # noqa: E501

        :return: The dnt06min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt06min

    @dnt06min.setter
    def dnt06min(self, dnt06min):
        """Sets the dnt06min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Минимальный дисконт для сроков РЕПО до 6 дней  # noqa: E501

        :param dnt06min: The dnt06min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt06min = dnt06min

    @property
    def dnt120beg(self):
        """Gets the dnt120beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Начальный дисконт для сроков РЕПО от 15 до 90 дней  # noqa: E501

        :return: The dnt120beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt120beg

    @dnt120beg.setter
    def dnt120beg(self, dnt120beg):
        """Sets the dnt120beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Начальный дисконт для сроков РЕПО от 15 до 90 дней  # noqa: E501

        :param dnt120beg: The dnt120beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt120beg = dnt120beg

    @property
    def dnt120max(self):
        """Gets the dnt120max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Максимальный дисконт для сроков РЕПО от 15 до 90 дней  # noqa: E501

        :return: The dnt120max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt120max

    @dnt120max.setter
    def dnt120max(self, dnt120max):
        """Sets the dnt120max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Максимальный дисконт для сроков РЕПО от 15 до 90 дней  # noqa: E501

        :param dnt120max: The dnt120max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt120max = dnt120max

    @property
    def dnt120min(self):
        """Gets the dnt120min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Минимальный дисконт для сроков РЕПО от 15 до 90 дней  # noqa: E501

        :return: The dnt120min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt120min

    @dnt120min.setter
    def dnt120min(self, dnt120min):
        """Sets the dnt120min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Минимальный дисконт для сроков РЕПО от 15 до 90 дней  # noqa: E501

        :param dnt120min: The dnt120min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt120min = dnt120min

    @property
    def dnt14beg(self):
        """Gets the dnt14beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Начальный дисконт для сроков РЕПО от 7 до 14 дней  # noqa: E501

        :return: The dnt14beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt14beg

    @dnt14beg.setter
    def dnt14beg(self, dnt14beg):
        """Sets the dnt14beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Начальный дисконт для сроков РЕПО от 7 до 14 дней  # noqa: E501

        :param dnt14beg: The dnt14beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt14beg = dnt14beg

    @property
    def dnt14max(self):
        """Gets the dnt14max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Максимальный дисконт для сроков РЕПО от 7 до 14 дней  # noqa: E501

        :return: The dnt14max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt14max

    @dnt14max.setter
    def dnt14max(self, dnt14max):
        """Sets the dnt14max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Максимальный дисконт для сроков РЕПО от 7 до 14 дней  # noqa: E501

        :param dnt14max: The dnt14max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt14max = dnt14max

    @property
    def dnt14min(self):
        """Gets the dnt14min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Минимальный дисконт для сроков РЕПО от 7 до 14 дней  # noqa: E501

        :return: The dnt14min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt14min

    @dnt14min.setter
    def dnt14min(self, dnt14min):
        """Sets the dnt14min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Минимальный дисконт для сроков РЕПО от 7 до 14 дней  # noqa: E501

        :param dnt14min: The dnt14min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt14min = dnt14min

    @property
    def dnt200beg(self):
        """Gets the dnt200beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Начальный дисконт для сроков РЕПО от 91 до 180 дней  # noqa: E501

        :return: The dnt200beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt200beg

    @dnt200beg.setter
    def dnt200beg(self, dnt200beg):
        """Sets the dnt200beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Начальный дисконт для сроков РЕПО от 91 до 180 дней  # noqa: E501

        :param dnt200beg: The dnt200beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt200beg = dnt200beg

    @property
    def dnt200max(self):
        """Gets the dnt200max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Максимальный дисконт для сроков РЕПО от 91 до 180 дней  # noqa: E501

        :return: The dnt200max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt200max

    @dnt200max.setter
    def dnt200max(self, dnt200max):
        """Sets the dnt200max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Максимальный дисконт для сроков РЕПО от 91 до 180 дней  # noqa: E501

        :param dnt200max: The dnt200max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt200max = dnt200max

    @property
    def dnt200min(self):
        """Gets the dnt200min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Минимальный дисконт для сроков РЕПО от 91 до 180 дней  # noqa: E501

        :return: The dnt200min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt200min

    @dnt200min.setter
    def dnt200min(self, dnt200min):
        """Sets the dnt200min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Минимальный дисконт для сроков РЕПО от 91 до 180 дней  # noqa: E501

        :param dnt200min: The dnt200min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt200min = dnt200min

    @property
    def dnt365beg(self):
        """Gets the dnt365beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Начальный дисконт для сроков РЕПО от 201 до 365 дней  # noqa: E501

        :return: The dnt365beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt365beg

    @dnt365beg.setter
    def dnt365beg(self, dnt365beg):
        """Sets the dnt365beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Начальный дисконт для сроков РЕПО от 201 до 365 дней  # noqa: E501

        :param dnt365beg: The dnt365beg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt365beg = dnt365beg

    @property
    def dnt365max(self):
        """Gets the dnt365max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Максимальный дисконт для сроков РЕПО от 201 до 365 дней  # noqa: E501

        :return: The dnt365max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt365max

    @dnt365max.setter
    def dnt365max(self, dnt365max):
        """Sets the dnt365max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Максимальный дисконт для сроков РЕПО от 201 до 365 дней  # noqa: E501

        :param dnt365max: The dnt365max of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt365max = dnt365max

    @property
    def dnt365min(self):
        """Gets the dnt365min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Минимальный дисконт для сроков РЕПО от 201 до 365 дней  # noqa: E501

        :return: The dnt365min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._dnt365min

    @dnt365min.setter
    def dnt365min(self, dnt365min):
        """Sets the dnt365min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Минимальный дисконт для сроков РЕПО от 201 до 365 дней  # noqa: E501

        :param dnt365min: The dnt365min of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._dnt365min = dnt365min

    @property
    def duration(self):
        """Gets the duration of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дюрация по Маколею  # noqa: E501

        :return: The duration of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дюрация по Маколею  # noqa: E501

        :param duration: The duration of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def duration_agg(self):
        """Gets the duration_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Сводная дюрация  # noqa: E501

        :return: The duration_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._duration_agg

    @duration_agg.setter
    def duration_agg(self, duration_agg):
        """Sets the duration_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Сводная дюрация  # noqa: E501

        :param duration_agg: The duration_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._duration_agg = duration_agg

    @property
    def duration_n(self):
        """Gets the duration_n of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дюрация к погашению модифицированная  # noqa: E501

        :return: The duration_n of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._duration_n

    @duration_n.setter
    def duration_n(self, duration_n):
        """Sets the duration_n of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дюрация к погашению модифицированная  # noqa: E501

        :param duration_n: The duration_n of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._duration_n = duration_n

    @property
    def duration_o(self):
        """Gets the duration_o of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дюрация к оферте  # noqa: E501

        :return: The duration_o of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._duration_o

    @duration_o.setter
    def duration_o(self, duration_o):
        """Sets the duration_o of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дюрация к оферте  # noqa: E501

        :param duration_o: The duration_o of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._duration_o = duration_o

    @property
    def duration_on(self):
        """Gets the duration_on of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дюрация к оферте модифицированная  # noqa: E501

        :return: The duration_on of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._duration_on

    @duration_on.setter
    def duration_on(self, duration_on):
        """Sets the duration_on of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дюрация к оферте модифицированная  # noqa: E501

        :param duration_on: The duration_on of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._duration_on = duration_on

    @property
    def exch(self):
        """Gets the exch of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Краткое наименование торговой площадки  # noqa: E501

        :return: The exch of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._exch

    @exch.setter
    def exch(self, exch):
        """Sets the exch of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Краткое наименование торговой площадки  # noqa: E501

        :param exch: The exch of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._exch = exch

    @property
    def facevalue(self):
        """Gets the facevalue of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Номинал  # noqa: E501

        :return: The facevalue of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._facevalue

    @facevalue.setter
    def facevalue(self, facevalue):
        """Sets the facevalue of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Номинал  # noqa: E501

        :param facevalue: The facevalue of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._facevalue = facevalue

    @property
    def facevalue_currency(self):
        """Gets the facevalue_currency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Валюта номинала  # noqa: E501

        :return: The facevalue_currency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._facevalue_currency

    @facevalue_currency.setter
    def facevalue_currency(self, facevalue_currency):
        """Sets the facevalue_currency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Валюта номинала  # noqa: E501

        :param facevalue_currency: The facevalue_currency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._facevalue_currency = facevalue_currency

    @property
    def fact_frcst_chng(self):
        """Gets the fact_frcst_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Абсолютное изменение между фактом и прогнозом  # noqa: E501

        :return: The fact_frcst_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._fact_frcst_chng

    @fact_frcst_chng.setter
    def fact_frcst_chng(self, fact_frcst_chng):
        """Sets the fact_frcst_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Абсолютное изменение между фактом и прогнозом  # noqa: E501

        :param fact_frcst_chng: The fact_frcst_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._fact_frcst_chng = fact_frcst_chng

    @property
    def forecast(self):
        """Gets the forecast of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Прогноз  # noqa: E501

        :return: The forecast of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._forecast

    @forecast.setter
    def forecast(self, forecast):
        """Sets the forecast of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Прогноз  # noqa: E501

        :param forecast: The forecast of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._forecast = forecast

    @property
    def frcst_chng(self):
        """Gets the frcst_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Абсолютное изменение прогноза  # noqa: E501

        :return: The frcst_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._frcst_chng

    @frcst_chng.setter
    def frcst_chng(self, frcst_chng):
        """Sets the frcst_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Абсолютное изменение прогноза  # noqa: E501

        :param frcst_chng: The frcst_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._frcst_chng = frcst_chng

    @property
    def high(self):
        """Gets the high of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Максимальная цена в валюте торгов за текущий торговый день  # noqa: E501

        :return: The high of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Максимальная цена в валюте торгов за текущий торговый день  # noqa: E501

        :param high: The high of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._high = high

    @property
    def highbid(self):
        """Gets the highbid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501


        :return: The highbid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._highbid

    @highbid.setter
    def highbid(self, highbid):
        """Sets the highbid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.


        :param highbid: The highbid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._highbid = highbid

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Код инструмента ISIN  # noqa: E501

        :return: The isin of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Код инструмента ISIN  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def issuer(self):
        """Gets the issuer of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Эмитент  # noqa: E501

        :return: The issuer of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Эмитент  # noqa: E501

        :param issuer: The issuer of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def issuesize(self):
        """Gets the issuesize of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Объем выпуска в штуках  # noqa: E501

        :return: The issuesize of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._issuesize

    @issuesize.setter
    def issuesize(self, issuesize):
        """Sets the issuesize of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Объем выпуска в штуках  # noqa: E501

        :param issuesize: The issuesize of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._issuesize = issuesize

    @property
    def last(self):
        """Gets the last of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Цена последней сделки в валюте торгов  # noqa: E501

        :return: The last of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Цена последней сделки в валюте торгов  # noqa: E501

        :param last: The last of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._last = last

    @property
    def last_quote_time(self):
        """Gets the last_quote_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501


        :return: The last_quote_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._last_quote_time

    @last_quote_time.setter
    def last_quote_time(self, last_quote_time):
        """Sets the last_quote_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.


        :param last_quote_time: The last_quote_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: datetime
        """

        self._last_quote_time = last_quote_time

    @property
    def last_time(self):
        """Gets the last_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Время последней сделки (= ЧЧ.ММ.СС, если в ходе последних торогов, ДД.ММ.ГГ, если ранее)  # noqa: E501

        :return: The last_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._last_time

    @last_time.setter
    def last_time(self, last_time):
        """Sets the last_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Время последней сделки (= ЧЧ.ММ.СС, если в ходе последних торогов, ДД.ММ.ГГ, если ранее)  # noqa: E501

        :param last_time: The last_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: datetime
        """

        self._last_time = last_time

    @property
    def last_trade_time(self):
        """Gets the last_trade_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501


        :return: The last_trade_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._last_trade_time

    @last_trade_time.setter
    def last_trade_time(self, last_trade_time):
        """Sets the last_trade_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.


        :param last_trade_time: The last_trade_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: datetime
        """

        self._last_trade_time = last_trade_time

    @property
    def last_yield(self):
        """Gets the last_yield of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к погашению по последней сделке в % годовых  # noqa: E501

        :return: The last_yield of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._last_yield

    @last_yield.setter
    def last_yield(self, last_yield):
        """Sets the last_yield of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к погашению по последней сделке в % годовых  # noqa: E501

        :param last_yield: The last_yield of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._last_yield = last_yield

    @property
    def last2avge(self):
        """Gets the last2avge of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение последней цены к средневзвзвешенной на закрытие предыдущего торгового дня в пунктах  # noqa: E501

        :return: The last2avge of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._last2avge

    @last2avge.setter
    def last2avge(self, last2avge):
        """Sets the last2avge of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение последней цены к средневзвзвешенной на закрытие предыдущего торгового дня в пунктах  # noqa: E501

        :param last2avge: The last2avge of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._last2avge = last2avge

    @property
    def lastsettlecode(self):
        """Gets the lastsettlecode of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Код расчетов последней сделки  # noqa: E501

        :return: The lastsettlecode of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._lastsettlecode

    @lastsettlecode.setter
    def lastsettlecode(self, lastsettlecode):
        """Sets the lastsettlecode of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Код расчетов последней сделки  # noqa: E501

        :param lastsettlecode: The lastsettlecode of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._lastsettlecode = lastsettlecode

    @property
    def lclose(self):
        """Gets the lclose of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Официальная текущая цена закрытия  # noqa: E501

        :return: The lclose of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._lclose

    @lclose.setter
    def lclose(self, lclose):
        """Sets the lclose of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Официальная текущая цена закрытия  # noqa: E501

        :param lclose: The lclose of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._lclose = lclose

    @property
    def lcp_chng(self):
        """Gets the lcp_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501


        :return: The lcp_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._lcp_chng

    @lcp_chng.setter
    def lcp_chng(self, lcp_chng):
        """Sets the lcp_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.


        :param lcp_chng: The lcp_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._lcp_chng = lcp_chng

    @property
    def lcp_chng_pct(self):
        """Gets the lcp_chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501


        :return: The lcp_chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._lcp_chng_pct

    @lcp_chng_pct.setter
    def lcp_chng_pct(self, lcp_chng_pct):
        """Sets the lcp_chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.


        :param lcp_chng_pct: The lcp_chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._lcp_chng_pct = lcp_chng_pct

    @property
    def lcurrentprice(self):
        """Gets the lcurrentprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501


        :return: The lcurrentprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._lcurrentprice

    @lcurrentprice.setter
    def lcurrentprice(self, lcurrentprice):
        """Sets the lcurrentprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.


        :param lcurrentprice: The lcurrentprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._lcurrentprice = lcurrentprice

    @property
    def lnkcurrency(self):
        """Gets the lnkcurrency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Сопряженная валюта  # noqa: E501

        :return: The lnkcurrency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._lnkcurrency

    @lnkcurrency.setter
    def lnkcurrency(self, lnkcurrency):
        """Sets the lnkcurrency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Сопряженная валюта  # noqa: E501

        :param lnkcurrency: The lnkcurrency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._lnkcurrency = lnkcurrency

    @property
    def lotsize(self):
        """Gets the lotsize of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Лот в штуках  # noqa: E501

        :return: The lotsize of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._lotsize

    @lotsize.setter
    def lotsize(self, lotsize):
        """Sets the lotsize of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Лот в штуках  # noqa: E501

        :param lotsize: The lotsize of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._lotsize = lotsize

    @property
    def low(self):
        """Gets the low of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Минимальная цена в валюте торгов за текущий торговый день  # noqa: E501

        :return: The low of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Минимальная цена в валюте торгов за текущий торговый день  # noqa: E501

        :param low: The low of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._low = low

    @property
    def lowoffer(self):
        """Gets the lowoffer of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501


        :return: The lowoffer of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._lowoffer

    @lowoffer.setter
    def lowoffer(self, lowoffer):
        """Sets the lowoffer of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.


        :param lowoffer: The lowoffer of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._lowoffer = lowoffer

    @property
    def mat_date(self):
        """Gets the mat_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дата погашения (экспирации) типа String  # noqa: E501

        :return: The mat_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._mat_date

    @mat_date.setter
    def mat_date(self, mat_date):
        """Sets the mat_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дата погашения (экспирации) типа String  # noqa: E501

        :param mat_date: The mat_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: datetime
        """

        self._mat_date = mat_date

    @property
    def mcap(self):
        """Gets the mcap of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Капитализация (= Рыночная цена * количество бумаг в обращении)  # noqa: E501

        :return: The mcap of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._mcap

    @mcap.setter
    def mcap(self, mcap):
        """Sets the mcap of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Капитализация (= Рыночная цена * количество бумаг в обращении)  # noqa: E501

        :param mcap: The mcap of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._mcap = mcap

    @property
    def mprice(self):
        """Gets the mprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Рыночная цена3 в валюте торгов, рассчитываемая в соответствии с с Приказом ФСФР от 09 ноября 2010 г. № 10-65/пз-н \"Об утверждении Порядка определения рыночной цены ценных бумаг, расчетной цены ценных бумаг, а также предельной границы колебаний рыночной цены ценных бумаг в целях 23 главы Налогового кодекса Российской Федерации\"  # noqa: E501

        :return: The mprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._mprice

    @mprice.setter
    def mprice(self, mprice):
        """Sets the mprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Рыночная цена3 в валюте торгов, рассчитываемая в соответствии с с Приказом ФСФР от 09 ноября 2010 г. № 10-65/пз-н \"Об утверждении Порядка определения рыночной цены ценных бумаг, расчетной цены ценных бумаг, а также предельной границы колебаний рыночной цены ценных бумаг в целях 23 главы Налогового кодекса Российской Федерации\"  # noqa: E501

        :param mprice: The mprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._mprice = mprice

    @property
    def mprice2(self):
        """Gets the mprice2 of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Рыночная цена2 в валюте торгов, рассчитываемая в соответствии с Порядком расчета рыночной стоимости активов и стоимости чистых активов, в которые инвестированы средства пенсионных накоплений (утв. приказом Федеральной службы по финансовым рынкам от 26 декабря 2006 г. № 06-155/пз-н) и Порядком расчета рыночной стоимости активов и стоимости чистых активов, в которые инвестированы накопления для жилищного обеспечения военнослужащих (утв. приказом Федеральной службы по финансовым рынкам от 15 декабря 2005 г. № 05-82/пз-н)  # noqa: E501

        :return: The mprice2 of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._mprice2

    @mprice2.setter
    def mprice2(self, mprice2):
        """Sets the mprice2 of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Рыночная цена2 в валюте торгов, рассчитываемая в соответствии с Порядком расчета рыночной стоимости активов и стоимости чистых активов, в которые инвестированы средства пенсионных накоплений (утв. приказом Федеральной службы по финансовым рынкам от 26 декабря 2006 г. № 06-155/пз-н) и Порядком расчета рыночной стоимости активов и стоимости чистых активов, в которые инвестированы накопления для жилищного обеспечения военнослужащих (утв. приказом Федеральной службы по финансовым рынкам от 15 декабря 2005 г. № 05-82/пз-н)  # noqa: E501

        :param mprice2: The mprice2 of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._mprice2 = mprice2

    @property
    def name(self):
        """Gets the name of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Краткое наименование инструмента на площадке  # noqa: E501

        :return: The name of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Краткое наименование инструмента на площадке  # noqa: E501

        :param name: The name of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def open(self):
        """Gets the open of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Цена открытия (обычно = цена первой сделки) в валюте торгов  # noqa: E501

        :return: The open of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Цена открытия (обычно = цена первой сделки) в валюте торгов  # noqa: E501

        :param open: The open of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def open_inst(self):
        """Gets the open_inst of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Количество открытых позиций  # noqa: E501

        :return: The open_inst of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._open_inst

    @open_inst.setter
    def open_inst(self, open_inst):
        """Sets the open_inst of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Количество открытых позиций  # noqa: E501

        :param open_inst: The open_inst of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._open_inst = open_inst

    @property
    def opprice(self):
        """Gets the opprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Цена периода открытия в валюте торгов  # noqa: E501

        :return: The opprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._opprice

    @opprice.setter
    def opprice(self, opprice):
        """Sets the opprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Цена периода открытия в валюте торгов  # noqa: E501

        :param opprice: The opprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._opprice = opprice

    @property
    def period(self):
        """Gets the period of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Период в текстовом представлении  # noqa: E501

        :return: The period of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Период в текстовом представлении  # noqa: E501

        :param period: The period of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def potential(self):
        """Gets the potential of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Относительное изменение Прогнозной к Рыночной цене  # noqa: E501

        :return: The potential of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._potential

    @potential.setter
    def potential(self, potential):
        """Sets the potential of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Относительное изменение Прогнозной к Рыночной цене  # noqa: E501

        :param potential: The potential of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._potential = potential

    @property
    def prevlclose(self):
        """Gets the prevlclose of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501


        :return: The prevlclose of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._prevlclose

    @prevlclose.setter
    def prevlclose(self, prevlclose):
        """Sets the prevlclose of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.


        :param prevlclose: The prevlclose of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._prevlclose = prevlclose

    @property
    def prevmprice(self):
        """Gets the prevmprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Предыдущая рыночная цена цена3 в валюте торгов  # noqa: E501

        :return: The prevmprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._prevmprice

    @prevmprice.setter
    def prevmprice(self, prevmprice):
        """Sets the prevmprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Предыдущая рыночная цена цена3 в валюте торгов  # noqa: E501

        :param prevmprice: The prevmprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._prevmprice = prevmprice

    @property
    def publication_date(self):
        """Gets the publication_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дата публикации факта следующего периода  # noqa: E501

        :return: The publication_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дата публикации факта следующего периода  # noqa: E501

        :param publication_date: The publication_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: datetime
        """

        self._publication_date = publication_date

    @property
    def pvbp(self):
        """Gets the pvbp of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        PVBP к погашению  # noqa: E501

        :return: The pvbp of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._pvbp

    @pvbp.setter
    def pvbp(self, pvbp):
        """Sets the pvbp of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        PVBP к погашению  # noqa: E501

        :param pvbp: The pvbp of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._pvbp = pvbp

    @property
    def pvbp_agg(self):
        """Gets the pvbp_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        PVBP сводная  # noqa: E501

        :return: The pvbp_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._pvbp_agg

    @pvbp_agg.setter
    def pvbp_agg(self, pvbp_agg):
        """Sets the pvbp_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        PVBP сводная  # noqa: E501

        :param pvbp_agg: The pvbp_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._pvbp_agg = pvbp_agg

    @property
    def pvbp_o(self):
        """Gets the pvbp_o of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        PVBP к оферте  # noqa: E501

        :return: The pvbp_o of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._pvbp_o

    @pvbp_o.setter
    def pvbp_o(self, pvbp_o):
        """Sets the pvbp_o of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        PVBP к оферте  # noqa: E501

        :param pvbp_o: The pvbp_o of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._pvbp_o = pvbp_o

    @property
    def rec_buy_pct(self):
        """Gets the rec_buy_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доля рекомендаций \"Покупать\"  # noqa: E501

        :return: The rec_buy_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._rec_buy_pct

    @rec_buy_pct.setter
    def rec_buy_pct(self, rec_buy_pct):
        """Sets the rec_buy_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доля рекомендаций \"Покупать\"  # noqa: E501

        :param rec_buy_pct: The rec_buy_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._rec_buy_pct = rec_buy_pct

    @property
    def rec_change(self):
        """Gets the rec_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение рекомендации  # noqa: E501

        :return: The rec_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._rec_change

    @rec_change.setter
    def rec_change(self, rec_change):
        """Sets the rec_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение рекомендации  # noqa: E501

        :param rec_change: The rec_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._rec_change = rec_change

    @property
    def rec_hold_pct(self):
        """Gets the rec_hold_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доля рекомендаций \"Держать\"  # noqa: E501

        :return: The rec_hold_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._rec_hold_pct

    @rec_hold_pct.setter
    def rec_hold_pct(self, rec_hold_pct):
        """Sets the rec_hold_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доля рекомендаций \"Держать\"  # noqa: E501

        :param rec_hold_pct: The rec_hold_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._rec_hold_pct = rec_hold_pct

    @property
    def rec_sell_pct(self):
        """Gets the rec_sell_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доля рекомендаций \"Продавать\"  # noqa: E501

        :return: The rec_sell_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._rec_sell_pct

    @rec_sell_pct.setter
    def rec_sell_pct(self, rec_sell_pct):
        """Sets the rec_sell_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доля рекомендаций \"Продавать\"  # noqa: E501

        :param rec_sell_pct: The rec_sell_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._rec_sell_pct = rec_sell_pct

    @property
    def rec_val(self):
        """Gets the rec_val of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Оценка рекомендации в масштабе от -1 до 1  # noqa: E501

        :return: The rec_val of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._rec_val

    @rec_val.setter
    def rec_val(self, rec_val):
        """Sets the rec_val of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Оценка рекомендации в масштабе от -1 до 1  # noqa: E501

        :param rec_val: The rec_val of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._rec_val = rec_val

    @property
    def recommendation(self):
        """Gets the recommendation of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Рекомендация по бумаге  # noqa: E501

        :return: The recommendation of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Рекомендация по бумаге  # noqa: E501

        :param recommendation: The recommendation of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._recommendation = recommendation

    @property
    def seccode(self):
        """Gets the seccode of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Торговый код инструмента на площадке  # noqa: E501

        :return: The seccode of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._seccode

    @seccode.setter
    def seccode(self, seccode):
        """Sets the seccode of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Торговый код инструмента на площадке  # noqa: E501

        :param seccode: The seccode of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._seccode = seccode

    @property
    def secname(self):
        """Gets the secname of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Полное русское наименование  # noqa: E501

        :return: The secname of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._secname

    @secname.setter
    def secname(self, secname):
        """Sets the secname of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Полное русское наименование  # noqa: E501

        :param secname: The secname of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._secname = secname

    @property
    def secname_e(self):
        """Gets the secname_e of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Полное английское наименование  # noqa: E501

        :return: The secname_e of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._secname_e

    @secname_e.setter
    def secname_e(self, secname_e):
        """Sets the secname_e of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Полное английское наименование  # noqa: E501

        :param secname_e: The secname_e of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._secname_e = secname_e

    @property
    def sector(self):
        """Gets the sector of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Сектор  # noqa: E501

        :return: The sector of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Сектор  # noqa: E501

        :param sector: The sector of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def settlecode(self):
        """Gets the settlecode of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Код расчетов (определяет временные параметры сделки)  # noqa: E501

        :return: The settlecode of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._settlecode

    @settlecode.setter
    def settlecode(self, settlecode):
        """Sets the settlecode of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Код расчетов (определяет временные параметры сделки)  # noqa: E501

        :param settlecode: The settlecode of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._settlecode = settlecode

    @property
    def shortname_eng(self):
        """Gets the shortname_eng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Краткое английское наименование  # noqa: E501

        :return: The shortname_eng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_eng

    @shortname_eng.setter
    def shortname_eng(self, shortname_eng):
        """Sets the shortname_eng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Краткое английское наименование  # noqa: E501

        :param shortname_eng: The shortname_eng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._shortname_eng = shortname_eng

    @property
    def shortname_rus(self):
        """Gets the shortname_rus of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Краткое русское наименование  # noqa: E501

        :return: The shortname_rus of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_rus

    @shortname_rus.setter
    def shortname_rus(self, shortname_rus):
        """Sets the shortname_rus of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Краткое русское наименование  # noqa: E501

        :param shortname_rus: The shortname_rus of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._shortname_rus = shortname_rus

    @property
    def spread(self):
        """Gets the spread of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Спред  # noqa: E501

        :return: The spread of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._spread

    @spread.setter
    def spread(self, spread):
        """Sets the spread of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Спред  # noqa: E501

        :param spread: The spread of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._spread = spread

    @property
    def status(self):
        """Gets the status of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Торговый статус инструмента (торгуется ли он на площадке в текущий торговый день)  # noqa: E501

        :return: The status of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Торговый статус инструмента (торгуется ли он на площадке в текущий торговый день)  # noqa: E501

        :param status: The status of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def step(self):
        """Gets the step of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Тип возвращаемых данных, зависит от значения входного параметра official. Возможные значения: '1d' - неофициальные итоги; '1do' -официальные итоги.  # noqa: E501

        :return: The step of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Тип возвращаемых данных, зависит от значения входного параметра official. Возможные значения: '1d' - неофициальные итоги; '1do' -официальные итоги.  # noqa: E501

        :param step: The step of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._step = step

    @property
    def target_price(self):
        """Gets the target_price of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Прогнозная цена  # noqa: E501

        :return: The target_price of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._target_price

    @target_price.setter
    def target_price(self, target_price):
        """Sets the target_price of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Прогнозная цена  # noqa: E501

        :param target_price: The target_price of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._target_price = target_price

    @property
    def time(self):
        """Gets the time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Время последнего события по инструменту (сделки или котировки)  # noqa: E501

        :return: The time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Время последнего события по инструменту (сделки или котировки)  # noqa: E501

        :param time: The time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def total_return(self):
        """Gets the total_return of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Накопленная стоимость  # noqa: E501

        :return: The total_return of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._total_return

    @total_return.setter
    def total_return(self, total_return):
        """Sets the total_return of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Накопленная стоимость  # noqa: E501

        :param total_return: The total_return of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._total_return = total_return

    @property
    def tp_chng(self):
        """Gets the tp_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Абсолютное изменение Прогнозной цены  # noqa: E501

        :return: The tp_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng

    @tp_chng.setter
    def tp_chng(self, tp_chng):
        """Sets the tp_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Абсолютное изменение Прогнозной цены  # noqa: E501

        :param tp_chng: The tp_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._tp_chng = tp_chng

    @property
    def tp_chng_m(self):
        """Gets the tp_chng_m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Абсолютное изменение Прогнозной цены за месяц  # noqa: E501

        :return: The tp_chng_m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_m

    @tp_chng_m.setter
    def tp_chng_m(self, tp_chng_m):
        """Sets the tp_chng_m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Абсолютное изменение Прогнозной цены за месяц  # noqa: E501

        :param tp_chng_m: The tp_chng_m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_m = tp_chng_m

    @property
    def tp_chng_m_pct(self):
        """Gets the tp_chng_m_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Относительное изменение Прогнозной цены за месяц  # noqa: E501

        :return: The tp_chng_m_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_m_pct

    @tp_chng_m_pct.setter
    def tp_chng_m_pct(self, tp_chng_m_pct):
        """Sets the tp_chng_m_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Относительное изменение Прогнозной цены за месяц  # noqa: E501

        :param tp_chng_m_pct: The tp_chng_m_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_m_pct = tp_chng_m_pct

    @property
    def tp_chng_pct(self):
        """Gets the tp_chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Относительное изменение Прогнозной цены  # noqa: E501

        :return: The tp_chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_pct

    @tp_chng_pct.setter
    def tp_chng_pct(self, tp_chng_pct):
        """Sets the tp_chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Относительное изменение Прогнозной цены  # noqa: E501

        :param tp_chng_pct: The tp_chng_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_pct = tp_chng_pct

    @property
    def tp_chng_q(self):
        """Gets the tp_chng_q of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Относительное изменение Прогнозной цены  # noqa: E501

        :return: The tp_chng_q of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_q

    @tp_chng_q.setter
    def tp_chng_q(self, tp_chng_q):
        """Sets the tp_chng_q of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Относительное изменение Прогнозной цены  # noqa: E501

        :param tp_chng_q: The tp_chng_q of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_q = tp_chng_q

    @property
    def tp_chng_q_pct(self):
        """Gets the tp_chng_q_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Относительное изменение Прогнозной цены за 3 месяца  # noqa: E501

        :return: The tp_chng_q_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_q_pct

    @tp_chng_q_pct.setter
    def tp_chng_q_pct(self, tp_chng_q_pct):
        """Sets the tp_chng_q_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Относительное изменение Прогнозной цены за 3 месяца  # noqa: E501

        :param tp_chng_q_pct: The tp_chng_q_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_q_pct = tp_chng_q_pct

    @property
    def tp_chng_time(self):
        """Gets the tp_chng_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дата последнего ненулевого изменения Прогнозной цены  # noqa: E501

        :return: The tp_chng_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._tp_chng_time

    @tp_chng_time.setter
    def tp_chng_time(self, tp_chng_time):
        """Sets the tp_chng_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дата последнего ненулевого изменения Прогнозной цены  # noqa: E501

        :param tp_chng_time: The tp_chng_time of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: datetime
        """

        self._tp_chng_time = tp_chng_time

    @property
    def tp_chng_y(self):
        """Gets the tp_chng_y of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Абсолютное изменение Прогнозной цены за год  # noqa: E501

        :return: The tp_chng_y of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_y

    @tp_chng_y.setter
    def tp_chng_y(self, tp_chng_y):
        """Sets the tp_chng_y of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Абсолютное изменение Прогнозной цены за год  # noqa: E501

        :param tp_chng_y: The tp_chng_y of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_y = tp_chng_y

    @property
    def tp_chng_y_pct(self):
        """Gets the tp_chng_y_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Относительное изменение Прогнозной цены за год  # noqa: E501

        :return: The tp_chng_y_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_y_pct

    @tp_chng_y_pct.setter
    def tp_chng_y_pct(self, tp_chng_y_pct):
        """Sets the tp_chng_y_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Относительное изменение Прогнозной цены за год  # noqa: E501

        :param tp_chng_y_pct: The tp_chng_y_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_y_pct = tp_chng_y_pct

    @property
    def tp_deviation(self):
        """Gets the tp_deviation of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Стандартное отклонение по оценкам Прогнозной цены  # noqa: E501

        :return: The tp_deviation of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_deviation

    @tp_deviation.setter
    def tp_deviation(self, tp_deviation):
        """Sets the tp_deviation of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Стандартное отклонение по оценкам Прогнозной цены  # noqa: E501

        :param tp_deviation: The tp_deviation of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._tp_deviation = tp_deviation

    @property
    def tp_high(self):
        """Gets the tp_high of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Максимальная из оценок Прогнозной цены  # noqa: E501

        :return: The tp_high of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_high

    @tp_high.setter
    def tp_high(self, tp_high):
        """Sets the tp_high of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Максимальная из оценок Прогнозной цены  # noqa: E501

        :param tp_high: The tp_high of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._tp_high = tp_high

    @property
    def tp_low(self):
        """Gets the tp_low of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Минимальная из оценок Прогнозной цены  # noqa: E501

        :return: The tp_low of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_low

    @tp_low.setter
    def tp_low(self, tp_low):
        """Sets the tp_low of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Минимальная из оценок Прогнозной цены  # noqa: E501

        :param tp_low: The tp_low of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._tp_low = tp_low

    @property
    def tp_median(self):
        """Gets the tp_median of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Медианная оценка прогнозной цены  # noqa: E501

        :return: The tp_median of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_median

    @tp_median.setter
    def tp_median(self, tp_median):
        """Sets the tp_median of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Медианная оценка прогнозной цены  # noqa: E501

        :param tp_median: The tp_median of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._tp_median = tp_median

    @property
    def val(self):
        """Gets the val of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Оборот последней сделки в валюте торгов (= цена последней сделки * объем последней сделки)  # noqa: E501

        :return: The val of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._val

    @val.setter
    def val(self, val):
        """Sets the val of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Оборот последней сделки в валюте торгов (= цена последней сделки * объем последней сделки)  # noqa: E501

        :param val: The val of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._val = val

    @property
    def val_acc(self):
        """Gets the val_acc of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дневной оборот в валюте торгов за текущий торговый день  # noqa: E501

        :return: The val_acc of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._val_acc

    @val_acc.setter
    def val_acc(self, val_acc):
        """Sets the val_acc of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дневной оборот в валюте торгов за текущий торговый день  # noqa: E501

        :param val_acc: The val_acc of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._val_acc = val_acc

    @property
    def val_acc_usd(self):
        """Gets the val_acc_usd of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Суммарный оборот в долларах США  # noqa: E501

        :return: The val_acc_usd of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._val_acc_usd

    @val_acc_usd.setter
    def val_acc_usd(self, val_acc_usd):
        """Sets the val_acc_usd of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Суммарный оборот в долларах США  # noqa: E501

        :param val_acc_usd: The val_acc_usd of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._val_acc_usd = val_acc_usd

    @property
    def val_usd(self):
        """Gets the val_usd of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Оборот последней сделки в долларах США  # noqa: E501

        :return: The val_usd of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._val_usd

    @val_usd.setter
    def val_usd(self, val_usd):
        """Sets the val_usd of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Оборот последней сделки в долларах США  # noqa: E501

        :param val_usd: The val_usd of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._val_usd = val_usd

    @property
    def vol(self):
        """Gets the vol of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Объём последней сделки в штуках  # noqa: E501

        :return: The vol of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._vol

    @vol.setter
    def vol(self, vol):
        """Sets the vol of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Объём последней сделки в штуках  # noqa: E501

        :param vol: The vol of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._vol = vol

    @property
    def vol_acc(self):
        """Gets the vol_acc of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дневной объем в штуках за текущий торговый день  # noqa: E501

        :return: The vol_acc of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._vol_acc

    @vol_acc.setter
    def vol_acc(self, vol_acc):
        """Sets the vol_acc of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дневной объем в штуках за текущий торговый день  # noqa: E501

        :param vol_acc: The vol_acc of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._vol_acc = vol_acc

    @property
    def vol_currency(self):
        """Gets the vol_currency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Валюта объема  # noqa: E501

        :return: The vol_currency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: str
        """
        return self._vol_currency

    @vol_currency.setter
    def vol_currency(self, vol_currency):
        """Sets the vol_currency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Валюта объема  # noqa: E501

        :param vol_currency: The vol_currency of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: str
        """

        self._vol_currency = vol_currency

    @property
    def vol_lots(self):
        """Gets the vol_lots of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Объем последней сделки в лотах  # noqa: E501

        :return: The vol_lots of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._vol_lots

    @vol_lots.setter
    def vol_lots(self, vol_lots):
        """Sets the vol_lots of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Объем последней сделки в лотах  # noqa: E501

        :param vol_lots: The vol_lots of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._vol_lots = vol_lots

    @property
    def y2o_ask(self):
        """Gets the y2o_ask of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к оферте по предложению  # noqa: E501

        :return: The y2o_ask of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._y2o_ask

    @y2o_ask.setter
    def y2o_ask(self, y2o_ask):
        """Sets the y2o_ask of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к оферте по предложению  # noqa: E501

        :param y2o_ask: The y2o_ask of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._y2o_ask = y2o_ask

    @property
    def y2o_bid(self):
        """Gets the y2o_bid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к оферте по спросу  # noqa: E501

        :return: The y2o_bid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._y2o_bid

    @y2o_bid.setter
    def y2o_bid(self, y2o_bid):
        """Sets the y2o_bid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к оферте по спросу  # noqa: E501

        :param y2o_bid: The y2o_bid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._y2o_bid = y2o_bid

    @property
    def y2o_change(self):
        """Gets the y2o_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение доходности к оферте абс.  # noqa: E501

        :return: The y2o_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._y2o_change

    @y2o_change.setter
    def y2o_change(self, y2o_change):
        """Sets the y2o_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение доходности к оферте абс.  # noqa: E501

        :param y2o_change: The y2o_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._y2o_change = y2o_change

    @property
    def y2o_change_pct(self):
        """Gets the y2o_change_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение доходности к оферте отн.  # noqa: E501

        :return: The y2o_change_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._y2o_change_pct

    @y2o_change_pct.setter
    def y2o_change_pct(self, y2o_change_pct):
        """Sets the y2o_change_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение доходности к оферте отн.  # noqa: E501

        :param y2o_change_pct: The y2o_change_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._y2o_change_pct = y2o_change_pct

    @property
    def y2o_last(self):
        """Gets the y2o_last of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к оферте по цене последней сделки  # noqa: E501

        :return: The y2o_last of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._y2o_last

    @y2o_last.setter
    def y2o_last(self, y2o_last):
        """Sets the y2o_last of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к оферте по цене последней сделки  # noqa: E501

        :param y2o_last: The y2o_last of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._y2o_last = y2o_last

    @property
    def y2o_prev(self):
        """Gets the y2o_prev of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к оферте по цене пред.дня  # noqa: E501

        :return: The y2o_prev of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._y2o_prev

    @y2o_prev.setter
    def y2o_prev(self, y2o_prev):
        """Sets the y2o_prev of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к оферте по цене пред.дня  # noqa: E501

        :param y2o_prev: The y2o_prev of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._y2o_prev = y2o_prev

    @property
    def y2o_wap(self):
        """Gets the y2o_wap of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к оферте по средневзвешенной цене  # noqa: E501

        :return: The y2o_wap of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._y2o_wap

    @y2o_wap.setter
    def y2o_wap(self, y2o_wap):
        """Sets the y2o_wap of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к оферте по средневзвешенной цене  # noqa: E501

        :param y2o_wap: The y2o_wap of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._y2o_wap = y2o_wap

    @property
    def yield_2(self):
        """Gets the yield_2 of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к аукциону в % годовых  # noqa: E501

        :return: The yield_2 of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_2

    @yield_2.setter
    def yield_2(self, yield_2):
        """Sets the yield_2 of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к аукциону в % годовых  # noqa: E501

        :param yield_2: The yield_2 of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_2 = yield_2

    @property
    def yield_agg(self):
        """Gets the yield_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Сводная доходность  # noqa: E501

        :return: The yield_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_agg

    @yield_agg.setter
    def yield_agg(self, yield_agg):
        """Sets the yield_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Сводная доходность  # noqa: E501

        :param yield_agg: The yield_agg of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_agg = yield_agg

    @property
    def yield_ask(self):
        """Gets the yield_ask of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к погашению по предложению  # noqa: E501

        :return: The yield_ask of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_ask

    @yield_ask.setter
    def yield_ask(self, yield_ask):
        """Sets the yield_ask of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к погашению по предложению  # noqa: E501

        :param yield_ask: The yield_ask of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_ask = yield_ask

    @property
    def yield_average_12m(self):
        """Gets the yield_average_12m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средняя доходность за 12 месяцев  # noqa: E501

        :return: The yield_average_12m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_average_12m

    @yield_average_12m.setter
    def yield_average_12m(self, yield_average_12m):
        """Sets the yield_average_12m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средняя доходность за 12 месяцев  # noqa: E501

        :param yield_average_12m: The yield_average_12m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_average_12m = yield_average_12m

    @property
    def yield_average_1m(self):
        """Gets the yield_average_1m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средняя доходность за 1 месяц  # noqa: E501

        :return: The yield_average_1m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_average_1m

    @yield_average_1m.setter
    def yield_average_1m(self, yield_average_1m):
        """Sets the yield_average_1m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средняя доходность за 1 месяц  # noqa: E501

        :param yield_average_1m: The yield_average_1m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_average_1m = yield_average_1m

    @property
    def yield_average_2m(self):
        """Gets the yield_average_2m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средняя доходность за 2 месяца  # noqa: E501

        :return: The yield_average_2m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_average_2m

    @yield_average_2m.setter
    def yield_average_2m(self, yield_average_2m):
        """Sets the yield_average_2m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средняя доходность за 2 месяца  # noqa: E501

        :param yield_average_2m: The yield_average_2m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_average_2m = yield_average_2m

    @property
    def yield_average_2w(self):
        """Gets the yield_average_2w of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средняя доходность за 2 недели  # noqa: E501

        :return: The yield_average_2w of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_average_2w

    @yield_average_2w.setter
    def yield_average_2w(self, yield_average_2w):
        """Sets the yield_average_2w of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средняя доходность за 2 недели  # noqa: E501

        :param yield_average_2w: The yield_average_2w of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_average_2w = yield_average_2w

    @property
    def yield_average_3m(self):
        """Gets the yield_average_3m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средняя доходность за 3 месяца  # noqa: E501

        :return: The yield_average_3m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_average_3m

    @yield_average_3m.setter
    def yield_average_3m(self, yield_average_3m):
        """Sets the yield_average_3m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средняя доходность за 3 месяца  # noqa: E501

        :param yield_average_3m: The yield_average_3m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_average_3m = yield_average_3m

    @property
    def yield_average_6m(self):
        """Gets the yield_average_6m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средняя доходность за 6 месяцев  # noqa: E501

        :return: The yield_average_6m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_average_6m

    @yield_average_6m.setter
    def yield_average_6m(self, yield_average_6m):
        """Sets the yield_average_6m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средняя доходность за 6 месяцев  # noqa: E501

        :param yield_average_6m: The yield_average_6m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_average_6m = yield_average_6m

    @property
    def yield_average_o12m(self):
        """Gets the yield_average_o12m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средняя доходность к оферте за 12 месяцев  # noqa: E501

        :return: The yield_average_o12m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_average_o12m

    @yield_average_o12m.setter
    def yield_average_o12m(self, yield_average_o12m):
        """Sets the yield_average_o12m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средняя доходность к оферте за 12 месяцев  # noqa: E501

        :param yield_average_o12m: The yield_average_o12m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_average_o12m = yield_average_o12m

    @property
    def yield_average_o1m(self):
        """Gets the yield_average_o1m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средняя доходность к оферте за 1 месяц  # noqa: E501

        :return: The yield_average_o1m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_average_o1m

    @yield_average_o1m.setter
    def yield_average_o1m(self, yield_average_o1m):
        """Sets the yield_average_o1m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средняя доходность к оферте за 1 месяц  # noqa: E501

        :param yield_average_o1m: The yield_average_o1m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_average_o1m = yield_average_o1m

    @property
    def yield_average_o2m(self):
        """Gets the yield_average_o2m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средняя доходность к оферте за 2 месяца  # noqa: E501

        :return: The yield_average_o2m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_average_o2m

    @yield_average_o2m.setter
    def yield_average_o2m(self, yield_average_o2m):
        """Sets the yield_average_o2m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средняя доходность к оферте за 2 месяца  # noqa: E501

        :param yield_average_o2m: The yield_average_o2m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_average_o2m = yield_average_o2m

    @property
    def yield_average_o2w(self):
        """Gets the yield_average_o2w of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средняя доходность к оферте за 2 недели  # noqa: E501

        :return: The yield_average_o2w of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_average_o2w

    @yield_average_o2w.setter
    def yield_average_o2w(self, yield_average_o2w):
        """Sets the yield_average_o2w of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средняя доходность к оферте за 2 недели  # noqa: E501

        :param yield_average_o2w: The yield_average_o2w of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_average_o2w = yield_average_o2w

    @property
    def yield_average_o3m(self):
        """Gets the yield_average_o3m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средняя доходность к оферте за 3 месяца  # noqa: E501

        :return: The yield_average_o3m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_average_o3m

    @yield_average_o3m.setter
    def yield_average_o3m(self, yield_average_o3m):
        """Sets the yield_average_o3m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средняя доходность к оферте за 3 месяца  # noqa: E501

        :param yield_average_o3m: The yield_average_o3m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_average_o3m = yield_average_o3m

    @property
    def yield_average_o6m(self):
        """Gets the yield_average_o6m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Средняя доходность к оферте за 6 месяцев  # noqa: E501

        :return: The yield_average_o6m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_average_o6m

    @yield_average_o6m.setter
    def yield_average_o6m(self, yield_average_o6m):
        """Sets the yield_average_o6m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Средняя доходность к оферте за 6 месяцев  # noqa: E501

        :param yield_average_o6m: The yield_average_o6m of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_average_o6m = yield_average_o6m

    @property
    def yield_bid(self):
        """Gets the yield_bid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к погашению по спросу  # noqa: E501

        :return: The yield_bid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_bid

    @yield_bid.setter
    def yield_bid(self, yield_bid):
        """Sets the yield_bid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к погашению по спросу  # noqa: E501

        :param yield_bid: The yield_bid of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_bid = yield_bid

    @property
    def yield_chng(self):
        """Gets the yield_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение доходности последней сделки к доходности по закрытию предыдущих торгов  # noqa: E501

        :return: The yield_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_chng

    @yield_chng.setter
    def yield_chng(self, yield_chng):
        """Sets the yield_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение доходности последней сделки к доходности по закрытию предыдущих торгов  # noqa: E501

        :param yield_chng: The yield_chng of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_chng = yield_chng

    @property
    def yield_cpprice(self):
        """Gets the yield_cpprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к погашению по цене закрытия  # noqa: E501

        :return: The yield_cpprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_cpprice

    @yield_cpprice.setter
    def yield_cpprice(self, yield_cpprice):
        """Sets the yield_cpprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к погашению по цене закрытия  # noqa: E501

        :param yield_cpprice: The yield_cpprice of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_cpprice = yield_cpprice

    @property
    def yield_cwa(self):
        """Gets the yield_cwa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность текущая по средневзвешенной  # noqa: E501

        :return: The yield_cwa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_cwa

    @yield_cwa.setter
    def yield_cwa(self, yield_cwa):
        """Sets the yield_cwa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность текущая по средневзвешенной  # noqa: E501

        :param yield_cwa: The yield_cwa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_cwa = yield_cwa

    @property
    def yield_high(self):
        """Gets the yield_high of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Максимальная доходность  # noqa: E501

        :return: The yield_high of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_high

    @yield_high.setter
    def yield_high(self, yield_high):
        """Sets the yield_high of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Максимальная доходность  # noqa: E501

        :param yield_high: The yield_high of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_high = yield_high

    @property
    def yield_low(self):
        """Gets the yield_low of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Минимальная доходность  # noqa: E501

        :return: The yield_low of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_low

    @yield_low.setter
    def yield_low(self, yield_low):
        """Sets the yield_low of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Минимальная доходность  # noqa: E501

        :param yield_low: The yield_low of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_low = yield_low

    @property
    def yield_o_cwa(self):
        """Gets the yield_o_cwa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к оферте текущая по средневзвешенной  # noqa: E501

        :return: The yield_o_cwa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_o_cwa

    @yield_o_cwa.setter
    def yield_o_cwa(self, yield_o_cwa):
        """Sets the yield_o_cwa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к оферте текущая по средневзвешенной  # noqa: E501

        :param yield_o_cwa: The yield_o_cwa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_o_cwa = yield_o_cwa

    @property
    def yield_o_swa(self):
        """Gets the yield_o_swa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к оферте простая по средневзвешенной  # noqa: E501

        :return: The yield_o_swa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_o_swa

    @yield_o_swa.setter
    def yield_o_swa(self, yield_o_swa):
        """Sets the yield_o_swa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к оферте простая по средневзвешенной  # noqa: E501

        :param yield_o_swa: The yield_o_swa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_o_swa = yield_o_swa

    @property
    def yield_open(self):
        """Gets the yield_open of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность первой сделки  # noqa: E501

        :return: The yield_open of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_open

    @yield_open.setter
    def yield_open(self, yield_open):
        """Sets the yield_open of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность первой сделки  # noqa: E501

        :param yield_open: The yield_open of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_open = yield_open

    @property
    def yield_prev(self):
        """Gets the yield_prev of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность к погашению по цене пред. дня  # noqa: E501

        :return: The yield_prev of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_prev

    @yield_prev.setter
    def yield_prev(self, yield_prev):
        """Sets the yield_prev of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность к погашению по цене пред. дня  # noqa: E501

        :param yield_prev: The yield_prev of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_prev = yield_prev

    @property
    def yield_swa(self):
        """Gets the yield_swa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Доходность простая по средневзвешенной  # noqa: E501

        :return: The yield_swa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_swa

    @yield_swa.setter
    def yield_swa(self, yield_swa):
        """Sets the yield_swa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Доходность простая по средневзвешенной  # noqa: E501

        :param yield_swa: The yield_swa of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._yield_swa = yield_swa

    @property
    def full_price_pct(self):
        """Gets the full_price_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Полная цена, %  # noqa: E501

        :return: The full_price_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._full_price_pct

    @full_price_pct.setter
    def full_price_pct(self, full_price_pct):
        """Sets the full_price_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Полная цена, %  # noqa: E501

        :param full_price_pct: The full_price_pct of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._full_price_pct = full_price_pct

    @property
    def z_spread_ofz(self):
        """Gets the z_spread_ofz of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Z-спрэд к ОФЗ  # noqa: E501

        :return: The z_spread_ofz of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._z_spread_ofz

    @z_spread_ofz.setter
    def z_spread_ofz(self, z_spread_ofz):
        """Sets the z_spread_ofz of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Z-спрэд к ОФЗ  # noqa: E501

        :param z_spread_ofz: The z_spread_ofz of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._z_spread_ofz = z_spread_ofz

    @property
    def bid_price_change(self):
        """Gets the bid_price_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение цены покупки  # noqa: E501

        :return: The bid_price_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._bid_price_change

    @bid_price_change.setter
    def bid_price_change(self, bid_price_change):
        """Sets the bid_price_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение цены покупки  # noqa: E501

        :param bid_price_change: The bid_price_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._bid_price_change = bid_price_change

    @property
    def ask_price_change(self):
        """Gets the ask_price_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение цены продажи  # noqa: E501

        :return: The ask_price_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._ask_price_change

    @ask_price_change.setter
    def ask_price_change(self, ask_price_change):
        """Sets the ask_price_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение цены продажи  # noqa: E501

        :param ask_price_change: The ask_price_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._ask_price_change = ask_price_change

    @property
    def bid_yield_change(self):
        """Gets the bid_yield_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение доходности покупки  # noqa: E501

        :return: The bid_yield_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._bid_yield_change

    @bid_yield_change.setter
    def bid_yield_change(self, bid_yield_change):
        """Sets the bid_yield_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение доходности покупки  # noqa: E501

        :param bid_yield_change: The bid_yield_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._bid_yield_change = bid_yield_change

    @property
    def ask_yield_change(self):
        """Gets the ask_yield_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Изменение доходности продажи  # noqa: E501

        :return: The ask_yield_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._ask_yield_change

    @ask_yield_change.setter
    def ask_yield_change(self, ask_yield_change):
        """Sets the ask_yield_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Изменение доходности продажи  # noqa: E501

        :param ask_yield_change: The ask_yield_change of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._ask_yield_change = ask_yield_change

    @property
    def id_trade_site(self):
        """Gets the id_trade_site of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Идентификатор биржи  # noqa: E501

        :return: The id_trade_site of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._id_trade_site

    @id_trade_site.setter
    def id_trade_site(self, id_trade_site):
        """Sets the id_trade_site of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Идентификатор биржи  # noqa: E501

        :param id_trade_site: The id_trade_site of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._id_trade_site = id_trade_site

    @property
    def ifrs_level(self):
        """Gets the ifrs_level of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Уровень МСФО-13  # noqa: E501

        :return: The ifrs_level of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._ifrs_level

    @ifrs_level.setter
    def ifrs_level(self, ifrs_level):
        """Sets the ifrs_level of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Уровень МСФО-13  # noqa: E501

        :param ifrs_level: The ifrs_level of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._ifrs_level = ifrs_level

    @property
    def rd_exch(self):
        """Gets the rd_exch of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Номер площадки в базе Интерфакс (из поля id_trade_site), которая использована для выбора цены при расчете RUDIP2  # noqa: E501

        :return: The rd_exch of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._rd_exch

    @rd_exch.setter
    def rd_exch(self, rd_exch):
        """Sets the rd_exch of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Номер площадки в базе Интерфакс (из поля id_trade_site), которая использована для выбора цены при расчете RUDIP2  # noqa: E501

        :param rd_exch: The rd_exch of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._rd_exch = rd_exch

    @property
    def rd_score(self):
        """Gets the rd_score of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Показатель качества оценки справедливой стоимости (от 0 до 10)  # noqa: E501

        :return: The rd_score of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._rd_score

    @rd_score.setter
    def rd_score(self, rd_score):
        """Sets the rd_score of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Показатель качества оценки справедливой стоимости (от 0 до 10)  # noqa: E501

        :param rd_score: The rd_score of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._rd_score = rd_score

    @property
    def add_date(self):
        """Gets the add_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дата добавления записи по бумаге  # noqa: E501

        :return: The add_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._add_date

    @add_date.setter
    def add_date(self, add_date):
        """Sets the add_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дата добавления записи по бумаге  # noqa: E501

        :param add_date: The add_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: datetime
        """

        self._add_date = add_date

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Дата последнего обновления данных по бумаге  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Дата последнего обновления данных по бумаге  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def zspread(self):
        """Gets the zspread of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Z-спред  # noqa: E501

        :return: The zspread of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._zspread

    @zspread.setter
    def zspread(self, zspread):
        """Sets the zspread of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Z-спред  # noqa: E501

        :param zspread: The zspread of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._zspread = zspread

    @property
    def gspread(self):
        """Gets the gspread of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        G-спред  # noqa: E501

        :return: The gspread of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: float
        """
        return self._gspread

    @gspread.setter
    def gspread(self, gspread):
        """Sets the gspread of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        G-спред  # noqa: E501

        :param gspread: The gspread of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: float
        """

        self._gspread = gspread

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsArchiveEndOfDayOnExchangeFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
