# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMoexHistoryStockNdmFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boardname': 'str',
        'closeval': 'float',
        'currencyid': 'str',
        'facevalue': 'float',
        'isin': 'str',
        'issuesize': 'int',
        'listname': 'str',
        'matdate': 'datetime',
        'numtrades': 'int',
        'openval': 'float',
        'prev': 'float',
        'regnumber': 'str',
        'trendclose': 'float',
        'trendclspr': 'float',
        'trendwap': 'float',
        'trendwappr': 'float',
        'type': 'str',
        'value': 'float',
        'volume': 'int',
        'waprice': 'float',
        'yieldatwap': 'float',
        'yieldclose': 'float',
        'lastprice': 'float',
        'iricpiclose': 'float',
        'beiclose': 'float',
        'couponpercent': 'float',
        'couponvalue': 'float',
        'buybackdate': 'datetime',
        'lasttradedate': 'datetime',
        'cbrclose': 'float',
        'yieldtooffer': 'float',
        'yieldlastcoupon': 'float',
        'offerdate': 'datetime',
        'faceunit': 'str',
        'engine': 'str',
        'market': 'str',
        'boardid': 'str',
        'decimals': 'int',
        'high': 'float',
        'low': 'float',
        'open': 'float',
        'close': 'float',
        'secid': 'str',
        'shortname': 'str',
        'tradedate': 'datetime',
        'tradingsession': 'int',
        'counter': 'int'
    }

    attribute_map = {
        'boardname': 'boardname',
        'closeval': 'closeval',
        'currencyid': 'currencyid',
        'facevalue': 'facevalue',
        'isin': 'isin',
        'issuesize': 'issuesize',
        'listname': 'listname',
        'matdate': 'matdate',
        'numtrades': 'numtrades',
        'openval': 'openval',
        'prev': 'prev',
        'regnumber': 'regnumber',
        'trendclose': 'trendclose',
        'trendclspr': 'trendclspr',
        'trendwap': 'trendwap',
        'trendwappr': 'trendwappr',
        'type': 'type',
        'value': 'value',
        'volume': 'volume',
        'waprice': 'waprice',
        'yieldatwap': 'yieldatwap',
        'yieldclose': 'yieldclose',
        'lastprice': 'lastprice',
        'iricpiclose': 'iricpiclose',
        'beiclose': 'beiclose',
        'couponpercent': 'couponpercent',
        'couponvalue': 'couponvalue',
        'buybackdate': 'buybackdate',
        'lasttradedate': 'lasttradedate',
        'cbrclose': 'cbrclose',
        'yieldtooffer': 'yieldtooffer',
        'yieldlastcoupon': 'yieldlastcoupon',
        'offerdate': 'offerdate',
        'faceunit': 'faceunit',
        'engine': 'engine',
        'market': 'market',
        'boardid': 'boardid',
        'decimals': 'decimals',
        'high': 'high',
        'low': 'low',
        'open': 'open',
        'close': 'close',
        'secid': 'secid',
        'shortname': 'shortname',
        'tradedate': 'tradedate',
        'tradingsession': 'tradingsession',
        'counter': 'counter'
    }

    def __init__(self, boardname=None, closeval=None, currencyid=None, facevalue=None, isin=None, issuesize=None, listname=None, matdate=None, numtrades=None, openval=None, prev=None, regnumber=None, trendclose=None, trendclspr=None, trendwap=None, trendwappr=None, type=None, value=None, volume=None, waprice=None, yieldatwap=None, yieldclose=None, lastprice=None, iricpiclose=None, beiclose=None, couponpercent=None, couponvalue=None, buybackdate=None, lasttradedate=None, cbrclose=None, yieldtooffer=None, yieldlastcoupon=None, offerdate=None, faceunit=None, engine=None, market=None, boardid=None, decimals=None, high=None, low=None, open=None, close=None, secid=None, shortname=None, tradedate=None, tradingsession=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsMoexHistoryStockNdmFields - a model defined in Swagger"""  # noqa: E501
        self._boardname = None
        self._closeval = None
        self._currencyid = None
        self._facevalue = None
        self._isin = None
        self._issuesize = None
        self._listname = None
        self._matdate = None
        self._numtrades = None
        self._openval = None
        self._prev = None
        self._regnumber = None
        self._trendclose = None
        self._trendclspr = None
        self._trendwap = None
        self._trendwappr = None
        self._type = None
        self._value = None
        self._volume = None
        self._waprice = None
        self._yieldatwap = None
        self._yieldclose = None
        self._lastprice = None
        self._iricpiclose = None
        self._beiclose = None
        self._couponpercent = None
        self._couponvalue = None
        self._buybackdate = None
        self._lasttradedate = None
        self._cbrclose = None
        self._yieldtooffer = None
        self._yieldlastcoupon = None
        self._offerdate = None
        self._faceunit = None
        self._engine = None
        self._market = None
        self._boardid = None
        self._decimals = None
        self._high = None
        self._low = None
        self._open = None
        self._close = None
        self._secid = None
        self._shortname = None
        self._tradedate = None
        self._tradingsession = None
        self._counter = None
        self.discriminator = None
        if boardname is not None:
            self.boardname = boardname
        if closeval is not None:
            self.closeval = closeval
        if currencyid is not None:
            self.currencyid = currencyid
        if facevalue is not None:
            self.facevalue = facevalue
        if isin is not None:
            self.isin = isin
        if issuesize is not None:
            self.issuesize = issuesize
        if listname is not None:
            self.listname = listname
        if matdate is not None:
            self.matdate = matdate
        if numtrades is not None:
            self.numtrades = numtrades
        if openval is not None:
            self.openval = openval
        if prev is not None:
            self.prev = prev
        if regnumber is not None:
            self.regnumber = regnumber
        if trendclose is not None:
            self.trendclose = trendclose
        if trendclspr is not None:
            self.trendclspr = trendclspr
        if trendwap is not None:
            self.trendwap = trendwap
        if trendwappr is not None:
            self.trendwappr = trendwappr
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value
        if volume is not None:
            self.volume = volume
        if waprice is not None:
            self.waprice = waprice
        if yieldatwap is not None:
            self.yieldatwap = yieldatwap
        if yieldclose is not None:
            self.yieldclose = yieldclose
        if lastprice is not None:
            self.lastprice = lastprice
        if iricpiclose is not None:
            self.iricpiclose = iricpiclose
        if beiclose is not None:
            self.beiclose = beiclose
        if couponpercent is not None:
            self.couponpercent = couponpercent
        if couponvalue is not None:
            self.couponvalue = couponvalue
        if buybackdate is not None:
            self.buybackdate = buybackdate
        if lasttradedate is not None:
            self.lasttradedate = lasttradedate
        if cbrclose is not None:
            self.cbrclose = cbrclose
        if yieldtooffer is not None:
            self.yieldtooffer = yieldtooffer
        if yieldlastcoupon is not None:
            self.yieldlastcoupon = yieldlastcoupon
        if offerdate is not None:
            self.offerdate = offerdate
        if faceunit is not None:
            self.faceunit = faceunit
        if engine is not None:
            self.engine = engine
        if market is not None:
            self.market = market
        if boardid is not None:
            self.boardid = boardid
        if decimals is not None:
            self.decimals = decimals
        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        if open is not None:
            self.open = open
        if close is not None:
            self.close = close
        if secid is not None:
            self.secid = secid
        if shortname is not None:
            self.shortname = shortname
        if tradedate is not None:
            self.tradedate = tradedate
        if tradingsession is not None:
            self.tradingsession = tradingsession
        if counter is not None:
            self.counter = counter

    @property
    def boardname(self):
        """Gets the boardname of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Режим торгов  # noqa: E501

        :return: The boardname of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: str
        """
        return self._boardname

    @boardname.setter
    def boardname(self, boardname):
        """Sets the boardname of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Режим торгов  # noqa: E501

        :param boardname: The boardname of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: str
        """

        self._boardname = boardname

    @property
    def closeval(self):
        """Gets the closeval of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Объем последней сделки  # noqa: E501

        :return: The closeval of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._closeval

    @closeval.setter
    def closeval(self, closeval):
        """Sets the closeval of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Объем последней сделки  # noqa: E501

        :param closeval: The closeval of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._closeval = closeval

    @property
    def currencyid(self):
        """Gets the currencyid of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Валюта в которой ведутся торги  # noqa: E501

        :return: The currencyid of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: str
        """
        return self._currencyid

    @currencyid.setter
    def currencyid(self, currencyid):
        """Sets the currencyid of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Валюта в которой ведутся торги  # noqa: E501

        :param currencyid: The currencyid of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: str
        """

        self._currencyid = currencyid

    @property
    def facevalue(self):
        """Gets the facevalue of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Номинал  # noqa: E501

        :return: The facevalue of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._facevalue

    @facevalue.setter
    def facevalue(self, facevalue):
        """Sets the facevalue of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Номинал  # noqa: E501

        :param facevalue: The facevalue of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._facevalue = facevalue

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Код ISIN  # noqa: E501

        :return: The isin of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Код ISIN  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def issuesize(self):
        """Gets the issuesize of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Объем выпуска, штук ценных бумаг  # noqa: E501

        :return: The issuesize of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: int
        """
        return self._issuesize

    @issuesize.setter
    def issuesize(self, issuesize):
        """Sets the issuesize of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Объем выпуска, штук ценных бумаг  # noqa: E501

        :param issuesize: The issuesize of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: int
        """

        self._issuesize = issuesize

    @property
    def listname(self):
        """Gets the listname of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Уровень листинга  # noqa: E501

        :return: The listname of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: str
        """
        return self._listname

    @listname.setter
    def listname(self, listname):
        """Sets the listname of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Уровень листинга  # noqa: E501

        :param listname: The listname of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: str
        """

        self._listname = listname

    @property
    def matdate(self):
        """Gets the matdate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Дата погашения  # noqa: E501

        :return: The matdate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: datetime
        """
        return self._matdate

    @matdate.setter
    def matdate(self, matdate):
        """Sets the matdate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Дата погашения  # noqa: E501

        :param matdate: The matdate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: datetime
        """

        self._matdate = matdate

    @property
    def numtrades(self):
        """Gets the numtrades of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Количество сделок за день, штук  # noqa: E501

        :return: The numtrades of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: int
        """
        return self._numtrades

    @numtrades.setter
    def numtrades(self, numtrades):
        """Sets the numtrades of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Количество сделок за день, штук  # noqa: E501

        :param numtrades: The numtrades of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: int
        """

        self._numtrades = numtrades

    @property
    def openval(self):
        """Gets the openval of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Объем первой сделки  # noqa: E501

        :return: The openval of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._openval

    @openval.setter
    def openval(self, openval):
        """Sets the openval of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Объем первой сделки  # noqa: E501

        :param openval: The openval of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._openval = openval

    @property
    def prev(self):
        """Gets the prev of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Цена последней сделки предыдущего торгового дня  # noqa: E501

        :return: The prev of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Цена последней сделки предыдущего торгового дня  # noqa: E501

        :param prev: The prev of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._prev = prev

    @property
    def regnumber(self):
        """Gets the regnumber of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Код гос.регистрации  # noqa: E501

        :return: The regnumber of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: str
        """
        return self._regnumber

    @regnumber.setter
    def regnumber(self, regnumber):
        """Sets the regnumber of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Код гос.регистрации  # noqa: E501

        :param regnumber: The regnumber of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: str
        """

        self._regnumber = regnumber

    @property
    def trendclose(self):
        """Gets the trendclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Изменение цены последней сделки к цене последней сделки предыдущего торгового дня, пунктов  # noqa: E501

        :return: The trendclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._trendclose

    @trendclose.setter
    def trendclose(self, trendclose):
        """Sets the trendclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Изменение цены последней сделки к цене последней сделки предыдущего торгового дня, пунктов  # noqa: E501

        :param trendclose: The trendclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._trendclose = trendclose

    @property
    def trendclspr(self):
        """Gets the trendclspr of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Изменение цены последней сделки к цене последней сделки предыдущего торгового дня, процентов  # noqa: E501

        :return: The trendclspr of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._trendclspr

    @trendclspr.setter
    def trendclspr(self, trendclspr):
        """Sets the trendclspr of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Изменение цены последней сделки к цене последней сделки предыдущего торгового дня, процентов  # noqa: E501

        :param trendclspr: The trendclspr of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._trendclspr = trendclspr

    @property
    def trendwap(self):
        """Gets the trendwap of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Изменение средневзвешенной цены к средневзвешенной цене предыдущего торгового дня  # noqa: E501

        :return: The trendwap of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._trendwap

    @trendwap.setter
    def trendwap(self, trendwap):
        """Sets the trendwap of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Изменение средневзвешенной цены к средневзвешенной цене предыдущего торгового дня  # noqa: E501

        :param trendwap: The trendwap of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._trendwap = trendwap

    @property
    def trendwappr(self):
        """Gets the trendwappr of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Изменение средневзвешенной цены к средневзвешенной цене предыдущего торгового дня, процентов  # noqa: E501

        :return: The trendwappr of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._trendwappr

    @trendwappr.setter
    def trendwappr(self, trendwappr):
        """Sets the trendwappr of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Изменение средневзвешенной цены к средневзвешенной цене предыдущего торгового дня, процентов  # noqa: E501

        :param trendwappr: The trendwappr of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._trendwappr = trendwappr

    @property
    def type(self):
        """Gets the type of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Тип бумаги  # noqa: E501

        :return: The type of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Тип бумаги  # noqa: E501

        :param type: The type of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Объем сделок за день  # noqa: E501

        :return: The value of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Объем сделок за день  # noqa: E501

        :param value: The value of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def volume(self):
        """Gets the volume of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Объем сделок за день, штук ценных бумаг  # noqa: E501

        :return: The volume of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Объем сделок за день, штук ценных бумаг  # noqa: E501

        :param volume: The volume of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def waprice(self):
        """Gets the waprice of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Средневзвешенная цена  # noqa: E501

        :return: The waprice of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._waprice

    @waprice.setter
    def waprice(self, waprice):
        """Sets the waprice of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Средневзвешенная цена  # noqa: E501

        :param waprice: The waprice of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._waprice = waprice

    @property
    def yieldatwap(self):
        """Gets the yieldatwap of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Доходность по средневзвешенной цене, % годовых  # noqa: E501

        :return: The yieldatwap of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._yieldatwap

    @yieldatwap.setter
    def yieldatwap(self, yieldatwap):
        """Sets the yieldatwap of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Доходность по средневзвешенной цене, % годовых  # noqa: E501

        :param yieldatwap: The yieldatwap of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._yieldatwap = yieldatwap

    @property
    def yieldclose(self):
        """Gets the yieldclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Доходность по последней сделке  # noqa: E501

        :return: The yieldclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._yieldclose

    @yieldclose.setter
    def yieldclose(self, yieldclose):
        """Sets the yieldclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Доходность по последней сделке  # noqa: E501

        :param yieldclose: The yieldclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._yieldclose = yieldclose

    @property
    def lastprice(self):
        """Gets the lastprice of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501


        :return: The lastprice of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._lastprice

    @lastprice.setter
    def lastprice(self, lastprice):
        """Sets the lastprice of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.


        :param lastprice: The lastprice of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._lastprice = lastprice

    @property
    def iricpiclose(self):
        """Gets the iricpiclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Вмененная плавающая ставка(расчетное значение)  # noqa: E501

        :return: The iricpiclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._iricpiclose

    @iricpiclose.setter
    def iricpiclose(self, iricpiclose):
        """Sets the iricpiclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Вмененная плавающая ставка(расчетное значение)  # noqa: E501

        :param iricpiclose: The iricpiclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._iricpiclose = iricpiclose

    @property
    def beiclose(self):
        """Gets the beiclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Вмененная инфляция (BEI)  # noqa: E501

        :return: The beiclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._beiclose

    @beiclose.setter
    def beiclose(self, beiclose):
        """Sets the beiclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Вмененная инфляция (BEI)  # noqa: E501

        :param beiclose: The beiclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._beiclose = beiclose

    @property
    def couponpercent(self):
        """Gets the couponpercent of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Ставка купона, %  # noqa: E501

        :return: The couponpercent of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._couponpercent

    @couponpercent.setter
    def couponpercent(self, couponpercent):
        """Sets the couponpercent of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Ставка купона, %  # noqa: E501

        :param couponpercent: The couponpercent of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._couponpercent = couponpercent

    @property
    def couponvalue(self):
        """Gets the couponvalue of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Сумма купона, в валюте номинала  # noqa: E501

        :return: The couponvalue of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._couponvalue

    @couponvalue.setter
    def couponvalue(self, couponvalue):
        """Sets the couponvalue of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Сумма купона, в валюте номинала  # noqa: E501

        :param couponvalue: The couponvalue of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._couponvalue = couponvalue

    @property
    def buybackdate(self):
        """Gets the buybackdate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Дата, к которой рассчитывается доходность (если данное поле не заполнено, то \"Доходность посл.сделки\" рассчитывается к Дате погашения), руб.  # noqa: E501

        :return: The buybackdate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: datetime
        """
        return self._buybackdate

    @buybackdate.setter
    def buybackdate(self, buybackdate):
        """Sets the buybackdate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Дата, к которой рассчитывается доходность (если данное поле не заполнено, то \"Доходность посл.сделки\" рассчитывается к Дате погашения), руб.  # noqa: E501

        :param buybackdate: The buybackdate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: datetime
        """

        self._buybackdate = buybackdate

    @property
    def lasttradedate(self):
        """Gets the lasttradedate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Дата последней сделки  # noqa: E501

        :return: The lasttradedate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: datetime
        """
        return self._lasttradedate

    @lasttradedate.setter
    def lasttradedate(self, lasttradedate):
        """Sets the lasttradedate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Дата последней сделки  # noqa: E501

        :param lasttradedate: The lasttradedate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: datetime
        """

        self._lasttradedate = lasttradedate

    @property
    def cbrclose(self):
        """Gets the cbrclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Вмененная ключевая ставка Банка России(CBR)  # noqa: E501

        :return: The cbrclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._cbrclose

    @cbrclose.setter
    def cbrclose(self, cbrclose):
        """Sets the cbrclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Вмененная ключевая ставка Банка России(CBR)  # noqa: E501

        :param cbrclose: The cbrclose of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._cbrclose = cbrclose

    @property
    def yieldtooffer(self):
        """Gets the yieldtooffer of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Доходность к оферте  # noqa: E501

        :return: The yieldtooffer of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._yieldtooffer

    @yieldtooffer.setter
    def yieldtooffer(self, yieldtooffer):
        """Sets the yieldtooffer of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Доходность к оферте  # noqa: E501

        :param yieldtooffer: The yieldtooffer of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._yieldtooffer = yieldtooffer

    @property
    def yieldlastcoupon(self):
        """Gets the yieldlastcoupon of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Доходность к погашению(оферте) для купонных облигаций с одним(последним) купонным периодом до погашения  # noqa: E501

        :return: The yieldlastcoupon of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._yieldlastcoupon

    @yieldlastcoupon.setter
    def yieldlastcoupon(self, yieldlastcoupon):
        """Sets the yieldlastcoupon of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Доходность к погашению(оферте) для купонных облигаций с одним(последним) купонным периодом до погашения  # noqa: E501

        :param yieldlastcoupon: The yieldlastcoupon of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._yieldlastcoupon = yieldlastcoupon

    @property
    def offerdate(self):
        """Gets the offerdate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Дата оферты  # noqa: E501

        :return: The offerdate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: datetime
        """
        return self._offerdate

    @offerdate.setter
    def offerdate(self, offerdate):
        """Sets the offerdate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Дата оферты  # noqa: E501

        :param offerdate: The offerdate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: datetime
        """

        self._offerdate = offerdate

    @property
    def faceunit(self):
        """Gets the faceunit of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Валюта номинала  # noqa: E501

        :return: The faceunit of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: str
        """
        return self._faceunit

    @faceunit.setter
    def faceunit(self, faceunit):
        """Sets the faceunit of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Валюта номинала  # noqa: E501

        :param faceunit: The faceunit of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: str
        """

        self._faceunit = faceunit

    @property
    def engine(self):
        """Gets the engine of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501


        :return: The engine of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.


        :param engine: The engine of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def market(self):
        """Gets the market of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501


        :return: The market of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.


        :param market: The market of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def boardid(self):
        """Gets the boardid of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501


        :return: The boardid of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: str
        """
        return self._boardid

    @boardid.setter
    def boardid(self, boardid):
        """Sets the boardid of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.


        :param boardid: The boardid of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: str
        """

        self._boardid = boardid

    @property
    def decimals(self):
        """Gets the decimals of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Точность, знаков после запятой  # noqa: E501

        :return: The decimals of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Точность, знаков после запятой  # noqa: E501

        :param decimals: The decimals of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    @property
    def high(self):
        """Gets the high of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Цена сделки максимальная  # noqa: E501

        :return: The high of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Цена сделки максимальная  # noqa: E501

        :param high: The high of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Цена сделки минимальная  # noqa: E501

        :return: The low of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Цена сделки минимальная  # noqa: E501

        :param low: The low of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._low = low

    @property
    def open(self):
        """Gets the open of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Цена предторгового периода/Цена аукциона открытия  # noqa: E501

        :return: The open of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Цена предторгового периода/Цена аукциона открытия  # noqa: E501

        :param open: The open of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def close(self):
        """Gets the close of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Цена последней сделки  # noqa: E501

        :return: The close of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Цена последней сделки  # noqa: E501

        :param close: The close of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: float
        """

        self._close = close

    @property
    def secid(self):
        """Gets the secid of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Идентификатор финансового инструмента  # noqa: E501

        :return: The secid of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: str
        """
        return self._secid

    @secid.setter
    def secid(self, secid):
        """Sets the secid of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Идентификатор финансового инструмента  # noqa: E501

        :param secid: The secid of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: str
        """

        self._secid = secid

    @property
    def shortname(self):
        """Gets the shortname of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Краткое наименование  # noqa: E501

        :return: The shortname of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname):
        """Sets the shortname of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Краткое наименование  # noqa: E501

        :param shortname: The shortname of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: str
        """

        self._shortname = shortname

    @property
    def tradedate(self):
        """Gets the tradedate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Дата торгов  # noqa: E501

        :return: The tradedate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: datetime
        """
        return self._tradedate

    @tradedate.setter
    def tradedate(self, tradedate):
        """Sets the tradedate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Дата торгов  # noqa: E501

        :param tradedate: The tradedate of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: datetime
        """

        self._tradedate = tradedate

    @property
    def tradingsession(self):
        """Gets the tradingsession of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Номер сессии (1 - основная, 2 - вечерняя, 3 - общие итоги)  # noqa: E501

        :return: The tradingsession of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: int
        """
        return self._tradingsession

    @tradingsession.setter
    def tradingsession(self, tradingsession):
        """Sets the tradingsession of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Номер сессии (1 - основная, 2 - вечерняя, 3 - общие итоги)  # noqa: E501

        :param tradingsession: The tradingsession of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: int
        """

        self._tradingsession = tradingsession

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501

        Общее количество записей в выборке, если указан pageNum = 1. Иначе = null  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.

        Общее количество записей в выборке, если указан pageNum = 1. Иначе = null  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsMoexHistoryStockNdmFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMoexHistoryStockNdmFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMoexHistoryStockNdmFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
