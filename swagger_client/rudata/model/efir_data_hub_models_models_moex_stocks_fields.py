# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMoexStocksFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintool_id': 'int',
        'secid': 'str',
        'shortname': 'str',
        'regnumber': 'str',
        'name': 'str',
        'isin': 'str',
        'is_traded': 'bool',
        'emitent_id': 'int',
        'emitent_title': 'str',
        'emitent_inn': 'str',
        'emitent_okpo': 'str',
        'gosreg': 'str',
        'type': 'str',
        'grp': 'str',
        'primary_boardid': 'str',
        'marketprice_boardid': 'str',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'fintool_id': 'fintoolId',
        'secid': 'secid',
        'shortname': 'shortname',
        'regnumber': 'regnumber',
        'name': 'name',
        'isin': 'isin',
        'is_traded': 'is_traded',
        'emitent_id': 'emitent_id',
        'emitent_title': 'emitent_title',
        'emitent_inn': 'emitent_inn',
        'emitent_okpo': 'emitent_okpo',
        'gosreg': 'gosreg',
        'type': 'type',
        'grp': 'grp',
        'primary_boardid': 'primary_boardid',
        'marketprice_boardid': 'marketprice_boardid',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, fintool_id=None, secid=None, shortname=None, regnumber=None, name=None, isin=None, is_traded=None, emitent_id=None, emitent_title=None, emitent_inn=None, emitent_okpo=None, gosreg=None, type=None, grp=None, primary_boardid=None, marketprice_boardid=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsMoexStocksFields - a model defined in Swagger"""  # noqa: E501
        self._fintool_id = None
        self._secid = None
        self._shortname = None
        self._regnumber = None
        self._name = None
        self._isin = None
        self._is_traded = None
        self._emitent_id = None
        self._emitent_title = None
        self._emitent_inn = None
        self._emitent_okpo = None
        self._gosreg = None
        self._type = None
        self._grp = None
        self._primary_boardid = None
        self._marketprice_boardid = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if fintool_id is not None:
            self.fintool_id = fintool_id
        if secid is not None:
            self.secid = secid
        if shortname is not None:
            self.shortname = shortname
        if regnumber is not None:
            self.regnumber = regnumber
        if name is not None:
            self.name = name
        if isin is not None:
            self.isin = isin
        if is_traded is not None:
            self.is_traded = is_traded
        if emitent_id is not None:
            self.emitent_id = emitent_id
        if emitent_title is not None:
            self.emitent_title = emitent_title
        if emitent_inn is not None:
            self.emitent_inn = emitent_inn
        if emitent_okpo is not None:
            self.emitent_okpo = emitent_okpo
        if gosreg is not None:
            self.gosreg = gosreg
        if type is not None:
            self.type = type
        if grp is not None:
            self.grp = grp
        if primary_boardid is not None:
            self.primary_boardid = primary_boardid
        if marketprice_boardid is not None:
            self.marketprice_boardid = marketprice_boardid
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def fintool_id(self):
        """Gets the fintool_id of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Идентификатор финансового инструмента в БД Интерфакс  # noqa: E501

        :return: The fintool_id of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: int
        """
        return self._fintool_id

    @fintool_id.setter
    def fintool_id(self, fintool_id):
        """Sets the fintool_id of this EfirDataHubModelsModelsMoexStocksFields.

        Идентификатор финансового инструмента в БД Интерфакс  # noqa: E501

        :param fintool_id: The fintool_id of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: int
        """

        self._fintool_id = fintool_id

    @property
    def secid(self):
        """Gets the secid of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Уникальный торговый код ценной бумаги  # noqa: E501

        :return: The secid of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._secid

    @secid.setter
    def secid(self, secid):
        """Sets the secid of this EfirDataHubModelsModelsMoexStocksFields.

        Уникальный торговый код ценной бумаги  # noqa: E501

        :param secid: The secid of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._secid = secid

    @property
    def shortname(self):
        """Gets the shortname of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Краткое наименование ценной бумаги  # noqa: E501

        :return: The shortname of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname):
        """Sets the shortname of this EfirDataHubModelsModelsMoexStocksFields.

        Краткое наименование ценной бумаги  # noqa: E501

        :param shortname: The shortname of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._shortname = shortname

    @property
    def regnumber(self):
        """Gets the regnumber of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Регистрационный номер на МБ  # noqa: E501

        :return: The regnumber of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._regnumber

    @regnumber.setter
    def regnumber(self, regnumber):
        """Sets the regnumber of this EfirDataHubModelsModelsMoexStocksFields.

        Регистрационный номер на МБ  # noqa: E501

        :param regnumber: The regnumber of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._regnumber = regnumber

    @property
    def name(self):
        """Gets the name of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Полное наименование ценной бумаги  # noqa: E501

        :return: The name of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EfirDataHubModelsModelsMoexStocksFields.

        Полное наименование ценной бумаги  # noqa: E501

        :param name: The name of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Международный идентификационный код ценной бумаги  # noqa: E501

        :return: The isin of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsModelsMoexStocksFields.

        Международный идентификационный код ценной бумаги  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def is_traded(self):
        """Gets the is_traded of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Флаг торгуемости площадки  # noqa: E501

        :return: The is_traded of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_traded

    @is_traded.setter
    def is_traded(self, is_traded):
        """Sets the is_traded of this EfirDataHubModelsModelsMoexStocksFields.

        Флаг торгуемости площадки  # noqa: E501

        :param is_traded: The is_traded of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: bool
        """

        self._is_traded = is_traded

    @property
    def emitent_id(self):
        """Gets the emitent_id of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Идентификатор эмитента на Московской бирже  # noqa: E501

        :return: The emitent_id of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: int
        """
        return self._emitent_id

    @emitent_id.setter
    def emitent_id(self, emitent_id):
        """Sets the emitent_id of this EfirDataHubModelsModelsMoexStocksFields.

        Идентификатор эмитента на Московской бирже  # noqa: E501

        :param emitent_id: The emitent_id of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: int
        """

        self._emitent_id = emitent_id

    @property
    def emitent_title(self):
        """Gets the emitent_title of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Полное наименование эмитента  # noqa: E501

        :return: The emitent_title of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._emitent_title

    @emitent_title.setter
    def emitent_title(self, emitent_title):
        """Sets the emitent_title of this EfirDataHubModelsModelsMoexStocksFields.

        Полное наименование эмитента  # noqa: E501

        :param emitent_title: The emitent_title of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._emitent_title = emitent_title

    @property
    def emitent_inn(self):
        """Gets the emitent_inn of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        ИНН эмитента  # noqa: E501

        :return: The emitent_inn of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._emitent_inn

    @emitent_inn.setter
    def emitent_inn(self, emitent_inn):
        """Sets the emitent_inn of this EfirDataHubModelsModelsMoexStocksFields.

        ИНН эмитента  # noqa: E501

        :param emitent_inn: The emitent_inn of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._emitent_inn = emitent_inn

    @property
    def emitent_okpo(self):
        """Gets the emitent_okpo of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Код ОКПО эмитента  # noqa: E501

        :return: The emitent_okpo of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._emitent_okpo

    @emitent_okpo.setter
    def emitent_okpo(self, emitent_okpo):
        """Sets the emitent_okpo of this EfirDataHubModelsModelsMoexStocksFields.

        Код ОКПО эмитента  # noqa: E501

        :param emitent_okpo: The emitent_okpo of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._emitent_okpo = emitent_okpo

    @property
    def gosreg(self):
        """Gets the gosreg of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Номер государственной регистрации  # noqa: E501

        :return: The gosreg of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._gosreg

    @gosreg.setter
    def gosreg(self, gosreg):
        """Sets the gosreg of this EfirDataHubModelsModelsMoexStocksFields.

        Номер государственной регистрации  # noqa: E501

        :param gosreg: The gosreg of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._gosreg = gosreg

    @property
    def type(self):
        """Gets the type of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Наименование типа ценной бумаги  # noqa: E501

        :return: The type of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EfirDataHubModelsModelsMoexStocksFields.

        Наименование типа ценной бумаги  # noqa: E501

        :param type: The type of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def grp(self):
        """Gets the grp of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Название группы площадок  # noqa: E501

        :return: The grp of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._grp

    @grp.setter
    def grp(self, grp):
        """Sets the grp of this EfirDataHubModelsModelsMoexStocksFields.

        Название группы площадок  # noqa: E501

        :param grp: The grp of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._grp = grp

    @property
    def primary_boardid(self):
        """Gets the primary_boardid of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Главный (дефолтный) режим торгов (борд)  # noqa: E501

        :return: The primary_boardid of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._primary_boardid

    @primary_boardid.setter
    def primary_boardid(self, primary_boardid):
        """Sets the primary_boardid of this EfirDataHubModelsModelsMoexStocksFields.

        Главный (дефолтный) режим торгов (борд)  # noqa: E501

        :param primary_boardid: The primary_boardid of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._primary_boardid = primary_boardid

    @property
    def marketprice_boardid(self):
        """Gets the marketprice_boardid of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Рыночный режим торгов (борд)  # noqa: E501

        :return: The marketprice_boardid of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: str
        """
        return self._marketprice_boardid

    @marketprice_boardid.setter
    def marketprice_boardid(self, marketprice_boardid):
        """Sets the marketprice_boardid of this EfirDataHubModelsModelsMoexStocksFields.

        Рыночный режим торгов (борд)  # noqa: E501

        :param marketprice_boardid: The marketprice_boardid of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: str
        """

        self._marketprice_boardid = marketprice_boardid

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsMoexStocksFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsMoexStocksFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsMoexStocksFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMoexStocksFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMoexStocksFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
