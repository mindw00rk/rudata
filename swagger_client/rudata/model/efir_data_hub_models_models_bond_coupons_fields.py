# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondCouponsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_fintool': 'int',
        'id_coupon': 'int',
        'begin_period': 'datetime',
        'end_period': 'datetime',
        'coupon_period': 'int',
        'days_from_dist': 'int',
        'coupon_rate': 'float',
        'pay_per_bond': 'float',
        'coupon_val': 'float',
        'stop_trade_date': 'datetime',
        'pay_date': 'datetime',
        'coupon_rate_date': 'datetime',
        'fix_date': 'datetime',
        'update_date': 'datetime',
        'pay_per_bond_frac': 'float',
        'base_type_id': 'int',
        'base_type_name': 'str',
        'base_fintoolid': 'int',
        'rate_spread_pct': 'float',
        'period_from': 'datetime',
        'period_to': 'datetime',
        'note': 'str',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'id_fintool': 'id_fintool',
        'id_coupon': 'id_coupon',
        'begin_period': 'begin_period',
        'end_period': 'end_period',
        'coupon_period': 'coupon_period',
        'days_from_dist': 'days_from_dist',
        'coupon_rate': 'coupon_rate',
        'pay_per_bond': 'pay_per_bond',
        'coupon_val': 'coupon_val',
        'stop_trade_date': 'stop_trade_date',
        'pay_date': 'pay_date',
        'coupon_rate_date': 'coupon_rate_date',
        'fix_date': 'fix_date',
        'update_date': 'update_date',
        'pay_per_bond_frac': 'pay_per_bond_frac',
        'base_type_id': 'base_type_id',
        'base_type_name': 'base_type_name',
        'base_fintoolid': 'base_fintoolid',
        'rate_spread_pct': 'rate_spread_pct',
        'period_from': 'period_from',
        'period_to': 'period_to',
        'note': 'note',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, id_fintool=None, id_coupon=None, begin_period=None, end_period=None, coupon_period=None, days_from_dist=None, coupon_rate=None, pay_per_bond=None, coupon_val=None, stop_trade_date=None, pay_date=None, coupon_rate_date=None, fix_date=None, update_date=None, pay_per_bond_frac=None, base_type_id=None, base_type_name=None, base_fintoolid=None, rate_spread_pct=None, period_from=None, period_to=None, note=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsBondCouponsFields - a model defined in Swagger"""  # noqa: E501
        self._id_fintool = None
        self._id_coupon = None
        self._begin_period = None
        self._end_period = None
        self._coupon_period = None
        self._days_from_dist = None
        self._coupon_rate = None
        self._pay_per_bond = None
        self._coupon_val = None
        self._stop_trade_date = None
        self._pay_date = None
        self._coupon_rate_date = None
        self._fix_date = None
        self._update_date = None
        self._pay_per_bond_frac = None
        self._base_type_id = None
        self._base_type_name = None
        self._base_fintoolid = None
        self._rate_spread_pct = None
        self._period_from = None
        self._period_to = None
        self._note = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if id_fintool is not None:
            self.id_fintool = id_fintool
        if id_coupon is not None:
            self.id_coupon = id_coupon
        if begin_period is not None:
            self.begin_period = begin_period
        if end_period is not None:
            self.end_period = end_period
        if coupon_period is not None:
            self.coupon_period = coupon_period
        if days_from_dist is not None:
            self.days_from_dist = days_from_dist
        if coupon_rate is not None:
            self.coupon_rate = coupon_rate
        if pay_per_bond is not None:
            self.pay_per_bond = pay_per_bond
        if coupon_val is not None:
            self.coupon_val = coupon_val
        if stop_trade_date is not None:
            self.stop_trade_date = stop_trade_date
        if pay_date is not None:
            self.pay_date = pay_date
        if coupon_rate_date is not None:
            self.coupon_rate_date = coupon_rate_date
        if fix_date is not None:
            self.fix_date = fix_date
        if update_date is not None:
            self.update_date = update_date
        if pay_per_bond_frac is not None:
            self.pay_per_bond_frac = pay_per_bond_frac
        if base_type_id is not None:
            self.base_type_id = base_type_id
        if base_type_name is not None:
            self.base_type_name = base_type_name
        if base_fintoolid is not None:
            self.base_fintoolid = base_fintoolid
        if rate_spread_pct is not None:
            self.rate_spread_pct = rate_spread_pct
        if period_from is not None:
            self.period_from = period_from
        if period_to is not None:
            self.period_to = period_to
        if note is not None:
            self.note = note
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def id_fintool(self):
        """Gets the id_fintool of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Идентификатор облигации  # noqa: E501

        :return: The id_fintool of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: int
        """
        return self._id_fintool

    @id_fintool.setter
    def id_fintool(self, id_fintool):
        """Sets the id_fintool of this EfirDataHubModelsModelsBondCouponsFields.

        Идентификатор облигации  # noqa: E501

        :param id_fintool: The id_fintool of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: int
        """

        self._id_fintool = id_fintool

    @property
    def id_coupon(self):
        """Gets the id_coupon of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Номер купонной выплаты  # noqa: E501

        :return: The id_coupon of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: int
        """
        return self._id_coupon

    @id_coupon.setter
    def id_coupon(self, id_coupon):
        """Sets the id_coupon of this EfirDataHubModelsModelsBondCouponsFields.

        Номер купонной выплаты  # noqa: E501

        :param id_coupon: The id_coupon of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: int
        """

        self._id_coupon = id_coupon

    @property
    def begin_period(self):
        """Gets the begin_period of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Дата начала купона  # noqa: E501

        :return: The begin_period of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._begin_period

    @begin_period.setter
    def begin_period(self, begin_period):
        """Sets the begin_period of this EfirDataHubModelsModelsBondCouponsFields.

        Дата начала купона  # noqa: E501

        :param begin_period: The begin_period of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: datetime
        """

        self._begin_period = begin_period

    @property
    def end_period(self):
        """Gets the end_period of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Дата окончания купона  # noqa: E501

        :return: The end_period of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._end_period

    @end_period.setter
    def end_period(self, end_period):
        """Sets the end_period of this EfirDataHubModelsModelsBondCouponsFields.

        Дата окончания купона  # noqa: E501

        :param end_period: The end_period of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: datetime
        """

        self._end_period = end_period

    @property
    def coupon_period(self):
        """Gets the coupon_period of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Количество дней в купонном периоде  # noqa: E501

        :return: The coupon_period of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: int
        """
        return self._coupon_period

    @coupon_period.setter
    def coupon_period(self, coupon_period):
        """Sets the coupon_period of this EfirDataHubModelsModelsBondCouponsFields.

        Количество дней в купонном периоде  # noqa: E501

        :param coupon_period: The coupon_period of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: int
        """

        self._coupon_period = coupon_period

    @property
    def days_from_dist(self):
        """Gets the days_from_dist of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Количество дней от даты начала размещения до даты окончания купонного периода  # noqa: E501

        :return: The days_from_dist of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: int
        """
        return self._days_from_dist

    @days_from_dist.setter
    def days_from_dist(self, days_from_dist):
        """Sets the days_from_dist of this EfirDataHubModelsModelsBondCouponsFields.

        Количество дней от даты начала размещения до даты окончания купонного периода  # noqa: E501

        :param days_from_dist: The days_from_dist of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: int
        """

        self._days_from_dist = days_from_dist

    @property
    def coupon_rate(self):
        """Gets the coupon_rate of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Ставка купона, процентов годовых  # noqa: E501

        :return: The coupon_rate of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: float
        """
        return self._coupon_rate

    @coupon_rate.setter
    def coupon_rate(self, coupon_rate):
        """Sets the coupon_rate of this EfirDataHubModelsModelsBondCouponsFields.

        Ставка купона, процентов годовых  # noqa: E501

        :param coupon_rate: The coupon_rate of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: float
        """

        self._coupon_rate = coupon_rate

    @property
    def pay_per_bond(self):
        """Gets the pay_per_bond of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Выплата на одну облигацию  # noqa: E501

        :return: The pay_per_bond of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: float
        """
        return self._pay_per_bond

    @pay_per_bond.setter
    def pay_per_bond(self, pay_per_bond):
        """Sets the pay_per_bond of this EfirDataHubModelsModelsBondCouponsFields.

        Выплата на одну облигацию  # noqa: E501

        :param pay_per_bond: The pay_per_bond of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: float
        """

        self._pay_per_bond = pay_per_bond

    @property
    def coupon_val(self):
        """Gets the coupon_val of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Выплаты на все облигации в обращении  # noqa: E501

        :return: The coupon_val of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: float
        """
        return self._coupon_val

    @coupon_val.setter
    def coupon_val(self, coupon_val):
        """Sets the coupon_val of this EfirDataHubModelsModelsBondCouponsFields.

        Выплаты на все облигации в обращении  # noqa: E501

        :param coupon_val: The coupon_val of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: float
        """

        self._coupon_val = coupon_val

    @property
    def stop_trade_date(self):
        """Gets the stop_trade_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Дата приостановки торгов в целях формирования списка владельцев облигаций для осуществления купонной выплаты  # noqa: E501

        :return: The stop_trade_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._stop_trade_date

    @stop_trade_date.setter
    def stop_trade_date(self, stop_trade_date):
        """Sets the stop_trade_date of this EfirDataHubModelsModelsBondCouponsFields.

        Дата приостановки торгов в целях формирования списка владельцев облигаций для осуществления купонной выплаты  # noqa: E501

        :param stop_trade_date: The stop_trade_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: datetime
        """

        self._stop_trade_date = stop_trade_date

    @property
    def pay_date(self):
        """Gets the pay_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Дата реальной выплаты купона  # noqa: E501

        :return: The pay_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._pay_date

    @pay_date.setter
    def pay_date(self, pay_date):
        """Sets the pay_date of this EfirDataHubModelsModelsBondCouponsFields.

        Дата реальной выплаты купона  # noqa: E501

        :param pay_date: The pay_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: datetime
        """

        self._pay_date = pay_date

    @property
    def coupon_rate_date(self):
        """Gets the coupon_rate_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Дата, не позже которой должна быть определена купонная ставка для будущих дат/дата определения купонной ставки для прошедших дат  # noqa: E501

        :return: The coupon_rate_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._coupon_rate_date

    @coupon_rate_date.setter
    def coupon_rate_date(self, coupon_rate_date):
        """Sets the coupon_rate_date of this EfirDataHubModelsModelsBondCouponsFields.

        Дата, не позже которой должна быть определена купонная ставка для будущих дат/дата определения купонной ставки для прошедших дат  # noqa: E501

        :param coupon_rate_date: The coupon_rate_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: datetime
        """

        self._coupon_rate_date = coupon_rate_date

    @property
    def fix_date(self):
        """Gets the fix_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Дата фиксации списка  # noqa: E501

        :return: The fix_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._fix_date

    @fix_date.setter
    def fix_date(self, fix_date):
        """Sets the fix_date of this EfirDataHubModelsModelsBondCouponsFields.

        Дата фиксации списка  # noqa: E501

        :param fix_date: The fix_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: datetime
        """

        self._fix_date = fix_date

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Дата/время последнего изменения записи  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsBondCouponsFields.

        Дата/время последнего изменения записи  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def pay_per_bond_frac(self):
        """Gets the pay_per_bond_frac of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Выплата на одну облигацию (без округл.)  # noqa: E501

        :return: The pay_per_bond_frac of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: float
        """
        return self._pay_per_bond_frac

    @pay_per_bond_frac.setter
    def pay_per_bond_frac(self, pay_per_bond_frac):
        """Sets the pay_per_bond_frac of this EfirDataHubModelsModelsBondCouponsFields.

        Выплата на одну облигацию (без округл.)  # noqa: E501

        :param pay_per_bond_frac: The pay_per_bond_frac of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: float
        """

        self._pay_per_bond_frac = pay_per_bond_frac

    @property
    def base_type_id(self):
        """Gets the base_type_id of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        ID типа базового индикатора  # noqa: E501

        :return: The base_type_id of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: int
        """
        return self._base_type_id

    @base_type_id.setter
    def base_type_id(self, base_type_id):
        """Sets the base_type_id of this EfirDataHubModelsModelsBondCouponsFields.

        ID типа базового индикатора  # noqa: E501

        :param base_type_id: The base_type_id of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: int
        """

        self._base_type_id = base_type_id

    @property
    def base_type_name(self):
        """Gets the base_type_name of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Название типа базового индикатора  # noqa: E501

        :return: The base_type_name of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: str
        """
        return self._base_type_name

    @base_type_name.setter
    def base_type_name(self, base_type_name):
        """Sets the base_type_name of this EfirDataHubModelsModelsBondCouponsFields.

        Название типа базового индикатора  # noqa: E501

        :param base_type_name: The base_type_name of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: str
        """

        self._base_type_name = base_type_name

    @property
    def base_fintoolid(self):
        """Gets the base_fintoolid of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        ID базового инструмента в ФинМаркет  # noqa: E501

        :return: The base_fintoolid of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: int
        """
        return self._base_fintoolid

    @base_fintoolid.setter
    def base_fintoolid(self, base_fintoolid):
        """Sets the base_fintoolid of this EfirDataHubModelsModelsBondCouponsFields.

        ID базового инструмента в ФинМаркет  # noqa: E501

        :param base_fintoolid: The base_fintoolid of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: int
        """

        self._base_fintoolid = base_fintoolid

    @property
    def rate_spread_pct(self):
        """Gets the rate_spread_pct of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Отличие ставки купона от ставки базового индикатора, в %  # noqa: E501

        :return: The rate_spread_pct of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: float
        """
        return self._rate_spread_pct

    @rate_spread_pct.setter
    def rate_spread_pct(self, rate_spread_pct):
        """Sets the rate_spread_pct of this EfirDataHubModelsModelsBondCouponsFields.

        Отличие ставки купона от ставки базового индикатора, в %  # noqa: E501

        :param rate_spread_pct: The rate_spread_pct of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: float
        """

        self._rate_spread_pct = rate_spread_pct

    @property
    def period_from(self):
        """Gets the period_from of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Дата начала действия ставки/правила  # noqa: E501

        :return: The period_from of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._period_from

    @period_from.setter
    def period_from(self, period_from):
        """Sets the period_from of this EfirDataHubModelsModelsBondCouponsFields.

        Дата начала действия ставки/правила  # noqa: E501

        :param period_from: The period_from of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: datetime
        """

        self._period_from = period_from

    @property
    def period_to(self):
        """Gets the period_to of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Дата окончания действия ставки/правила  # noqa: E501

        :return: The period_to of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._period_to

    @period_to.setter
    def period_to(self, period_to):
        """Sets the period_to of this EfirDataHubModelsModelsBondCouponsFields.

        Дата окончания действия ставки/правила  # noqa: E501

        :param period_to: The period_to of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: datetime
        """

        self._period_to = period_to

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Примечание  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsBondCouponsFields.

        Примечание  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsBondCouponsFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsBondCouponsFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsBondCouponsFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondCouponsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondCouponsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
