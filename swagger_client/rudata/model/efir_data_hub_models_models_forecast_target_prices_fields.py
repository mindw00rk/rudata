# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsForecastTargetPricesFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_date': 'datetime',
        'close_price': 'float',
        'comment': 'str',
        'exchange': 'str',
        'exchange_code': 'str',
        'exchange_currency': 'str',
        'exchange_currency_target_price': 'float',
        'exchange_currency_tp_last_date': 'float',
        'exchange_currency_tpchg': 'float',
        'exchange_currency_tpchg_pct': 'float',
        'exchange_name': 'str',
        'exchange_currency_prev_target': 'float',
        'fintoolid': 'int',
        'fintoolid_linked': 'int',
        'fintool_name': 'str',
        'id': 'int',
        'id_analyst': 'int',
        'id_market_maker': 'int',
        'id_recomendation': 'int',
        'id_status': 'int',
        'last_close_price': 'float',
        'last_date': 'datetime',
        'latest_close_price': 'float',
        'latest_date': 'datetime',
        'market_maker_codename': 'str',
        'market_maker_name_eng': 'str',
        'market_maker_name_rus': 'str',
        'prev_close_price': 'float',
        'prev_date': 'datetime',
        'prev_target_currency': 'str',
        'prev_target_currency_prevclose': 'float',
        'prev_target_price': 'float',
        'qty_fintoolid': 'float',
        'qty_fintoolid_linked': 'float',
        'recomendation_name': 'str',
        'status_name': 'str',
        'target_currency': 'str',
        'target_currency_close_price': 'float',
        'target_currency_cp_last_date': 'float',
        'target_price': 'float',
        'tpchg': 'float',
        'tpchg_pct': 'float',
        'update_date': 'datetime',
        'upside_pct': 'float'
    }

    attribute_map = {
        'add_date': 'add_date',
        'close_price': 'close_price',
        'comment': 'comment',
        'exchange': 'exchange',
        'exchange_code': 'exchange_code',
        'exchange_currency': 'exchange_currency',
        'exchange_currency_target_price': 'exchange_currency_target_price',
        'exchange_currency_tp_last_date': 'exchange_currency_tp_last_date',
        'exchange_currency_tpchg': 'exchange_currency_tpchg',
        'exchange_currency_tpchg_pct': 'exchange_currency_tpchg_pct',
        'exchange_name': 'exchange_name',
        'exchange_currency_prev_target': 'exchange_currency_prev_target',
        'fintoolid': 'fintoolid',
        'fintoolid_linked': 'fintoolid_linked',
        'fintool_name': 'fintool_name',
        'id': 'id',
        'id_analyst': 'id_analyst',
        'id_market_maker': 'id_market_maker',
        'id_recomendation': 'id_recomendation',
        'id_status': 'id_status',
        'last_close_price': 'last_close_price',
        'last_date': 'last_date',
        'latest_close_price': 'latest_close_price',
        'latest_date': 'latest_date',
        'market_maker_codename': 'market_maker_codename',
        'market_maker_name_eng': 'market_maker_name_eng',
        'market_maker_name_rus': 'market_maker_name_rus',
        'prev_close_price': 'prev_close_price',
        'prev_date': 'prev_date',
        'prev_target_currency': 'prev_target_currency',
        'prev_target_currency_prevclose': 'prev_target_currency_prevclose',
        'prev_target_price': 'prev_target_price',
        'qty_fintoolid': 'qty_fintoolid',
        'qty_fintoolid_linked': 'qty_fintoolid_linked',
        'recomendation_name': 'recomendation_name',
        'status_name': 'status_name',
        'target_currency': 'target_currency',
        'target_currency_close_price': 'target_currency_close_price',
        'target_currency_cp_last_date': 'target_currency_cp_last_date',
        'target_price': 'target_price',
        'tpchg': 'tpchg',
        'tpchg_pct': 'tpchg_pct',
        'update_date': 'update_date',
        'upside_pct': 'upside_pct'
    }

    def __init__(self, add_date=None, close_price=None, comment=None, exchange=None, exchange_code=None, exchange_currency=None, exchange_currency_target_price=None, exchange_currency_tp_last_date=None, exchange_currency_tpchg=None, exchange_currency_tpchg_pct=None, exchange_name=None, exchange_currency_prev_target=None, fintoolid=None, fintoolid_linked=None, fintool_name=None, id=None, id_analyst=None, id_market_maker=None, id_recomendation=None, id_status=None, last_close_price=None, last_date=None, latest_close_price=None, latest_date=None, market_maker_codename=None, market_maker_name_eng=None, market_maker_name_rus=None, prev_close_price=None, prev_date=None, prev_target_currency=None, prev_target_currency_prevclose=None, prev_target_price=None, qty_fintoolid=None, qty_fintoolid_linked=None, recomendation_name=None, status_name=None, target_currency=None, target_currency_close_price=None, target_currency_cp_last_date=None, target_price=None, tpchg=None, tpchg_pct=None, update_date=None, upside_pct=None):  # noqa: E501
        """EfirDataHubModelsModelsForecastTargetPricesFields - a model defined in Swagger"""  # noqa: E501
        self._add_date = None
        self._close_price = None
        self._comment = None
        self._exchange = None
        self._exchange_code = None
        self._exchange_currency = None
        self._exchange_currency_target_price = None
        self._exchange_currency_tp_last_date = None
        self._exchange_currency_tpchg = None
        self._exchange_currency_tpchg_pct = None
        self._exchange_name = None
        self._exchange_currency_prev_target = None
        self._fintoolid = None
        self._fintoolid_linked = None
        self._fintool_name = None
        self._id = None
        self._id_analyst = None
        self._id_market_maker = None
        self._id_recomendation = None
        self._id_status = None
        self._last_close_price = None
        self._last_date = None
        self._latest_close_price = None
        self._latest_date = None
        self._market_maker_codename = None
        self._market_maker_name_eng = None
        self._market_maker_name_rus = None
        self._prev_close_price = None
        self._prev_date = None
        self._prev_target_currency = None
        self._prev_target_currency_prevclose = None
        self._prev_target_price = None
        self._qty_fintoolid = None
        self._qty_fintoolid_linked = None
        self._recomendation_name = None
        self._status_name = None
        self._target_currency = None
        self._target_currency_close_price = None
        self._target_currency_cp_last_date = None
        self._target_price = None
        self._tpchg = None
        self._tpchg_pct = None
        self._update_date = None
        self._upside_pct = None
        self.discriminator = None
        if add_date is not None:
            self.add_date = add_date
        if close_price is not None:
            self.close_price = close_price
        if comment is not None:
            self.comment = comment
        if exchange is not None:
            self.exchange = exchange
        if exchange_code is not None:
            self.exchange_code = exchange_code
        if exchange_currency is not None:
            self.exchange_currency = exchange_currency
        if exchange_currency_target_price is not None:
            self.exchange_currency_target_price = exchange_currency_target_price
        if exchange_currency_tp_last_date is not None:
            self.exchange_currency_tp_last_date = exchange_currency_tp_last_date
        if exchange_currency_tpchg is not None:
            self.exchange_currency_tpchg = exchange_currency_tpchg
        if exchange_currency_tpchg_pct is not None:
            self.exchange_currency_tpchg_pct = exchange_currency_tpchg_pct
        if exchange_name is not None:
            self.exchange_name = exchange_name
        if exchange_currency_prev_target is not None:
            self.exchange_currency_prev_target = exchange_currency_prev_target
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if fintoolid_linked is not None:
            self.fintoolid_linked = fintoolid_linked
        if fintool_name is not None:
            self.fintool_name = fintool_name
        if id is not None:
            self.id = id
        if id_analyst is not None:
            self.id_analyst = id_analyst
        if id_market_maker is not None:
            self.id_market_maker = id_market_maker
        if id_recomendation is not None:
            self.id_recomendation = id_recomendation
        if id_status is not None:
            self.id_status = id_status
        if last_close_price is not None:
            self.last_close_price = last_close_price
        if last_date is not None:
            self.last_date = last_date
        if latest_close_price is not None:
            self.latest_close_price = latest_close_price
        if latest_date is not None:
            self.latest_date = latest_date
        if market_maker_codename is not None:
            self.market_maker_codename = market_maker_codename
        if market_maker_name_eng is not None:
            self.market_maker_name_eng = market_maker_name_eng
        if market_maker_name_rus is not None:
            self.market_maker_name_rus = market_maker_name_rus
        if prev_close_price is not None:
            self.prev_close_price = prev_close_price
        if prev_date is not None:
            self.prev_date = prev_date
        if prev_target_currency is not None:
            self.prev_target_currency = prev_target_currency
        if prev_target_currency_prevclose is not None:
            self.prev_target_currency_prevclose = prev_target_currency_prevclose
        if prev_target_price is not None:
            self.prev_target_price = prev_target_price
        if qty_fintoolid is not None:
            self.qty_fintoolid = qty_fintoolid
        if qty_fintoolid_linked is not None:
            self.qty_fintoolid_linked = qty_fintoolid_linked
        if recomendation_name is not None:
            self.recomendation_name = recomendation_name
        if status_name is not None:
            self.status_name = status_name
        if target_currency is not None:
            self.target_currency = target_currency
        if target_currency_close_price is not None:
            self.target_currency_close_price = target_currency_close_price
        if target_currency_cp_last_date is not None:
            self.target_currency_cp_last_date = target_currency_cp_last_date
        if target_price is not None:
            self.target_price = target_price
        if tpchg is not None:
            self.tpchg = tpchg
        if tpchg_pct is not None:
            self.tpchg_pct = tpchg_pct
        if update_date is not None:
            self.update_date = update_date
        if upside_pct is not None:
            self.upside_pct = upside_pct

    @property
    def add_date(self):
        """Gets the add_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Дата обновления/подтверждения прогноза  # noqa: E501

        :return: The add_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._add_date

    @add_date.setter
    def add_date(self, add_date):
        """Sets the add_date of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Дата обновления/подтверждения прогноза  # noqa: E501

        :param add_date: The add_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: datetime
        """

        self._add_date = add_date

    @property
    def close_price(self):
        """Gets the close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Цена закрытия на дату add_date  # noqa: E501

        :return: The close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._close_price

    @close_price.setter
    def close_price(self, close_price):
        """Sets the close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Цена закрытия на дату add_date  # noqa: E501

        :param close_price: The close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._close_price = close_price

    @property
    def comment(self):
        """Gets the comment of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Комментарий  # noqa: E501

        :return: The comment of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Комментарий  # noqa: E501

        :param comment: The comment of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def exchange(self):
        """Gets the exchange of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Биржа  # noqa: E501

        :return: The exchange of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Биржа  # noqa: E501

        :param exchange: The exchange of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def exchange_code(self):
        """Gets the exchange_code of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Биржевой код бумаги  # noqa: E501

        :return: The exchange_code of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._exchange_code

    @exchange_code.setter
    def exchange_code(self, exchange_code):
        """Sets the exchange_code of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Биржевой код бумаги  # noqa: E501

        :param exchange_code: The exchange_code of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._exchange_code = exchange_code

    @property
    def exchange_currency(self):
        """Gets the exchange_currency of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Валюта биржи для данной бумаги  # noqa: E501

        :return: The exchange_currency of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._exchange_currency

    @exchange_currency.setter
    def exchange_currency(self, exchange_currency):
        """Sets the exchange_currency of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Валюта биржи для данной бумаги  # noqa: E501

        :param exchange_currency: The exchange_currency of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._exchange_currency = exchange_currency

    @property
    def exchange_currency_target_price(self):
        """Gets the exchange_currency_target_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Прогнозная цена в валюте биржи  # noqa: E501

        :return: The exchange_currency_target_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._exchange_currency_target_price

    @exchange_currency_target_price.setter
    def exchange_currency_target_price(self, exchange_currency_target_price):
        """Sets the exchange_currency_target_price of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Прогнозная цена в валюте биржи  # noqa: E501

        :param exchange_currency_target_price: The exchange_currency_target_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._exchange_currency_target_price = exchange_currency_target_price

    @property
    def exchange_currency_tp_last_date(self):
        """Gets the exchange_currency_tp_last_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Прогнозная цена в валюте биржи на дату last_date  # noqa: E501

        :return: The exchange_currency_tp_last_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._exchange_currency_tp_last_date

    @exchange_currency_tp_last_date.setter
    def exchange_currency_tp_last_date(self, exchange_currency_tp_last_date):
        """Sets the exchange_currency_tp_last_date of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Прогнозная цена в валюте биржи на дату last_date  # noqa: E501

        :param exchange_currency_tp_last_date: The exchange_currency_tp_last_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._exchange_currency_tp_last_date = exchange_currency_tp_last_date

    @property
    def exchange_currency_tpchg(self):
        """Gets the exchange_currency_tpchg of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Изменение прогнозной цены по отношению к предыдущему прогнозу в валюте биржи  # noqa: E501

        :return: The exchange_currency_tpchg of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._exchange_currency_tpchg

    @exchange_currency_tpchg.setter
    def exchange_currency_tpchg(self, exchange_currency_tpchg):
        """Sets the exchange_currency_tpchg of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Изменение прогнозной цены по отношению к предыдущему прогнозу в валюте биржи  # noqa: E501

        :param exchange_currency_tpchg: The exchange_currency_tpchg of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._exchange_currency_tpchg = exchange_currency_tpchg

    @property
    def exchange_currency_tpchg_pct(self):
        """Gets the exchange_currency_tpchg_pct of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Изменение прогнозной цены по отношению к предыдущему прогнозу в валюте биржи в %  # noqa: E501

        :return: The exchange_currency_tpchg_pct of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._exchange_currency_tpchg_pct

    @exchange_currency_tpchg_pct.setter
    def exchange_currency_tpchg_pct(self, exchange_currency_tpchg_pct):
        """Sets the exchange_currency_tpchg_pct of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Изменение прогнозной цены по отношению к предыдущему прогнозу в валюте биржи в %  # noqa: E501

        :param exchange_currency_tpchg_pct: The exchange_currency_tpchg_pct of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._exchange_currency_tpchg_pct = exchange_currency_tpchg_pct

    @property
    def exchange_name(self):
        """Gets the exchange_name of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Биржевое наименование бумаги  # noqa: E501

        :return: The exchange_name of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._exchange_name

    @exchange_name.setter
    def exchange_name(self, exchange_name):
        """Sets the exchange_name of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Биржевое наименование бумаги  # noqa: E501

        :param exchange_name: The exchange_name of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._exchange_name = exchange_name

    @property
    def exchange_currency_prev_target(self):
        """Gets the exchange_currency_prev_target of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Предыдущая прогнозная цена в валюте биржи  # noqa: E501

        :return: The exchange_currency_prev_target of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._exchange_currency_prev_target

    @exchange_currency_prev_target.setter
    def exchange_currency_prev_target(self, exchange_currency_prev_target):
        """Sets the exchange_currency_prev_target of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Предыдущая прогнозная цена в валюте биржи  # noqa: E501

        :param exchange_currency_prev_target: The exchange_currency_prev_target of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._exchange_currency_prev_target = exchange_currency_prev_target

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Идентификатор бумаги в базе Интерфакс  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Идентификатор бумаги в базе Интерфакс  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def fintoolid_linked(self):
        """Gets the fintoolid_linked of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Идентификатор сопряженной бумаги в базе Интерфакс  # noqa: E501

        :return: The fintoolid_linked of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid_linked

    @fintoolid_linked.setter
    def fintoolid_linked(self, fintoolid_linked):
        """Sets the fintoolid_linked of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Идентификатор сопряженной бумаги в базе Интерфакс  # noqa: E501

        :param fintoolid_linked: The fintoolid_linked of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: int
        """

        self._fintoolid_linked = fintoolid_linked

    @property
    def fintool_name(self):
        """Gets the fintool_name of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Краткое наименование бумаги  # noqa: E501

        :return: The fintool_name of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._fintool_name

    @fintool_name.setter
    def fintool_name(self, fintool_name):
        """Sets the fintool_name of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Краткое наименование бумаги  # noqa: E501

        :param fintool_name: The fintool_name of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._fintool_name = fintool_name

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Идентификатор прогноза в базе Интерфакс  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Идентификатор прогноза в базе Интерфакс  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def id_analyst(self):
        """Gets the id_analyst of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Идентификатор аналитика  # noqa: E501

        :return: The id_analyst of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: int
        """
        return self._id_analyst

    @id_analyst.setter
    def id_analyst(self, id_analyst):
        """Sets the id_analyst of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Идентификатор аналитика  # noqa: E501

        :param id_analyst: The id_analyst of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: int
        """

        self._id_analyst = id_analyst

    @property
    def id_market_maker(self):
        """Gets the id_market_maker of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Идентификатор компании-маркетмейкера  # noqa: E501

        :return: The id_market_maker of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: int
        """
        return self._id_market_maker

    @id_market_maker.setter
    def id_market_maker(self, id_market_maker):
        """Sets the id_market_maker of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Идентификатор компании-маркетмейкера  # noqa: E501

        :param id_market_maker: The id_market_maker of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: int
        """

        self._id_market_maker = id_market_maker

    @property
    def id_recomendation(self):
        """Gets the id_recomendation of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Идентификатор рекомендации (1..6)  # noqa: E501

        :return: The id_recomendation of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: int
        """
        return self._id_recomendation

    @id_recomendation.setter
    def id_recomendation(self, id_recomendation):
        """Sets the id_recomendation of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Идентификатор рекомендации (1..6)  # noqa: E501

        :param id_recomendation: The id_recomendation of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: int
        """

        self._id_recomendation = id_recomendation

    @property
    def id_status(self):
        """Gets the id_status of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Идентификатор статуса цены (1..4)  # noqa: E501

        :return: The id_status of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: int
        """
        return self._id_status

    @id_status.setter
    def id_status(self, id_status):
        """Sets the id_status of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Идентификатор статуса цены (1..4)  # noqa: E501

        :param id_status: The id_status of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: int
        """

        self._id_status = id_status

    @property
    def last_close_price(self):
        """Gets the last_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Цена закрытия на дату last_date.  # noqa: E501

        :return: The last_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._last_close_price

    @last_close_price.setter
    def last_close_price(self, last_close_price):
        """Sets the last_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Цена закрытия на дату last_date.  # noqa: E501

        :param last_close_price: The last_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._last_close_price = last_close_price

    @property
    def last_date(self):
        """Gets the last_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Дата последнего изменения прогнозной цены, т.е. дата, когда была впервые установлена текущая прогнозная цена.  # noqa: E501

        :return: The last_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._last_date

    @last_date.setter
    def last_date(self, last_date):
        """Sets the last_date of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Дата последнего изменения прогнозной цены, т.е. дата, когда была впервые установлена текущая прогнозная цена.  # noqa: E501

        :param last_date: The last_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: datetime
        """

        self._last_date = last_date

    @property
    def latest_close_price(self):
        """Gets the latest_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Цена закрытия на дату latest_date  # noqa: E501

        :return: The latest_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._latest_close_price

    @latest_close_price.setter
    def latest_close_price(self, latest_close_price):
        """Sets the latest_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Цена закрытия на дату latest_date  # noqa: E501

        :param latest_close_price: The latest_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._latest_close_price = latest_close_price

    @property
    def latest_date(self):
        """Gets the latest_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Дата последних торгов  # noqa: E501

        :return: The latest_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_date

    @latest_date.setter
    def latest_date(self, latest_date):
        """Sets the latest_date of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Дата последних торгов  # noqa: E501

        :param latest_date: The latest_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: datetime
        """

        self._latest_date = latest_date

    @property
    def market_maker_codename(self):
        """Gets the market_maker_codename of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Символьный код компании-маркетмейкера  # noqa: E501

        :return: The market_maker_codename of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._market_maker_codename

    @market_maker_codename.setter
    def market_maker_codename(self, market_maker_codename):
        """Sets the market_maker_codename of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Символьный код компании-маркетмейкера  # noqa: E501

        :param market_maker_codename: The market_maker_codename of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._market_maker_codename = market_maker_codename

    @property
    def market_maker_name_eng(self):
        """Gets the market_maker_name_eng of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Наименование компании-маркетмейкера(англ.)  # noqa: E501

        :return: The market_maker_name_eng of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._market_maker_name_eng

    @market_maker_name_eng.setter
    def market_maker_name_eng(self, market_maker_name_eng):
        """Sets the market_maker_name_eng of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Наименование компании-маркетмейкера(англ.)  # noqa: E501

        :param market_maker_name_eng: The market_maker_name_eng of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._market_maker_name_eng = market_maker_name_eng

    @property
    def market_maker_name_rus(self):
        """Gets the market_maker_name_rus of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Наименование компании-маркетмейкера (рус.)  # noqa: E501

        :return: The market_maker_name_rus of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._market_maker_name_rus

    @market_maker_name_rus.setter
    def market_maker_name_rus(self, market_maker_name_rus):
        """Sets the market_maker_name_rus of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Наименование компании-маркетмейкера (рус.)  # noqa: E501

        :param market_maker_name_rus: The market_maker_name_rus of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._market_maker_name_rus = market_maker_name_rus

    @property
    def prev_close_price(self):
        """Gets the prev_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Цена закрытия на дату prev_date  # noqa: E501

        :return: The prev_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._prev_close_price

    @prev_close_price.setter
    def prev_close_price(self, prev_close_price):
        """Sets the prev_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Цена закрытия на дату prev_date  # noqa: E501

        :param prev_close_price: The prev_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._prev_close_price = prev_close_price

    @property
    def prev_date(self):
        """Gets the prev_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Дата установки предыдущего прогноза  # noqa: E501

        :return: The prev_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._prev_date

    @prev_date.setter
    def prev_date(self, prev_date):
        """Sets the prev_date of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Дата установки предыдущего прогноза  # noqa: E501

        :param prev_date: The prev_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: datetime
        """

        self._prev_date = prev_date

    @property
    def prev_target_currency(self):
        """Gets the prev_target_currency of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Буквенный код валюты предыдущего прогноза цены по ISO 4217  # noqa: E501

        :return: The prev_target_currency of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._prev_target_currency

    @prev_target_currency.setter
    def prev_target_currency(self, prev_target_currency):
        """Sets the prev_target_currency of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Буквенный код валюты предыдущего прогноза цены по ISO 4217  # noqa: E501

        :param prev_target_currency: The prev_target_currency of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._prev_target_currency = prev_target_currency

    @property
    def prev_target_currency_prevclose(self):
        """Gets the prev_target_currency_prevclose of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Цена закрытия на дату prev_date в валюте предыдущего прогноза  # noqa: E501

        :return: The prev_target_currency_prevclose of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._prev_target_currency_prevclose

    @prev_target_currency_prevclose.setter
    def prev_target_currency_prevclose(self, prev_target_currency_prevclose):
        """Sets the prev_target_currency_prevclose of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Цена закрытия на дату prev_date в валюте предыдущего прогноза  # noqa: E501

        :param prev_target_currency_prevclose: The prev_target_currency_prevclose of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._prev_target_currency_prevclose = prev_target_currency_prevclose

    @property
    def prev_target_price(self):
        """Gets the prev_target_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Предыдущий прогноз цены  # noqa: E501

        :return: The prev_target_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._prev_target_price

    @prev_target_price.setter
    def prev_target_price(self, prev_target_price):
        """Sets the prev_target_price of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Предыдущий прогноз цены  # noqa: E501

        :param prev_target_price: The prev_target_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._prev_target_price = prev_target_price

    @property
    def qty_fintoolid(self):
        """Gets the qty_fintoolid of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Количество основных бумаг в соотношении с сопряженными  # noqa: E501

        :return: The qty_fintoolid of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._qty_fintoolid

    @qty_fintoolid.setter
    def qty_fintoolid(self, qty_fintoolid):
        """Sets the qty_fintoolid of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Количество основных бумаг в соотношении с сопряженными  # noqa: E501

        :param qty_fintoolid: The qty_fintoolid of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._qty_fintoolid = qty_fintoolid

    @property
    def qty_fintoolid_linked(self):
        """Gets the qty_fintoolid_linked of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Количество сопряженных бумаг в соотношении с основными  # noqa: E501

        :return: The qty_fintoolid_linked of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._qty_fintoolid_linked

    @qty_fintoolid_linked.setter
    def qty_fintoolid_linked(self, qty_fintoolid_linked):
        """Sets the qty_fintoolid_linked of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Количество сопряженных бумаг в соотношении с основными  # noqa: E501

        :param qty_fintoolid_linked: The qty_fintoolid_linked of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._qty_fintoolid_linked = qty_fintoolid_linked

    @property
    def recomendation_name(self):
        """Gets the recomendation_name of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Рекомендация (идентификатор) :  Продавать - 1  Пересмотр - 2  Держать - 3  Отозвана - 4  Покупать - 5  Нет - 6  # noqa: E501

        :return: The recomendation_name of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._recomendation_name

    @recomendation_name.setter
    def recomendation_name(self, recomendation_name):
        """Sets the recomendation_name of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Рекомендация (идентификатор) :  Продавать - 1  Пересмотр - 2  Держать - 3  Отозвана - 4  Покупать - 5  Нет - 6  # noqa: E501

        :param recomendation_name: The recomendation_name of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._recomendation_name = recomendation_name

    @property
    def status_name(self):
        """Gets the status_name of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Статус цены:  Действует - 1  Отзыв - 2  Пересмотр - 3  Нет - 4  # noqa: E501

        :return: The status_name of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Статус цены:  Действует - 1  Отзыв - 2  Пересмотр - 3  Нет - 4  # noqa: E501

        :param status_name: The status_name of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._status_name = status_name

    @property
    def target_currency(self):
        """Gets the target_currency of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Буквенный код валюты прогноза цены по ISO 4217  # noqa: E501

        :return: The target_currency of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: str
        """
        return self._target_currency

    @target_currency.setter
    def target_currency(self, target_currency):
        """Sets the target_currency of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Буквенный код валюты прогноза цены по ISO 4217  # noqa: E501

        :param target_currency: The target_currency of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: str
        """

        self._target_currency = target_currency

    @property
    def target_currency_close_price(self):
        """Gets the target_currency_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Цена закрытия в валюте прогноза  # noqa: E501

        :return: The target_currency_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._target_currency_close_price

    @target_currency_close_price.setter
    def target_currency_close_price(self, target_currency_close_price):
        """Sets the target_currency_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Цена закрытия в валюте прогноза  # noqa: E501

        :param target_currency_close_price: The target_currency_close_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._target_currency_close_price = target_currency_close_price

    @property
    def target_currency_cp_last_date(self):
        """Gets the target_currency_cp_last_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Цена закрытия на дату last_date в валюте прогноза  # noqa: E501

        :return: The target_currency_cp_last_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._target_currency_cp_last_date

    @target_currency_cp_last_date.setter
    def target_currency_cp_last_date(self, target_currency_cp_last_date):
        """Sets the target_currency_cp_last_date of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Цена закрытия на дату last_date в валюте прогноза  # noqa: E501

        :param target_currency_cp_last_date: The target_currency_cp_last_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._target_currency_cp_last_date = target_currency_cp_last_date

    @property
    def target_price(self):
        """Gets the target_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Прогноз цены  # noqa: E501

        :return: The target_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._target_price

    @target_price.setter
    def target_price(self, target_price):
        """Sets the target_price of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Прогноз цены  # noqa: E501

        :param target_price: The target_price of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._target_price = target_price

    @property
    def tpchg(self):
        """Gets the tpchg of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Изменение прогнозной цены по отношению к предыдущему прогнозу  # noqa: E501

        :return: The tpchg of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._tpchg

    @tpchg.setter
    def tpchg(self, tpchg):
        """Sets the tpchg of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Изменение прогнозной цены по отношению к предыдущему прогнозу  # noqa: E501

        :param tpchg: The tpchg of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._tpchg = tpchg

    @property
    def tpchg_pct(self):
        """Gets the tpchg_pct of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Изменение прогнозной цены по отношению к предыдущему прогнозу в %  # noqa: E501

        :return: The tpchg_pct of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._tpchg_pct

    @tpchg_pct.setter
    def tpchg_pct(self, tpchg_pct):
        """Sets the tpchg_pct of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Изменение прогнозной цены по отношению к предыдущему прогнозу в %  # noqa: E501

        :param tpchg_pct: The tpchg_pct of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._tpchg_pct = tpchg_pct

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Дата/время обновления прогноза  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Дата/время обновления прогноза  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def upside_pct(self):
        """Gets the upside_pct of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501

        Потенциал в %  # noqa: E501

        :return: The upside_pct of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :rtype: float
        """
        return self._upside_pct

    @upside_pct.setter
    def upside_pct(self, upside_pct):
        """Sets the upside_pct of this EfirDataHubModelsModelsForecastTargetPricesFields.

        Потенциал в %  # noqa: E501

        :param upside_pct: The upside_pct of this EfirDataHubModelsModelsForecastTargetPricesFields.  # noqa: E501
        :type: float
        """

        self._upside_pct = upside_pct

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsForecastTargetPricesFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsForecastTargetPricesFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
