# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsInfoEmitentsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_emitent': 'int',
        'fininstid': 'int',
        'shortname_rus': 'str',
        'shortname_eng': 'str',
        'inn': 'str',
        'okpo': 'str',
        'ogrn': 'str',
        'code': 'str',
        'sector': 'str',
        'legal_address': 'str',
        'phone': 'str',
        'www': 'str',
        'update_date': 'datetime',
        'fullname_rus_nrd': 'str',
        'fullname_eng_nrd': 'str',
        'shortname_rus_nrd': 'str',
        'shortname_eng_nrd': 'str',
        'company_type_short_name': 'str',
        'state_reg_num': 'str',
        'state_reg_date': 'datetime',
        'state_reg_name': 'str',
        'egrul_date': 'datetime',
        'egrul_organ_name': 'str',
        'country': 'str',
        'lei_code': 'str',
        'bik': 'str',
        'fax': 'str',
        'e_mail': 'str',
        'credit_cmp': 'str',
        'is_bank_4_non_resident': 'str',
        'swift': 'str',
        'country_oksm': 'int',
        'country_name_rus': 'str',
        'country_name_eng': 'str',
        'region_inn': 'str',
        'region_soato': 'str',
        'region_name': 'str',
        'fullname_rus': 'str',
        'sparkid': 'int',
        'br_fcsm_reg_code': 'str',
        'capital': 'float',
        'capital_unit': 'str',
        'okved': 'str',
        'oecd_lvl': 'str',
        'oktmo': 'str',
        'okato': 'str',
        'post_address': 'str',
        'okopf': 'str',
        'okogu': 'str',
        'have_rating': 'int',
        'have_risk': 'int',
        'is_finorg': 'int',
        'is_control_by_finorg': 'int',
        'is_gov_or_cb': 'int',
        'on_behalf_of_state': 'int',
        'is_subjectrf': 'int',
        'is_cis_reg': 'int',
        'issuer_nrd': 'str',
        'tin': 'str',
        'kpp': 'str',
        'state_reg_number': 'str',
        'market_id_nrd': 'int',
        'market_name_rus_nrd': 'str',
        'market_name_eng_nrd': 'str',
        'sp_rx_entity_id': 'str',
        'sp_shortname': 'str',
        'mds_shortname': 'str',
        'mds_org_id': 'str',
        'fch_id': 'str',
        'fch_shortname': 'str',
        'is_monopoly': 'int',
        'is_strategic': 'int',
        'ifo_list': 'str',
        'isregion': 'int',
        'sic': 'str',
        'sector4212u': 'str',
        'sna2008': 'str',
        'reg_code': 'str',
        'reg_date': 'datetime',
        'reg_org': 'str',
        'note': 'str',
        'primary_reg_date': 'datetime',
        'inn_fle': 'str',
        'other_tin': 'str',
        'other_tin_name': 'str',
        'okfs_id': 'str',
        'okfs_name': 'str',
        'is_branch': 'bool',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'id_emitent': 'id_emitent',
        'fininstid': 'fininstid',
        'shortname_rus': 'shortname_rus',
        'shortname_eng': 'shortname_eng',
        'inn': 'inn',
        'okpo': 'okpo',
        'ogrn': 'ogrn',
        'code': 'code',
        'sector': 'sector',
        'legal_address': 'legal_address',
        'phone': 'phone',
        'www': 'www',
        'update_date': 'update_date',
        'fullname_rus_nrd': 'fullname_rus_nrd',
        'fullname_eng_nrd': 'fullname_eng_nrd',
        'shortname_rus_nrd': 'shortname_rus_nrd',
        'shortname_eng_nrd': 'shortname_eng_nrd',
        'company_type_short_name': 'company_type_short_name',
        'state_reg_num': 'state_reg_num',
        'state_reg_date': 'state_reg_date',
        'state_reg_name': 'state_reg_name',
        'egrul_date': 'egrul_date',
        'egrul_organ_name': 'egrul_organ_name',
        'country': 'country',
        'lei_code': 'lei_code',
        'bik': 'bik',
        'fax': 'fax',
        'e_mail': 'e_mail',
        'credit_cmp': 'credit_cmp',
        'is_bank_4_non_resident': 'is_bank_4_non_resident',
        'swift': 'swift',
        'country_oksm': 'country_oksm',
        'country_name_rus': 'country_name_rus',
        'country_name_eng': 'country_name_eng',
        'region_inn': 'region_inn',
        'region_soato': 'region_soato',
        'region_name': 'region_name',
        'fullname_rus': 'fullname_rus',
        'sparkid': 'sparkid',
        'br_fcsm_reg_code': 'br_fcsm_reg_code',
        'capital': 'capital',
        'capital_unit': 'capital_unit',
        'okved': 'okved',
        'oecd_lvl': 'oecd_lvl',
        'oktmo': 'oktmo',
        'okato': 'okato',
        'post_address': 'post_address',
        'okopf': 'okopf',
        'okogu': 'okogu',
        'have_rating': 'have_rating',
        'have_risk': 'have_risk',
        'is_finorg': 'is_finorg',
        'is_control_by_finorg': 'is_control_by_finorg',
        'is_gov_or_cb': 'is_gov_or_cb',
        'on_behalf_of_state': 'on_behalf_of_state',
        'is_subjectrf': 'is_subjectrf',
        'is_cis_reg': 'is_cis_reg',
        'issuer_nrd': 'issuer_nrd',
        'tin': 'tin',
        'kpp': 'kpp',
        'state_reg_number': 'state_reg_number',
        'market_id_nrd': 'market_id_nrd',
        'market_name_rus_nrd': 'market_name_rus_nrd',
        'market_name_eng_nrd': 'market_name_eng_nrd',
        'sp_rx_entity_id': 'sp_rx_entity_id',
        'sp_shortname': 'sp_shortname',
        'mds_shortname': 'mds_shortname',
        'mds_org_id': 'mds_org_id',
        'fch_id': 'fch_id',
        'fch_shortname': 'fch_shortname',
        'is_monopoly': 'is_monopoly',
        'is_strategic': 'is_strategic',
        'ifo_list': 'ifo_list',
        'isregion': 'isregion',
        'sic': 'sic',
        'sector4212u': 'sector4212u',
        'sna2008': 'sna2008',
        'reg_code': 'reg_code',
        'reg_date': 'reg_date',
        'reg_org': 'reg_org',
        'note': 'note',
        'primary_reg_date': 'primary_reg_date',
        'inn_fle': 'inn_fle',
        'other_tin': 'other_tin',
        'other_tin_name': 'other_tin_name',
        'okfs_id': 'okfs_id',
        'okfs_name': 'okfs_name',
        'is_branch': 'is_branch',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, id_emitent=None, fininstid=None, shortname_rus=None, shortname_eng=None, inn=None, okpo=None, ogrn=None, code=None, sector=None, legal_address=None, phone=None, www=None, update_date=None, fullname_rus_nrd=None, fullname_eng_nrd=None, shortname_rus_nrd=None, shortname_eng_nrd=None, company_type_short_name=None, state_reg_num=None, state_reg_date=None, state_reg_name=None, egrul_date=None, egrul_organ_name=None, country=None, lei_code=None, bik=None, fax=None, e_mail=None, credit_cmp=None, is_bank_4_non_resident=None, swift=None, country_oksm=None, country_name_rus=None, country_name_eng=None, region_inn=None, region_soato=None, region_name=None, fullname_rus=None, sparkid=None, br_fcsm_reg_code=None, capital=None, capital_unit=None, okved=None, oecd_lvl=None, oktmo=None, okato=None, post_address=None, okopf=None, okogu=None, have_rating=None, have_risk=None, is_finorg=None, is_control_by_finorg=None, is_gov_or_cb=None, on_behalf_of_state=None, is_subjectrf=None, is_cis_reg=None, issuer_nrd=None, tin=None, kpp=None, state_reg_number=None, market_id_nrd=None, market_name_rus_nrd=None, market_name_eng_nrd=None, sp_rx_entity_id=None, sp_shortname=None, mds_shortname=None, mds_org_id=None, fch_id=None, fch_shortname=None, is_monopoly=None, is_strategic=None, ifo_list=None, isregion=None, sic=None, sector4212u=None, sna2008=None, reg_code=None, reg_date=None, reg_org=None, note=None, primary_reg_date=None, inn_fle=None, other_tin=None, other_tin_name=None, okfs_id=None, okfs_name=None, is_branch=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsInfoEmitentsFields - a model defined in Swagger"""  # noqa: E501
        self._id_emitent = None
        self._fininstid = None
        self._shortname_rus = None
        self._shortname_eng = None
        self._inn = None
        self._okpo = None
        self._ogrn = None
        self._code = None
        self._sector = None
        self._legal_address = None
        self._phone = None
        self._www = None
        self._update_date = None
        self._fullname_rus_nrd = None
        self._fullname_eng_nrd = None
        self._shortname_rus_nrd = None
        self._shortname_eng_nrd = None
        self._company_type_short_name = None
        self._state_reg_num = None
        self._state_reg_date = None
        self._state_reg_name = None
        self._egrul_date = None
        self._egrul_organ_name = None
        self._country = None
        self._lei_code = None
        self._bik = None
        self._fax = None
        self._e_mail = None
        self._credit_cmp = None
        self._is_bank_4_non_resident = None
        self._swift = None
        self._country_oksm = None
        self._country_name_rus = None
        self._country_name_eng = None
        self._region_inn = None
        self._region_soato = None
        self._region_name = None
        self._fullname_rus = None
        self._sparkid = None
        self._br_fcsm_reg_code = None
        self._capital = None
        self._capital_unit = None
        self._okved = None
        self._oecd_lvl = None
        self._oktmo = None
        self._okato = None
        self._post_address = None
        self._okopf = None
        self._okogu = None
        self._have_rating = None
        self._have_risk = None
        self._is_finorg = None
        self._is_control_by_finorg = None
        self._is_gov_or_cb = None
        self._on_behalf_of_state = None
        self._is_subjectrf = None
        self._is_cis_reg = None
        self._issuer_nrd = None
        self._tin = None
        self._kpp = None
        self._state_reg_number = None
        self._market_id_nrd = None
        self._market_name_rus_nrd = None
        self._market_name_eng_nrd = None
        self._sp_rx_entity_id = None
        self._sp_shortname = None
        self._mds_shortname = None
        self._mds_org_id = None
        self._fch_id = None
        self._fch_shortname = None
        self._is_monopoly = None
        self._is_strategic = None
        self._ifo_list = None
        self._isregion = None
        self._sic = None
        self._sector4212u = None
        self._sna2008 = None
        self._reg_code = None
        self._reg_date = None
        self._reg_org = None
        self._note = None
        self._primary_reg_date = None
        self._inn_fle = None
        self._other_tin = None
        self._other_tin_name = None
        self._okfs_id = None
        self._okfs_name = None
        self._is_branch = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if id_emitent is not None:
            self.id_emitent = id_emitent
        if fininstid is not None:
            self.fininstid = fininstid
        if shortname_rus is not None:
            self.shortname_rus = shortname_rus
        if shortname_eng is not None:
            self.shortname_eng = shortname_eng
        if inn is not None:
            self.inn = inn
        if okpo is not None:
            self.okpo = okpo
        if ogrn is not None:
            self.ogrn = ogrn
        if code is not None:
            self.code = code
        if sector is not None:
            self.sector = sector
        if legal_address is not None:
            self.legal_address = legal_address
        if phone is not None:
            self.phone = phone
        if www is not None:
            self.www = www
        if update_date is not None:
            self.update_date = update_date
        if fullname_rus_nrd is not None:
            self.fullname_rus_nrd = fullname_rus_nrd
        if fullname_eng_nrd is not None:
            self.fullname_eng_nrd = fullname_eng_nrd
        if shortname_rus_nrd is not None:
            self.shortname_rus_nrd = shortname_rus_nrd
        if shortname_eng_nrd is not None:
            self.shortname_eng_nrd = shortname_eng_nrd
        if company_type_short_name is not None:
            self.company_type_short_name = company_type_short_name
        if state_reg_num is not None:
            self.state_reg_num = state_reg_num
        if state_reg_date is not None:
            self.state_reg_date = state_reg_date
        if state_reg_name is not None:
            self.state_reg_name = state_reg_name
        if egrul_date is not None:
            self.egrul_date = egrul_date
        if egrul_organ_name is not None:
            self.egrul_organ_name = egrul_organ_name
        if country is not None:
            self.country = country
        if lei_code is not None:
            self.lei_code = lei_code
        if bik is not None:
            self.bik = bik
        if fax is not None:
            self.fax = fax
        if e_mail is not None:
            self.e_mail = e_mail
        if credit_cmp is not None:
            self.credit_cmp = credit_cmp
        if is_bank_4_non_resident is not None:
            self.is_bank_4_non_resident = is_bank_4_non_resident
        if swift is not None:
            self.swift = swift
        if country_oksm is not None:
            self.country_oksm = country_oksm
        if country_name_rus is not None:
            self.country_name_rus = country_name_rus
        if country_name_eng is not None:
            self.country_name_eng = country_name_eng
        if region_inn is not None:
            self.region_inn = region_inn
        if region_soato is not None:
            self.region_soato = region_soato
        if region_name is not None:
            self.region_name = region_name
        if fullname_rus is not None:
            self.fullname_rus = fullname_rus
        if sparkid is not None:
            self.sparkid = sparkid
        if br_fcsm_reg_code is not None:
            self.br_fcsm_reg_code = br_fcsm_reg_code
        if capital is not None:
            self.capital = capital
        if capital_unit is not None:
            self.capital_unit = capital_unit
        if okved is not None:
            self.okved = okved
        if oecd_lvl is not None:
            self.oecd_lvl = oecd_lvl
        if oktmo is not None:
            self.oktmo = oktmo
        if okato is not None:
            self.okato = okato
        if post_address is not None:
            self.post_address = post_address
        if okopf is not None:
            self.okopf = okopf
        if okogu is not None:
            self.okogu = okogu
        if have_rating is not None:
            self.have_rating = have_rating
        if have_risk is not None:
            self.have_risk = have_risk
        if is_finorg is not None:
            self.is_finorg = is_finorg
        if is_control_by_finorg is not None:
            self.is_control_by_finorg = is_control_by_finorg
        if is_gov_or_cb is not None:
            self.is_gov_or_cb = is_gov_or_cb
        if on_behalf_of_state is not None:
            self.on_behalf_of_state = on_behalf_of_state
        if is_subjectrf is not None:
            self.is_subjectrf = is_subjectrf
        if is_cis_reg is not None:
            self.is_cis_reg = is_cis_reg
        if issuer_nrd is not None:
            self.issuer_nrd = issuer_nrd
        if tin is not None:
            self.tin = tin
        if kpp is not None:
            self.kpp = kpp
        if state_reg_number is not None:
            self.state_reg_number = state_reg_number
        if market_id_nrd is not None:
            self.market_id_nrd = market_id_nrd
        if market_name_rus_nrd is not None:
            self.market_name_rus_nrd = market_name_rus_nrd
        if market_name_eng_nrd is not None:
            self.market_name_eng_nrd = market_name_eng_nrd
        if sp_rx_entity_id is not None:
            self.sp_rx_entity_id = sp_rx_entity_id
        if sp_shortname is not None:
            self.sp_shortname = sp_shortname
        if mds_shortname is not None:
            self.mds_shortname = mds_shortname
        if mds_org_id is not None:
            self.mds_org_id = mds_org_id
        if fch_id is not None:
            self.fch_id = fch_id
        if fch_shortname is not None:
            self.fch_shortname = fch_shortname
        if is_monopoly is not None:
            self.is_monopoly = is_monopoly
        if is_strategic is not None:
            self.is_strategic = is_strategic
        if ifo_list is not None:
            self.ifo_list = ifo_list
        if isregion is not None:
            self.isregion = isregion
        if sic is not None:
            self.sic = sic
        if sector4212u is not None:
            self.sector4212u = sector4212u
        if sna2008 is not None:
            self.sna2008 = sna2008
        if reg_code is not None:
            self.reg_code = reg_code
        if reg_date is not None:
            self.reg_date = reg_date
        if reg_org is not None:
            self.reg_org = reg_org
        if note is not None:
            self.note = note
        if primary_reg_date is not None:
            self.primary_reg_date = primary_reg_date
        if inn_fle is not None:
            self.inn_fle = inn_fle
        if other_tin is not None:
            self.other_tin = other_tin
        if other_tin_name is not None:
            self.other_tin_name = other_tin_name
        if okfs_id is not None:
            self.okfs_id = okfs_id
        if okfs_name is not None:
            self.okfs_name = okfs_name
        if is_branch is not None:
            self.is_branch = is_branch
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def id_emitent(self):
        """Gets the id_emitent of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Идентификатор эмитента  # noqa: E501

        :return: The id_emitent of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._id_emitent

    @id_emitent.setter
    def id_emitent(self, id_emitent):
        """Sets the id_emitent of this EfirDataHubModelsModelsInfoEmitentsFields.

        Идентификатор эмитента  # noqa: E501

        :param id_emitent: The id_emitent of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._id_emitent = id_emitent

    @property
    def fininstid(self):
        """Gets the fininstid of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Идентификатор эмитента в базе Интерфакс  # noqa: E501

        :return: The fininstid of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid

    @fininstid.setter
    def fininstid(self, fininstid):
        """Sets the fininstid of this EfirDataHubModelsModelsInfoEmitentsFields.

        Идентификатор эмитента в базе Интерфакс  # noqa: E501

        :param fininstid: The fininstid of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._fininstid = fininstid

    @property
    def shortname_rus(self):
        """Gets the shortname_rus of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Наименование эмитента (рус.)  # noqa: E501

        :return: The shortname_rus of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_rus

    @shortname_rus.setter
    def shortname_rus(self, shortname_rus):
        """Sets the shortname_rus of this EfirDataHubModelsModelsInfoEmitentsFields.

        Наименование эмитента (рус.)  # noqa: E501

        :param shortname_rus: The shortname_rus of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._shortname_rus = shortname_rus

    @property
    def shortname_eng(self):
        """Gets the shortname_eng of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Наименование эмитента (англ.)  # noqa: E501

        :return: The shortname_eng of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_eng

    @shortname_eng.setter
    def shortname_eng(self, shortname_eng):
        """Sets the shortname_eng of this EfirDataHubModelsModelsInfoEmitentsFields.

        Наименование эмитента (англ.)  # noqa: E501

        :param shortname_eng: The shortname_eng of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._shortname_eng = shortname_eng

    @property
    def inn(self):
        """Gets the inn of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        ИНН для российских компаний, TIN/TAX для остальных  # noqa: E501

        :return: The inn of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._inn

    @inn.setter
    def inn(self, inn):
        """Sets the inn of this EfirDataHubModelsModelsInfoEmitentsFields.

        ИНН для российских компаний, TIN/TAX для остальных  # noqa: E501

        :param inn: The inn of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._inn = inn

    @property
    def okpo(self):
        """Gets the okpo of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        ОКПО  # noqa: E501

        :return: The okpo of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._okpo

    @okpo.setter
    def okpo(self, okpo):
        """Sets the okpo of this EfirDataHubModelsModelsInfoEmitentsFields.

        ОКПО  # noqa: E501

        :param okpo: The okpo of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._okpo = okpo

    @property
    def ogrn(self):
        """Gets the ogrn of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        ОГРН  # noqa: E501

        :return: The ogrn of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._ogrn

    @ogrn.setter
    def ogrn(self, ogrn):
        """Sets the ogrn of this EfirDataHubModelsModelsInfoEmitentsFields.

        ОГРН  # noqa: E501

        :param ogrn: The ogrn of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._ogrn = ogrn

    @property
    def code(self):
        """Gets the code of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Символьный идентификатор эмитента  # noqa: E501

        :return: The code of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EfirDataHubModelsModelsInfoEmitentsFields.

        Символьный идентификатор эмитента  # noqa: E501

        :param code: The code of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def sector(self):
        """Gets the sector of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Отрасль (по основной деятельности)  # noqa: E501

        :return: The sector of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this EfirDataHubModelsModelsInfoEmitentsFields.

        Отрасль (по основной деятельности)  # noqa: E501

        :param sector: The sector of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def legal_address(self):
        """Gets the legal_address of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Юридический адрес  # noqa: E501

        :return: The legal_address of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._legal_address

    @legal_address.setter
    def legal_address(self, legal_address):
        """Sets the legal_address of this EfirDataHubModelsModelsInfoEmitentsFields.

        Юридический адрес  # noqa: E501

        :param legal_address: The legal_address of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._legal_address = legal_address

    @property
    def phone(self):
        """Gets the phone of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Телефоны  # noqa: E501

        :return: The phone of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this EfirDataHubModelsModelsInfoEmitentsFields.

        Телефоны  # noqa: E501

        :param phone: The phone of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def www(self):
        """Gets the www of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Адрес веб-сайта  # noqa: E501

        :return: The www of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._www

    @www.setter
    def www(self, www):
        """Sets the www of this EfirDataHubModelsModelsInfoEmitentsFields.

        Адрес веб-сайта  # noqa: E501

        :param www: The www of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._www = www

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Дата последних изменений информации по эмитенту  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsInfoEmitentsFields.

        Дата последних изменений информации по эмитенту  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def fullname_rus_nrd(self):
        """Gets the fullname_rus_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Полное наименование эмитента в базе НРД (рус)  # noqa: E501

        :return: The fullname_rus_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_rus_nrd

    @fullname_rus_nrd.setter
    def fullname_rus_nrd(self, fullname_rus_nrd):
        """Sets the fullname_rus_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.

        Полное наименование эмитента в базе НРД (рус)  # noqa: E501

        :param fullname_rus_nrd: The fullname_rus_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._fullname_rus_nrd = fullname_rus_nrd

    @property
    def fullname_eng_nrd(self):
        """Gets the fullname_eng_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Полное наименование эмитента на ин. языке в базе НРД  # noqa: E501

        :return: The fullname_eng_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_eng_nrd

    @fullname_eng_nrd.setter
    def fullname_eng_nrd(self, fullname_eng_nrd):
        """Sets the fullname_eng_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.

        Полное наименование эмитента на ин. языке в базе НРД  # noqa: E501

        :param fullname_eng_nrd: The fullname_eng_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._fullname_eng_nrd = fullname_eng_nrd

    @property
    def shortname_rus_nrd(self):
        """Gets the shortname_rus_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Краткое наименование эмитента в базе НРД (рус)  # noqa: E501

        :return: The shortname_rus_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_rus_nrd

    @shortname_rus_nrd.setter
    def shortname_rus_nrd(self, shortname_rus_nrd):
        """Sets the shortname_rus_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.

        Краткое наименование эмитента в базе НРД (рус)  # noqa: E501

        :param shortname_rus_nrd: The shortname_rus_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._shortname_rus_nrd = shortname_rus_nrd

    @property
    def shortname_eng_nrd(self):
        """Gets the shortname_eng_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Краткое наименование на ин. языке в базе НРД  # noqa: E501

        :return: The shortname_eng_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_eng_nrd

    @shortname_eng_nrd.setter
    def shortname_eng_nrd(self, shortname_eng_nrd):
        """Sets the shortname_eng_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.

        Краткое наименование на ин. языке в базе НРД  # noqa: E501

        :param shortname_eng_nrd: The shortname_eng_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._shortname_eng_nrd = shortname_eng_nrd

    @property
    def company_type_short_name(self):
        """Gets the company_type_short_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Краткое наименование организационно-правовой формы (рус)  # noqa: E501

        :return: The company_type_short_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._company_type_short_name

    @company_type_short_name.setter
    def company_type_short_name(self, company_type_short_name):
        """Sets the company_type_short_name of this EfirDataHubModelsModelsInfoEmitentsFields.

        Краткое наименование организационно-правовой формы (рус)  # noqa: E501

        :param company_type_short_name: The company_type_short_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._company_type_short_name = company_type_short_name

    @property
    def state_reg_num(self):
        """Gets the state_reg_num of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Регистрационный номер  # noqa: E501

        :return: The state_reg_num of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._state_reg_num

    @state_reg_num.setter
    def state_reg_num(self, state_reg_num):
        """Sets the state_reg_num of this EfirDataHubModelsModelsInfoEmitentsFields.

        Регистрационный номер  # noqa: E501

        :param state_reg_num: The state_reg_num of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._state_reg_num = state_reg_num

    @property
    def state_reg_date(self):
        """Gets the state_reg_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Дата первичной регистрации  # noqa: E501

        :return: The state_reg_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._state_reg_date

    @state_reg_date.setter
    def state_reg_date(self, state_reg_date):
        """Sets the state_reg_date of this EfirDataHubModelsModelsInfoEmitentsFields.

        Дата первичной регистрации  # noqa: E501

        :param state_reg_date: The state_reg_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: datetime
        """

        self._state_reg_date = state_reg_date

    @property
    def state_reg_name(self):
        """Gets the state_reg_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Орган, зарегистрировавший юр.лицо  # noqa: E501

        :return: The state_reg_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._state_reg_name

    @state_reg_name.setter
    def state_reg_name(self, state_reg_name):
        """Sets the state_reg_name of this EfirDataHubModelsModelsInfoEmitentsFields.

        Орган, зарегистрировавший юр.лицо  # noqa: E501

        :param state_reg_name: The state_reg_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._state_reg_name = state_reg_name

    @property
    def egrul_date(self):
        """Gets the egrul_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Дата государственной регистрации  # noqa: E501

        :return: The egrul_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._egrul_date

    @egrul_date.setter
    def egrul_date(self, egrul_date):
        """Sets the egrul_date of this EfirDataHubModelsModelsInfoEmitentsFields.

        Дата государственной регистрации  # noqa: E501

        :param egrul_date: The egrul_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: datetime
        """

        self._egrul_date = egrul_date

    @property
    def egrul_organ_name(self):
        """Gets the egrul_organ_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Орган, внесший запись в ЕГРЮЛ  # noqa: E501

        :return: The egrul_organ_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._egrul_organ_name

    @egrul_organ_name.setter
    def egrul_organ_name(self, egrul_organ_name):
        """Sets the egrul_organ_name of this EfirDataHubModelsModelsInfoEmitentsFields.

        Орган, внесший запись в ЕГРЮЛ  # noqa: E501

        :param egrul_organ_name: The egrul_organ_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._egrul_organ_name = egrul_organ_name

    @property
    def country(self):
        """Gets the country of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Страна регистрации, 3-букв.код по ОКСМ  # noqa: E501

        :return: The country of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EfirDataHubModelsModelsInfoEmitentsFields.

        Страна регистрации, 3-букв.код по ОКСМ  # noqa: E501

        :param country: The country of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def lei_code(self):
        """Gets the lei_code of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        LEI-код  # noqa: E501

        :return: The lei_code of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._lei_code

    @lei_code.setter
    def lei_code(self, lei_code):
        """Sets the lei_code of this EfirDataHubModelsModelsInfoEmitentsFields.

        LEI-код  # noqa: E501

        :param lei_code: The lei_code of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._lei_code = lei_code

    @property
    def bik(self):
        """Gets the bik of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        БИК  # noqa: E501

        :return: The bik of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._bik

    @bik.setter
    def bik(self, bik):
        """Sets the bik of this EfirDataHubModelsModelsInfoEmitentsFields.

        БИК  # noqa: E501

        :param bik: The bik of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._bik = bik

    @property
    def fax(self):
        """Gets the fax of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Факс  # noqa: E501

        :return: The fax of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this EfirDataHubModelsModelsInfoEmitentsFields.

        Факс  # noqa: E501

        :param fax: The fax of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def e_mail(self):
        """Gets the e_mail of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Электронная почта  # noqa: E501

        :return: The e_mail of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._e_mail

    @e_mail.setter
    def e_mail(self, e_mail):
        """Sets the e_mail of this EfirDataHubModelsModelsInfoEmitentsFields.

        Электронная почта  # noqa: E501

        :param e_mail: The e_mail of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._e_mail = e_mail

    @property
    def credit_cmp(self):
        """Gets the credit_cmp of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        “Y” для кредитной организации  # noqa: E501

        :return: The credit_cmp of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._credit_cmp

    @credit_cmp.setter
    def credit_cmp(self, credit_cmp):
        """Sets the credit_cmp of this EfirDataHubModelsModelsInfoEmitentsFields.

        “Y” для кредитной организации  # noqa: E501

        :param credit_cmp: The credit_cmp of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._credit_cmp = credit_cmp

    @property
    def is_bank_4_non_resident(self):
        """Gets the is_bank_4_non_resident of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        “Y” для иностранной кредитной организации  # noqa: E501

        :return: The is_bank_4_non_resident of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._is_bank_4_non_resident

    @is_bank_4_non_resident.setter
    def is_bank_4_non_resident(self, is_bank_4_non_resident):
        """Sets the is_bank_4_non_resident of this EfirDataHubModelsModelsInfoEmitentsFields.

        “Y” для иностранной кредитной организации  # noqa: E501

        :param is_bank_4_non_resident: The is_bank_4_non_resident of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._is_bank_4_non_resident = is_bank_4_non_resident

    @property
    def swift(self):
        """Gets the swift of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Код SWIFT  # noqa: E501

        :return: The swift of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._swift

    @swift.setter
    def swift(self, swift):
        """Sets the swift of this EfirDataHubModelsModelsInfoEmitentsFields.

        Код SWIFT  # noqa: E501

        :param swift: The swift of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._swift = swift

    @property
    def country_oksm(self):
        """Gets the country_oksm of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Цифровой код страны по ОКСМ  # noqa: E501

        :return: The country_oksm of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._country_oksm

    @country_oksm.setter
    def country_oksm(self, country_oksm):
        """Sets the country_oksm of this EfirDataHubModelsModelsInfoEmitentsFields.

        Цифровой код страны по ОКСМ  # noqa: E501

        :param country_oksm: The country_oksm of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._country_oksm = country_oksm

    @property
    def country_name_rus(self):
        """Gets the country_name_rus of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Наименование страны (рус)  # noqa: E501

        :return: The country_name_rus of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._country_name_rus

    @country_name_rus.setter
    def country_name_rus(self, country_name_rus):
        """Sets the country_name_rus of this EfirDataHubModelsModelsInfoEmitentsFields.

        Наименование страны (рус)  # noqa: E501

        :param country_name_rus: The country_name_rus of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._country_name_rus = country_name_rus

    @property
    def country_name_eng(self):
        """Gets the country_name_eng of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Наименование страны (анг)  # noqa: E501

        :return: The country_name_eng of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._country_name_eng

    @country_name_eng.setter
    def country_name_eng(self, country_name_eng):
        """Sets the country_name_eng of this EfirDataHubModelsModelsInfoEmitentsFields.

        Наименование страны (анг)  # noqa: E501

        :param country_name_eng: The country_name_eng of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._country_name_eng = country_name_eng

    @property
    def region_inn(self):
        """Gets the region_inn of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Код региона по ИНН  # noqa: E501

        :return: The region_inn of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._region_inn

    @region_inn.setter
    def region_inn(self, region_inn):
        """Sets the region_inn of this EfirDataHubModelsModelsInfoEmitentsFields.

        Код региона по ИНН  # noqa: E501

        :param region_inn: The region_inn of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._region_inn = region_inn

    @property
    def region_soato(self):
        """Gets the region_soato of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Код региона по СОАТО  # noqa: E501

        :return: The region_soato of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._region_soato

    @region_soato.setter
    def region_soato(self, region_soato):
        """Sets the region_soato of this EfirDataHubModelsModelsInfoEmitentsFields.

        Код региона по СОАТО  # noqa: E501

        :param region_soato: The region_soato of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._region_soato = region_soato

    @property
    def region_name(self):
        """Gets the region_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Наименование региона (для российских эмитентов)  # noqa: E501

        :return: The region_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this EfirDataHubModelsModelsInfoEmitentsFields.

        Наименование региона (для российских эмитентов)  # noqa: E501

        :param region_name: The region_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._region_name = region_name

    @property
    def fullname_rus(self):
        """Gets the fullname_rus of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Полное наименование эмитента (рус)  # noqa: E501

        :return: The fullname_rus of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_rus

    @fullname_rus.setter
    def fullname_rus(self, fullname_rus):
        """Sets the fullname_rus of this EfirDataHubModelsModelsInfoEmitentsFields.

        Полное наименование эмитента (рус)  # noqa: E501

        :param fullname_rus: The fullname_rus of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._fullname_rus = fullname_rus

    @property
    def sparkid(self):
        """Gets the sparkid of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Идентификатор эмитента в базе СПАРК  # noqa: E501

        :return: The sparkid of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._sparkid

    @sparkid.setter
    def sparkid(self, sparkid):
        """Sets the sparkid of this EfirDataHubModelsModelsInfoEmitentsFields.

        Идентификатор эмитента в базе СПАРК  # noqa: E501

        :param sparkid: The sparkid of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._sparkid = sparkid

    @property
    def br_fcsm_reg_code(self):
        """Gets the br_fcsm_reg_code of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Регистрационный номер ФСФР/ЦБ РФ  # noqa: E501

        :return: The br_fcsm_reg_code of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._br_fcsm_reg_code

    @br_fcsm_reg_code.setter
    def br_fcsm_reg_code(self, br_fcsm_reg_code):
        """Sets the br_fcsm_reg_code of this EfirDataHubModelsModelsInfoEmitentsFields.

        Регистрационный номер ФСФР/ЦБ РФ  # noqa: E501

        :param br_fcsm_reg_code: The br_fcsm_reg_code of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._br_fcsm_reg_code = br_fcsm_reg_code

    @property
    def capital(self):
        """Gets the capital of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Уставный капитал  # noqa: E501

        :return: The capital of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: float
        """
        return self._capital

    @capital.setter
    def capital(self, capital):
        """Sets the capital of this EfirDataHubModelsModelsInfoEmitentsFields.

        Уставный капитал  # noqa: E501

        :param capital: The capital of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: float
        """

        self._capital = capital

    @property
    def capital_unit(self):
        """Gets the capital_unit of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Валюта уставного капитала  # noqa: E501

        :return: The capital_unit of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._capital_unit

    @capital_unit.setter
    def capital_unit(self, capital_unit):
        """Sets the capital_unit of this EfirDataHubModelsModelsInfoEmitentsFields.

        Валюта уставного капитала  # noqa: E501

        :param capital_unit: The capital_unit of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._capital_unit = capital_unit

    @property
    def okved(self):
        """Gets the okved of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Код основного ОКВЭД2  # noqa: E501

        :return: The okved of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._okved

    @okved.setter
    def okved(self, okved):
        """Sets the okved of this EfirDataHubModelsModelsInfoEmitentsFields.

        Код основного ОКВЭД2  # noqa: E501

        :param okved: The okved of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._okved = okved

    @property
    def oecd_lvl(self):
        """Gets the oecd_lvl of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Классификация страны ОЭСР  # noqa: E501

        :return: The oecd_lvl of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._oecd_lvl

    @oecd_lvl.setter
    def oecd_lvl(self, oecd_lvl):
        """Sets the oecd_lvl of this EfirDataHubModelsModelsInfoEmitentsFields.

        Классификация страны ОЭСР  # noqa: E501

        :param oecd_lvl: The oecd_lvl of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._oecd_lvl = oecd_lvl

    @property
    def oktmo(self):
        """Gets the oktmo of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Код общероссийского классификатора территорий муниципальных образований  # noqa: E501

        :return: The oktmo of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._oktmo

    @oktmo.setter
    def oktmo(self, oktmo):
        """Sets the oktmo of this EfirDataHubModelsModelsInfoEmitentsFields.

        Код общероссийского классификатора территорий муниципальных образований  # noqa: E501

        :param oktmo: The oktmo of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._oktmo = oktmo

    @property
    def okato(self):
        """Gets the okato of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Код общероссийского классификатора объектов административно-территориального деления  # noqa: E501

        :return: The okato of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._okato

    @okato.setter
    def okato(self, okato):
        """Sets the okato of this EfirDataHubModelsModelsInfoEmitentsFields.

        Код общероссийского классификатора объектов административно-территориального деления  # noqa: E501

        :param okato: The okato of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._okato = okato

    @property
    def post_address(self):
        """Gets the post_address of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Адрес почтовый  # noqa: E501

        :return: The post_address of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._post_address

    @post_address.setter
    def post_address(self, post_address):
        """Sets the post_address of this EfirDataHubModelsModelsInfoEmitentsFields.

        Адрес почтовый  # noqa: E501

        :param post_address: The post_address of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._post_address = post_address

    @property
    def okopf(self):
        """Gets the okopf of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        ОКОПФ  # noqa: E501

        :return: The okopf of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._okopf

    @okopf.setter
    def okopf(self, okopf):
        """Sets the okopf of this EfirDataHubModelsModelsInfoEmitentsFields.

        ОКОПФ  # noqa: E501

        :param okopf: The okopf of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._okopf = okopf

    @property
    def okogu(self):
        """Gets the okogu of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        ОКОГУ  # noqa: E501

        :return: The okogu of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._okogu

    @okogu.setter
    def okogu(self, okogu):
        """Sets the okogu of this EfirDataHubModelsModelsInfoEmitentsFields.

        ОКОГУ  # noqa: E501

        :param okogu: The okogu of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._okogu = okogu

    @property
    def have_rating(self):
        """Gets the have_rating of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        'Y' если есть хоть один активный рейтинг  # noqa: E501

        :return: The have_rating of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._have_rating

    @have_rating.setter
    def have_rating(self, have_rating):
        """Sets the have_rating of this EfirDataHubModelsModelsInfoEmitentsFields.

        'Y' если есть хоть один активный рейтинг  # noqa: E501

        :param have_rating: The have_rating of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._have_rating = have_rating

    @property
    def have_risk(self):
        """Gets the have_risk of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        'Y' если организация представлена в блоке по рискам  # noqa: E501

        :return: The have_risk of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._have_risk

    @have_risk.setter
    def have_risk(self, have_risk):
        """Sets the have_risk of this EfirDataHubModelsModelsInfoEmitentsFields.

        'Y' если организация представлена в блоке по рискам  # noqa: E501

        :param have_risk: The have_risk of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._have_risk = have_risk

    @property
    def is_finorg(self):
        """Gets the is_finorg of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        'Y' для финансовой организации  # noqa: E501

        :return: The is_finorg of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._is_finorg

    @is_finorg.setter
    def is_finorg(self, is_finorg):
        """Sets the is_finorg of this EfirDataHubModelsModelsInfoEmitentsFields.

        'Y' для финансовой организации  # noqa: E501

        :param is_finorg: The is_finorg of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._is_finorg = is_finorg

    @property
    def is_control_by_finorg(self):
        """Gets the is_control_by_finorg of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        'Y' для компаний, контролируемых финансовыми организациями  # noqa: E501

        :return: The is_control_by_finorg of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._is_control_by_finorg

    @is_control_by_finorg.setter
    def is_control_by_finorg(self, is_control_by_finorg):
        """Sets the is_control_by_finorg of this EfirDataHubModelsModelsInfoEmitentsFields.

        'Y' для компаний, контролируемых финансовыми организациями  # noqa: E501

        :param is_control_by_finorg: The is_control_by_finorg of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._is_control_by_finorg = is_control_by_finorg

    @property
    def is_gov_or_cb(self):
        """Gets the is_gov_or_cb of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Правительство или Центральный Банк  # noqa: E501

        :return: The is_gov_or_cb of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._is_gov_or_cb

    @is_gov_or_cb.setter
    def is_gov_or_cb(self, is_gov_or_cb):
        """Sets the is_gov_or_cb of this EfirDataHubModelsModelsInfoEmitentsFields.

        Правительство или Центральный Банк  # noqa: E501

        :param is_gov_or_cb: The is_gov_or_cb of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._is_gov_or_cb = is_gov_or_cb

    @property
    def on_behalf_of_state(self):
        """Gets the on_behalf_of_state of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Имеет право заимствовать от лица государства, страны  # noqa: E501

        :return: The on_behalf_of_state of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._on_behalf_of_state

    @on_behalf_of_state.setter
    def on_behalf_of_state(self, on_behalf_of_state):
        """Sets the on_behalf_of_state of this EfirDataHubModelsModelsInfoEmitentsFields.

        Имеет право заимствовать от лица государства, страны  # noqa: E501

        :param on_behalf_of_state: The on_behalf_of_state of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._on_behalf_of_state = on_behalf_of_state

    @property
    def is_subjectrf(self):
        """Gets the is_subjectrf of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Субъект РФ или муниципальное образование РФ  # noqa: E501

        :return: The is_subjectrf of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._is_subjectrf

    @is_subjectrf.setter
    def is_subjectrf(self, is_subjectrf):
        """Sets the is_subjectrf of this EfirDataHubModelsModelsInfoEmitentsFields.

        Субъект РФ или муниципальное образование РФ  # noqa: E501

        :param is_subjectrf: The is_subjectrf of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._is_subjectrf = is_subjectrf

    @property
    def is_cis_reg(self):
        """Gets the is_cis_reg of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Признак регистрации на территории СНГ(кроме России)  # noqa: E501

        :return: The is_cis_reg of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._is_cis_reg

    @is_cis_reg.setter
    def is_cis_reg(self, is_cis_reg):
        """Sets the is_cis_reg of this EfirDataHubModelsModelsInfoEmitentsFields.

        Признак регистрации на территории СНГ(кроме России)  # noqa: E501

        :param is_cis_reg: The is_cis_reg of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._is_cis_reg = is_cis_reg

    @property
    def issuer_nrd(self):
        """Gets the issuer_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Идентификатор эмитента в базе НРД  # noqa: E501

        :return: The issuer_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._issuer_nrd

    @issuer_nrd.setter
    def issuer_nrd(self, issuer_nrd):
        """Sets the issuer_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.

        Идентификатор эмитента в базе НРД  # noqa: E501

        :param issuer_nrd: The issuer_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._issuer_nrd = issuer_nrd

    @property
    def tin(self):
        """Gets the tin of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        TIN (США)  # noqa: E501

        :return: The tin of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._tin

    @tin.setter
    def tin(self, tin):
        """Sets the tin of this EfirDataHubModelsModelsInfoEmitentsFields.

        TIN (США)  # noqa: E501

        :param tin: The tin of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._tin = tin

    @property
    def kpp(self):
        """Gets the kpp of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        КПП  # noqa: E501

        :return: The kpp of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._kpp

    @kpp.setter
    def kpp(self, kpp):
        """Sets the kpp of this EfirDataHubModelsModelsInfoEmitentsFields.

        КПП  # noqa: E501

        :param kpp: The kpp of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._kpp = kpp

    @property
    def state_reg_number(self):
        """Gets the state_reg_number of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Номер государственной регистрации при создании  # noqa: E501

        :return: The state_reg_number of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._state_reg_number

    @state_reg_number.setter
    def state_reg_number(self, state_reg_number):
        """Sets the state_reg_number of this EfirDataHubModelsModelsInfoEmitentsFields.

        Номер государственной регистрации при создании  # noqa: E501

        :param state_reg_number: The state_reg_number of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._state_reg_number = state_reg_number

    @property
    def market_id_nrd(self):
        """Gets the market_id_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Идентификатор сектора рынка НРД  # noqa: E501

        :return: The market_id_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._market_id_nrd

    @market_id_nrd.setter
    def market_id_nrd(self, market_id_nrd):
        """Sets the market_id_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.

        Идентификатор сектора рынка НРД  # noqa: E501

        :param market_id_nrd: The market_id_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._market_id_nrd = market_id_nrd

    @property
    def market_name_rus_nrd(self):
        """Gets the market_name_rus_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Наименование сектора рынка НРД (рус.)  # noqa: E501

        :return: The market_name_rus_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._market_name_rus_nrd

    @market_name_rus_nrd.setter
    def market_name_rus_nrd(self, market_name_rus_nrd):
        """Sets the market_name_rus_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.

        Наименование сектора рынка НРД (рус.)  # noqa: E501

        :param market_name_rus_nrd: The market_name_rus_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._market_name_rus_nrd = market_name_rus_nrd

    @property
    def market_name_eng_nrd(self):
        """Gets the market_name_eng_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Наименование сектора рынка НРД (англ.)  # noqa: E501

        :return: The market_name_eng_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._market_name_eng_nrd

    @market_name_eng_nrd.setter
    def market_name_eng_nrd(self, market_name_eng_nrd):
        """Sets the market_name_eng_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.

        Наименование сектора рынка НРД (англ.)  # noqa: E501

        :param market_name_eng_nrd: The market_name_eng_nrd of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._market_name_eng_nrd = market_name_eng_nrd

    @property
    def sp_rx_entity_id(self):
        """Gets the sp_rx_entity_id of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Standard&Poor's Rating Express Entity Identificator  # noqa: E501

        :return: The sp_rx_entity_id of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._sp_rx_entity_id

    @sp_rx_entity_id.setter
    def sp_rx_entity_id(self, sp_rx_entity_id):
        """Sets the sp_rx_entity_id of this EfirDataHubModelsModelsInfoEmitentsFields.

        Standard&Poor's Rating Express Entity Identificator  # noqa: E501

        :param sp_rx_entity_id: The sp_rx_entity_id of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._sp_rx_entity_id = sp_rx_entity_id

    @property
    def sp_shortname(self):
        """Gets the sp_shortname of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Standard & Poor's NickName  # noqa: E501

        :return: The sp_shortname of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._sp_shortname

    @sp_shortname.setter
    def sp_shortname(self, sp_shortname):
        """Sets the sp_shortname of this EfirDataHubModelsModelsInfoEmitentsFields.

        Standard & Poor's NickName  # noqa: E501

        :param sp_shortname: The sp_shortname of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._sp_shortname = sp_shortname

    @property
    def mds_shortname(self):
        """Gets the mds_shortname of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Moody's NickName  # noqa: E501

        :return: The mds_shortname of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._mds_shortname

    @mds_shortname.setter
    def mds_shortname(self, mds_shortname):
        """Sets the mds_shortname of this EfirDataHubModelsModelsInfoEmitentsFields.

        Moody's NickName  # noqa: E501

        :param mds_shortname: The mds_shortname of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._mds_shortname = mds_shortname

    @property
    def mds_org_id(self):
        """Gets the mds_org_id of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Moody's Organization Identificator  # noqa: E501

        :return: The mds_org_id of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._mds_org_id

    @mds_org_id.setter
    def mds_org_id(self, mds_org_id):
        """Sets the mds_org_id of this EfirDataHubModelsModelsInfoEmitentsFields.

        Moody's Organization Identificator  # noqa: E501

        :param mds_org_id: The mds_org_id of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._mds_org_id = mds_org_id

    @property
    def fch_id(self):
        """Gets the fch_id of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Fitch Investors Identificator  # noqa: E501

        :return: The fch_id of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._fch_id

    @fch_id.setter
    def fch_id(self, fch_id):
        """Sets the fch_id of this EfirDataHubModelsModelsInfoEmitentsFields.

        Fitch Investors Identificator  # noqa: E501

        :param fch_id: The fch_id of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._fch_id = fch_id

    @property
    def fch_shortname(self):
        """Gets the fch_shortname of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Fitch Investors NickName  # noqa: E501

        :return: The fch_shortname of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._fch_shortname

    @fch_shortname.setter
    def fch_shortname(self, fch_shortname):
        """Sets the fch_shortname of this EfirDataHubModelsModelsInfoEmitentsFields.

        Fitch Investors NickName  # noqa: E501

        :param fch_shortname: The fch_shortname of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._fch_shortname = fch_shortname

    @property
    def is_monopoly(self):
        """Gets the is_monopoly of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Реестр естественных монополий  # noqa: E501

        :return: The is_monopoly of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._is_monopoly

    @is_monopoly.setter
    def is_monopoly(self, is_monopoly):
        """Sets the is_monopoly of this EfirDataHubModelsModelsInfoEmitentsFields.

        Реестр естественных монополий  # noqa: E501

        :param is_monopoly: The is_monopoly of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._is_monopoly = is_monopoly

    @property
    def is_strategic(self):
        """Gets the is_strategic of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Перечень стратегических предприятий  # noqa: E501

        :return: The is_strategic of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._is_strategic

    @is_strategic.setter
    def is_strategic(self, is_strategic):
        """Sets the is_strategic of this EfirDataHubModelsModelsInfoEmitentsFields.

        Перечень стратегических предприятий  # noqa: E501

        :param is_strategic: The is_strategic of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._is_strategic = is_strategic

    @property
    def ifo_list(self):
        """Gets the ifo_list of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Вхождение эмитента в список МФО('МФО1' или 'МФО2')  # noqa: E501

        :return: The ifo_list of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._ifo_list

    @ifo_list.setter
    def ifo_list(self, ifo_list):
        """Sets the ifo_list of this EfirDataHubModelsModelsInfoEmitentsFields.

        Вхождение эмитента в список МФО('МФО1' или 'МФО2')  # noqa: E501

        :param ifo_list: The ifo_list of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._ifo_list = ifo_list

    @property
    def isregion(self):
        """Gets the isregion of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        1 – субъект РФ; 0 – муниципалитет РФ; пусто – иное.  # noqa: E501

        :return: The isregion of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._isregion

    @isregion.setter
    def isregion(self, isregion):
        """Sets the isregion of this EfirDataHubModelsModelsInfoEmitentsFields.

        1 – субъект РФ; 0 – муниципалитет РФ; пусто – иное.  # noqa: E501

        :param isregion: The isregion of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._isregion = isregion

    @property
    def sic(self):
        """Gets the sic of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Классификация в соответствии с Standard Industrial Classification  # noqa: E501

        :return: The sic of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._sic

    @sic.setter
    def sic(self, sic):
        """Sets the sic of this EfirDataHubModelsModelsInfoEmitentsFields.

        Классификация в соответствии с Standard Industrial Classification  # noqa: E501

        :param sic: The sic of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._sic = sic

    @property
    def sector4212u(self):
        """Gets the sector4212u of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Сектор в соответствии с указанием Банка России 4212-У  # noqa: E501

        :return: The sector4212u of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._sector4212u

    @sector4212u.setter
    def sector4212u(self, sector4212u):
        """Sets the sector4212u of this EfirDataHubModelsModelsInfoEmitentsFields.

        Сектор в соответствии с указанием Банка России 4212-У  # noqa: E501

        :param sector4212u: The sector4212u of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._sector4212u = sector4212u

    @property
    def sna2008(self):
        """Gets the sna2008 of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Классификация в соответствии с System of National Accounts 2008  # noqa: E501

        :return: The sna2008 of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._sna2008

    @sna2008.setter
    def sna2008(self, sna2008):
        """Sets the sna2008 of this EfirDataHubModelsModelsInfoEmitentsFields.

        Классификация в соответствии с System of National Accounts 2008  # noqa: E501

        :param sna2008: The sna2008 of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._sna2008 = sna2008

    @property
    def reg_code(self):
        """Gets the reg_code of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Государственный регистрационный номер  # noqa: E501

        :return: The reg_code of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._reg_code

    @reg_code.setter
    def reg_code(self, reg_code):
        """Sets the reg_code of this EfirDataHubModelsModelsInfoEmitentsFields.

        Государственный регистрационный номер  # noqa: E501

        :param reg_code: The reg_code of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._reg_code = reg_code

    @property
    def reg_date(self):
        """Gets the reg_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Дата регистрации (данные Интерфакс)  # noqa: E501

        :return: The reg_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._reg_date

    @reg_date.setter
    def reg_date(self, reg_date):
        """Sets the reg_date of this EfirDataHubModelsModelsInfoEmitentsFields.

        Дата регистрации (данные Интерфакс)  # noqa: E501

        :param reg_date: The reg_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: datetime
        """

        self._reg_date = reg_date

    @property
    def reg_org(self):
        """Gets the reg_org of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Регистрирующий орган (данные Интерфакс)  # noqa: E501

        :return: The reg_org of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._reg_org

    @reg_org.setter
    def reg_org(self, reg_org):
        """Sets the reg_org of this EfirDataHubModelsModelsInfoEmitentsFields.

        Регистрирующий орган (данные Интерфакс)  # noqa: E501

        :param reg_org: The reg_org of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._reg_org = reg_org

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Примечание  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsInfoEmitentsFields.

        Примечание  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def primary_reg_date(self):
        """Gets the primary_reg_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Первичная дата регистрации (данные Интерфакс)  # noqa: E501

        :return: The primary_reg_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._primary_reg_date

    @primary_reg_date.setter
    def primary_reg_date(self, primary_reg_date):
        """Sets the primary_reg_date of this EfirDataHubModelsModelsInfoEmitentsFields.

        Первичная дата регистрации (данные Интерфакс)  # noqa: E501

        :param primary_reg_date: The primary_reg_date of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: datetime
        """

        self._primary_reg_date = primary_reg_date

    @property
    def inn_fle(self):
        """Gets the inn_fle of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Индивидуальный номер налогоплательщика (ИНН) иностранного юридического лица в России  # noqa: E501

        :return: The inn_fle of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._inn_fle

    @inn_fle.setter
    def inn_fle(self, inn_fle):
        """Sets the inn_fle of this EfirDataHubModelsModelsInfoEmitentsFields.

        Индивидуальный номер налогоплательщика (ИНН) иностранного юридического лица в России  # noqa: E501

        :param inn_fle: The inn_fle of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._inn_fle = inn_fle

    @property
    def other_tin(self):
        """Gets the other_tin of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Дополнительный налоговый (или иной) код для компаний за рубежом  # noqa: E501

        :return: The other_tin of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._other_tin

    @other_tin.setter
    def other_tin(self, other_tin):
        """Sets the other_tin of this EfirDataHubModelsModelsInfoEmitentsFields.

        Дополнительный налоговый (или иной) код для компаний за рубежом  # noqa: E501

        :param other_tin: The other_tin of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._other_tin = other_tin

    @property
    def other_tin_name(self):
        """Gets the other_tin_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Наименование дополнительного кода для компаний за рубежом  # noqa: E501

        :return: The other_tin_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._other_tin_name

    @other_tin_name.setter
    def other_tin_name(self, other_tin_name):
        """Sets the other_tin_name of this EfirDataHubModelsModelsInfoEmitentsFields.

        Наименование дополнительного кода для компаний за рубежом  # noqa: E501

        :param other_tin_name: The other_tin_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._other_tin_name = other_tin_name

    @property
    def okfs_id(self):
        """Gets the okfs_id of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Код по ОКФС  # noqa: E501

        :return: The okfs_id of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._okfs_id

    @okfs_id.setter
    def okfs_id(self, okfs_id):
        """Sets the okfs_id of this EfirDataHubModelsModelsInfoEmitentsFields.

        Код по ОКФС  # noqa: E501

        :param okfs_id: The okfs_id of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._okfs_id = okfs_id

    @property
    def okfs_name(self):
        """Gets the okfs_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Наименование по ОКФС  # noqa: E501

        :return: The okfs_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: str
        """
        return self._okfs_name

    @okfs_name.setter
    def okfs_name(self, okfs_name):
        """Sets the okfs_name of this EfirDataHubModelsModelsInfoEmitentsFields.

        Наименование по ОКФС  # noqa: E501

        :param okfs_name: The okfs_name of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: str
        """

        self._okfs_name = okfs_name

    @property
    def is_branch(self):
        """Gets the is_branch of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Флаг филиала  # noqa: E501

        :return: The is_branch of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_branch

    @is_branch.setter
    def is_branch(self, is_branch):
        """Sets the is_branch of this EfirDataHubModelsModelsInfoEmitentsFields.

        Флаг филиала  # noqa: E501

        :param is_branch: The is_branch of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: bool
        """

        self._is_branch = is_branch

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsInfoEmitentsFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsInfoEmitentsFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsInfoEmitentsFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsInfoEmitentsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsInfoEmitentsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
