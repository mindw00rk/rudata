# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsSolvencyLicenseFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_id': 'str',
        'source_type': 'str',
        'counterpartyid': 'int',
        'license_type': 'str',
        'license_number': 'str',
        'from_date': 'datetime',
        'up_to_date': 'datetime',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'source_id': 'source_id',
        'source_type': 'source_type',
        'counterpartyid': 'counterpartyid',
        'license_type': 'license_type',
        'license_number': 'license_number',
        'from_date': 'from_date',
        'up_to_date': 'up_to_date',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, source_id=None, source_type=None, counterpartyid=None, license_type=None, license_number=None, from_date=None, up_to_date=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsSolvencyLicenseFields - a model defined in Swagger"""  # noqa: E501
        self._source_id = None
        self._source_type = None
        self._counterpartyid = None
        self._license_type = None
        self._license_number = None
        self._from_date = None
        self._up_to_date = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if source_id is not None:
            self.source_id = source_id
        if source_type is not None:
            self.source_type = source_type
        if counterpartyid is not None:
            self.counterpartyid = counterpartyid
        if license_type is not None:
            self.license_type = license_type
        if license_number is not None:
            self.license_number = license_number
        if from_date is not None:
            self.from_date = from_date
        if up_to_date is not None:
            self.up_to_date = up_to_date
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def source_id(self):
        """Gets the source_id of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501

        Входной идентификатор поиска  # noqa: E501

        :return: The source_id of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this EfirDataHubModelsModelsSolvencyLicenseFields.

        Входной идентификатор поиска  # noqa: E501

        :param source_id: The source_id of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501

        Тип входного идентификатора поиска:  \"COUNTERPARTYID\",  \"INN\",  \"OGRN\",  \"TIN\",  \"LEI_CODE\",  \"FININSTID\",  \"OKPO\",  \"SPARKID\"  \"REG_CODE\"  # noqa: E501

        :return: The source_type of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this EfirDataHubModelsModelsSolvencyLicenseFields.

        Тип входного идентификатора поиска:  \"COUNTERPARTYID\",  \"INN\",  \"OGRN\",  \"TIN\",  \"LEI_CODE\",  \"FININSTID\",  \"OKPO\",  \"SPARKID\"  \"REG_CODE\"  # noqa: E501

        :param source_type: The source_type of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def counterpartyid(self):
        """Gets the counterpartyid of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501

        Уникальный идентификатор контрагента  # noqa: E501

        :return: The counterpartyid of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :rtype: int
        """
        return self._counterpartyid

    @counterpartyid.setter
    def counterpartyid(self, counterpartyid):
        """Sets the counterpartyid of this EfirDataHubModelsModelsSolvencyLicenseFields.

        Уникальный идентификатор контрагента  # noqa: E501

        :param counterpartyid: The counterpartyid of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :type: int
        """

        self._counterpartyid = counterpartyid

    @property
    def license_type(self):
        """Gets the license_type of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501

        Наименование типа лицензии  # noqa: E501

        :return: The license_type of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this EfirDataHubModelsModelsSolvencyLicenseFields.

        Наименование типа лицензии  # noqa: E501

        :param license_type: The license_type of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :type: str
        """

        self._license_type = license_type

    @property
    def license_number(self):
        """Gets the license_number of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501

        Номер лицензии  # noqa: E501

        :return: The license_number of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :rtype: str
        """
        return self._license_number

    @license_number.setter
    def license_number(self, license_number):
        """Sets the license_number of this EfirDataHubModelsModelsSolvencyLicenseFields.

        Номер лицензии  # noqa: E501

        :param license_number: The license_number of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :type: str
        """

        self._license_number = license_number

    @property
    def from_date(self):
        """Gets the from_date of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501

        Дата начала действия лицензии  # noqa: E501

        :return: The from_date of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this EfirDataHubModelsModelsSolvencyLicenseFields.

        Дата начала действия лицензии  # noqa: E501

        :param from_date: The from_date of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    @property
    def up_to_date(self):
        """Gets the up_to_date of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501

        Дата окончания действий лицензии  # noqa: E501

        :return: The up_to_date of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :rtype: datetime
        """
        return self._up_to_date

    @up_to_date.setter
    def up_to_date(self, up_to_date):
        """Sets the up_to_date of this EfirDataHubModelsModelsSolvencyLicenseFields.

        Дата окончания действий лицензии  # noqa: E501

        :param up_to_date: The up_to_date of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :type: datetime
        """

        self._up_to_date = up_to_date

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsSolvencyLicenseFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsSolvencyLicenseFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsSolvencyLicenseFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsSolvencyLicenseFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsSolvencyLicenseFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
