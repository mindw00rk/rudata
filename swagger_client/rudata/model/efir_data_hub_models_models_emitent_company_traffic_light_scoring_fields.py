# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fininst_id': 'int',
        'code': 'str',
        'emitent_risk_index': 'int',
        'emitent_risk_index_ru': 'int',
        'tls_rate': 'float',
        'calc_date': 'datetime',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'fininst_id': 'fininstId',
        'code': 'code',
        'emitent_risk_index': 'emitent_risk_index',
        'emitent_risk_index_ru': 'emitent_risk_index_ru',
        'tls_rate': 'tls_rate',
        'calc_date': 'calc_date',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, fininst_id=None, code=None, emitent_risk_index=None, emitent_risk_index_ru=None, tls_rate=None, calc_date=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields - a model defined in Swagger"""  # noqa: E501
        self._fininst_id = None
        self._code = None
        self._emitent_risk_index = None
        self._emitent_risk_index_ru = None
        self._tls_rate = None
        self._calc_date = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if fininst_id is not None:
            self.fininst_id = fininst_id
        if code is not None:
            self.code = code
        if emitent_risk_index is not None:
            self.emitent_risk_index = emitent_risk_index
        if emitent_risk_index_ru is not None:
            self.emitent_risk_index_ru = emitent_risk_index_ru
        if tls_rate is not None:
            self.tls_rate = tls_rate
        if calc_date is not None:
            self.calc_date = calc_date
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def fininst_id(self):
        """Gets the fininst_id of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501

        Идентификатор эмитента  # noqa: E501

        :return: The fininst_id of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :rtype: int
        """
        return self._fininst_id

    @fininst_id.setter
    def fininst_id(self, fininst_id):
        """Sets the fininst_id of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.

        Идентификатор эмитента  # noqa: E501

        :param fininst_id: The fininst_id of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :type: int
        """

        self._fininst_id = fininst_id

    @property
    def code(self):
        """Gets the code of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501

        Код эмитента, поданный на вход в поле codes  # noqa: E501

        :return: The code of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.

        Код эмитента, поданный на вход в поле codes  # noqa: E501

        :param code: The code of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def emitent_risk_index(self):
        """Gets the emitent_risk_index of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501

        Численное значение агрегата по шкале L26  # noqa: E501

        :return: The emitent_risk_index of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :rtype: int
        """
        return self._emitent_risk_index

    @emitent_risk_index.setter
    def emitent_risk_index(self, emitent_risk_index):
        """Sets the emitent_risk_index of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.

        Численное значение агрегата по шкале L26  # noqa: E501

        :param emitent_risk_index: The emitent_risk_index of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :type: int
        """

        self._emitent_risk_index = emitent_risk_index

    @property
    def emitent_risk_index_ru(self):
        """Gets the emitent_risk_index_ru of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501

        Численное значение агрегата в российской шкале L26  # noqa: E501

        :return: The emitent_risk_index_ru of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :rtype: int
        """
        return self._emitent_risk_index_ru

    @emitent_risk_index_ru.setter
    def emitent_risk_index_ru(self, emitent_risk_index_ru):
        """Sets the emitent_risk_index_ru of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.

        Численное значение агрегата в российской шкале L26  # noqa: E501

        :param emitent_risk_index_ru: The emitent_risk_index_ru of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :type: int
        """

        self._emitent_risk_index_ru = emitent_risk_index_ru

    @property
    def tls_rate(self):
        """Gets the tls_rate of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501

        Уровень кредитного риска по шкале \"светофора\"  # noqa: E501

        :return: The tls_rate of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :rtype: float
        """
        return self._tls_rate

    @tls_rate.setter
    def tls_rate(self, tls_rate):
        """Sets the tls_rate of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.

        Уровень кредитного риска по шкале \"светофора\"  # noqa: E501

        :param tls_rate: The tls_rate of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :type: float
        """

        self._tls_rate = tls_rate

    @property
    def calc_date(self):
        """Gets the calc_date of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501

        Дата формирования значения  # noqa: E501

        :return: The calc_date of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :rtype: datetime
        """
        return self._calc_date

    @calc_date.setter
    def calc_date(self, calc_date):
        """Sets the calc_date of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.

        Дата формирования значения  # noqa: E501

        :param calc_date: The calc_date of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :type: datetime
        """

        self._calc_date = calc_date

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsEmitentCompanyTrafficLightScoringFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
