# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsInfoHolidayTypesFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shortname_rus': 'str',
        'shortname_eng': 'str',
        'fullname_rus': 'str',
        'fullname_eng': 'str',
        'id_country': 'int',
        'is_active': 'bool',
        'update_date': 'datetime',
        'id_event_type': 'int'
    }

    attribute_map = {
        'shortname_rus': 'shortname_rus',
        'shortname_eng': 'shortname_eng',
        'fullname_rus': 'fullname_rus',
        'fullname_eng': 'fullname_eng',
        'id_country': 'id_country',
        'is_active': 'is_active',
        'update_date': 'update_date',
        'id_event_type': 'id_event_type'
    }

    def __init__(self, shortname_rus=None, shortname_eng=None, fullname_rus=None, fullname_eng=None, id_country=None, is_active=None, update_date=None, id_event_type=None):  # noqa: E501
        """EfirDataHubModelsModelsInfoHolidayTypesFields - a model defined in Swagger"""  # noqa: E501
        self._shortname_rus = None
        self._shortname_eng = None
        self._fullname_rus = None
        self._fullname_eng = None
        self._id_country = None
        self._is_active = None
        self._update_date = None
        self._id_event_type = None
        self.discriminator = None
        if shortname_rus is not None:
            self.shortname_rus = shortname_rus
        if shortname_eng is not None:
            self.shortname_eng = shortname_eng
        if fullname_rus is not None:
            self.fullname_rus = fullname_rus
        if fullname_eng is not None:
            self.fullname_eng = fullname_eng
        if id_country is not None:
            self.id_country = id_country
        if is_active is not None:
            self.is_active = is_active
        if update_date is not None:
            self.update_date = update_date
        if id_event_type is not None:
            self.id_event_type = id_event_type

    @property
    def shortname_rus(self):
        """Gets the shortname_rus of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501

        Краткое наименования события – рус  # noqa: E501

        :return: The shortname_rus of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_rus

    @shortname_rus.setter
    def shortname_rus(self, shortname_rus):
        """Sets the shortname_rus of this EfirDataHubModelsModelsInfoHolidayTypesFields.

        Краткое наименования события – рус  # noqa: E501

        :param shortname_rus: The shortname_rus of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :type: str
        """

        self._shortname_rus = shortname_rus

    @property
    def shortname_eng(self):
        """Gets the shortname_eng of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501

        Краткое наименование события – англ  # noqa: E501

        :return: The shortname_eng of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_eng

    @shortname_eng.setter
    def shortname_eng(self, shortname_eng):
        """Sets the shortname_eng of this EfirDataHubModelsModelsInfoHolidayTypesFields.

        Краткое наименование события – англ  # noqa: E501

        :param shortname_eng: The shortname_eng of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :type: str
        """

        self._shortname_eng = shortname_eng

    @property
    def fullname_rus(self):
        """Gets the fullname_rus of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501

        Полное наименование события – рус  # noqa: E501

        :return: The fullname_rus of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_rus

    @fullname_rus.setter
    def fullname_rus(self, fullname_rus):
        """Sets the fullname_rus of this EfirDataHubModelsModelsInfoHolidayTypesFields.

        Полное наименование события – рус  # noqa: E501

        :param fullname_rus: The fullname_rus of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :type: str
        """

        self._fullname_rus = fullname_rus

    @property
    def fullname_eng(self):
        """Gets the fullname_eng of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501

        Полное наименование события – англ  # noqa: E501

        :return: The fullname_eng of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_eng

    @fullname_eng.setter
    def fullname_eng(self, fullname_eng):
        """Sets the fullname_eng of this EfirDataHubModelsModelsInfoHolidayTypesFields.

        Полное наименование события – англ  # noqa: E501

        :param fullname_eng: The fullname_eng of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :type: str
        """

        self._fullname_eng = fullname_eng

    @property
    def id_country(self):
        """Gets the id_country of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501

        Идентификатор страны, для которой определено событие  # noqa: E501

        :return: The id_country of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :rtype: int
        """
        return self._id_country

    @id_country.setter
    def id_country(self, id_country):
        """Sets the id_country of this EfirDataHubModelsModelsInfoHolidayTypesFields.

        Идентификатор страны, для которой определено событие  # noqa: E501

        :param id_country: The id_country of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :type: int
        """

        self._id_country = id_country

    @property
    def is_active(self):
        """Gets the is_active of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501

        Признак актуальности события  # noqa: E501

        :return: The is_active of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this EfirDataHubModelsModelsInfoHolidayTypesFields.

        Признак актуальности события  # noqa: E501

        :param is_active: The is_active of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501

        Дата последнег обновления описания события  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsInfoHolidayTypesFields.

        Дата последнег обновления описания события  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def id_event_type(self):
        """Gets the id_event_type of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501

        Идентификатор неторгового дня  # noqa: E501

        :return: The id_event_type of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :rtype: int
        """
        return self._id_event_type

    @id_event_type.setter
    def id_event_type(self, id_event_type):
        """Sets the id_event_type of this EfirDataHubModelsModelsInfoHolidayTypesFields.

        Идентификатор неторгового дня  # noqa: E501

        :param id_event_type: The id_event_type of this EfirDataHubModelsModelsInfoHolidayTypesFields.  # noqa: E501
        :type: int
        """

        self._id_event_type = id_event_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsInfoHolidayTypesFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsInfoHolidayTypesFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
