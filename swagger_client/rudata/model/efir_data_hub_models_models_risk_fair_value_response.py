# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRiskFairValueResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'float',
        'perc_value': 'float',
        'error': 'str',
        'warning': 'str',
        'accrued_interest': 'float',
        'perc_accrued_interest': 'float',
        'residual_face_value': 'float',
        'perc_residual_face_value': 'float'
    }

    attribute_map = {
        'value': 'value',
        'perc_value': 'percValue',
        'error': 'error',
        'warning': 'warning',
        'accrued_interest': 'accruedInterest',
        'perc_accrued_interest': 'percAccruedInterest',
        'residual_face_value': 'residualFaceValue',
        'perc_residual_face_value': 'percResidualFaceValue'
    }

    def __init__(self, value=None, perc_value=None, error=None, warning=None, accrued_interest=None, perc_accrued_interest=None, residual_face_value=None, perc_residual_face_value=None):  # noqa: E501
        """EfirDataHubModelsModelsRiskFairValueResponse - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._perc_value = None
        self._error = None
        self._warning = None
        self._accrued_interest = None
        self._perc_accrued_interest = None
        self._residual_face_value = None
        self._perc_residual_face_value = None
        self.discriminator = None
        if value is not None:
            self.value = value
        if perc_value is not None:
            self.perc_value = perc_value
        if error is not None:
            self.error = error
        if warning is not None:
            self.warning = warning
        if accrued_interest is not None:
            self.accrued_interest = accrued_interest
        if perc_accrued_interest is not None:
            self.perc_accrued_interest = perc_accrued_interest
        if residual_face_value is not None:
            self.residual_face_value = residual_face_value
        if perc_residual_face_value is not None:
            self.perc_residual_face_value = perc_residual_face_value

    @property
    def value(self):
        """Gets the value of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501

        Цена в рублях  # noqa: E501

        :return: The value of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EfirDataHubModelsModelsRiskFairValueResponse.

        Цена в рублях  # noqa: E501

        :param value: The value of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def perc_value(self):
        """Gets the perc_value of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501

        Цена в процентах от текущего номинала  # noqa: E501

        :return: The perc_value of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :rtype: float
        """
        return self._perc_value

    @perc_value.setter
    def perc_value(self, perc_value):
        """Sets the perc_value of this EfirDataHubModelsModelsRiskFairValueResponse.

        Цена в процентах от текущего номинала  # noqa: E501

        :param perc_value: The perc_value of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :type: float
        """

        self._perc_value = perc_value

    @property
    def error(self):
        """Gets the error of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501

        Текст ошибки, если она есть  # noqa: E501

        :return: The error of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EfirDataHubModelsModelsRiskFairValueResponse.

        Текст ошибки, если она есть  # noqa: E501

        :param error: The error of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def warning(self):
        """Gets the warning of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501

        Текст предупреждения, если оно есть  # noqa: E501

        :return: The warning of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this EfirDataHubModelsModelsRiskFairValueResponse.

        Текст предупреждения, если оно есть  # noqa: E501

        :param warning: The warning of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :type: str
        """

        self._warning = warning

    @property
    def accrued_interest(self):
        """Gets the accrued_interest of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501

        НКД в валюте номинала  # noqa: E501

        :return: The accrued_interest of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :rtype: float
        """
        return self._accrued_interest

    @accrued_interest.setter
    def accrued_interest(self, accrued_interest):
        """Sets the accrued_interest of this EfirDataHubModelsModelsRiskFairValueResponse.

        НКД в валюте номинала  # noqa: E501

        :param accrued_interest: The accrued_interest of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :type: float
        """

        self._accrued_interest = accrued_interest

    @property
    def perc_accrued_interest(self):
        """Gets the perc_accrued_interest of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501

        НКД в процентах от текущего номинала  # noqa: E501

        :return: The perc_accrued_interest of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :rtype: float
        """
        return self._perc_accrued_interest

    @perc_accrued_interest.setter
    def perc_accrued_interest(self, perc_accrued_interest):
        """Sets the perc_accrued_interest of this EfirDataHubModelsModelsRiskFairValueResponse.

        НКД в процентах от текущего номинала  # noqa: E501

        :param perc_accrued_interest: The perc_accrued_interest of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :type: float
        """

        self._perc_accrued_interest = perc_accrued_interest

    @property
    def residual_face_value(self):
        """Gets the residual_face_value of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501

        Остаточный номинал в валюте номинала  # noqa: E501

        :return: The residual_face_value of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :rtype: float
        """
        return self._residual_face_value

    @residual_face_value.setter
    def residual_face_value(self, residual_face_value):
        """Sets the residual_face_value of this EfirDataHubModelsModelsRiskFairValueResponse.

        Остаточный номинал в валюте номинала  # noqa: E501

        :param residual_face_value: The residual_face_value of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :type: float
        """

        self._residual_face_value = residual_face_value

    @property
    def perc_residual_face_value(self):
        """Gets the perc_residual_face_value of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501

        Остаточный номинал в процентах от начального номинала  # noqa: E501

        :return: The perc_residual_face_value of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :rtype: float
        """
        return self._perc_residual_face_value

    @perc_residual_face_value.setter
    def perc_residual_face_value(self, perc_residual_face_value):
        """Sets the perc_residual_face_value of this EfirDataHubModelsModelsRiskFairValueResponse.

        Остаточный номинал в процентах от начального номинала  # noqa: E501

        :param perc_residual_face_value: The perc_residual_face_value of this EfirDataHubModelsModelsRiskFairValueResponse.  # noqa: E501
        :type: float
        """

        self._perc_residual_face_value = perc_residual_face_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRiskFairValueResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRiskFairValueResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
