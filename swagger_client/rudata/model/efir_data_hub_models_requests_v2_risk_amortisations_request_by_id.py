# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2RiskAmortisationsRequestById(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintool_id': 'int',
        'current_only': 'bool',
        'offer_enable': 'bool',
        '_date': 'datetime',
        'group_by_periods': 'bool',
        'edition': 'str',
        'parts_as_pct': 'bool'
    }

    attribute_map = {
        'fintool_id': 'fintoolId',
        'current_only': 'currentOnly',
        'offer_enable': 'offerEnable',
        '_date': 'date',
        'group_by_periods': 'groupByPeriods',
        'edition': 'edition',
        'parts_as_pct': 'partsAsPct'
    }

    def __init__(self, fintool_id=None, current_only=None, offer_enable=None, _date=None, group_by_periods=None, edition=None, parts_as_pct=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2RiskAmortisationsRequestById - a model defined in Swagger"""  # noqa: E501
        self._fintool_id = None
        self._current_only = None
        self._offer_enable = None
        self.__date = None
        self._group_by_periods = None
        self._edition = None
        self._parts_as_pct = None
        self.discriminator = None
        self.fintool_id = fintool_id
        if current_only is not None:
            self.current_only = current_only
        if offer_enable is not None:
            self.offer_enable = offer_enable
        if _date is not None:
            self._date = _date
        if group_by_periods is not None:
            self.group_by_periods = group_by_periods
        if edition is not None:
            self.edition = edition
        if parts_as_pct is not None:
            self.parts_as_pct = parts_as_pct

    @property
    def fintool_id(self):
        """Gets the fintool_id of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501

        fintoolId (обязательный)  # noqa: E501

        :return: The fintool_id of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :rtype: int
        """
        return self._fintool_id

    @fintool_id.setter
    def fintool_id(self, fintool_id):
        """Sets the fintool_id of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.

        fintoolId (обязательный)  # noqa: E501

        :param fintool_id: The fintool_id of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :type: int
        """
        if fintool_id is None:
            raise ValueError("Invalid value for `fintool_id`, must not be `None`")  # noqa: E501

        self._fintool_id = fintool_id

    @property
    def current_only(self):
        """Gets the current_only of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501


        :return: The current_only of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :rtype: bool
        """
        return self._current_only

    @current_only.setter
    def current_only(self, current_only):
        """Sets the current_only of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.


        :param current_only: The current_only of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :type: bool
        """

        self._current_only = current_only

    @property
    def offer_enable(self):
        """Gets the offer_enable of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501


        :return: The offer_enable of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :rtype: bool
        """
        return self._offer_enable

    @offer_enable.setter
    def offer_enable(self, offer_enable):
        """Sets the offer_enable of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.


        :param offer_enable: The offer_enable of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :type: bool
        """

        self._offer_enable = offer_enable

    @property
    def _date(self):
        """Gets the _date of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501


        :return: The _date of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.


        :param _date: The _date of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def group_by_periods(self):
        """Gets the group_by_periods of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501


        :return: The group_by_periods of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :rtype: bool
        """
        return self._group_by_periods

    @group_by_periods.setter
    def group_by_periods(self, group_by_periods):
        """Sets the group_by_periods of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.


        :param group_by_periods: The group_by_periods of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :type: bool
        """

        self._group_by_periods = group_by_periods

    @property
    def edition(self):
        """Gets the edition of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501


        :return: The edition of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.


        :param edition: The edition of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :type: str
        """

        self._edition = edition

    @property
    def parts_as_pct(self):
        """Gets the parts_as_pct of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501

        Значения погашаемых долей: true - в %, false - в долях (% * 0.01)  # noqa: E501

        :return: The parts_as_pct of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :rtype: bool
        """
        return self._parts_as_pct

    @parts_as_pct.setter
    def parts_as_pct(self, parts_as_pct):
        """Sets the parts_as_pct of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.

        Значения погашаемых долей: true - в %, false - в долях (% * 0.01)  # noqa: E501

        :param parts_as_pct: The parts_as_pct of this EfirDataHubModelsRequestsV2RiskAmortisationsRequestById.  # noqa: E501
        :type: bool
        """

        self._parts_as_pct = parts_as_pct

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2RiskAmortisationsRequestById, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2RiskAmortisationsRequestById):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
