# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'isin': 'str',
        'date_from': 'datetime',
        'date_to': 'datetime',
        'sort': 'int',
        'flags': 'int',
        'bond_ratings': 'list[int]',
        'company_ratings': 'list[int]'
    }

    attribute_map = {
        'isin': 'isin',
        'date_from': 'dateFrom',
        'date_to': 'dateTo',
        'sort': 'sort',
        'flags': 'flags',
        'bond_ratings': 'bondRatings',
        'company_ratings': 'companyRatings'
    }

    def __init__(self, isin=None, date_from=None, date_to=None, sort=None, flags=None, bond_ratings=None, company_ratings=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest - a model defined in Swagger"""  # noqa: E501
        self._isin = None
        self._date_from = None
        self._date_to = None
        self._sort = None
        self._flags = None
        self._bond_ratings = None
        self._company_ratings = None
        self.discriminator = None
        if isin is not None:
            self.isin = isin
        self.date_from = date_from
        self.date_to = date_to
        if sort is not None:
            self.sort = sort
        if flags is not None:
            self.flags = flags
        if bond_ratings is not None:
            self.bond_ratings = bond_ratings
        if company_ratings is not None:
            self.company_ratings = company_ratings

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501

        ISIN инструмента или регистрационный номер (reg_code).   Если не указан, то возвращаются рейтинги, присвоенные в интервале с dateFrom по dateTo, но не более чем за неделю (с dateTo-6 по dateTo).  # noqa: E501

        :return: The isin of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.

        ISIN инструмента или регистрационный номер (reg_code).   Если не указан, то возвращаются рейтинги, присвоенные в интервале с dateFrom по dateTo, но не более чем за неделю (с dateTo-6 по dateTo).  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def date_from(self):
        """Gets the date_from of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501

        Дата актуальности рейтингов (обязательный)  # noqa: E501

        :return: The date_from of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.

        Дата актуальности рейтингов (обязательный)  # noqa: E501

        :param date_from: The date_from of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :type: datetime
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")  # noqa: E501

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501

        Дата актуальности рейтингов (обязательный)  # noqa: E501

        :return: The date_to of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.

        Дата актуальности рейтингов (обязательный)  # noqa: E501

        :param date_to: The date_to of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :type: datetime
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")  # noqa: E501

        self._date_to = date_to

    @property
    def sort(self):
        """Gets the sort of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501

        Тип сортировки  # noqa: E501

        :return: The sort of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.

        Тип сортировки  # noqa: E501

        :param sort: The sort of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :type: int
        """

        self._sort = sort

    @property
    def flags(self):
        """Gets the flags of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501

        Опциональные флаги рейтингов (1 – эмитент, 2 – заемщик, 3 – эмитент или заемщик, 4 - гарант или поручитель, 5 - эмитент или гарант или поручитель, 6 - заемщик или гарант или поручитель, 7 - все)  # noqa: E501

        :return: The flags of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.

        Опциональные флаги рейтингов (1 – эмитент, 2 – заемщик, 3 – эмитент или заемщик, 4 - гарант или поручитель, 5 - эмитент или гарант или поручитель, 6 - заемщик или гарант или поручитель, 7 - все)  # noqa: E501

        :param flags: The flags of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :type: int
        """

        self._flags = flags

    @property
    def bond_ratings(self):
        """Gets the bond_ratings of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501

        Список идентификаторов рейтингов бумаг(необязательный).  # noqa: E501

        :return: The bond_ratings of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._bond_ratings

    @bond_ratings.setter
    def bond_ratings(self, bond_ratings):
        """Sets the bond_ratings of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.

        Список идентификаторов рейтингов бумаг(необязательный).  # noqa: E501

        :param bond_ratings: The bond_ratings of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :type: list[int]
        """

        self._bond_ratings = bond_ratings

    @property
    def company_ratings(self):
        """Gets the company_ratings of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501

        Список идентификаторов рейтингов компаний (необязательный).  # noqa: E501

        :return: The company_ratings of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._company_ratings

    @company_ratings.setter
    def company_ratings(self, company_ratings):
        """Sets the company_ratings of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.

        Список идентификаторов рейтингов компаний (необязательный).  # noqa: E501

        :param company_ratings: The company_ratings of this EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest.  # noqa: E501
        :type: list[int]
        """

        self._company_ratings = company_ratings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2RatingSecurityRatingsHistRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
