# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'change': 'float',
        'highbid': 'float',
        'lastdeldate': 'datetime',
        'lowoffer': 'float',
        'marketnumtrades': 'int',
        'marketvalue': 'float',
        'marketvolume': 'int',
        'negchange': 'float',
        'negclose': 'float',
        'neghigh': 'float',
        'neglow': 'float',
        'negnumtrades': 'int',
        'negopen': 'float',
        'negvalue': 'float',
        'negvolume': 'int',
        'numtrades': 'int',
        'openposition': 'int',
        'openpositionvalue': 'float',
        'prevprice': 'float',
        'qty': 'int',
        'settleprice': 'float',
        'value': 'float',
        'volat': 'float',
        'volume': 'int',
        'waprice': 'float',
        'closetime': 'datetime',
        'currencyid': 'str',
        'exectype': 'str',
        'fee': 'float',
        'im': 'float',
        'imnp': 'float',
        'imp': 'float',
        'imstepprice': 'float',
        'marginstyle': 'float',
        'minstep': 'float',
        'optiontype': 'str',
        'settlepriceday': 'float',
        'stepprice': 'float',
        'steppricecurrency': 'float',
        'strike': 'float',
        'underlyingasset': 'str',
        'volatday': 'float',
        'engine': 'str',
        'market': 'str',
        'boardid': 'str',
        'decimals': 'int',
        'high': 'float',
        'low': 'float',
        'open': 'float',
        'close': 'float',
        'secid': 'str',
        'shortname': 'str',
        'tradedate': 'datetime',
        'tradingsession': 'int',
        'counter': 'int'
    }

    attribute_map = {
        'change': 'change',
        'highbid': 'highbid',
        'lastdeldate': 'lastdeldate',
        'lowoffer': 'lowoffer',
        'marketnumtrades': 'marketnumtrades',
        'marketvalue': 'marketvalue',
        'marketvolume': 'marketvolume',
        'negchange': 'negchange',
        'negclose': 'negclose',
        'neghigh': 'neghigh',
        'neglow': 'neglow',
        'negnumtrades': 'negnumtrades',
        'negopen': 'negopen',
        'negvalue': 'negvalue',
        'negvolume': 'negvolume',
        'numtrades': 'numtrades',
        'openposition': 'openposition',
        'openpositionvalue': 'openpositionvalue',
        'prevprice': 'prevprice',
        'qty': 'qty',
        'settleprice': 'settleprice',
        'value': 'value',
        'volat': 'volat',
        'volume': 'volume',
        'waprice': 'waprice',
        'closetime': 'closetime',
        'currencyid': 'currencyid',
        'exectype': 'exectype',
        'fee': 'fee',
        'im': 'im',
        'imnp': 'imnp',
        'imp': 'imp',
        'imstepprice': 'imstepprice',
        'marginstyle': 'marginstyle',
        'minstep': 'minstep',
        'optiontype': 'optiontype',
        'settlepriceday': 'settlepriceday',
        'stepprice': 'stepprice',
        'steppricecurrency': 'steppricecurrency',
        'strike': 'strike',
        'underlyingasset': 'underlyingasset',
        'volatday': 'volatday',
        'engine': 'engine',
        'market': 'market',
        'boardid': 'boardid',
        'decimals': 'decimals',
        'high': 'high',
        'low': 'low',
        'open': 'open',
        'close': 'close',
        'secid': 'secid',
        'shortname': 'shortname',
        'tradedate': 'tradedate',
        'tradingsession': 'tradingsession',
        'counter': 'counter'
    }

    def __init__(self, change=None, highbid=None, lastdeldate=None, lowoffer=None, marketnumtrades=None, marketvalue=None, marketvolume=None, negchange=None, negclose=None, neghigh=None, neglow=None, negnumtrades=None, negopen=None, negvalue=None, negvolume=None, numtrades=None, openposition=None, openpositionvalue=None, prevprice=None, qty=None, settleprice=None, value=None, volat=None, volume=None, waprice=None, closetime=None, currencyid=None, exectype=None, fee=None, im=None, imnp=None, imp=None, imstepprice=None, marginstyle=None, minstep=None, optiontype=None, settlepriceday=None, stepprice=None, steppricecurrency=None, strike=None, underlyingasset=None, volatday=None, engine=None, market=None, boardid=None, decimals=None, high=None, low=None, open=None, close=None, secid=None, shortname=None, tradedate=None, tradingsession=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields - a model defined in Swagger"""  # noqa: E501
        self._change = None
        self._highbid = None
        self._lastdeldate = None
        self._lowoffer = None
        self._marketnumtrades = None
        self._marketvalue = None
        self._marketvolume = None
        self._negchange = None
        self._negclose = None
        self._neghigh = None
        self._neglow = None
        self._negnumtrades = None
        self._negopen = None
        self._negvalue = None
        self._negvolume = None
        self._numtrades = None
        self._openposition = None
        self._openpositionvalue = None
        self._prevprice = None
        self._qty = None
        self._settleprice = None
        self._value = None
        self._volat = None
        self._volume = None
        self._waprice = None
        self._closetime = None
        self._currencyid = None
        self._exectype = None
        self._fee = None
        self._im = None
        self._imnp = None
        self._imp = None
        self._imstepprice = None
        self._marginstyle = None
        self._minstep = None
        self._optiontype = None
        self._settlepriceday = None
        self._stepprice = None
        self._steppricecurrency = None
        self._strike = None
        self._underlyingasset = None
        self._volatday = None
        self._engine = None
        self._market = None
        self._boardid = None
        self._decimals = None
        self._high = None
        self._low = None
        self._open = None
        self._close = None
        self._secid = None
        self._shortname = None
        self._tradedate = None
        self._tradingsession = None
        self._counter = None
        self.discriminator = None
        if change is not None:
            self.change = change
        if highbid is not None:
            self.highbid = highbid
        if lastdeldate is not None:
            self.lastdeldate = lastdeldate
        if lowoffer is not None:
            self.lowoffer = lowoffer
        if marketnumtrades is not None:
            self.marketnumtrades = marketnumtrades
        if marketvalue is not None:
            self.marketvalue = marketvalue
        if marketvolume is not None:
            self.marketvolume = marketvolume
        if negchange is not None:
            self.negchange = negchange
        if negclose is not None:
            self.negclose = negclose
        if neghigh is not None:
            self.neghigh = neghigh
        if neglow is not None:
            self.neglow = neglow
        if negnumtrades is not None:
            self.negnumtrades = negnumtrades
        if negopen is not None:
            self.negopen = negopen
        if negvalue is not None:
            self.negvalue = negvalue
        if negvolume is not None:
            self.negvolume = negvolume
        if numtrades is not None:
            self.numtrades = numtrades
        if openposition is not None:
            self.openposition = openposition
        if openpositionvalue is not None:
            self.openpositionvalue = openpositionvalue
        if prevprice is not None:
            self.prevprice = prevprice
        if qty is not None:
            self.qty = qty
        if settleprice is not None:
            self.settleprice = settleprice
        if value is not None:
            self.value = value
        if volat is not None:
            self.volat = volat
        if volume is not None:
            self.volume = volume
        if waprice is not None:
            self.waprice = waprice
        if closetime is not None:
            self.closetime = closetime
        if currencyid is not None:
            self.currencyid = currencyid
        if exectype is not None:
            self.exectype = exectype
        if fee is not None:
            self.fee = fee
        if im is not None:
            self.im = im
        if imnp is not None:
            self.imnp = imnp
        if imp is not None:
            self.imp = imp
        if imstepprice is not None:
            self.imstepprice = imstepprice
        if marginstyle is not None:
            self.marginstyle = marginstyle
        if minstep is not None:
            self.minstep = minstep
        if optiontype is not None:
            self.optiontype = optiontype
        if settlepriceday is not None:
            self.settlepriceday = settlepriceday
        if stepprice is not None:
            self.stepprice = stepprice
        if steppricecurrency is not None:
            self.steppricecurrency = steppricecurrency
        if strike is not None:
            self.strike = strike
        if underlyingasset is not None:
            self.underlyingasset = underlyingasset
        if volatday is not None:
            self.volatday = volatday
        if engine is not None:
            self.engine = engine
        if market is not None:
            self.market = market
        if boardid is not None:
            self.boardid = boardid
        if decimals is not None:
            self.decimals = decimals
        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        if open is not None:
            self.open = open
        if close is not None:
            self.close = close
        if secid is not None:
            self.secid = secid
        if shortname is not None:
            self.shortname = shortname
        if tradedate is not None:
            self.tradedate = tradedate
        if tradingsession is not None:
            self.tradingsession = tradingsession
        if counter is not None:
            self.counter = counter

    @property
    def change(self):
        """Gets the change of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Изменение цены последней сделки по отношению к цене последней сделки предыдущего торгового, %  # noqa: E501

        :return: The change of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Изменение цены последней сделки по отношению к цене последней сделки предыдущего торгового, %  # noqa: E501

        :param change: The change of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._change = change

    @property
    def highbid(self):
        """Gets the highbid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Наибольшая цена спроса (максимальная котировка на покупку), рублей  # noqa: E501

        :return: The highbid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._highbid

    @highbid.setter
    def highbid(self, highbid):
        """Sets the highbid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Наибольшая цена спроса (максимальная котировка на покупку), рублей  # noqa: E501

        :param highbid: The highbid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._highbid = highbid

    @property
    def lastdeldate(self):
        """Gets the lastdeldate of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Последний день исполнения контракта  # noqa: E501

        :return: The lastdeldate of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._lastdeldate

    @lastdeldate.setter
    def lastdeldate(self, lastdeldate):
        """Sets the lastdeldate of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Последний день исполнения контракта  # noqa: E501

        :param lastdeldate: The lastdeldate of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: datetime
        """

        self._lastdeldate = lastdeldate

    @property
    def lowoffer(self):
        """Gets the lowoffer of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Наименьшая цена предложения (минимальная котировка на продажу), рублей  # noqa: E501

        :return: The lowoffer of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._lowoffer

    @lowoffer.setter
    def lowoffer(self, lowoffer):
        """Sets the lowoffer of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Наименьшая цена предложения (минимальная котировка на продажу), рублей  # noqa: E501

        :param lowoffer: The lowoffer of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._lowoffer = lowoffer

    @property
    def marketnumtrades(self):
        """Gets the marketnumtrades of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Рыночных сделок  # noqa: E501

        :return: The marketnumtrades of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._marketnumtrades

    @marketnumtrades.setter
    def marketnumtrades(self, marketnumtrades):
        """Sets the marketnumtrades of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Рыночных сделок  # noqa: E501

        :param marketnumtrades: The marketnumtrades of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: int
        """

        self._marketnumtrades = marketnumtrades

    @property
    def marketvalue(self):
        """Gets the marketvalue of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Общий объем рыночных сделок, руб.  # noqa: E501

        :return: The marketvalue of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._marketvalue

    @marketvalue.setter
    def marketvalue(self, marketvalue):
        """Sets the marketvalue of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Общий объем рыночных сделок, руб.  # noqa: E501

        :param marketvalue: The marketvalue of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._marketvalue = marketvalue

    @property
    def marketvolume(self):
        """Gets the marketvolume of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Общее количество контрактов, являющихся предметом рыночных сделок  # noqa: E501

        :return: The marketvolume of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._marketvolume

    @marketvolume.setter
    def marketvolume(self, marketvolume):
        """Sets the marketvolume of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Общее количество контрактов, являющихся предметом рыночных сделок  # noqa: E501

        :param marketvolume: The marketvolume of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: int
        """

        self._marketvolume = marketvolume

    @property
    def negchange(self):
        """Gets the negchange of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Изменение цены последней адресной сделки по отношению к цене последней сделки предыдущего торгового, %  # noqa: E501

        :return: The negchange of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._negchange

    @negchange.setter
    def negchange(self, negchange):
        """Sets the negchange of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Изменение цены последней адресной сделки по отношению к цене последней сделки предыдущего торгового, %  # noqa: E501

        :param negchange: The negchange of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._negchange = negchange

    @property
    def negclose(self):
        """Gets the negclose of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Цена последней адресной сделки  # noqa: E501

        :return: The negclose of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._negclose

    @negclose.setter
    def negclose(self, negclose):
        """Sets the negclose of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Цена последней адресной сделки  # noqa: E501

        :param negclose: The negclose of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._negclose = negclose

    @property
    def neghigh(self):
        """Gets the neghigh of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Максимальная цена адресной сделки  # noqa: E501

        :return: The neghigh of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._neghigh

    @neghigh.setter
    def neghigh(self, neghigh):
        """Sets the neghigh of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Максимальная цена адресной сделки  # noqa: E501

        :param neghigh: The neghigh of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._neghigh = neghigh

    @property
    def neglow(self):
        """Gets the neglow of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Минимальная цена адресной сделки  # noqa: E501

        :return: The neglow of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._neglow

    @neglow.setter
    def neglow(self, neglow):
        """Sets the neglow of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Минимальная цена адресной сделки  # noqa: E501

        :param neglow: The neglow of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._neglow = neglow

    @property
    def negnumtrades(self):
        """Gets the negnumtrades of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Адресных сделок  # noqa: E501

        :return: The negnumtrades of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._negnumtrades

    @negnumtrades.setter
    def negnumtrades(self, negnumtrades):
        """Sets the negnumtrades of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Адресных сделок  # noqa: E501

        :param negnumtrades: The negnumtrades of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: int
        """

        self._negnumtrades = negnumtrades

    @property
    def negopen(self):
        """Gets the negopen of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Цена первой адресной сделки  # noqa: E501

        :return: The negopen of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._negopen

    @negopen.setter
    def negopen(self, negopen):
        """Sets the negopen of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Цена первой адресной сделки  # noqa: E501

        :param negopen: The negopen of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._negopen = negopen

    @property
    def negvalue(self):
        """Gets the negvalue of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Объем внебиржевых сделок  # noqa: E501

        :return: The negvalue of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._negvalue

    @negvalue.setter
    def negvalue(self, negvalue):
        """Sets the negvalue of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Объем внебиржевых сделок  # noqa: E501

        :param negvalue: The negvalue of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._negvalue = negvalue

    @property
    def negvolume(self):
        """Gets the negvolume of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Объем адресных сделок, контрактов  # noqa: E501

        :return: The negvolume of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._negvolume

    @negvolume.setter
    def negvolume(self, negvolume):
        """Sets the negvolume of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Объем адресных сделок, контрактов  # noqa: E501

        :param negvolume: The negvolume of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: int
        """

        self._negvolume = negvolume

    @property
    def numtrades(self):
        """Gets the numtrades of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Количество сделок  # noqa: E501

        :return: The numtrades of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._numtrades

    @numtrades.setter
    def numtrades(self, numtrades):
        """Sets the numtrades of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Количество сделок  # noqa: E501

        :param numtrades: The numtrades of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: int
        """

        self._numtrades = numtrades

    @property
    def openposition(self):
        """Gets the openposition of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Открытые позиции, контр.  # noqa: E501

        :return: The openposition of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._openposition

    @openposition.setter
    def openposition(self, openposition):
        """Sets the openposition of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Открытые позиции, контр.  # noqa: E501

        :param openposition: The openposition of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: int
        """

        self._openposition = openposition

    @property
    def openpositionvalue(self):
        """Gets the openpositionvalue of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Объем открытых позиций, руб.  # noqa: E501

        :return: The openpositionvalue of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._openpositionvalue

    @openpositionvalue.setter
    def openpositionvalue(self, openpositionvalue):
        """Sets the openpositionvalue of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Объем открытых позиций, руб.  # noqa: E501

        :param openpositionvalue: The openpositionvalue of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._openpositionvalue = openpositionvalue

    @property
    def prevprice(self):
        """Gets the prevprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Цена последней сделки предыдущего торгового дня  # noqa: E501

        :return: The prevprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._prevprice

    @prevprice.setter
    def prevprice(self, prevprice):
        """Sets the prevprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Цена последней сделки предыдущего торгового дня  # noqa: E501

        :param prevprice: The prevprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._prevprice = prevprice

    @property
    def qty(self):
        """Gets the qty of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Объем последней сделки, контрактов  # noqa: E501

        :return: The qty of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Объем последней сделки, контрактов  # noqa: E501

        :param qty: The qty of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: int
        """

        self._qty = qty

    @property
    def settleprice(self):
        """Gets the settleprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Расчетная цена текущего дня  # noqa: E501

        :return: The settleprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._settleprice

    @settleprice.setter
    def settleprice(self, settleprice):
        """Sets the settleprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Расчетная цена текущего дня  # noqa: E501

        :param settleprice: The settleprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._settleprice = settleprice

    @property
    def value(self):
        """Gets the value of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Оборот в рублях  # noqa: E501

        :return: The value of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Оборот в рублях  # noqa: E501

        :param value: The value of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def volat(self):
        """Gets the volat of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Волатильность  # noqa: E501

        :return: The volat of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._volat

    @volat.setter
    def volat(self, volat):
        """Sets the volat of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Волатильность  # noqa: E501

        :param volat: The volat of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._volat = volat

    @property
    def volume(self):
        """Gets the volume of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Оборот в контрактах  # noqa: E501

        :return: The volume of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Оборот в контрактах  # noqa: E501

        :param volume: The volume of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def waprice(self):
        """Gets the waprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Средневзвешенная цена(рыночные сделки)  # noqa: E501

        :return: The waprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._waprice

    @waprice.setter
    def waprice(self, waprice):
        """Sets the waprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Средневзвешенная цена(рыночные сделки)  # noqa: E501

        :param waprice: The waprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._waprice = waprice

    @property
    def closetime(self):
        """Gets the closetime of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Время последней сделки  # noqa: E501

        :return: The closetime of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._closetime

    @closetime.setter
    def closetime(self, closetime):
        """Sets the closetime of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Время последней сделки  # noqa: E501

        :param closetime: The closetime of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: datetime
        """

        self._closetime = closetime

    @property
    def currencyid(self):
        """Gets the currencyid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Код валюты, в которой осуществляются денежные расчеты  # noqa: E501

        :return: The currencyid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._currencyid

    @currencyid.setter
    def currencyid(self, currencyid):
        """Sets the currencyid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Код валюты, в которой осуществляются денежные расчеты  # noqa: E501

        :param currencyid: The currencyid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: str
        """

        self._currencyid = currencyid

    @property
    def exectype(self):
        """Gets the exectype of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Тип опциона: E - европейский, A - американский  # noqa: E501

        :return: The exectype of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._exectype

    @exectype.setter
    def exectype(self, exectype):
        """Sets the exectype of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Тип опциона: E - европейский, A - американский  # noqa: E501

        :param exectype: The exectype of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: str
        """

        self._exectype = exectype

    @property
    def fee(self):
        """Gets the fee of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Сумма Биржевого сбора и комиссионного вознаграждения Клирингового центра, руб.  # noqa: E501

        :return: The fee of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Сумма Биржевого сбора и комиссионного вознаграждения Клирингового центра, руб.  # noqa: E501

        :param fee: The fee of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def im(self):
        """Gets the im of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Базовое ГО под покупку маржируемых опционов  # noqa: E501

        :return: The im of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._im

    @im.setter
    def im(self, im):
        """Sets the im of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Базовое ГО под покупку маржируемых опционов  # noqa: E501

        :param im: The im of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._im = im

    @property
    def imnp(self):
        """Gets the imnp of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Базовое гарантийное обеспечение, непокрытая позиция, руб.  # noqa: E501

        :return: The imnp of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._imnp

    @imnp.setter
    def imnp(self, imnp):
        """Sets the imnp of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Базовое гарантийное обеспечение, непокрытая позиция, руб.  # noqa: E501

        :param imnp: The imnp of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._imnp = imnp

    @property
    def imp(self):
        """Gets the imp of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Базовое гарантийное обеспечение под одну синтетическую позицию (руб.)  # noqa: E501

        :return: The imp of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._imp

    @imp.setter
    def imp(self, imp):
        """Sets the imp of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Базовое гарантийное обеспечение под одну синтетическую позицию (руб.)  # noqa: E501

        :param imp: The imp of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._imp = imp

    @property
    def imstepprice(self):
        """Gets the imstepprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Стоимость шага цены в руб. для расчета ГО (руб.)  # noqa: E501

        :return: The imstepprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._imstepprice

    @imstepprice.setter
    def imstepprice(self, imstepprice):
        """Sets the imstepprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Стоимость шага цены в руб. для расчета ГО (руб.)  # noqa: E501

        :param imstepprice: The imstepprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._imstepprice = imstepprice

    @property
    def marginstyle(self):
        """Gets the marginstyle of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Признак маржируемости опциона: 0 – немаржируемый опцион, 1 – маржируемый опцион  # noqa: E501

        :return: The marginstyle of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._marginstyle

    @marginstyle.setter
    def marginstyle(self, marginstyle):
        """Sets the marginstyle of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Признак маржируемости опциона: 0 – немаржируемый опцион, 1 – маржируемый опцион  # noqa: E501

        :param marginstyle: The marginstyle of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._marginstyle = marginstyle

    @property
    def minstep(self):
        """Gets the minstep of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Минимальный шаг цены, пункты  # noqa: E501

        :return: The minstep of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._minstep

    @minstep.setter
    def minstep(self, minstep):
        """Sets the minstep of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Минимальный шаг цены, пункты  # noqa: E501

        :param minstep: The minstep of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._minstep = minstep

    @property
    def optiontype(self):
        """Gets the optiontype of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Тип опциона: P - PUT, C - CALL  # noqa: E501

        :return: The optiontype of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._optiontype

    @optiontype.setter
    def optiontype(self, optiontype):
        """Sets the optiontype of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Тип опциона: P - PUT, C - CALL  # noqa: E501

        :param optiontype: The optiontype of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: str
        """

        self._optiontype = optiontype

    @property
    def settlepriceday(self):
        """Gets the settlepriceday of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Теоретическая цена в дневном клиринге (пункты)  # noqa: E501

        :return: The settlepriceday of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._settlepriceday

    @settlepriceday.setter
    def settlepriceday(self, settlepriceday):
        """Sets the settlepriceday of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Теоретическая цена в дневном клиринге (пункты)  # noqa: E501

        :param settlepriceday: The settlepriceday of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._settlepriceday = settlepriceday

    @property
    def stepprice(self):
        """Gets the stepprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Стоимость шага цены, руб.  # noqa: E501

        :return: The stepprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._stepprice

    @stepprice.setter
    def stepprice(self, stepprice):
        """Sets the stepprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Стоимость шага цены, руб.  # noqa: E501

        :param stepprice: The stepprice of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._stepprice = stepprice

    @property
    def steppricecurrency(self):
        """Gets the steppricecurrency of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Стоимость шага цены опционного контракта, установленная в Торговой системе (в валюте, в которой осуществляются денежные расчеты)  # noqa: E501

        :return: The steppricecurrency of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._steppricecurrency

    @steppricecurrency.setter
    def steppricecurrency(self, steppricecurrency):
        """Sets the steppricecurrency of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Стоимость шага цены опционного контракта, установленная в Торговой системе (в валюте, в которой осуществляются денежные расчеты)  # noqa: E501

        :param steppricecurrency: The steppricecurrency of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._steppricecurrency = steppricecurrency

    @property
    def strike(self):
        """Gets the strike of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Страйк опциона (пункты)  # noqa: E501

        :return: The strike of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Страйк опциона (пункты)  # noqa: E501

        :param strike: The strike of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._strike = strike

    @property
    def underlyingasset(self):
        """Gets the underlyingasset of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Код фьючерсного инструмента (фьючерсного контракта)  # noqa: E501

        :return: The underlyingasset of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._underlyingasset

    @underlyingasset.setter
    def underlyingasset(self, underlyingasset):
        """Sets the underlyingasset of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Код фьючерсного инструмента (фьючерсного контракта)  # noqa: E501

        :param underlyingasset: The underlyingasset of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: str
        """

        self._underlyingasset = underlyingasset

    @property
    def volatday(self):
        """Gets the volatday of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Волатильность в дневном клиринге  # noqa: E501

        :return: The volatday of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._volatday

    @volatday.setter
    def volatday(self, volatday):
        """Sets the volatday of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Волатильность в дневном клиринге  # noqa: E501

        :param volatday: The volatday of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._volatday = volatday

    @property
    def engine(self):
        """Gets the engine of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501


        :return: The engine of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.


        :param engine: The engine of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: str
        """

        self._engine = engine

    @property
    def market(self):
        """Gets the market of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501


        :return: The market of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.


        :param market: The market of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def boardid(self):
        """Gets the boardid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501


        :return: The boardid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._boardid

    @boardid.setter
    def boardid(self, boardid):
        """Sets the boardid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.


        :param boardid: The boardid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: str
        """

        self._boardid = boardid

    @property
    def decimals(self):
        """Gets the decimals of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Точность, знаков после запятой  # noqa: E501

        :return: The decimals of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Точность, знаков после запятой  # noqa: E501

        :param decimals: The decimals of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    @property
    def high(self):
        """Gets the high of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Цена сделки максимальная  # noqa: E501

        :return: The high of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Цена сделки максимальная  # noqa: E501

        :param high: The high of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Цена сделки минимальная  # noqa: E501

        :return: The low of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Цена сделки минимальная  # noqa: E501

        :param low: The low of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._low = low

    @property
    def open(self):
        """Gets the open of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Цена предторгового периода/Цена аукциона открытия  # noqa: E501

        :return: The open of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Цена предторгового периода/Цена аукциона открытия  # noqa: E501

        :param open: The open of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def close(self):
        """Gets the close of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Цена последней сделки  # noqa: E501

        :return: The close of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Цена последней сделки  # noqa: E501

        :param close: The close of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: float
        """

        self._close = close

    @property
    def secid(self):
        """Gets the secid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Идентификатор финансового инструмента  # noqa: E501

        :return: The secid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._secid

    @secid.setter
    def secid(self, secid):
        """Sets the secid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Идентификатор финансового инструмента  # noqa: E501

        :param secid: The secid of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: str
        """

        self._secid = secid

    @property
    def shortname(self):
        """Gets the shortname of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Краткое наименование  # noqa: E501

        :return: The shortname of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname):
        """Sets the shortname of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Краткое наименование  # noqa: E501

        :param shortname: The shortname of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: str
        """

        self._shortname = shortname

    @property
    def tradedate(self):
        """Gets the tradedate of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Дата торгов  # noqa: E501

        :return: The tradedate of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._tradedate

    @tradedate.setter
    def tradedate(self, tradedate):
        """Sets the tradedate of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Дата торгов  # noqa: E501

        :param tradedate: The tradedate of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: datetime
        """

        self._tradedate = tradedate

    @property
    def tradingsession(self):
        """Gets the tradingsession of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Номер сессии (1 - основная, 2 - вечерняя, 3 - общие итоги)  # noqa: E501

        :return: The tradingsession of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._tradingsession

    @tradingsession.setter
    def tradingsession(self, tradingsession):
        """Sets the tradingsession of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Номер сессии (1 - основная, 2 - вечерняя, 3 - общие итоги)  # noqa: E501

        :param tradingsession: The tradingsession of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: int
        """

        self._tradingsession = tradingsession

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501

        Общее количество записей в выборке, если указан pageNum = 1. Иначе = null  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.

        Общее количество записей в выборке, если указан pageNum = 1. Иначе = null  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMoexHistoryFuturesOptionsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
