# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondTrafficLightScoringFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintool_id': 'int',
        'code': 'str',
        'bond_risk_index': 'int',
        'bond_risk_index_ru': 'int',
        'tls_rate': 'str',
        'date_award': 'datetime',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'fintool_id': 'fintoolId',
        'code': 'code',
        'bond_risk_index': 'bond_risk_index',
        'bond_risk_index_ru': 'bond_risk_index_ru',
        'tls_rate': 'tls_rate',
        'date_award': 'date_award',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, fintool_id=None, code=None, bond_risk_index=None, bond_risk_index_ru=None, tls_rate=None, date_award=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsBondTrafficLightScoringFields - a model defined in Swagger"""  # noqa: E501
        self._fintool_id = None
        self._code = None
        self._bond_risk_index = None
        self._bond_risk_index_ru = None
        self._tls_rate = None
        self._date_award = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if fintool_id is not None:
            self.fintool_id = fintool_id
        if code is not None:
            self.code = code
        if bond_risk_index is not None:
            self.bond_risk_index = bond_risk_index
        if bond_risk_index_ru is not None:
            self.bond_risk_index_ru = bond_risk_index_ru
        if tls_rate is not None:
            self.tls_rate = tls_rate
        if date_award is not None:
            self.date_award = date_award
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def fintool_id(self):
        """Gets the fintool_id of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501

        Код облигации  # noqa: E501

        :return: The fintool_id of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :rtype: int
        """
        return self._fintool_id

    @fintool_id.setter
    def fintool_id(self, fintool_id):
        """Sets the fintool_id of this EfirDataHubModelsModelsBondTrafficLightScoringFields.

        Код облигации  # noqa: E501

        :param fintool_id: The fintool_id of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :type: int
        """

        self._fintool_id = fintool_id

    @property
    def code(self):
        """Gets the code of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501

        Код бумаги, поданный на вход в поле codes  # noqa: E501

        :return: The code of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EfirDataHubModelsModelsBondTrafficLightScoringFields.

        Код бумаги, поданный на вход в поле codes  # noqa: E501

        :param code: The code of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def bond_risk_index(self):
        """Gets the bond_risk_index of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501

        Численное значение агрегата по шкале L26  # noqa: E501

        :return: The bond_risk_index of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :rtype: int
        """
        return self._bond_risk_index

    @bond_risk_index.setter
    def bond_risk_index(self, bond_risk_index):
        """Sets the bond_risk_index of this EfirDataHubModelsModelsBondTrafficLightScoringFields.

        Численное значение агрегата по шкале L26  # noqa: E501

        :param bond_risk_index: The bond_risk_index of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :type: int
        """

        self._bond_risk_index = bond_risk_index

    @property
    def bond_risk_index_ru(self):
        """Gets the bond_risk_index_ru of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501

        Численное значение агрегата в российской шкале L26  # noqa: E501

        :return: The bond_risk_index_ru of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :rtype: int
        """
        return self._bond_risk_index_ru

    @bond_risk_index_ru.setter
    def bond_risk_index_ru(self, bond_risk_index_ru):
        """Sets the bond_risk_index_ru of this EfirDataHubModelsModelsBondTrafficLightScoringFields.

        Численное значение агрегата в российской шкале L26  # noqa: E501

        :param bond_risk_index_ru: The bond_risk_index_ru of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :type: int
        """

        self._bond_risk_index_ru = bond_risk_index_ru

    @property
    def tls_rate(self):
        """Gets the tls_rate of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501

        Уровень кредитного риска по шкале \"светофора\"  # noqa: E501

        :return: The tls_rate of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :rtype: str
        """
        return self._tls_rate

    @tls_rate.setter
    def tls_rate(self, tls_rate):
        """Sets the tls_rate of this EfirDataHubModelsModelsBondTrafficLightScoringFields.

        Уровень кредитного риска по шкале \"светофора\"  # noqa: E501

        :param tls_rate: The tls_rate of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :type: str
        """

        self._tls_rate = tls_rate

    @property
    def date_award(self):
        """Gets the date_award of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501

        Дата формирования значения  # noqa: E501

        :return: The date_award of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :rtype: datetime
        """
        return self._date_award

    @date_award.setter
    def date_award(self, date_award):
        """Sets the date_award of this EfirDataHubModelsModelsBondTrafficLightScoringFields.

        Дата формирования значения  # noqa: E501

        :param date_award: The date_award of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :type: datetime
        """

        self._date_award = date_award

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsBondTrafficLightScoringFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsBondTrafficLightScoringFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsBondTrafficLightScoringFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondTrafficLightScoringFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondTrafficLightScoringFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
