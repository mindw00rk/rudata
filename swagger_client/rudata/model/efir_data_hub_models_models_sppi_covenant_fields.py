# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsSppiCovenantFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'option_num': 'int',
        'classification_result': 'str',
        'note': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'option_num': 'optionNum',
        'classification_result': 'classificationResult',
        'note': 'note'
    }

    def __init__(self, id=None, name=None, option_num=None, classification_result=None, note=None):  # noqa: E501
        """EfirDataHubModelsModelsSppiCovenantFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._option_num = None
        self._classification_result = None
        self._note = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if option_num is not None:
            self.option_num = option_num
        if classification_result is not None:
            self.classification_result = classification_result
        if note is not None:
            self.note = note

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501

        Идентификатор ковенанта  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsSppiCovenantFields.

        Идентификатор ковенанта  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501

        Наименование ковенанта  # noqa: E501

        :return: The name of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EfirDataHubModelsModelsSppiCovenantFields.

        Наименование ковенанта  # noqa: E501

        :param name: The name of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def option_num(self):
        """Gets the option_num of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501

        Номер варианта классификации  # noqa: E501

        :return: The option_num of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501
        :rtype: int
        """
        return self._option_num

    @option_num.setter
    def option_num(self, option_num):
        """Sets the option_num of this EfirDataHubModelsModelsSppiCovenantFields.

        Номер варианта классификации  # noqa: E501

        :param option_num: The option_num of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501
        :type: int
        """

        self._option_num = option_num

    @property
    def classification_result(self):
        """Gets the classification_result of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501

        Результат классификации  # noqa: E501

        :return: The classification_result of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501
        :rtype: str
        """
        return self._classification_result

    @classification_result.setter
    def classification_result(self, classification_result):
        """Sets the classification_result of this EfirDataHubModelsModelsSppiCovenantFields.

        Результат классификации  # noqa: E501

        :param classification_result: The classification_result of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501
        :type: str
        """

        self._classification_result = classification_result

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501

        Комментарий к критерию (связь данного правила с МСФО 9)  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsSppiCovenantFields.

        Комментарий к критерию (связь данного правила с МСФО 9)  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsSppiCovenantFields.  # noqa: E501
        :type: str
        """

        self._note = note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsSppiCovenantFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsSppiCovenantFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
