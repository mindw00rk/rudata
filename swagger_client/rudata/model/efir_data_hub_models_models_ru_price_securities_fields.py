# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRUPriceSecuritiesFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_date': 'str',
        'version': 'int',
        'fintoolid': 'int',
        'isin': 'str',
        'regcode': 'str',
        'nrd_code': 'str',
        'shortname_rus': 'str',
        'issueruid': 'int',
        'borroweruid': 'int',
        'id_iss': 'int',
        'beg_date': 'datetime',
        'end_date': 'datetime',
        'counter': 'int'
    }

    attribute_map = {
        'actual_date': 'actual_date',
        'version': 'version',
        'fintoolid': 'fintoolid',
        'isin': 'isin',
        'regcode': 'regcode',
        'nrd_code': 'nrd_code',
        'shortname_rus': 'shortname_rus',
        'issueruid': 'issueruid',
        'borroweruid': 'borroweruid',
        'id_iss': 'id_iss',
        'beg_date': 'beg_date',
        'end_date': 'end_date',
        'counter': 'counter'
    }

    def __init__(self, actual_date=None, version=None, fintoolid=None, isin=None, regcode=None, nrd_code=None, shortname_rus=None, issueruid=None, borroweruid=None, id_iss=None, beg_date=None, end_date=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsRUPriceSecuritiesFields - a model defined in Swagger"""  # noqa: E501
        self._actual_date = None
        self._version = None
        self._fintoolid = None
        self._isin = None
        self._regcode = None
        self._nrd_code = None
        self._shortname_rus = None
        self._issueruid = None
        self._borroweruid = None
        self._id_iss = None
        self._beg_date = None
        self._end_date = None
        self._counter = None
        self.discriminator = None
        if actual_date is not None:
            self.actual_date = actual_date
        if version is not None:
            self.version = version
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if isin is not None:
            self.isin = isin
        if regcode is not None:
            self.regcode = regcode
        if nrd_code is not None:
            self.nrd_code = nrd_code
        if shortname_rus is not None:
            self.shortname_rus = shortname_rus
        if issueruid is not None:
            self.issueruid = issueruid
        if borroweruid is not None:
            self.borroweruid = borroweruid
        if id_iss is not None:
            self.id_iss = id_iss
        if beg_date is not None:
            self.beg_date = beg_date
        if end_date is not None:
            self.end_date = end_date
        if counter is not None:
            self.counter = counter

    @property
    def actual_date(self):
        """Gets the actual_date of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        Дата актуальности справочника  # noqa: E501

        :return: The actual_date of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._actual_date

    @actual_date.setter
    def actual_date(self, actual_date):
        """Sets the actual_date of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        Дата актуальности справочника  # noqa: E501

        :param actual_date: The actual_date of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._actual_date = actual_date

    @property
    def version(self):
        """Gets the version of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        Версия справочника, 1 - старая методика; 2 - новая методика;  # noqa: E501

        :return: The version of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        Версия справочника, 1 - старая методика; 2 - новая методика;  # noqa: E501

        :param version: The version of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        Идентификатор выпуска бумаги  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        Идентификатор выпуска бумаги  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        ISIN инструмента  # noqa: E501

        :return: The isin of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        ISIN инструмента  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def regcode(self):
        """Gets the regcode of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        Регистрационный код  # noqa: E501

        :return: The regcode of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._regcode

    @regcode.setter
    def regcode(self, regcode):
        """Sets the regcode of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        Регистрационный код  # noqa: E501

        :param regcode: The regcode of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._regcode = regcode

    @property
    def nrd_code(self):
        """Gets the nrd_code of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        Код инструмента в НРД  # noqa: E501

        :return: The nrd_code of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._nrd_code

    @nrd_code.setter
    def nrd_code(self, nrd_code):
        """Sets the nrd_code of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        Код инструмента в НРД  # noqa: E501

        :param nrd_code: The nrd_code of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._nrd_code = nrd_code

    @property
    def shortname_rus(self):
        """Gets the shortname_rus of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        Краткое наименование выпуска  # noqa: E501

        :return: The shortname_rus of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_rus

    @shortname_rus.setter
    def shortname_rus(self, shortname_rus):
        """Sets the shortname_rus of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        Краткое наименование выпуска  # noqa: E501

        :param shortname_rus: The shortname_rus of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: str
        """

        self._shortname_rus = shortname_rus

    @property
    def issueruid(self):
        """Gets the issueruid of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        УИН оператора в БД Интерфакс (fininstid)  # noqa: E501

        :return: The issueruid of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: int
        """
        return self._issueruid

    @issueruid.setter
    def issueruid(self, issueruid):
        """Sets the issueruid of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        УИН оператора в БД Интерфакс (fininstid)  # noqa: E501

        :param issueruid: The issueruid of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: int
        """

        self._issueruid = issueruid

    @property
    def borroweruid(self):
        """Gets the borroweruid of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        УИН реального заемщика (эмитента) в БД Интерфакс (fininstid)  # noqa: E501

        :return: The borroweruid of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: int
        """
        return self._borroweruid

    @borroweruid.setter
    def borroweruid(self, borroweruid):
        """Sets the borroweruid of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        УИН реального заемщика (эмитента) в БД Интерфакс (fininstid)  # noqa: E501

        :param borroweruid: The borroweruid of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: int
        """

        self._borroweruid = borroweruid

    @property
    def id_iss(self):
        """Gets the id_iss of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        Идентификатор торгового инструмента в базе Интерфакс (для version=1)  # noqa: E501

        :return: The id_iss of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: int
        """
        return self._id_iss

    @id_iss.setter
    def id_iss(self, id_iss):
        """Sets the id_iss of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        Идентификатор торгового инструмента в базе Интерфакс (для version=1)  # noqa: E501

        :param id_iss: The id_iss of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: int
        """

        self._id_iss = id_iss

    @property
    def beg_date(self):
        """Gets the beg_date of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        Первая дата итогов торгов  # noqa: E501

        :return: The beg_date of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._beg_date

    @beg_date.setter
    def beg_date(self, beg_date):
        """Sets the beg_date of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        Первая дата итогов торгов  # noqa: E501

        :param beg_date: The beg_date of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: datetime
        """

        self._beg_date = beg_date

    @property
    def end_date(self):
        """Gets the end_date of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        Последняя дата итогов торгов  # noqa: E501

        :return: The end_date of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        Последняя дата итогов торгов  # noqa: E501

        :param end_date: The end_date of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsRUPriceSecuritiesFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsRUPriceSecuritiesFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRUPriceSecuritiesFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRUPriceSecuritiesFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
