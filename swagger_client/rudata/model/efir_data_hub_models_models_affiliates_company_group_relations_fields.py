# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent': 'AllOfEfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFieldsParent',
        'child': 'AllOfEfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFieldsChild',
        'relation_type': 'str',
        'share_part_pct': 'float',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'parent': 'parent',
        'child': 'child',
        'relation_type': 'relation_type',
        'share_part_pct': 'share_part_pct',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, parent=None, child=None, relation_type=None, share_part_pct=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields - a model defined in Swagger"""  # noqa: E501
        self._parent = None
        self._child = None
        self._relation_type = None
        self._share_part_pct = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if parent is not None:
            self.parent = parent
        if child is not None:
            self.child = child
        if relation_type is not None:
            self.relation_type = relation_type
        if share_part_pct is not None:
            self.share_part_pct = share_part_pct
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def parent(self):
        """Gets the parent of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501

        Родительская компания  # noqa: E501

        :return: The parent of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501
        :rtype: AllOfEfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFieldsParent
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.

        Родительская компания  # noqa: E501

        :param parent: The parent of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501
        :type: AllOfEfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFieldsParent
        """

        self._parent = parent

    @property
    def child(self):
        """Gets the child of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501

        Дочерняя компания  # noqa: E501

        :return: The child of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501
        :rtype: AllOfEfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFieldsChild
        """
        return self._child

    @child.setter
    def child(self, child):
        """Sets the child of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.

        Дочерняя компания  # noqa: E501

        :param child: The child of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501
        :type: AllOfEfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFieldsChild
        """

        self._child = child

    @property
    def relation_type(self):
        """Gets the relation_type of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501

        Тип отношения: 'o' - владение, 'm' - управление  # noqa: E501

        :return: The relation_type of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """Sets the relation_type of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.

        Тип отношения: 'o' - владение, 'm' - управление  # noqa: E501

        :param relation_type: The relation_type of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501
        :type: str
        """

        self._relation_type = relation_type

    @property
    def share_part_pct(self):
        """Gets the share_part_pct of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501

        Доля владения (для отношений владения)  # noqa: E501

        :return: The share_part_pct of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501
        :rtype: float
        """
        return self._share_part_pct

    @share_part_pct.setter
    def share_part_pct(self, share_part_pct):
        """Sets the share_part_pct of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.

        Доля владения (для отношений владения)  # noqa: E501

        :param share_part_pct: The share_part_pct of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501
        :type: float
        """

        self._share_part_pct = share_part_pct

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsAffiliatesCompanyGroupRelationsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
