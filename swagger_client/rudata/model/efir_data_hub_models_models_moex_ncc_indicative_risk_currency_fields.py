# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintoolid': 'int',
        'dt': 'datetime',
        'set_name': 'str',
        'setind_name': 'str',
        'seccode': 'str',
        'risk_currency': 'str',
        'rate_rh': 'float',
        'rate_rl': 'float',
        'rate_rs': 'float',
        'rate_d': 'float',
        'sgnr': 'int',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'fintoolid': 'fintoolid',
        'dt': 'dt',
        'set_name': 'set_name',
        'setind_name': 'setind_name',
        'seccode': 'seccode',
        'risk_currency': 'risk_currency',
        'rate_rh': 'rate_rh',
        'rate_rl': 'rate_rl',
        'rate_rs': 'rate_rs',
        'rate_d': 'rate_d',
        'sgnr': 'sgnr',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, fintoolid=None, dt=None, set_name=None, setind_name=None, seccode=None, risk_currency=None, rate_rh=None, rate_rl=None, rate_rs=None, rate_d=None, sgnr=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields - a model defined in Swagger"""  # noqa: E501
        self._fintoolid = None
        self._dt = None
        self._set_name = None
        self._setind_name = None
        self._seccode = None
        self._risk_currency = None
        self._rate_rh = None
        self._rate_rl = None
        self._rate_rs = None
        self._rate_d = None
        self._sgnr = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if dt is not None:
            self.dt = dt
        if set_name is not None:
            self.set_name = set_name
        if setind_name is not None:
            self.setind_name = setind_name
        if seccode is not None:
            self.seccode = seccode
        if risk_currency is not None:
            self.risk_currency = risk_currency
        if rate_rh is not None:
            self.rate_rh = rate_rh
        if rate_rl is not None:
            self.rate_rl = rate_rl
        if rate_rs is not None:
            self.rate_rs = rate_rs
        if rate_d is not None:
            self.rate_d = rate_d
        if sgnr is not None:
            self.sgnr = sgnr
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Идентификатор финансового инструмента в базе Интерфакс  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Идентификатор финансового инструмента в базе Интерфакс  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def dt(self):
        """Gets the dt of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Дата  # noqa: E501

        :return: The dt of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Дата  # noqa: E501

        :param dt: The dt of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def set_name(self):
        """Gets the set_name of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Множество  # noqa: E501

        :return: The set_name of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: str
        """
        return self._set_name

    @set_name.setter
    def set_name(self, set_name):
        """Sets the set_name of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Множество  # noqa: E501

        :param set_name: The set_name of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: str
        """

        self._set_name = set_name

    @property
    def setind_name(self):
        """Gets the setind_name of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Индикатор множества  # noqa: E501

        :return: The setind_name of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: str
        """
        return self._setind_name

    @setind_name.setter
    def setind_name(self, setind_name):
        """Sets the setind_name of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Индикатор множества  # noqa: E501

        :param setind_name: The setind_name of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: str
        """

        self._setind_name = setind_name

    @property
    def seccode(self):
        """Gets the seccode of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Инструмент  # noqa: E501

        :return: The seccode of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: str
        """
        return self._seccode

    @seccode.setter
    def seccode(self, seccode):
        """Sets the seccode of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Инструмент  # noqa: E501

        :param seccode: The seccode of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: str
        """

        self._seccode = seccode

    @property
    def risk_currency(self):
        """Gets the risk_currency of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Валюта риска  # noqa: E501

        :return: The risk_currency of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: str
        """
        return self._risk_currency

    @risk_currency.setter
    def risk_currency(self, risk_currency):
        """Sets the risk_currency of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Валюта риска  # noqa: E501

        :param risk_currency: The risk_currency of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: str
        """

        self._risk_currency = risk_currency

    @property
    def rate_rh(self):
        """Gets the rate_rh of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Индикативная ставка риска роста r_h  # noqa: E501

        :return: The rate_rh of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._rate_rh

    @rate_rh.setter
    def rate_rh(self, rate_rh):
        """Sets the rate_rh of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Индикативная ставка риска роста r_h  # noqa: E501

        :param rate_rh: The rate_rh of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._rate_rh = rate_rh

    @property
    def rate_rl(self):
        """Gets the rate_rl of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Индикативная ставка риска падения r_l  # noqa: E501

        :return: The rate_rl of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._rate_rl

    @rate_rl.setter
    def rate_rl(self, rate_rl):
        """Sets the rate_rl of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Индикативная ставка риска падения r_l  # noqa: E501

        :param rate_rl: The rate_rl of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._rate_rl = rate_rl

    @property
    def rate_rs(self):
        """Gets the rate_rs of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Симметричная индикативная ставка r_s  # noqa: E501

        :return: The rate_rs of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._rate_rs

    @rate_rs.setter
    def rate_rs(self, rate_rs):
        """Sets the rate_rs of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Симметричная индикативная ставка r_s  # noqa: E501

        :param rate_rs: The rate_rs of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._rate_rs = rate_rs

    @property
    def rate_d(self):
        """Gets the rate_d of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Относительная ставка d  # noqa: E501

        :return: The rate_d of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: float
        """
        return self._rate_d

    @rate_d.setter
    def rate_d(self, rate_d):
        """Sets the rate_d of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Относительная ставка d  # noqa: E501

        :param rate_d: The rate_d of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: float
        """

        self._rate_d = rate_d

    @property
    def sgnr(self):
        """Gets the sgnr of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Показатель SgnR  # noqa: E501

        :return: The sgnr of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: int
        """
        return self._sgnr

    @sgnr.setter
    def sgnr(self, sgnr):
        """Sets the sgnr of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Показатель SgnR  # noqa: E501

        :param sgnr: The sgnr of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: int
        """

        self._sgnr = sgnr

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMoexNccIndicativeRiskCurrencyFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
