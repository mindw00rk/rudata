# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsCorporateActionKindsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'name_rus': 'str',
        'name_eng': 'str',
        'group': 'str',
        'order': 'int'
    }

    attribute_map = {
        'code': 'code',
        'name_rus': 'name_rus',
        'name_eng': 'name_eng',
        'group': 'group',
        'order': 'order'
    }

    def __init__(self, code=None, name_rus=None, name_eng=None, group=None, order=None):  # noqa: E501
        """EfirDataHubModelsModelsCorporateActionKindsFields - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._name_rus = None
        self._name_eng = None
        self._group = None
        self._order = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if name_rus is not None:
            self.name_rus = name_rus
        if name_eng is not None:
            self.name_eng = name_eng
        if group is not None:
            self.group = group
        if order is not None:
            self.order = order

    @property
    def code(self):
        """Gets the code of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501

        Символьный идентификатор вида КД  # noqa: E501

        :return: The code of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EfirDataHubModelsModelsCorporateActionKindsFields.

        Символьный идентификатор вида КД  # noqa: E501

        :param code: The code of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name_rus(self):
        """Gets the name_rus of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501

        Наименование вида КД (рус.)  # noqa: E501

        :return: The name_rus of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501
        :rtype: str
        """
        return self._name_rus

    @name_rus.setter
    def name_rus(self, name_rus):
        """Sets the name_rus of this EfirDataHubModelsModelsCorporateActionKindsFields.

        Наименование вида КД (рус.)  # noqa: E501

        :param name_rus: The name_rus of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501
        :type: str
        """

        self._name_rus = name_rus

    @property
    def name_eng(self):
        """Gets the name_eng of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501

        Наименование вида КД (англ.)  # noqa: E501

        :return: The name_eng of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501
        :rtype: str
        """
        return self._name_eng

    @name_eng.setter
    def name_eng(self, name_eng):
        """Sets the name_eng of this EfirDataHubModelsModelsCorporateActionKindsFields.

        Наименование вида КД (англ.)  # noqa: E501

        :param name_eng: The name_eng of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501
        :type: str
        """

        self._name_eng = name_eng

    @property
    def group(self):
        """Gets the group of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501

        Идентификатор группы видов КД  # noqa: E501

        :return: The group of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this EfirDataHubModelsModelsCorporateActionKindsFields.

        Идентификатор группы видов КД  # noqa: E501

        :param group: The group of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def order(self):
        """Gets the order of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501

        Порядковый номер вида КД  # noqa: E501

        :return: The order of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this EfirDataHubModelsModelsCorporateActionKindsFields.

        Порядковый номер вида КД  # noqa: E501

        :param order: The order of this EfirDataHubModelsModelsCorporateActionKindsFields.  # noqa: E501
        :type: int
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsCorporateActionKindsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsCorporateActionKindsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
