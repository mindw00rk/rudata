# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRiskMarketRiskDataFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'error': 'str',
        'fintooltype': 'str',
        'issuer': 'str',
        'issubordinated': 'int',
        'ismatched': 'int',
        'fintoolshortnamerus': 'str',
        'fintoolfullnamerus': 'str',
        'guaranteedamountpct': 'float',
        'expirationdate': 'datetime',
        'max30dloss': 'float',
        'hasamortisations': 'int',
        'nominalcurrency': 'str',
        'haspercentrisk': 'int',
        'hascommodityrisk': 'int',
        'hasfondrisk': 'int',
        'riskgroup_f0': 'int',
        'riskgroup_f1': 'int',
        'riskgrouprule_f0': 'str',
        'riskgrouprule_f1': 'str',
        'couponyield': 'float',
        'timinggroupdate': 'datetime',
        'timinggrouprule': 'str',
        'duration_n': 'float',
        'convexity': 'float',
        'equityriskrate': 'float',
        'qualifier139_f0g0': 'str',
        'qualifier139_f0g1': 'str',
        'qualifier139_f1g0': 'str',
        'qualifier139_f1g1': 'str',
        'qualifier421': 'str',
        'qualifier421_30': 'str',
        'daysafterbreakingrules421': 'int',
        'repodiscount139': 'float',
        'ismktprice': 'int',
        'ca_qualifier_f0g0': 'str',
        'ca_risk_group_f0g0': 'str',
        'ca_reason_f0g0': 'str',
        'ca_code_f0g0': 'str',
        'ca_credit_risk_f0g0': 'float',
        'ca_qualifier_f0g1': 'str',
        'ca_risk_group_f0g1': 'str',
        'ca_reason_f0g1': 'str',
        'ca_code_f0g1': 'str',
        'ca_credit_risk_f0g1': 'float',
        'ca_qualifier_f1g0': 'str',
        'ca_risk_group_f1g0': 'str',
        'ca_reason_f1g0': 'str',
        'ca_code_f1g0': 'str',
        'ca_credit_risk_f1g0': 'float',
        'ca_qualifier_f1g1': 'str',
        'ca_risk_group_f1g1': 'str',
        'ca_reason_f1g1': 'str',
        'ca_code_f1g1': 'str',
        'ca_credit_risk_f1g1': 'float',
        'ca_doc_id': 'int',
        'ca_doc_shortname': 'str',
        'duration': 'int',
        'pvbp': 'float',
        'yield_agg': 'float',
        'isnegotiability': 'int',
        'intopquotelist': 'bool',
        'topquotelistname': 'str',
        'exch_name': 'str',
        'riskgroup_f0_coef': 'float',
        'riskgroup_f1_coef': 'float'
    }

    attribute_map = {
        'id': 'id',
        'error': 'error',
        'fintooltype': 'fintooltype',
        'issuer': 'issuer',
        'issubordinated': 'issubordinated',
        'ismatched': 'ismatched',
        'fintoolshortnamerus': 'fintoolshortnamerus',
        'fintoolfullnamerus': 'fintoolfullnamerus',
        'guaranteedamountpct': 'guaranteedamountpct',
        'expirationdate': 'expirationdate',
        'max30dloss': 'max30dloss',
        'hasamortisations': 'hasamortisations',
        'nominalcurrency': 'nominalcurrency',
        'haspercentrisk': 'haspercentrisk',
        'hascommodityrisk': 'hascommodityrisk',
        'hasfondrisk': 'hasfondrisk',
        'riskgroup_f0': 'riskgroup_f0',
        'riskgroup_f1': 'riskgroup_f1',
        'riskgrouprule_f0': 'riskgrouprule_f0',
        'riskgrouprule_f1': 'riskgrouprule_f1',
        'couponyield': 'couponyield',
        'timinggroupdate': 'timinggroupdate',
        'timinggrouprule': 'timinggrouprule',
        'duration_n': 'duration_n',
        'convexity': 'convexity',
        'equityriskrate': 'equityriskrate',
        'qualifier139_f0g0': 'qualifier139_f0g0',
        'qualifier139_f0g1': 'qualifier139_f0g1',
        'qualifier139_f1g0': 'qualifier139_f1g0',
        'qualifier139_f1g1': 'qualifier139_f1g1',
        'qualifier421': 'qualifier421',
        'qualifier421_30': 'qualifier421_30',
        'daysafterbreakingrules421': 'daysafterbreakingrules421',
        'repodiscount139': 'repodiscount139',
        'ismktprice': 'ismktprice',
        'ca_qualifier_f0g0': 'ca_qualifier_f0g0',
        'ca_risk_group_f0g0': 'ca_risk_group_f0g0',
        'ca_reason_f0g0': 'ca_reason_f0g0',
        'ca_code_f0g0': 'ca_code_f0g0',
        'ca_credit_risk_f0g0': 'ca_credit_risk_f0g0',
        'ca_qualifier_f0g1': 'ca_qualifier_f0g1',
        'ca_risk_group_f0g1': 'ca_risk_group_f0g1',
        'ca_reason_f0g1': 'ca_reason_f0g1',
        'ca_code_f0g1': 'ca_code_f0g1',
        'ca_credit_risk_f0g1': 'ca_credit_risk_f0g1',
        'ca_qualifier_f1g0': 'ca_qualifier_f1g0',
        'ca_risk_group_f1g0': 'ca_risk_group_f1g0',
        'ca_reason_f1g0': 'ca_reason_f1g0',
        'ca_code_f1g0': 'ca_code_f1g0',
        'ca_credit_risk_f1g0': 'ca_credit_risk_f1g0',
        'ca_qualifier_f1g1': 'ca_qualifier_f1g1',
        'ca_risk_group_f1g1': 'ca_risk_group_f1g1',
        'ca_reason_f1g1': 'ca_reason_f1g1',
        'ca_code_f1g1': 'ca_code_f1g1',
        'ca_credit_risk_f1g1': 'ca_credit_risk_f1g1',
        'ca_doc_id': 'ca_doc_id',
        'ca_doc_shortname': 'ca_doc_shortname',
        'duration': 'duration',
        'pvbp': 'pvbp',
        'yield_agg': 'yield_agg',
        'isnegotiability': 'isnegotiability',
        'intopquotelist': 'intopquotelist',
        'topquotelistname': 'topquotelistname',
        'exch_name': 'exch_name',
        'riskgroup_f0_coef': 'riskgroup_f0_coef',
        'riskgroup_f1_coef': 'riskgroup_f1_coef'
    }

    def __init__(self, id=None, error=None, fintooltype=None, issuer=None, issubordinated=None, ismatched=None, fintoolshortnamerus=None, fintoolfullnamerus=None, guaranteedamountpct=None, expirationdate=None, max30dloss=None, hasamortisations=None, nominalcurrency=None, haspercentrisk=None, hascommodityrisk=None, hasfondrisk=None, riskgroup_f0=None, riskgroup_f1=None, riskgrouprule_f0=None, riskgrouprule_f1=None, couponyield=None, timinggroupdate=None, timinggrouprule=None, duration_n=None, convexity=None, equityriskrate=None, qualifier139_f0g0=None, qualifier139_f0g1=None, qualifier139_f1g0=None, qualifier139_f1g1=None, qualifier421=None, qualifier421_30=None, daysafterbreakingrules421=None, repodiscount139=None, ismktprice=None, ca_qualifier_f0g0=None, ca_risk_group_f0g0=None, ca_reason_f0g0=None, ca_code_f0g0=None, ca_credit_risk_f0g0=None, ca_qualifier_f0g1=None, ca_risk_group_f0g1=None, ca_reason_f0g1=None, ca_code_f0g1=None, ca_credit_risk_f0g1=None, ca_qualifier_f1g0=None, ca_risk_group_f1g0=None, ca_reason_f1g0=None, ca_code_f1g0=None, ca_credit_risk_f1g0=None, ca_qualifier_f1g1=None, ca_risk_group_f1g1=None, ca_reason_f1g1=None, ca_code_f1g1=None, ca_credit_risk_f1g1=None, ca_doc_id=None, ca_doc_shortname=None, duration=None, pvbp=None, yield_agg=None, isnegotiability=None, intopquotelist=None, topquotelistname=None, exch_name=None, riskgroup_f0_coef=None, riskgroup_f1_coef=None):  # noqa: E501
        """EfirDataHubModelsModelsRiskMarketRiskDataFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._error = None
        self._fintooltype = None
        self._issuer = None
        self._issubordinated = None
        self._ismatched = None
        self._fintoolshortnamerus = None
        self._fintoolfullnamerus = None
        self._guaranteedamountpct = None
        self._expirationdate = None
        self._max30dloss = None
        self._hasamortisations = None
        self._nominalcurrency = None
        self._haspercentrisk = None
        self._hascommodityrisk = None
        self._hasfondrisk = None
        self._riskgroup_f0 = None
        self._riskgroup_f1 = None
        self._riskgrouprule_f0 = None
        self._riskgrouprule_f1 = None
        self._couponyield = None
        self._timinggroupdate = None
        self._timinggrouprule = None
        self._duration_n = None
        self._convexity = None
        self._equityriskrate = None
        self._qualifier139_f0g0 = None
        self._qualifier139_f0g1 = None
        self._qualifier139_f1g0 = None
        self._qualifier139_f1g1 = None
        self._qualifier421 = None
        self._qualifier421_30 = None
        self._daysafterbreakingrules421 = None
        self._repodiscount139 = None
        self._ismktprice = None
        self._ca_qualifier_f0g0 = None
        self._ca_risk_group_f0g0 = None
        self._ca_reason_f0g0 = None
        self._ca_code_f0g0 = None
        self._ca_credit_risk_f0g0 = None
        self._ca_qualifier_f0g1 = None
        self._ca_risk_group_f0g1 = None
        self._ca_reason_f0g1 = None
        self._ca_code_f0g1 = None
        self._ca_credit_risk_f0g1 = None
        self._ca_qualifier_f1g0 = None
        self._ca_risk_group_f1g0 = None
        self._ca_reason_f1g0 = None
        self._ca_code_f1g0 = None
        self._ca_credit_risk_f1g0 = None
        self._ca_qualifier_f1g1 = None
        self._ca_risk_group_f1g1 = None
        self._ca_reason_f1g1 = None
        self._ca_code_f1g1 = None
        self._ca_credit_risk_f1g1 = None
        self._ca_doc_id = None
        self._ca_doc_shortname = None
        self._duration = None
        self._pvbp = None
        self._yield_agg = None
        self._isnegotiability = None
        self._intopquotelist = None
        self._topquotelistname = None
        self._exch_name = None
        self._riskgroup_f0_coef = None
        self._riskgroup_f1_coef = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if error is not None:
            self.error = error
        if fintooltype is not None:
            self.fintooltype = fintooltype
        if issuer is not None:
            self.issuer = issuer
        if issubordinated is not None:
            self.issubordinated = issubordinated
        if ismatched is not None:
            self.ismatched = ismatched
        if fintoolshortnamerus is not None:
            self.fintoolshortnamerus = fintoolshortnamerus
        if fintoolfullnamerus is not None:
            self.fintoolfullnamerus = fintoolfullnamerus
        if guaranteedamountpct is not None:
            self.guaranteedamountpct = guaranteedamountpct
        if expirationdate is not None:
            self.expirationdate = expirationdate
        if max30dloss is not None:
            self.max30dloss = max30dloss
        if hasamortisations is not None:
            self.hasamortisations = hasamortisations
        if nominalcurrency is not None:
            self.nominalcurrency = nominalcurrency
        if haspercentrisk is not None:
            self.haspercentrisk = haspercentrisk
        if hascommodityrisk is not None:
            self.hascommodityrisk = hascommodityrisk
        if hasfondrisk is not None:
            self.hasfondrisk = hasfondrisk
        if riskgroup_f0 is not None:
            self.riskgroup_f0 = riskgroup_f0
        if riskgroup_f1 is not None:
            self.riskgroup_f1 = riskgroup_f1
        if riskgrouprule_f0 is not None:
            self.riskgrouprule_f0 = riskgrouprule_f0
        if riskgrouprule_f1 is not None:
            self.riskgrouprule_f1 = riskgrouprule_f1
        if couponyield is not None:
            self.couponyield = couponyield
        if timinggroupdate is not None:
            self.timinggroupdate = timinggroupdate
        if timinggrouprule is not None:
            self.timinggrouprule = timinggrouprule
        if duration_n is not None:
            self.duration_n = duration_n
        if convexity is not None:
            self.convexity = convexity
        if equityriskrate is not None:
            self.equityriskrate = equityriskrate
        if qualifier139_f0g0 is not None:
            self.qualifier139_f0g0 = qualifier139_f0g0
        if qualifier139_f0g1 is not None:
            self.qualifier139_f0g1 = qualifier139_f0g1
        if qualifier139_f1g0 is not None:
            self.qualifier139_f1g0 = qualifier139_f1g0
        if qualifier139_f1g1 is not None:
            self.qualifier139_f1g1 = qualifier139_f1g1
        if qualifier421 is not None:
            self.qualifier421 = qualifier421
        if qualifier421_30 is not None:
            self.qualifier421_30 = qualifier421_30
        if daysafterbreakingrules421 is not None:
            self.daysafterbreakingrules421 = daysafterbreakingrules421
        if repodiscount139 is not None:
            self.repodiscount139 = repodiscount139
        if ismktprice is not None:
            self.ismktprice = ismktprice
        if ca_qualifier_f0g0 is not None:
            self.ca_qualifier_f0g0 = ca_qualifier_f0g0
        if ca_risk_group_f0g0 is not None:
            self.ca_risk_group_f0g0 = ca_risk_group_f0g0
        if ca_reason_f0g0 is not None:
            self.ca_reason_f0g0 = ca_reason_f0g0
        if ca_code_f0g0 is not None:
            self.ca_code_f0g0 = ca_code_f0g0
        if ca_credit_risk_f0g0 is not None:
            self.ca_credit_risk_f0g0 = ca_credit_risk_f0g0
        if ca_qualifier_f0g1 is not None:
            self.ca_qualifier_f0g1 = ca_qualifier_f0g1
        if ca_risk_group_f0g1 is not None:
            self.ca_risk_group_f0g1 = ca_risk_group_f0g1
        if ca_reason_f0g1 is not None:
            self.ca_reason_f0g1 = ca_reason_f0g1
        if ca_code_f0g1 is not None:
            self.ca_code_f0g1 = ca_code_f0g1
        if ca_credit_risk_f0g1 is not None:
            self.ca_credit_risk_f0g1 = ca_credit_risk_f0g1
        if ca_qualifier_f1g0 is not None:
            self.ca_qualifier_f1g0 = ca_qualifier_f1g0
        if ca_risk_group_f1g0 is not None:
            self.ca_risk_group_f1g0 = ca_risk_group_f1g0
        if ca_reason_f1g0 is not None:
            self.ca_reason_f1g0 = ca_reason_f1g0
        if ca_code_f1g0 is not None:
            self.ca_code_f1g0 = ca_code_f1g0
        if ca_credit_risk_f1g0 is not None:
            self.ca_credit_risk_f1g0 = ca_credit_risk_f1g0
        if ca_qualifier_f1g1 is not None:
            self.ca_qualifier_f1g1 = ca_qualifier_f1g1
        if ca_risk_group_f1g1 is not None:
            self.ca_risk_group_f1g1 = ca_risk_group_f1g1
        if ca_reason_f1g1 is not None:
            self.ca_reason_f1g1 = ca_reason_f1g1
        if ca_code_f1g1 is not None:
            self.ca_code_f1g1 = ca_code_f1g1
        if ca_credit_risk_f1g1 is not None:
            self.ca_credit_risk_f1g1 = ca_credit_risk_f1g1
        if ca_doc_id is not None:
            self.ca_doc_id = ca_doc_id
        if ca_doc_shortname is not None:
            self.ca_doc_shortname = ca_doc_shortname
        if duration is not None:
            self.duration = duration
        if pvbp is not None:
            self.pvbp = pvbp
        if yield_agg is not None:
            self.yield_agg = yield_agg
        if isnegotiability is not None:
            self.isnegotiability = isnegotiability
        if intopquotelist is not None:
            self.intopquotelist = intopquotelist
        if topquotelistname is not None:
            self.topquotelistname = topquotelistname
        if exch_name is not None:
            self.exch_name = exch_name
        if riskgroup_f0_coef is not None:
            self.riskgroup_f0_coef = riskgroup_f0_coef
        if riskgroup_f1_coef is not None:
            self.riskgroup_f1_coef = riskgroup_f1_coef

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Идентификатор инстумента (ISIN, регистрационный номер)  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Идентификатор инстумента (ISIN, регистрационный номер)  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def error(self):
        """Gets the error of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Текст ошибки, если она есть  # noqa: E501

        :return: The error of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Текст ошибки, если она есть  # noqa: E501

        :param error: The error of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def fintooltype(self):
        """Gets the fintooltype of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Тип инструмента  # noqa: E501

        :return: The fintooltype of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._fintooltype

    @fintooltype.setter
    def fintooltype(self, fintooltype):
        """Sets the fintooltype of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Тип инструмента  # noqa: E501

        :param fintooltype: The fintooltype of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._fintooltype = fintooltype

    @property
    def issuer(self):
        """Gets the issuer of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Эмитент  # noqa: E501

        :return: The issuer of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Эмитент  # noqa: E501

        :param issuer: The issuer of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def issubordinated(self):
        """Gets the issubordinated of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Признак субординированного выпуска  # noqa: E501

        :return: The issubordinated of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._issubordinated

    @issubordinated.setter
    def issubordinated(self, issubordinated):
        """Sets the issubordinated of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Признак субординированного выпуска  # noqa: E501

        :param issubordinated: The issubordinated of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._issubordinated = issubordinated

    @property
    def ismatched(self):
        """Gets the ismatched of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Признак сверки данных Интерфакс и НРД  # noqa: E501

        :return: The ismatched of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._ismatched

    @ismatched.setter
    def ismatched(self, ismatched):
        """Sets the ismatched of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Признак сверки данных Интерфакс и НРД  # noqa: E501

        :param ismatched: The ismatched of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._ismatched = ismatched

    @property
    def fintoolshortnamerus(self):
        """Gets the fintoolshortnamerus of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Краткое наименование бумаги (рус.)  # noqa: E501

        :return: The fintoolshortnamerus of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._fintoolshortnamerus

    @fintoolshortnamerus.setter
    def fintoolshortnamerus(self, fintoolshortnamerus):
        """Sets the fintoolshortnamerus of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Краткое наименование бумаги (рус.)  # noqa: E501

        :param fintoolshortnamerus: The fintoolshortnamerus of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._fintoolshortnamerus = fintoolshortnamerus

    @property
    def fintoolfullnamerus(self):
        """Gets the fintoolfullnamerus of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Полное наименование бумаги (рус.)  # noqa: E501

        :return: The fintoolfullnamerus of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._fintoolfullnamerus

    @fintoolfullnamerus.setter
    def fintoolfullnamerus(self, fintoolfullnamerus):
        """Sets the fintoolfullnamerus of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Полное наименование бумаги (рус.)  # noqa: E501

        :param fintoolfullnamerus: The fintoolfullnamerus of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._fintoolfullnamerus = fintoolfullnamerus

    @property
    def guaranteedamountpct(self):
        """Gets the guaranteedamountpct of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Доля покрытия гарантией (%)  # noqa: E501

        :return: The guaranteedamountpct of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._guaranteedamountpct

    @guaranteedamountpct.setter
    def guaranteedamountpct(self, guaranteedamountpct):
        """Sets the guaranteedamountpct of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Доля покрытия гарантией (%)  # noqa: E501

        :param guaranteedamountpct: The guaranteedamountpct of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._guaranteedamountpct = guaranteedamountpct

    @property
    def expirationdate(self):
        """Gets the expirationdate of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Дата экспирации для фьючерсов и опционов  # noqa: E501

        :return: The expirationdate of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._expirationdate

    @expirationdate.setter
    def expirationdate(self, expirationdate):
        """Sets the expirationdate of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Дата экспирации для фьючерсов и опционов  # noqa: E501

        :param expirationdate: The expirationdate of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: datetime
        """

        self._expirationdate = expirationdate

    @property
    def max30dloss(self):
        """Gets the max30dloss of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Максимальная просадка  # noqa: E501

        :return: The max30dloss of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._max30dloss

    @max30dloss.setter
    def max30dloss(self, max30dloss):
        """Sets the max30dloss of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Максимальная просадка  # noqa: E501

        :param max30dloss: The max30dloss of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._max30dloss = max30dloss

    @property
    def hasamortisations(self):
        """Gets the hasamortisations of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Признак выпуска с амортизацией  # noqa: E501

        :return: The hasamortisations of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._hasamortisations

    @hasamortisations.setter
    def hasamortisations(self, hasamortisations):
        """Sets the hasamortisations of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Признак выпуска с амортизацией  # noqa: E501

        :param hasamortisations: The hasamortisations of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._hasamortisations = hasamortisations

    @property
    def nominalcurrency(self):
        """Gets the nominalcurrency of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Валюта номинала  # noqa: E501

        :return: The nominalcurrency of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._nominalcurrency

    @nominalcurrency.setter
    def nominalcurrency(self, nominalcurrency):
        """Sets the nominalcurrency of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Валюта номинала  # noqa: E501

        :param nominalcurrency: The nominalcurrency of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._nominalcurrency = nominalcurrency

    @property
    def haspercentrisk(self):
        """Gets the haspercentrisk of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Наличие процентного риска  # noqa: E501

        :return: The haspercentrisk of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._haspercentrisk

    @haspercentrisk.setter
    def haspercentrisk(self, haspercentrisk):
        """Sets the haspercentrisk of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Наличие процентного риска  # noqa: E501

        :param haspercentrisk: The haspercentrisk of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._haspercentrisk = haspercentrisk

    @property
    def hascommodityrisk(self):
        """Gets the hascommodityrisk of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Наличие товарного риска  # noqa: E501

        :return: The hascommodityrisk of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._hascommodityrisk

    @hascommodityrisk.setter
    def hascommodityrisk(self, hascommodityrisk):
        """Sets the hascommodityrisk of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Наличие товарного риска  # noqa: E501

        :param hascommodityrisk: The hascommodityrisk of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._hascommodityrisk = hascommodityrisk

    @property
    def hasfondrisk(self):
        """Gets the hasfondrisk of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Наличие фондового риска  # noqa: E501

        :return: The hasfondrisk of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._hasfondrisk

    @hasfondrisk.setter
    def hasfondrisk(self, hasfondrisk):
        """Sets the hasfondrisk of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Наличие фондового риска  # noqa: E501

        :param hasfondrisk: The hasfondrisk of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._hasfondrisk = hasfondrisk

    @property
    def riskgroup_f0(self):
        """Gets the riskgroup_f0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Группа риска при отсутствии фондирования  # noqa: E501

        :return: The riskgroup_f0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._riskgroup_f0

    @riskgroup_f0.setter
    def riskgroup_f0(self, riskgroup_f0):
        """Sets the riskgroup_f0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Группа риска при отсутствии фондирования  # noqa: E501

        :param riskgroup_f0: The riskgroup_f0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._riskgroup_f0 = riskgroup_f0

    @property
    def riskgroup_f1(self):
        """Gets the riskgroup_f1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Группа риска при наличии фондирования  # noqa: E501

        :return: The riskgroup_f1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._riskgroup_f1

    @riskgroup_f1.setter
    def riskgroup_f1(self, riskgroup_f1):
        """Sets the riskgroup_f1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Группа риска при наличии фондирования  # noqa: E501

        :param riskgroup_f1: The riskgroup_f1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._riskgroup_f1 = riskgroup_f1

    @property
    def riskgrouprule_f0(self):
        """Gets the riskgrouprule_f0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Правило группы риска при отсутствии фондирования  # noqa: E501

        :return: The riskgrouprule_f0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._riskgrouprule_f0

    @riskgrouprule_f0.setter
    def riskgrouprule_f0(self, riskgrouprule_f0):
        """Sets the riskgrouprule_f0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Правило группы риска при отсутствии фондирования  # noqa: E501

        :param riskgrouprule_f0: The riskgrouprule_f0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._riskgrouprule_f0 = riskgrouprule_f0

    @property
    def riskgrouprule_f1(self):
        """Gets the riskgrouprule_f1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Правило группа риска при наличии фондирования  # noqa: E501

        :return: The riskgrouprule_f1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._riskgrouprule_f1

    @riskgrouprule_f1.setter
    def riskgrouprule_f1(self, riskgrouprule_f1):
        """Sets the riskgrouprule_f1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Правило группа риска при наличии фондирования  # noqa: E501

        :param riskgrouprule_f1: The riskgrouprule_f1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._riskgrouprule_f1 = riskgrouprule_f1

    @property
    def couponyield(self):
        """Gets the couponyield of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Ставка купона  # noqa: E501

        :return: The couponyield of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._couponyield

    @couponyield.setter
    def couponyield(self, couponyield):
        """Sets the couponyield of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Ставка купона  # noqa: E501

        :param couponyield: The couponyield of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._couponyield = couponyield

    @property
    def timinggroupdate(self):
        """Gets the timinggroupdate of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Дата определения группы срочности  # noqa: E501

        :return: The timinggroupdate of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._timinggroupdate

    @timinggroupdate.setter
    def timinggroupdate(self, timinggroupdate):
        """Sets the timinggroupdate of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Дата определения группы срочности  # noqa: E501

        :param timinggroupdate: The timinggroupdate of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: datetime
        """

        self._timinggroupdate = timinggroupdate

    @property
    def timinggrouprule(self):
        """Gets the timinggrouprule of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Критерий группы срочности  # noqa: E501

        :return: The timinggrouprule of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._timinggrouprule

    @timinggrouprule.setter
    def timinggrouprule(self, timinggrouprule):
        """Sets the timinggrouprule of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Критерий группы срочности  # noqa: E501

        :param timinggrouprule: The timinggrouprule of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._timinggrouprule = timinggrouprule

    @property
    def duration_n(self):
        """Gets the duration_n of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Модифицированная дюрация  # noqa: E501

        :return: The duration_n of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._duration_n

    @duration_n.setter
    def duration_n(self, duration_n):
        """Sets the duration_n of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Модифицированная дюрация  # noqa: E501

        :param duration_n: The duration_n of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._duration_n = duration_n

    @property
    def convexity(self):
        """Gets the convexity of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Выпуклость  # noqa: E501

        :return: The convexity of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._convexity

    @convexity.setter
    def convexity(self, convexity):
        """Sets the convexity of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Выпуклость  # noqa: E501

        :param convexity: The convexity of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._convexity = convexity

    @property
    def equityriskrate(self):
        """Gets the equityriskrate of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Коэффициент группы риска  # noqa: E501

        :return: The equityriskrate of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._equityriskrate

    @equityriskrate.setter
    def equityriskrate(self, equityriskrate):
        """Sets the equityriskrate of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Коэффициент группы риска  # noqa: E501

        :param equityriskrate: The equityriskrate of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._equityriskrate = equityriskrate

    @property
    def qualifier139_f0g0(self):
        """Gets the qualifier139_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Классификатор по 139-И для части, фондированной в иностранной валюте и без гарантий  # noqa: E501

        :return: The qualifier139_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._qualifier139_f0g0

    @qualifier139_f0g0.setter
    def qualifier139_f0g0(self, qualifier139_f0g0):
        """Sets the qualifier139_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Классификатор по 139-И для части, фондированной в иностранной валюте и без гарантий  # noqa: E501

        :param qualifier139_f0g0: The qualifier139_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._qualifier139_f0g0 = qualifier139_f0g0

    @property
    def qualifier139_f0g1(self):
        """Gets the qualifier139_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Классификатор по 139-И для гарантированной части, фондированной в иностранной валюте  # noqa: E501

        :return: The qualifier139_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._qualifier139_f0g1

    @qualifier139_f0g1.setter
    def qualifier139_f0g1(self, qualifier139_f0g1):
        """Sets the qualifier139_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Классификатор по 139-И для гарантированной части, фондированной в иностранной валюте  # noqa: E501

        :param qualifier139_f0g1: The qualifier139_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._qualifier139_f0g1 = qualifier139_f0g1

    @property
    def qualifier139_f1g0(self):
        """Gets the qualifier139_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Классификатор по 139-И для части, фондированной в рублях и без гарантий  # noqa: E501

        :return: The qualifier139_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._qualifier139_f1g0

    @qualifier139_f1g0.setter
    def qualifier139_f1g0(self, qualifier139_f1g0):
        """Sets the qualifier139_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Классификатор по 139-И для части, фондированной в рублях и без гарантий  # noqa: E501

        :param qualifier139_f1g0: The qualifier139_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._qualifier139_f1g0 = qualifier139_f1g0

    @property
    def qualifier139_f1g1(self):
        """Gets the qualifier139_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Классификатор по 139-И для гарантированной части, фондированной в рублях  # noqa: E501

        :return: The qualifier139_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._qualifier139_f1g1

    @qualifier139_f1g1.setter
    def qualifier139_f1g1(self, qualifier139_f1g1):
        """Sets the qualifier139_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Классификатор по 139-И для гарантированной части, фондированной в рублях  # noqa: E501

        :param qualifier139_f1g1: The qualifier139_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._qualifier139_f1g1 = qualifier139_f1g1

    @property
    def qualifier421(self):
        """Gets the qualifier421 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Группа ВЛА на дату расчета  # noqa: E501

        :return: The qualifier421 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._qualifier421

    @qualifier421.setter
    def qualifier421(self, qualifier421):
        """Sets the qualifier421 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Группа ВЛА на дату расчета  # noqa: E501

        :param qualifier421: The qualifier421 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._qualifier421 = qualifier421

    @property
    def qualifier421_30(self):
        """Gets the qualifier421_30 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Группа ВЛА на дату расчета минус 30 дней  # noqa: E501

        :return: The qualifier421_30 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._qualifier421_30

    @qualifier421_30.setter
    def qualifier421_30(self, qualifier421_30):
        """Sets the qualifier421_30 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Группа ВЛА на дату расчета минус 30 дней  # noqa: E501

        :param qualifier421_30: The qualifier421_30 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._qualifier421_30 = qualifier421_30

    @property
    def daysafterbreakingrules421(self):
        """Gets the daysafterbreakingrules421 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Количество дней после выхода выпуска из группы ВЛА  # noqa: E501

        :return: The daysafterbreakingrules421 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._daysafterbreakingrules421

    @daysafterbreakingrules421.setter
    def daysafterbreakingrules421(self, daysafterbreakingrules421):
        """Sets the daysafterbreakingrules421 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Количество дней после выхода выпуска из группы ВЛА  # noqa: E501

        :param daysafterbreakingrules421: The daysafterbreakingrules421 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._daysafterbreakingrules421 = daysafterbreakingrules421

    @property
    def repodiscount139(self):
        """Gets the repodiscount139 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Величина дисконта для расчета риска по операциям РЕПО в соответствии с инструкцией 180 (139)-И  # noqa: E501

        :return: The repodiscount139 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._repodiscount139

    @repodiscount139.setter
    def repodiscount139(self, repodiscount139):
        """Sets the repodiscount139 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Величина дисконта для расчета риска по операциям РЕПО в соответствии с инструкцией 180 (139)-И  # noqa: E501

        :param repodiscount139: The repodiscount139 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._repodiscount139 = repodiscount139

    @property
    def ismktprice(self):
        """Gets the ismktprice of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Наличие рыночной цены  1 - для акций и облигаций на МБ  2 - для акций на зарубежных биржах   3 – для еврооблигаций  # noqa: E501

        :return: The ismktprice of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._ismktprice

    @ismktprice.setter
    def ismktprice(self, ismktprice):
        """Sets the ismktprice of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Наличие рыночной цены  1 - для акций и облигаций на МБ  2 - для акций на зарубежных биржах   3 – для еврооблигаций  # noqa: E501

        :param ismktprice: The ismktprice of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._ismktprice = ismktprice

    @property
    def ca_qualifier_f0g0(self):
        """Gets the ca_qualifier_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Классификатор по 180 (139)-И для части, фондированной в иностранной валюте и без гарантий  # noqa: E501

        :return: The ca_qualifier_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_qualifier_f0g0

    @ca_qualifier_f0g0.setter
    def ca_qualifier_f0g0(self, ca_qualifier_f0g0):
        """Sets the ca_qualifier_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Классификатор по 180 (139)-И для части, фондированной в иностранной валюте и без гарантий  # noqa: E501

        :param ca_qualifier_f0g0: The ca_qualifier_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_qualifier_f0g0 = ca_qualifier_f0g0

    @property
    def ca_risk_group_f0g0(self):
        """Gets the ca_risk_group_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Группа риска по 180 (139)-И для части, фондированной в иностранной валюте и без гарантий  # noqa: E501

        :return: The ca_risk_group_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_risk_group_f0g0

    @ca_risk_group_f0g0.setter
    def ca_risk_group_f0g0(self, ca_risk_group_f0g0):
        """Sets the ca_risk_group_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Группа риска по 180 (139)-И для части, фондированной в иностранной валюте и без гарантий  # noqa: E501

        :param ca_risk_group_f0g0: The ca_risk_group_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_risk_group_f0g0 = ca_risk_group_f0g0

    @property
    def ca_reason_f0g0(self):
        """Gets the ca_reason_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Обоснование группы риска по 180 (139)-И для части, фондированной в иностранной валюте и без гарантий  # noqa: E501

        :return: The ca_reason_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_reason_f0g0

    @ca_reason_f0g0.setter
    def ca_reason_f0g0(self, ca_reason_f0g0):
        """Sets the ca_reason_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Обоснование группы риска по 180 (139)-И для части, фондированной в иностранной валюте и без гарантий  # noqa: E501

        :param ca_reason_f0g0: The ca_reason_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_reason_f0g0 = ca_reason_f0g0

    @property
    def ca_code_f0g0(self):
        """Gets the ca_code_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Код по 180 (139)-И для части, фондированной в иностранной валюте и без гарантий  # noqa: E501

        :return: The ca_code_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_code_f0g0

    @ca_code_f0g0.setter
    def ca_code_f0g0(self, ca_code_f0g0):
        """Sets the ca_code_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Код по 180 (139)-И для части, фондированной в иностранной валюте и без гарантий  # noqa: E501

        :param ca_code_f0g0: The ca_code_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_code_f0g0 = ca_code_f0g0

    @property
    def ca_credit_risk_f0g0(self):
        """Gets the ca_credit_risk_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Коэффициент кредитного риска по 180 (139)-И для части, фондированной в иностранной валюте и без гарантий  # noqa: E501

        :return: The ca_credit_risk_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._ca_credit_risk_f0g0

    @ca_credit_risk_f0g0.setter
    def ca_credit_risk_f0g0(self, ca_credit_risk_f0g0):
        """Sets the ca_credit_risk_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Коэффициент кредитного риска по 180 (139)-И для части, фондированной в иностранной валюте и без гарантий  # noqa: E501

        :param ca_credit_risk_f0g0: The ca_credit_risk_f0g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._ca_credit_risk_f0g0 = ca_credit_risk_f0g0

    @property
    def ca_qualifier_f0g1(self):
        """Gets the ca_qualifier_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Классификатор по 180 (139)-И для гарантированной части, фондированной в иностранной валюте  # noqa: E501

        :return: The ca_qualifier_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_qualifier_f0g1

    @ca_qualifier_f0g1.setter
    def ca_qualifier_f0g1(self, ca_qualifier_f0g1):
        """Sets the ca_qualifier_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Классификатор по 180 (139)-И для гарантированной части, фондированной в иностранной валюте  # noqa: E501

        :param ca_qualifier_f0g1: The ca_qualifier_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_qualifier_f0g1 = ca_qualifier_f0g1

    @property
    def ca_risk_group_f0g1(self):
        """Gets the ca_risk_group_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Группа риска по 180 (139)-И для гарантированной части, фондированной в иностранной валюте  # noqa: E501

        :return: The ca_risk_group_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_risk_group_f0g1

    @ca_risk_group_f0g1.setter
    def ca_risk_group_f0g1(self, ca_risk_group_f0g1):
        """Sets the ca_risk_group_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Группа риска по 180 (139)-И для гарантированной части, фондированной в иностранной валюте  # noqa: E501

        :param ca_risk_group_f0g1: The ca_risk_group_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_risk_group_f0g1 = ca_risk_group_f0g1

    @property
    def ca_reason_f0g1(self):
        """Gets the ca_reason_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Обоснование группы риска по 180 (139)-И для гарантированной части, фондированной в иностранной валюте  # noqa: E501

        :return: The ca_reason_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_reason_f0g1

    @ca_reason_f0g1.setter
    def ca_reason_f0g1(self, ca_reason_f0g1):
        """Sets the ca_reason_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Обоснование группы риска по 180 (139)-И для гарантированной части, фондированной в иностранной валюте  # noqa: E501

        :param ca_reason_f0g1: The ca_reason_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_reason_f0g1 = ca_reason_f0g1

    @property
    def ca_code_f0g1(self):
        """Gets the ca_code_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Код по 180 (139)-И для гарантированной части, фондированной в иностранной валюте  # noqa: E501

        :return: The ca_code_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_code_f0g1

    @ca_code_f0g1.setter
    def ca_code_f0g1(self, ca_code_f0g1):
        """Sets the ca_code_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Код по 180 (139)-И для гарантированной части, фондированной в иностранной валюте  # noqa: E501

        :param ca_code_f0g1: The ca_code_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_code_f0g1 = ca_code_f0g1

    @property
    def ca_credit_risk_f0g1(self):
        """Gets the ca_credit_risk_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Коэффициент кредитного риска по 180 (139)-И для гарантированной части, фондированной в иностранной валюте  # noqa: E501

        :return: The ca_credit_risk_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._ca_credit_risk_f0g1

    @ca_credit_risk_f0g1.setter
    def ca_credit_risk_f0g1(self, ca_credit_risk_f0g1):
        """Sets the ca_credit_risk_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Коэффициент кредитного риска по 180 (139)-И для гарантированной части, фондированной в иностранной валюте  # noqa: E501

        :param ca_credit_risk_f0g1: The ca_credit_risk_f0g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._ca_credit_risk_f0g1 = ca_credit_risk_f0g1

    @property
    def ca_qualifier_f1g0(self):
        """Gets the ca_qualifier_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Классификатор по 180 (139)-И для части, фондированной в рублях и без гарантий  # noqa: E501

        :return: The ca_qualifier_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_qualifier_f1g0

    @ca_qualifier_f1g0.setter
    def ca_qualifier_f1g0(self, ca_qualifier_f1g0):
        """Sets the ca_qualifier_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Классификатор по 180 (139)-И для части, фондированной в рублях и без гарантий  # noqa: E501

        :param ca_qualifier_f1g0: The ca_qualifier_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_qualifier_f1g0 = ca_qualifier_f1g0

    @property
    def ca_risk_group_f1g0(self):
        """Gets the ca_risk_group_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Группа риска по 180 (139)-И для части, фондированной в рублях и без гарантий  # noqa: E501

        :return: The ca_risk_group_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_risk_group_f1g0

    @ca_risk_group_f1g0.setter
    def ca_risk_group_f1g0(self, ca_risk_group_f1g0):
        """Sets the ca_risk_group_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Группа риска по 180 (139)-И для части, фондированной в рублях и без гарантий  # noqa: E501

        :param ca_risk_group_f1g0: The ca_risk_group_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_risk_group_f1g0 = ca_risk_group_f1g0

    @property
    def ca_reason_f1g0(self):
        """Gets the ca_reason_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Обоснование группы риска по 180 (139)-И для части, фондированной в рублях и без гарантий  # noqa: E501

        :return: The ca_reason_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_reason_f1g0

    @ca_reason_f1g0.setter
    def ca_reason_f1g0(self, ca_reason_f1g0):
        """Sets the ca_reason_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Обоснование группы риска по 180 (139)-И для части, фондированной в рублях и без гарантий  # noqa: E501

        :param ca_reason_f1g0: The ca_reason_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_reason_f1g0 = ca_reason_f1g0

    @property
    def ca_code_f1g0(self):
        """Gets the ca_code_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Код по 180 (139)-И для части, фондированной в рублях и без гарантий  # noqa: E501

        :return: The ca_code_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_code_f1g0

    @ca_code_f1g0.setter
    def ca_code_f1g0(self, ca_code_f1g0):
        """Sets the ca_code_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Код по 180 (139)-И для части, фондированной в рублях и без гарантий  # noqa: E501

        :param ca_code_f1g0: The ca_code_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_code_f1g0 = ca_code_f1g0

    @property
    def ca_credit_risk_f1g0(self):
        """Gets the ca_credit_risk_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Коэффициент кредитного риска по 180 (139)-И для части, фондированной в рублях и без гарантий  # noqa: E501

        :return: The ca_credit_risk_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._ca_credit_risk_f1g0

    @ca_credit_risk_f1g0.setter
    def ca_credit_risk_f1g0(self, ca_credit_risk_f1g0):
        """Sets the ca_credit_risk_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Коэффициент кредитного риска по 180 (139)-И для части, фондированной в рублях и без гарантий  # noqa: E501

        :param ca_credit_risk_f1g0: The ca_credit_risk_f1g0 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._ca_credit_risk_f1g0 = ca_credit_risk_f1g0

    @property
    def ca_qualifier_f1g1(self):
        """Gets the ca_qualifier_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Классификатор по 180 (139)-И для гарантированной части, фондированной в рублях  # noqa: E501

        :return: The ca_qualifier_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_qualifier_f1g1

    @ca_qualifier_f1g1.setter
    def ca_qualifier_f1g1(self, ca_qualifier_f1g1):
        """Sets the ca_qualifier_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Классификатор по 180 (139)-И для гарантированной части, фондированной в рублях  # noqa: E501

        :param ca_qualifier_f1g1: The ca_qualifier_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_qualifier_f1g1 = ca_qualifier_f1g1

    @property
    def ca_risk_group_f1g1(self):
        """Gets the ca_risk_group_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Группа риска по 180 (139)-И для гарантированной части, фондированной в рублях  # noqa: E501

        :return: The ca_risk_group_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_risk_group_f1g1

    @ca_risk_group_f1g1.setter
    def ca_risk_group_f1g1(self, ca_risk_group_f1g1):
        """Sets the ca_risk_group_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Группа риска по 180 (139)-И для гарантированной части, фондированной в рублях  # noqa: E501

        :param ca_risk_group_f1g1: The ca_risk_group_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_risk_group_f1g1 = ca_risk_group_f1g1

    @property
    def ca_reason_f1g1(self):
        """Gets the ca_reason_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Обоснование группы риска по 180 (139)-И для гарантированной части, фондированной в рублях  # noqa: E501

        :return: The ca_reason_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_reason_f1g1

    @ca_reason_f1g1.setter
    def ca_reason_f1g1(self, ca_reason_f1g1):
        """Sets the ca_reason_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Обоснование группы риска по 180 (139)-И для гарантированной части, фондированной в рублях  # noqa: E501

        :param ca_reason_f1g1: The ca_reason_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_reason_f1g1 = ca_reason_f1g1

    @property
    def ca_code_f1g1(self):
        """Gets the ca_code_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Код по 180 (139)-И для гарантированной части, фондированной в рублях  # noqa: E501

        :return: The ca_code_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_code_f1g1

    @ca_code_f1g1.setter
    def ca_code_f1g1(self, ca_code_f1g1):
        """Sets the ca_code_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Код по 180 (139)-И для гарантированной части, фондированной в рублях  # noqa: E501

        :param ca_code_f1g1: The ca_code_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_code_f1g1 = ca_code_f1g1

    @property
    def ca_credit_risk_f1g1(self):
        """Gets the ca_credit_risk_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Коэффициент кредитного риска по 180 (139)-И для гарантированной части, фондированной в рублях  # noqa: E501

        :return: The ca_credit_risk_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._ca_credit_risk_f1g1

    @ca_credit_risk_f1g1.setter
    def ca_credit_risk_f1g1(self, ca_credit_risk_f1g1):
        """Sets the ca_credit_risk_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Коэффициент кредитного риска по 180 (139)-И для гарантированной части, фондированной в рублях  # noqa: E501

        :param ca_credit_risk_f1g1: The ca_credit_risk_f1g1 of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._ca_credit_risk_f1g1 = ca_credit_risk_f1g1

    @property
    def ca_doc_id(self):
        """Gets the ca_doc_id of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Идентификатор нормативного документа  # noqa: E501

        :return: The ca_doc_id of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._ca_doc_id

    @ca_doc_id.setter
    def ca_doc_id(self, ca_doc_id):
        """Sets the ca_doc_id of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Идентификатор нормативного документа  # noqa: E501

        :param ca_doc_id: The ca_doc_id of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._ca_doc_id = ca_doc_id

    @property
    def ca_doc_shortname(self):
        """Gets the ca_doc_shortname of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Краткое наименование нормативного документа(«180-И», «387-П» и т.п.).  # noqa: E501

        :return: The ca_doc_shortname of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._ca_doc_shortname

    @ca_doc_shortname.setter
    def ca_doc_shortname(self, ca_doc_shortname):
        """Sets the ca_doc_shortname of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Краткое наименование нормативного документа(«180-И», «387-П» и т.п.).  # noqa: E501

        :param ca_doc_shortname: The ca_doc_shortname of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._ca_doc_shortname = ca_doc_shortname

    @property
    def duration(self):
        """Gets the duration of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Дюрация  # noqa: E501

        :return: The duration of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Дюрация  # noqa: E501

        :param duration: The duration of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def pvbp(self):
        """Gets the pvbp of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        PVBP  # noqa: E501

        :return: The pvbp of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._pvbp

    @pvbp.setter
    def pvbp(self, pvbp):
        """Sets the pvbp of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        PVBP  # noqa: E501

        :param pvbp: The pvbp of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._pvbp = pvbp

    @property
    def yield_agg(self):
        """Gets the yield_agg of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Аггрегированная доходность  # noqa: E501

        :return: The yield_agg of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._yield_agg

    @yield_agg.setter
    def yield_agg(self, yield_agg):
        """Sets the yield_agg of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Аггрегированная доходность  # noqa: E501

        :param yield_agg: The yield_agg of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._yield_agg = yield_agg

    @property
    def isnegotiability(self):
        """Gets the isnegotiability of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Показатель обращаемости для целей учета налогообложения НДФЛ ЦБ  1 - для акций и облигаций на МБ  2 - для акций на зарубежных биржах  3 – для еврооблигаций  # noqa: E501

        :return: The isnegotiability of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: int
        """
        return self._isnegotiability

    @isnegotiability.setter
    def isnegotiability(self, isnegotiability):
        """Sets the isnegotiability of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Показатель обращаемости для целей учета налогообложения НДФЛ ЦБ  1 - для акций и облигаций на МБ  2 - для акций на зарубежных биржах  3 – для еврооблигаций  # noqa: E501

        :param isnegotiability: The isnegotiability of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: int
        """

        self._isnegotiability = isnegotiability

    @property
    def intopquotelist(self):
        """Gets the intopquotelist of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Флаг вхождения в один из котировальных списков высшего уровня  # noqa: E501

        :return: The intopquotelist of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: bool
        """
        return self._intopquotelist

    @intopquotelist.setter
    def intopquotelist(self, intopquotelist):
        """Sets the intopquotelist of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Флаг вхождения в один из котировальных списков высшего уровня  # noqa: E501

        :param intopquotelist: The intopquotelist of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: bool
        """

        self._intopquotelist = intopquotelist

    @property
    def topquotelistname(self):
        """Gets the topquotelistname of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Наименование первого из котировальных списков высшего уровня (при вхождении)  # noqa: E501

        :return: The topquotelistname of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._topquotelistname

    @topquotelistname.setter
    def topquotelistname(self, topquotelistname):
        """Sets the topquotelistname of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Наименование первого из котировальных списков высшего уровня (при вхождении)  # noqa: E501

        :param topquotelistname: The topquotelistname of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._topquotelistname = topquotelistname

    @property
    def exch_name(self):
        """Gets the exch_name of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Наименование биржи для первого из котировальных списков высшего уровня (при вхождении)  # noqa: E501

        :return: The exch_name of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: str
        """
        return self._exch_name

    @exch_name.setter
    def exch_name(self, exch_name):
        """Sets the exch_name of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Наименование биржи для первого из котировальных списков высшего уровня (при вхождении)  # noqa: E501

        :param exch_name: The exch_name of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: str
        """

        self._exch_name = exch_name

    @property
    def riskgroup_f0_coef(self):
        """Gets the riskgroup_f0_coef of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Коэффициент группы риска при отсутствии \"фондирования\"  # noqa: E501

        :return: The riskgroup_f0_coef of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._riskgroup_f0_coef

    @riskgroup_f0_coef.setter
    def riskgroup_f0_coef(self, riskgroup_f0_coef):
        """Sets the riskgroup_f0_coef of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Коэффициент группы риска при отсутствии \"фондирования\"  # noqa: E501

        :param riskgroup_f0_coef: The riskgroup_f0_coef of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._riskgroup_f0_coef = riskgroup_f0_coef

    @property
    def riskgroup_f1_coef(self):
        """Gets the riskgroup_f1_coef of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501

        Коэффициент группы риска при наличии \"фондирования\"  # noqa: E501

        :return: The riskgroup_f1_coef of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :rtype: float
        """
        return self._riskgroup_f1_coef

    @riskgroup_f1_coef.setter
    def riskgroup_f1_coef(self, riskgroup_f1_coef):
        """Sets the riskgroup_f1_coef of this EfirDataHubModelsModelsRiskMarketRiskDataFields.

        Коэффициент группы риска при наличии \"фондирования\"  # noqa: E501

        :param riskgroup_f1_coef: The riskgroup_f1_coef of this EfirDataHubModelsModelsRiskMarketRiskDataFields.  # noqa: E501
        :type: float
        """

        self._riskgroup_f1_coef = riskgroup_f1_coef

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRiskMarketRiskDataFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRiskMarketRiskDataFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
