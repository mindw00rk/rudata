# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsInfoFintoolFieldsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintool_type': 'str',
        'field_group': 'str',
        'codename': 'str',
        'fullname_rus': 'str',
        'comment_rus': 'str',
        'field_type': 'str',
        'codename_rus': 'str'
    }

    attribute_map = {
        'fintool_type': 'fintool_type',
        'field_group': 'field_group',
        'codename': 'codename',
        'fullname_rus': 'fullname_rus',
        'comment_rus': 'comment_rus',
        'field_type': 'field_type',
        'codename_rus': 'codename_rus'
    }

    def __init__(self, fintool_type=None, field_group=None, codename=None, fullname_rus=None, comment_rus=None, field_type=None, codename_rus=None):  # noqa: E501
        """EfirDataHubModelsModelsInfoFintoolFieldsFields - a model defined in Swagger"""  # noqa: E501
        self._fintool_type = None
        self._field_group = None
        self._codename = None
        self._fullname_rus = None
        self._comment_rus = None
        self._field_type = None
        self._codename_rus = None
        self.discriminator = None
        if fintool_type is not None:
            self.fintool_type = fintool_type
        if field_group is not None:
            self.field_group = field_group
        if codename is not None:
            self.codename = codename
        if fullname_rus is not None:
            self.fullname_rus = fullname_rus
        if comment_rus is not None:
            self.comment_rus = comment_rus
        if field_type is not None:
            self.field_type = field_type
        if codename_rus is not None:
            self.codename_rus = codename_rus

    @property
    def fintool_type(self):
        """Gets the fintool_type of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501

        Тип инструмента, к которому относится поле  # noqa: E501

        :return: The fintool_type of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._fintool_type

    @fintool_type.setter
    def fintool_type(self, fintool_type):
        """Sets the fintool_type of this EfirDataHubModelsModelsInfoFintoolFieldsFields.

        Тип инструмента, к которому относится поле  # noqa: E501

        :param fintool_type: The fintool_type of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :type: str
        """

        self._fintool_type = fintool_type

    @property
    def field_group(self):
        """Gets the field_group of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501

        Идентификатор группы полей  # noqa: E501

        :return: The field_group of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._field_group

    @field_group.setter
    def field_group(self, field_group):
        """Sets the field_group of this EfirDataHubModelsModelsInfoFintoolFieldsFields.

        Идентификатор группы полей  # noqa: E501

        :param field_group: The field_group of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :type: str
        """

        self._field_group = field_group

    @property
    def codename(self):
        """Gets the codename of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501

        Кодовое наименование поля  # noqa: E501

        :return: The codename of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._codename

    @codename.setter
    def codename(self, codename):
        """Sets the codename of this EfirDataHubModelsModelsInfoFintoolFieldsFields.

        Кодовое наименование поля  # noqa: E501

        :param codename: The codename of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :type: str
        """

        self._codename = codename

    @property
    def fullname_rus(self):
        """Gets the fullname_rus of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501

        Наименование поля (рус.)  # noqa: E501

        :return: The fullname_rus of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_rus

    @fullname_rus.setter
    def fullname_rus(self, fullname_rus):
        """Sets the fullname_rus of this EfirDataHubModelsModelsInfoFintoolFieldsFields.

        Наименование поля (рус.)  # noqa: E501

        :param fullname_rus: The fullname_rus of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :type: str
        """

        self._fullname_rus = fullname_rus

    @property
    def comment_rus(self):
        """Gets the comment_rus of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501

        Дополнительный комментарий к полю (рус.)  # noqa: E501

        :return: The comment_rus of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._comment_rus

    @comment_rus.setter
    def comment_rus(self, comment_rus):
        """Sets the comment_rus of this EfirDataHubModelsModelsInfoFintoolFieldsFields.

        Дополнительный комментарий к полю (рус.)  # noqa: E501

        :param comment_rus: The comment_rus of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :type: str
        """

        self._comment_rus = comment_rus

    @property
    def field_type(self):
        """Gets the field_type of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501

        Тип источника:  ‘Checked’ - сверено, источник Интерфакс  ‘IFX’ - не сверено, источник Интерфакс  ‘Marker’ - маркер сверки  ‘NRD’ – источник НРД  # noqa: E501

        :return: The field_type of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this EfirDataHubModelsModelsInfoFintoolFieldsFields.

        Тип источника:  ‘Checked’ - сверено, источник Интерфакс  ‘IFX’ - не сверено, источник Интерфакс  ‘Marker’ - маркер сверки  ‘NRD’ – источник НРД  # noqa: E501

        :param field_type: The field_type of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :type: str
        """

        self._field_type = field_type

    @property
    def codename_rus(self):
        """Gets the codename_rus of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501


        :return: The codename_rus of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._codename_rus

    @codename_rus.setter
    def codename_rus(self, codename_rus):
        """Sets the codename_rus of this EfirDataHubModelsModelsInfoFintoolFieldsFields.


        :param codename_rus: The codename_rus of this EfirDataHubModelsModelsInfoFintoolFieldsFields.  # noqa: E501
        :type: str
        """

        self._codename_rus = codename_rus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsInfoFintoolFieldsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsInfoFintoolFieldsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
