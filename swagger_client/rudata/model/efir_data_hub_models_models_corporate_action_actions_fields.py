# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsCorporateActionActionsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'msg_id': 'int',
        'act_date': 'datetime',
        'update_date': 'datetime',
        'msg_type': 'str',
        'act_id': 'str',
        'act_code': 'str',
        'fintoolid': 'int',
        'isin': 'str',
        'regcode': 'str',
        'nrdcode': 'str',
        'nickname': 'str',
        'fininstid': 'int',
        'issuername': 'str',
        'issuerinn': 'str',
        'issuerogrn': 'str',
        'issuerokpo': 'str',
        'issuerefircode': 'str',
        'issuershortname': 'str',
        'issuersector': 'str',
        'event_effdate': 'datetime',
        'meeting_date': 'datetime',
        'meeting_form': 'str',
        'voiting_enddate': 'datetime',
        'paydate_plan': 'datetime',
        'event_fixdate': 'datetime',
        'event_ddlndate': 'datetime',
        'paydate_fact': 'datetime',
        'eventper_beg': 'datetime',
        'eventper_end': 'datetime',
        'div_source': 'str',
        'div_year': 'int',
        'app_perbeg': 'datetime',
        'app_perend': 'datetime',
        'cancel_perbeg': 'datetime',
        'cancel_perend': 'datetime',
        'payment_perbeg': 'datetime',
        'payment_perend': 'datetime',
        'divpay_sumval': 'float',
        'divrecpt_sumval': 'float',
        'price_type': 'str',
        'pay1sec': 'float',
        'currency': 'str',
        'value': 'float',
        'qty_addsec': 'float',
        'qty_exsec': 'float',
        'qty_newsec': 'float',
        'note': 'str',
        'discagencycode': 'str',
        'disceventid': 'int',
        'disceventtypeid': 'int',
        'disceventtype': 'str',
        'disceventpublishdate': 'datetime',
        'disceventtext': 'str',
        'dealside1_name': 'str',
        'dealside1_inn': 'str',
        'dealside2_name': 'str',
        'dealside2_inn': 'str',
        'deal_type': 'str',
        'deal_category': 'str',
        'share_before': 'float',
        'share_after': 'float',
        'fio': 'str',
        'position': 'str',
        'shareord_before': 'float',
        'shareord_after': 'float',
        'have_bids': 'bool',
        'have_prio': 'bool',
        'have_dvca': 'bool',
        'payment_type': 'str',
        'payment_currency': 'str',
        'decision_type': 'str',
        'total_currency': 'str',
        'offer_currency': 'str',
        'issuer_rusbonds_type': 'str',
        'payment_nominees_date': 'datetime',
        'payment_others_date': 'datetime',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'msg_id': 'msg_id',
        'act_date': 'act_date',
        'update_date': 'update_date',
        'msg_type': 'msg_type',
        'act_id': 'act_id',
        'act_code': 'act_code',
        'fintoolid': 'fintoolid',
        'isin': 'isin',
        'regcode': 'regcode',
        'nrdcode': 'nrdcode',
        'nickname': 'nickname',
        'fininstid': 'fininstid',
        'issuername': 'issuername',
        'issuerinn': 'issuerinn',
        'issuerogrn': 'issuerogrn',
        'issuerokpo': 'issuerokpo',
        'issuerefircode': 'issuerefircode',
        'issuershortname': 'issuershortname',
        'issuersector': 'issuersector',
        'event_effdate': 'event_effdate',
        'meeting_date': 'meeting_date',
        'meeting_form': 'meeting_form',
        'voiting_enddate': 'voiting_enddate',
        'paydate_plan': 'paydate_plan',
        'event_fixdate': 'event_fixdate',
        'event_ddlndate': 'event_ddlndate',
        'paydate_fact': 'paydate_fact',
        'eventper_beg': 'eventper_beg',
        'eventper_end': 'eventper_end',
        'div_source': 'div_source',
        'div_year': 'div_year',
        'app_perbeg': 'app_perbeg',
        'app_perend': 'app_perend',
        'cancel_perbeg': 'cancel_perbeg',
        'cancel_perend': 'cancel_perend',
        'payment_perbeg': 'payment_perbeg',
        'payment_perend': 'payment_perend',
        'divpay_sumval': 'divpay_sumval',
        'divrecpt_sumval': 'divrecpt_sumval',
        'price_type': 'price_type',
        'pay1sec': 'pay1sec',
        'currency': 'currency',
        'value': 'value',
        'qty_addsec': 'qty_addsec',
        'qty_exsec': 'qty_exsec',
        'qty_newsec': 'qty_newsec',
        'note': 'note',
        'discagencycode': 'discagencycode',
        'disceventid': 'disceventid',
        'disceventtypeid': 'disceventtypeid',
        'disceventtype': 'disceventtype',
        'disceventpublishdate': 'disceventpublishdate',
        'disceventtext': 'disceventtext',
        'dealside1_name': 'dealside1_name',
        'dealside1_inn': 'dealside1_inn',
        'dealside2_name': 'dealside2_name',
        'dealside2_inn': 'dealside2_inn',
        'deal_type': 'deal_type',
        'deal_category': 'deal_category',
        'share_before': 'share_before',
        'share_after': 'share_after',
        'fio': 'fio',
        'position': 'position',
        'shareord_before': 'shareord_before',
        'shareord_after': 'shareord_after',
        'have_bids': 'have_bids',
        'have_prio': 'have_prio',
        'have_dvca': 'have_dvca',
        'payment_type': 'payment_type',
        'payment_currency': 'payment_currency',
        'decision_type': 'decision_type',
        'total_currency': 'total_currency',
        'offer_currency': 'offer_currency',
        'issuer_rusbonds_type': 'issuer_rusbonds_type',
        'payment_nominees_date': 'payment_nominees_date',
        'payment_others_date': 'payment_others_date',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, msg_id=None, act_date=None, update_date=None, msg_type=None, act_id=None, act_code=None, fintoolid=None, isin=None, regcode=None, nrdcode=None, nickname=None, fininstid=None, issuername=None, issuerinn=None, issuerogrn=None, issuerokpo=None, issuerefircode=None, issuershortname=None, issuersector=None, event_effdate=None, meeting_date=None, meeting_form=None, voiting_enddate=None, paydate_plan=None, event_fixdate=None, event_ddlndate=None, paydate_fact=None, eventper_beg=None, eventper_end=None, div_source=None, div_year=None, app_perbeg=None, app_perend=None, cancel_perbeg=None, cancel_perend=None, payment_perbeg=None, payment_perend=None, divpay_sumval=None, divrecpt_sumval=None, price_type=None, pay1sec=None, currency=None, value=None, qty_addsec=None, qty_exsec=None, qty_newsec=None, note=None, discagencycode=None, disceventid=None, disceventtypeid=None, disceventtype=None, disceventpublishdate=None, disceventtext=None, dealside1_name=None, dealside1_inn=None, dealside2_name=None, dealside2_inn=None, deal_type=None, deal_category=None, share_before=None, share_after=None, fio=None, position=None, shareord_before=None, shareord_after=None, have_bids=None, have_prio=None, have_dvca=None, payment_type=None, payment_currency=None, decision_type=None, total_currency=None, offer_currency=None, issuer_rusbonds_type=None, payment_nominees_date=None, payment_others_date=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsCorporateActionActionsFields - a model defined in Swagger"""  # noqa: E501
        self._msg_id = None
        self._act_date = None
        self._update_date = None
        self._msg_type = None
        self._act_id = None
        self._act_code = None
        self._fintoolid = None
        self._isin = None
        self._regcode = None
        self._nrdcode = None
        self._nickname = None
        self._fininstid = None
        self._issuername = None
        self._issuerinn = None
        self._issuerogrn = None
        self._issuerokpo = None
        self._issuerefircode = None
        self._issuershortname = None
        self._issuersector = None
        self._event_effdate = None
        self._meeting_date = None
        self._meeting_form = None
        self._voiting_enddate = None
        self._paydate_plan = None
        self._event_fixdate = None
        self._event_ddlndate = None
        self._paydate_fact = None
        self._eventper_beg = None
        self._eventper_end = None
        self._div_source = None
        self._div_year = None
        self._app_perbeg = None
        self._app_perend = None
        self._cancel_perbeg = None
        self._cancel_perend = None
        self._payment_perbeg = None
        self._payment_perend = None
        self._divpay_sumval = None
        self._divrecpt_sumval = None
        self._price_type = None
        self._pay1sec = None
        self._currency = None
        self._value = None
        self._qty_addsec = None
        self._qty_exsec = None
        self._qty_newsec = None
        self._note = None
        self._discagencycode = None
        self._disceventid = None
        self._disceventtypeid = None
        self._disceventtype = None
        self._disceventpublishdate = None
        self._disceventtext = None
        self._dealside1_name = None
        self._dealside1_inn = None
        self._dealside2_name = None
        self._dealside2_inn = None
        self._deal_type = None
        self._deal_category = None
        self._share_before = None
        self._share_after = None
        self._fio = None
        self._position = None
        self._shareord_before = None
        self._shareord_after = None
        self._have_bids = None
        self._have_prio = None
        self._have_dvca = None
        self._payment_type = None
        self._payment_currency = None
        self._decision_type = None
        self._total_currency = None
        self._offer_currency = None
        self._issuer_rusbonds_type = None
        self._payment_nominees_date = None
        self._payment_others_date = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if msg_id is not None:
            self.msg_id = msg_id
        if act_date is not None:
            self.act_date = act_date
        if update_date is not None:
            self.update_date = update_date
        if msg_type is not None:
            self.msg_type = msg_type
        if act_id is not None:
            self.act_id = act_id
        if act_code is not None:
            self.act_code = act_code
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if isin is not None:
            self.isin = isin
        if regcode is not None:
            self.regcode = regcode
        if nrdcode is not None:
            self.nrdcode = nrdcode
        if nickname is not None:
            self.nickname = nickname
        if fininstid is not None:
            self.fininstid = fininstid
        if issuername is not None:
            self.issuername = issuername
        if issuerinn is not None:
            self.issuerinn = issuerinn
        if issuerogrn is not None:
            self.issuerogrn = issuerogrn
        if issuerokpo is not None:
            self.issuerokpo = issuerokpo
        if issuerefircode is not None:
            self.issuerefircode = issuerefircode
        if issuershortname is not None:
            self.issuershortname = issuershortname
        if issuersector is not None:
            self.issuersector = issuersector
        if event_effdate is not None:
            self.event_effdate = event_effdate
        if meeting_date is not None:
            self.meeting_date = meeting_date
        if meeting_form is not None:
            self.meeting_form = meeting_form
        if voiting_enddate is not None:
            self.voiting_enddate = voiting_enddate
        if paydate_plan is not None:
            self.paydate_plan = paydate_plan
        if event_fixdate is not None:
            self.event_fixdate = event_fixdate
        if event_ddlndate is not None:
            self.event_ddlndate = event_ddlndate
        if paydate_fact is not None:
            self.paydate_fact = paydate_fact
        if eventper_beg is not None:
            self.eventper_beg = eventper_beg
        if eventper_end is not None:
            self.eventper_end = eventper_end
        if div_source is not None:
            self.div_source = div_source
        if div_year is not None:
            self.div_year = div_year
        if app_perbeg is not None:
            self.app_perbeg = app_perbeg
        if app_perend is not None:
            self.app_perend = app_perend
        if cancel_perbeg is not None:
            self.cancel_perbeg = cancel_perbeg
        if cancel_perend is not None:
            self.cancel_perend = cancel_perend
        if payment_perbeg is not None:
            self.payment_perbeg = payment_perbeg
        if payment_perend is not None:
            self.payment_perend = payment_perend
        if divpay_sumval is not None:
            self.divpay_sumval = divpay_sumval
        if divrecpt_sumval is not None:
            self.divrecpt_sumval = divrecpt_sumval
        if price_type is not None:
            self.price_type = price_type
        if pay1sec is not None:
            self.pay1sec = pay1sec
        if currency is not None:
            self.currency = currency
        if value is not None:
            self.value = value
        if qty_addsec is not None:
            self.qty_addsec = qty_addsec
        if qty_exsec is not None:
            self.qty_exsec = qty_exsec
        if qty_newsec is not None:
            self.qty_newsec = qty_newsec
        if note is not None:
            self.note = note
        if discagencycode is not None:
            self.discagencycode = discagencycode
        if disceventid is not None:
            self.disceventid = disceventid
        if disceventtypeid is not None:
            self.disceventtypeid = disceventtypeid
        if disceventtype is not None:
            self.disceventtype = disceventtype
        if disceventpublishdate is not None:
            self.disceventpublishdate = disceventpublishdate
        if disceventtext is not None:
            self.disceventtext = disceventtext
        if dealside1_name is not None:
            self.dealside1_name = dealside1_name
        if dealside1_inn is not None:
            self.dealside1_inn = dealside1_inn
        if dealside2_name is not None:
            self.dealside2_name = dealside2_name
        if dealside2_inn is not None:
            self.dealside2_inn = dealside2_inn
        if deal_type is not None:
            self.deal_type = deal_type
        if deal_category is not None:
            self.deal_category = deal_category
        if share_before is not None:
            self.share_before = share_before
        if share_after is not None:
            self.share_after = share_after
        if fio is not None:
            self.fio = fio
        if position is not None:
            self.position = position
        if shareord_before is not None:
            self.shareord_before = shareord_before
        if shareord_after is not None:
            self.shareord_after = shareord_after
        if have_bids is not None:
            self.have_bids = have_bids
        if have_prio is not None:
            self.have_prio = have_prio
        if have_dvca is not None:
            self.have_dvca = have_dvca
        if payment_type is not None:
            self.payment_type = payment_type
        if payment_currency is not None:
            self.payment_currency = payment_currency
        if decision_type is not None:
            self.decision_type = decision_type
        if total_currency is not None:
            self.total_currency = total_currency
        if offer_currency is not None:
            self.offer_currency = offer_currency
        if issuer_rusbonds_type is not None:
            self.issuer_rusbonds_type = issuer_rusbonds_type
        if payment_nominees_date is not None:
            self.payment_nominees_date = payment_nominees_date
        if payment_others_date is not None:
            self.payment_others_date = payment_others_date
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def msg_id(self):
        """Gets the msg_id of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        УИН сообщения  # noqa: E501

        :return: The msg_id of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: int
        """
        return self._msg_id

    @msg_id.setter
    def msg_id(self, msg_id):
        """Sets the msg_id of this EfirDataHubModelsModelsCorporateActionActionsFields.

        УИН сообщения  # noqa: E501

        :param msg_id: The msg_id of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: int
        """

        self._msg_id = msg_id

    @property
    def act_date(self):
        """Gets the act_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Дата КД  # noqa: E501

        :return: The act_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._act_date

    @act_date.setter
    def act_date(self, act_date):
        """Sets the act_date of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Дата КД  # noqa: E501

        :param act_date: The act_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._act_date = act_date

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Дата/время обновления связи с инструментом  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Дата/время обновления связи с инструментом  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def msg_type(self):
        """Gets the msg_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Тип сообщения  # noqa: E501

        :return: The msg_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._msg_type

    @msg_type.setter
    def msg_type(self, msg_type):
        """Sets the msg_type of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Тип сообщения  # noqa: E501

        :param msg_type: The msg_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._msg_type = msg_type

    @property
    def act_id(self):
        """Gets the act_id of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        УИН КД  # noqa: E501

        :return: The act_id of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._act_id

    @act_id.setter
    def act_id(self, act_id):
        """Sets the act_id of this EfirDataHubModelsModelsCorporateActionActionsFields.

        УИН КД  # noqa: E501

        :param act_id: The act_id of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._act_id = act_id

    @property
    def act_code(self):
        """Gets the act_code of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Код КД  # noqa: E501

        :return: The act_code of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._act_code

    @act_code.setter
    def act_code(self, act_code):
        """Sets the act_code of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Код КД  # noqa: E501

        :param act_code: The act_code of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._act_code = act_code

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        УИН выпуска  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsCorporateActionActionsFields.

        УИН выпуска  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        ISIN  # noqa: E501

        :return: The isin of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsModelsCorporateActionActionsFields.

        ISIN  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def regcode(self):
        """Gets the regcode of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Гос.Рег.Номер  # noqa: E501

        :return: The regcode of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._regcode

    @regcode.setter
    def regcode(self, regcode):
        """Sets the regcode of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Гос.Рег.Номер  # noqa: E501

        :param regcode: The regcode of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._regcode = regcode

    @property
    def nrdcode(self):
        """Gets the nrdcode of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Код НРД  # noqa: E501

        :return: The nrdcode of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._nrdcode

    @nrdcode.setter
    def nrdcode(self, nrdcode):
        """Sets the nrdcode of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Код НРД  # noqa: E501

        :param nrdcode: The nrdcode of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._nrdcode = nrdcode

    @property
    def nickname(self):
        """Gets the nickname of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Краткое наименование  # noqa: E501

        :return: The nickname of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Краткое наименование  # noqa: E501

        :param nickname: The nickname of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def fininstid(self):
        """Gets the fininstid of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        УИН эмитента  # noqa: E501

        :return: The fininstid of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid

    @fininstid.setter
    def fininstid(self, fininstid):
        """Sets the fininstid of this EfirDataHubModelsModelsCorporateActionActionsFields.

        УИН эмитента  # noqa: E501

        :param fininstid: The fininstid of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: int
        """

        self._fininstid = fininstid

    @property
    def issuername(self):
        """Gets the issuername of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Имя эмитента  # noqa: E501

        :return: The issuername of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._issuername

    @issuername.setter
    def issuername(self, issuername):
        """Sets the issuername of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Имя эмитента  # noqa: E501

        :param issuername: The issuername of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._issuername = issuername

    @property
    def issuerinn(self):
        """Gets the issuerinn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        ИНН эмитента  # noqa: E501

        :return: The issuerinn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._issuerinn

    @issuerinn.setter
    def issuerinn(self, issuerinn):
        """Sets the issuerinn of this EfirDataHubModelsModelsCorporateActionActionsFields.

        ИНН эмитента  # noqa: E501

        :param issuerinn: The issuerinn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._issuerinn = issuerinn

    @property
    def issuerogrn(self):
        """Gets the issuerogrn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        ОГРН эмитента  # noqa: E501

        :return: The issuerogrn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._issuerogrn

    @issuerogrn.setter
    def issuerogrn(self, issuerogrn):
        """Sets the issuerogrn of this EfirDataHubModelsModelsCorporateActionActionsFields.

        ОГРН эмитента  # noqa: E501

        :param issuerogrn: The issuerogrn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._issuerogrn = issuerogrn

    @property
    def issuerokpo(self):
        """Gets the issuerokpo of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        ОКПО эмитента  # noqa: E501

        :return: The issuerokpo of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._issuerokpo

    @issuerokpo.setter
    def issuerokpo(self, issuerokpo):
        """Sets the issuerokpo of this EfirDataHubModelsModelsCorporateActionActionsFields.

        ОКПО эмитента  # noqa: E501

        :param issuerokpo: The issuerokpo of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._issuerokpo = issuerokpo

    @property
    def issuerefircode(self):
        """Gets the issuerefircode of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Код эмитента Интерфакс  # noqa: E501

        :return: The issuerefircode of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._issuerefircode

    @issuerefircode.setter
    def issuerefircode(self, issuerefircode):
        """Sets the issuerefircode of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Код эмитента Интерфакс  # noqa: E501

        :param issuerefircode: The issuerefircode of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._issuerefircode = issuerefircode

    @property
    def issuershortname(self):
        """Gets the issuershortname of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Краткое наименование эмитента  # noqa: E501

        :return: The issuershortname of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._issuershortname

    @issuershortname.setter
    def issuershortname(self, issuershortname):
        """Sets the issuershortname of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Краткое наименование эмитента  # noqa: E501

        :param issuershortname: The issuershortname of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._issuershortname = issuershortname

    @property
    def issuersector(self):
        """Gets the issuersector of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Сектор эмитента  # noqa: E501

        :return: The issuersector of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._issuersector

    @issuersector.setter
    def issuersector(self, issuersector):
        """Sets the issuersector of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Сектор эмитента  # noqa: E501

        :param issuersector: The issuersector of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._issuersector = issuersector

    @property
    def event_effdate(self):
        """Gets the event_effdate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Дата вступления события в силу  # noqa: E501

        :return: The event_effdate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._event_effdate

    @event_effdate.setter
    def event_effdate(self, event_effdate):
        """Sets the event_effdate of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Дата вступления события в силу  # noqa: E501

        :param event_effdate: The event_effdate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._event_effdate = event_effdate

    @property
    def meeting_date(self):
        """Gets the meeting_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Дата собрания  # noqa: E501

        :return: The meeting_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._meeting_date

    @meeting_date.setter
    def meeting_date(self, meeting_date):
        """Sets the meeting_date of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Дата собрания  # noqa: E501

        :param meeting_date: The meeting_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._meeting_date = meeting_date

    @property
    def meeting_form(self):
        """Gets the meeting_form of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Форма собрания  # noqa: E501

        :return: The meeting_form of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._meeting_form

    @meeting_form.setter
    def meeting_form(self, meeting_form):
        """Sets the meeting_form of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Форма собрания  # noqa: E501

        :param meeting_form: The meeting_form of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._meeting_form = meeting_form

    @property
    def voiting_enddate(self):
        """Gets the voiting_enddate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Дата голосования  # noqa: E501

        :return: The voiting_enddate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._voiting_enddate

    @voiting_enddate.setter
    def voiting_enddate(self, voiting_enddate):
        """Sets the voiting_enddate of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Дата голосования  # noqa: E501

        :param voiting_enddate: The voiting_enddate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._voiting_enddate = voiting_enddate

    @property
    def paydate_plan(self):
        """Gets the paydate_plan of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Дата платежа (план.)  # noqa: E501

        :return: The paydate_plan of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._paydate_plan

    @paydate_plan.setter
    def paydate_plan(self, paydate_plan):
        """Sets the paydate_plan of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Дата платежа (план.)  # noqa: E501

        :param paydate_plan: The paydate_plan of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._paydate_plan = paydate_plan

    @property
    def event_fixdate(self):
        """Gets the event_fixdate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Дата фиксации списка  # noqa: E501

        :return: The event_fixdate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._event_fixdate

    @event_fixdate.setter
    def event_fixdate(self, event_fixdate):
        """Sets the event_fixdate of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Дата фиксации списка  # noqa: E501

        :param event_fixdate: The event_fixdate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._event_fixdate = event_fixdate

    @property
    def event_ddlndate(self):
        """Gets the event_ddlndate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Последний срок заявки  # noqa: E501

        :return: The event_ddlndate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._event_ddlndate

    @event_ddlndate.setter
    def event_ddlndate(self, event_ddlndate):
        """Sets the event_ddlndate of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Последний срок заявки  # noqa: E501

        :param event_ddlndate: The event_ddlndate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._event_ddlndate = event_ddlndate

    @property
    def paydate_fact(self):
        """Gets the paydate_fact of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Дата платежа (факт)  # noqa: E501

        :return: The paydate_fact of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._paydate_fact

    @paydate_fact.setter
    def paydate_fact(self, paydate_fact):
        """Sets the paydate_fact of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Дата платежа (факт)  # noqa: E501

        :param paydate_fact: The paydate_fact of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._paydate_fact = paydate_fact

    @property
    def eventper_beg(self):
        """Gets the eventper_beg of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Дата начала купонного периода  # noqa: E501

        :return: The eventper_beg of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._eventper_beg

    @eventper_beg.setter
    def eventper_beg(self, eventper_beg):
        """Sets the eventper_beg of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Дата начала купонного периода  # noqa: E501

        :param eventper_beg: The eventper_beg of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._eventper_beg = eventper_beg

    @property
    def eventper_end(self):
        """Gets the eventper_end of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Дата окончания купонного периода  # noqa: E501

        :return: The eventper_end of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._eventper_end

    @eventper_end.setter
    def eventper_end(self, eventper_end):
        """Sets the eventper_end of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Дата окончания купонного периода  # noqa: E501

        :param eventper_end: The eventper_end of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._eventper_end = eventper_end

    @property
    def div_source(self):
        """Gets the div_source of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Источник выплаты дивидендов  # noqa: E501

        :return: The div_source of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._div_source

    @div_source.setter
    def div_source(self, div_source):
        """Sets the div_source of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Источник выплаты дивидендов  # noqa: E501

        :param div_source: The div_source of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._div_source = div_source

    @property
    def div_year(self):
        """Gets the div_year of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Год, за который производится выплата  # noqa: E501

        :return: The div_year of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: int
        """
        return self._div_year

    @div_year.setter
    def div_year(self, div_year):
        """Sets the div_year of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Год, за который производится выплата  # noqa: E501

        :param div_year: The div_year of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: int
        """

        self._div_year = div_year

    @property
    def app_perbeg(self):
        """Gets the app_perbeg of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Период подачи заявки КД - начало  # noqa: E501

        :return: The app_perbeg of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._app_perbeg

    @app_perbeg.setter
    def app_perbeg(self, app_perbeg):
        """Sets the app_perbeg of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Период подачи заявки КД - начало  # noqa: E501

        :param app_perbeg: The app_perbeg of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._app_perbeg = app_perbeg

    @property
    def app_perend(self):
        """Gets the app_perend of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Период подачи заявки КД - окончание  # noqa: E501

        :return: The app_perend of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._app_perend

    @app_perend.setter
    def app_perend(self, app_perend):
        """Sets the app_perend of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Период подачи заявки КД - окончание  # noqa: E501

        :param app_perend: The app_perend of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._app_perend = app_perend

    @property
    def cancel_perbeg(self):
        """Gets the cancel_perbeg of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Период отзыва - начало  # noqa: E501

        :return: The cancel_perbeg of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._cancel_perbeg

    @cancel_perbeg.setter
    def cancel_perbeg(self, cancel_perbeg):
        """Sets the cancel_perbeg of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Период отзыва - начало  # noqa: E501

        :param cancel_perbeg: The cancel_perbeg of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._cancel_perbeg = cancel_perbeg

    @property
    def cancel_perend(self):
        """Gets the cancel_perend of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Период отзыва – окончание  # noqa: E501

        :return: The cancel_perend of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._cancel_perend

    @cancel_perend.setter
    def cancel_perend(self, cancel_perend):
        """Sets the cancel_perend of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Период отзыва – окончание  # noqa: E501

        :param cancel_perend: The cancel_perend of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._cancel_perend = cancel_perend

    @property
    def payment_perbeg(self):
        """Gets the payment_perbeg of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Период выплаты - начало  # noqa: E501

        :return: The payment_perbeg of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_perbeg

    @payment_perbeg.setter
    def payment_perbeg(self, payment_perbeg):
        """Sets the payment_perbeg of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Период выплаты - начало  # noqa: E501

        :param payment_perbeg: The payment_perbeg of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._payment_perbeg = payment_perbeg

    @property
    def payment_perend(self):
        """Gets the payment_perend of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Период выплаты – окончание  # noqa: E501

        :return: The payment_perend of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_perend

    @payment_perend.setter
    def payment_perend(self, payment_perend):
        """Sets the payment_perend of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Период выплаты – окончание  # noqa: E501

        :param payment_perend: The payment_perend of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._payment_perend = payment_perend

    @property
    def divpay_sumval(self):
        """Gets the divpay_sumval of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Сумма дивидендов - выплата  # noqa: E501

        :return: The divpay_sumval of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: float
        """
        return self._divpay_sumval

    @divpay_sumval.setter
    def divpay_sumval(self, divpay_sumval):
        """Sets the divpay_sumval of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Сумма дивидендов - выплата  # noqa: E501

        :param divpay_sumval: The divpay_sumval of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: float
        """

        self._divpay_sumval = divpay_sumval

    @property
    def divrecpt_sumval(self):
        """Gets the divrecpt_sumval of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Сумма дивидендов - получение  # noqa: E501

        :return: The divrecpt_sumval of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: float
        """
        return self._divrecpt_sumval

    @divrecpt_sumval.setter
    def divrecpt_sumval(self, divrecpt_sumval):
        """Sets the divrecpt_sumval of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Сумма дивидендов - получение  # noqa: E501

        :param divrecpt_sumval: The divrecpt_sumval of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: float
        """

        self._divrecpt_sumval = divrecpt_sumval

    @property
    def price_type(self):
        """Gets the price_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Тип цены  # noqa: E501

        :return: The price_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Тип цены  # noqa: E501

        :param price_type: The price_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._price_type = price_type

    @property
    def pay1sec(self):
        """Gets the pay1sec of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Цена  # noqa: E501

        :return: The pay1sec of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: float
        """
        return self._pay1sec

    @pay1sec.setter
    def pay1sec(self, pay1sec):
        """Sets the pay1sec of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Цена  # noqa: E501

        :param pay1sec: The pay1sec of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: float
        """

        self._pay1sec = pay1sec

    @property
    def currency(self):
        """Gets the currency of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Валюта цены  # noqa: E501

        :return: The currency of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Валюта цены  # noqa: E501

        :param currency: The currency of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def value(self):
        """Gets the value of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Объем события  # noqa: E501

        :return: The value of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Объем события  # noqa: E501

        :param value: The value of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def qty_addsec(self):
        """Gets the qty_addsec of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Добавлено бумаг  # noqa: E501

        :return: The qty_addsec of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: float
        """
        return self._qty_addsec

    @qty_addsec.setter
    def qty_addsec(self, qty_addsec):
        """Sets the qty_addsec of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Добавлено бумаг  # noqa: E501

        :param qty_addsec: The qty_addsec of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: float
        """

        self._qty_addsec = qty_addsec

    @property
    def qty_exsec(self):
        """Gets the qty_exsec of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Бумаг в наличии  # noqa: E501

        :return: The qty_exsec of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: float
        """
        return self._qty_exsec

    @qty_exsec.setter
    def qty_exsec(self, qty_exsec):
        """Sets the qty_exsec of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Бумаг в наличии  # noqa: E501

        :param qty_exsec: The qty_exsec of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: float
        """

        self._qty_exsec = qty_exsec

    @property
    def qty_newsec(self):
        """Gets the qty_newsec of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Новых бумаг  # noqa: E501

        :return: The qty_newsec of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: float
        """
        return self._qty_newsec

    @qty_newsec.setter
    def qty_newsec(self, qty_newsec):
        """Sets the qty_newsec of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Новых бумаг  # noqa: E501

        :param qty_newsec: The qty_newsec of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: float
        """

        self._qty_newsec = qty_newsec

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Дополнительная информация  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Дополнительная информация  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def discagencycode(self):
        """Gets the discagencycode of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Символьный код агентства раскрытия  # noqa: E501

        :return: The discagencycode of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._discagencycode

    @discagencycode.setter
    def discagencycode(self, discagencycode):
        """Sets the discagencycode of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Символьный код агентства раскрытия  # noqa: E501

        :param discagencycode: The discagencycode of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._discagencycode = discagencycode

    @property
    def disceventid(self):
        """Gets the disceventid of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Идентификатор существенного факта  # noqa: E501

        :return: The disceventid of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: int
        """
        return self._disceventid

    @disceventid.setter
    def disceventid(self, disceventid):
        """Sets the disceventid of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Идентификатор существенного факта  # noqa: E501

        :param disceventid: The disceventid of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: int
        """

        self._disceventid = disceventid

    @property
    def disceventtypeid(self):
        """Gets the disceventtypeid of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Идентификатор типа существенного факта  # noqa: E501

        :return: The disceventtypeid of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: int
        """
        return self._disceventtypeid

    @disceventtypeid.setter
    def disceventtypeid(self, disceventtypeid):
        """Sets the disceventtypeid of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Идентификатор типа существенного факта  # noqa: E501

        :param disceventtypeid: The disceventtypeid of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: int
        """

        self._disceventtypeid = disceventtypeid

    @property
    def disceventtype(self):
        """Gets the disceventtype of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Наименование типа существенного факта  # noqa: E501

        :return: The disceventtype of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._disceventtype

    @disceventtype.setter
    def disceventtype(self, disceventtype):
        """Sets the disceventtype of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Наименование типа существенного факта  # noqa: E501

        :param disceventtype: The disceventtype of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._disceventtype = disceventtype

    @property
    def disceventpublishdate(self):
        """Gets the disceventpublishdate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Дата опубликования  # noqa: E501

        :return: The disceventpublishdate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._disceventpublishdate

    @disceventpublishdate.setter
    def disceventpublishdate(self, disceventpublishdate):
        """Sets the disceventpublishdate of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Дата опубликования  # noqa: E501

        :param disceventpublishdate: The disceventpublishdate of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._disceventpublishdate = disceventpublishdate

    @property
    def disceventtext(self):
        """Gets the disceventtext of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Текст существенного факта  # noqa: E501

        :return: The disceventtext of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._disceventtext

    @disceventtext.setter
    def disceventtext(self, disceventtext):
        """Sets the disceventtext of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Текст существенного факта  # noqa: E501

        :param disceventtext: The disceventtext of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._disceventtext = disceventtext

    @property
    def dealside1_name(self):
        """Gets the dealside1_name of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Сторона сделки 1 (наим.)  # noqa: E501

        :return: The dealside1_name of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._dealside1_name

    @dealside1_name.setter
    def dealside1_name(self, dealside1_name):
        """Sets the dealside1_name of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Сторона сделки 1 (наим.)  # noqa: E501

        :param dealside1_name: The dealside1_name of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._dealside1_name = dealside1_name

    @property
    def dealside1_inn(self):
        """Gets the dealside1_inn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Сторона сделки 1 (ИНН)  # noqa: E501

        :return: The dealside1_inn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._dealside1_inn

    @dealside1_inn.setter
    def dealside1_inn(self, dealside1_inn):
        """Sets the dealside1_inn of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Сторона сделки 1 (ИНН)  # noqa: E501

        :param dealside1_inn: The dealside1_inn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._dealside1_inn = dealside1_inn

    @property
    def dealside2_name(self):
        """Gets the dealside2_name of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Сторона сделки 2 (наим.)  # noqa: E501

        :return: The dealside2_name of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._dealside2_name

    @dealside2_name.setter
    def dealside2_name(self, dealside2_name):
        """Sets the dealside2_name of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Сторона сделки 2 (наим.)  # noqa: E501

        :param dealside2_name: The dealside2_name of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._dealside2_name = dealside2_name

    @property
    def dealside2_inn(self):
        """Gets the dealside2_inn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Сторона сделки 2 (ИНН)  # noqa: E501

        :return: The dealside2_inn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._dealside2_inn

    @dealside2_inn.setter
    def dealside2_inn(self, dealside2_inn):
        """Sets the dealside2_inn of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Сторона сделки 2 (ИНН)  # noqa: E501

        :param dealside2_inn: The dealside2_inn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._dealside2_inn = dealside2_inn

    @property
    def deal_type(self):
        """Gets the deal_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Тип сделки  # noqa: E501

        :return: The deal_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._deal_type

    @deal_type.setter
    def deal_type(self, deal_type):
        """Sets the deal_type of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Тип сделки  # noqa: E501

        :param deal_type: The deal_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._deal_type = deal_type

    @property
    def deal_category(self):
        """Gets the deal_category of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Категория сделки  # noqa: E501

        :return: The deal_category of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._deal_category

    @deal_category.setter
    def deal_category(self, deal_category):
        """Sets the deal_category of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Категория сделки  # noqa: E501

        :param deal_category: The deal_category of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._deal_category = deal_category

    @property
    def share_before(self):
        """Gets the share_before of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Доля до изменения  # noqa: E501

        :return: The share_before of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: float
        """
        return self._share_before

    @share_before.setter
    def share_before(self, share_before):
        """Sets the share_before of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Доля до изменения  # noqa: E501

        :param share_before: The share_before of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: float
        """

        self._share_before = share_before

    @property
    def share_after(self):
        """Gets the share_after of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Доля после изменений  # noqa: E501

        :return: The share_after of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: float
        """
        return self._share_after

    @share_after.setter
    def share_after(self, share_after):
        """Sets the share_after of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Доля после изменений  # noqa: E501

        :param share_after: The share_after of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: float
        """

        self._share_after = share_after

    @property
    def fio(self):
        """Gets the fio of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        ФИО лица  # noqa: E501

        :return: The fio of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._fio

    @fio.setter
    def fio(self, fio):
        """Sets the fio of this EfirDataHubModelsModelsCorporateActionActionsFields.

        ФИО лица  # noqa: E501

        :param fio: The fio of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._fio = fio

    @property
    def position(self):
        """Gets the position of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Должность  # noqa: E501

        :return: The position of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Должность  # noqa: E501

        :param position: The position of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def shareord_before(self):
        """Gets the shareord_before of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Доля акций до изменения  # noqa: E501

        :return: The shareord_before of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: float
        """
        return self._shareord_before

    @shareord_before.setter
    def shareord_before(self, shareord_before):
        """Sets the shareord_before of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Доля акций до изменения  # noqa: E501

        :param shareord_before: The shareord_before of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: float
        """

        self._shareord_before = shareord_before

    @property
    def shareord_after(self):
        """Gets the shareord_after of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Доля акций после изменения  # noqa: E501

        :return: The shareord_after of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: float
        """
        return self._shareord_after

    @shareord_after.setter
    def shareord_after(self, shareord_after):
        """Sets the shareord_after of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Доля акций после изменения  # noqa: E501

        :param shareord_after: The shareord_after of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: float
        """

        self._shareord_after = shareord_after

    @property
    def have_bids(self):
        """Gets the have_bids of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Флаг: На собрании акционеров были приняты решения, приводящие к выкупу ценных бумаг. Актуально для событий с кодом MEET.  # noqa: E501

        :return: The have_bids of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: bool
        """
        return self._have_bids

    @have_bids.setter
    def have_bids(self, have_bids):
        """Sets the have_bids of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Флаг: На собрании акционеров были приняты решения, приводящие к выкупу ценных бумаг. Актуально для событий с кодом MEET.  # noqa: E501

        :param have_bids: The have_bids of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: bool
        """

        self._have_bids = have_bids

    @property
    def have_prio(self):
        """Gets the have_prio of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Флаг: На собрании акционеров были приняты решения, приводящие к наличию приоритетного выкупа ценных бумаг. Актуально для событий с кодом MEET  # noqa: E501

        :return: The have_prio of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: bool
        """
        return self._have_prio

    @have_prio.setter
    def have_prio(self, have_prio):
        """Sets the have_prio of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Флаг: На собрании акционеров были приняты решения, приводящие к наличию приоритетного выкупа ценных бумаг. Актуально для событий с кодом MEET  # noqa: E501

        :param have_prio: The have_prio of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: bool
        """

        self._have_prio = have_prio

    @property
    def have_dvca(self):
        """Gets the have_dvca of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Флаг: На собрании акционеров были приняты решения, приводящие к дивидендам по акциям. Актуально для событий с кодом MEET  # noqa: E501

        :return: The have_dvca of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: bool
        """
        return self._have_dvca

    @have_dvca.setter
    def have_dvca(self, have_dvca):
        """Sets the have_dvca of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Флаг: На собрании акционеров были приняты решения, приводящие к дивидендам по акциям. Актуально для событий с кодом MEET  # noqa: E501

        :param have_dvca: The have_dvca of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: bool
        """

        self._have_dvca = have_dvca

    @property
    def payment_type(self):
        """Gets the payment_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Тип указываемого значения выплаты  # noqa: E501

        :return: The payment_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Тип указываемого значения выплаты  # noqa: E501

        :param payment_type: The payment_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._payment_type = payment_type

    @property
    def payment_currency(self):
        """Gets the payment_currency of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Валюта выплаты  # noqa: E501

        :return: The payment_currency of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._payment_currency

    @payment_currency.setter
    def payment_currency(self, payment_currency):
        """Sets the payment_currency of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Валюта выплаты  # noqa: E501

        :param payment_currency: The payment_currency of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._payment_currency = payment_currency

    @property
    def decision_type(self):
        """Gets the decision_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Тип решения по выплате дивидендов  # noqa: E501

        :return: The decision_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._decision_type

    @decision_type.setter
    def decision_type(self, decision_type):
        """Sets the decision_type of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Тип решения по выплате дивидендов  # noqa: E501

        :param decision_type: The decision_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._decision_type = decision_type

    @property
    def total_currency(self):
        """Gets the total_currency of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Валюта общей суммы выплаченных дивидендов  # noqa: E501

        :return: The total_currency of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._total_currency

    @total_currency.setter
    def total_currency(self, total_currency):
        """Sets the total_currency of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Валюта общей суммы выплаченных дивидендов  # noqa: E501

        :param total_currency: The total_currency of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._total_currency = total_currency

    @property
    def offer_currency(self):
        """Gets the offer_currency of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Валюта цены предложения  # noqa: E501

        :return: The offer_currency of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._offer_currency

    @offer_currency.setter
    def offer_currency(self, offer_currency):
        """Sets the offer_currency of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Валюта цены предложения  # noqa: E501

        :param offer_currency: The offer_currency of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._offer_currency = offer_currency

    @property
    def issuer_rusbonds_type(self):
        """Gets the issuer_rusbonds_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Классификация эмитентов по RusBonds:  'C' - Корпоративные;  'G' - Государственные;  'M' - МСП и Сектор роста.  # noqa: E501

        :return: The issuer_rusbonds_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: str
        """
        return self._issuer_rusbonds_type

    @issuer_rusbonds_type.setter
    def issuer_rusbonds_type(self, issuer_rusbonds_type):
        """Sets the issuer_rusbonds_type of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Классификация эмитентов по RusBonds:  'C' - Корпоративные;  'G' - Государственные;  'M' - МСП и Сектор роста.  # noqa: E501

        :param issuer_rusbonds_type: The issuer_rusbonds_type of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: str
        """

        self._issuer_rusbonds_type = issuer_rusbonds_type

    @property
    def payment_nominees_date(self):
        """Gets the payment_nominees_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Наиболее ранняя дата выплаты номинальным держателям  # noqa: E501

        :return: The payment_nominees_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_nominees_date

    @payment_nominees_date.setter
    def payment_nominees_date(self, payment_nominees_date):
        """Sets the payment_nominees_date of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Наиболее ранняя дата выплаты номинальным держателям  # noqa: E501

        :param payment_nominees_date: The payment_nominees_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._payment_nominees_date = payment_nominees_date

    @property
    def payment_others_date(self):
        """Gets the payment_others_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Наиболее ранняя дата выплаты остальным держателям бумаг  # noqa: E501

        :return: The payment_others_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_others_date

    @payment_others_date.setter
    def payment_others_date(self, payment_others_date):
        """Sets the payment_others_date of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Наиболее ранняя дата выплаты остальным держателям бумаг  # noqa: E501

        :param payment_others_date: The payment_others_date of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: datetime
        """

        self._payment_others_date = payment_others_date

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsCorporateActionActionsFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsCorporateActionActionsFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsCorporateActionActionsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsCorporateActionActionsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
