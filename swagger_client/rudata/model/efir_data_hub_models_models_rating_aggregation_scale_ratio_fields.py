# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRatingAggregationScaleRatioFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_ratio': 'int',
        'code_ratio': 'str',
        'name_ratio': 'str',
        'date_from': 'datetime',
        'date_to': 'datetime',
        'null_level': 'int',
        'ratio_list': 'list[EfirDataHubModelsModelsRatingAggregationScaleRatioListFields]'
    }

    attribute_map = {
        'id_ratio': 'id_ratio',
        'code_ratio': 'code_ratio',
        'name_ratio': 'name_ratio',
        'date_from': 'date_from',
        'date_to': 'date_to',
        'null_level': 'null_level',
        'ratio_list': 'ratio_list'
    }

    def __init__(self, id_ratio=None, code_ratio=None, name_ratio=None, date_from=None, date_to=None, null_level=None, ratio_list=None):  # noqa: E501
        """EfirDataHubModelsModelsRatingAggregationScaleRatioFields - a model defined in Swagger"""  # noqa: E501
        self._id_ratio = None
        self._code_ratio = None
        self._name_ratio = None
        self._date_from = None
        self._date_to = None
        self._null_level = None
        self._ratio_list = None
        self.discriminator = None
        if id_ratio is not None:
            self.id_ratio = id_ratio
        if code_ratio is not None:
            self.code_ratio = code_ratio
        if name_ratio is not None:
            self.name_ratio = name_ratio
        if date_from is not None:
            self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to
        if null_level is not None:
            self.null_level = null_level
        if ratio_list is not None:
            self.ratio_list = ratio_list

    @property
    def id_ratio(self):
        """Gets the id_ratio of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501

        Идентификатор соотношения  # noqa: E501

        :return: The id_ratio of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :rtype: int
        """
        return self._id_ratio

    @id_ratio.setter
    def id_ratio(self, id_ratio):
        """Sets the id_ratio of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.

        Идентификатор соотношения  # noqa: E501

        :param id_ratio: The id_ratio of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :type: int
        """

        self._id_ratio = id_ratio

    @property
    def code_ratio(self):
        """Gets the code_ratio of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501

        Код соотношения  # noqa: E501

        :return: The code_ratio of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :rtype: str
        """
        return self._code_ratio

    @code_ratio.setter
    def code_ratio(self, code_ratio):
        """Sets the code_ratio of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.

        Код соотношения  # noqa: E501

        :param code_ratio: The code_ratio of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :type: str
        """

        self._code_ratio = code_ratio

    @property
    def name_ratio(self):
        """Gets the name_ratio of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501

        Наименование соотношения  # noqa: E501

        :return: The name_ratio of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :rtype: str
        """
        return self._name_ratio

    @name_ratio.setter
    def name_ratio(self, name_ratio):
        """Sets the name_ratio of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.

        Наименование соотношения  # noqa: E501

        :param name_ratio: The name_ratio of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :type: str
        """

        self._name_ratio = name_ratio

    @property
    def date_from(self):
        """Gets the date_from of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501

        Дата начала действия таблицы соотношений  # noqa: E501

        :return: The date_from of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :rtype: datetime
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.

        Дата начала действия таблицы соотношений  # noqa: E501

        :param date_from: The date_from of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :type: datetime
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501

        Дата окончания действия таблицы соотношений  # noqa: E501

        :return: The date_to of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :rtype: datetime
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.

        Дата окончания действия таблицы соотношений  # noqa: E501

        :param date_to: The date_to of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :type: datetime
        """

        self._date_to = date_to

    @property
    def null_level(self):
        """Gets the null_level of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501

        Уровень для отсутствующих рейтингов  # noqa: E501

        :return: The null_level of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :rtype: int
        """
        return self._null_level

    @null_level.setter
    def null_level(self, null_level):
        """Sets the null_level of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.

        Уровень для отсутствующих рейтингов  # noqa: E501

        :param null_level: The null_level of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :type: int
        """

        self._null_level = null_level

    @property
    def ratio_list(self):
        """Gets the ratio_list of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501

        Список соотношений рейтинговых шкал и результирующих уровней  # noqa: E501

        :return: The ratio_list of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :rtype: list[EfirDataHubModelsModelsRatingAggregationScaleRatioListFields]
        """
        return self._ratio_list

    @ratio_list.setter
    def ratio_list(self, ratio_list):
        """Sets the ratio_list of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.

        Список соотношений рейтинговых шкал и результирующих уровней  # noqa: E501

        :param ratio_list: The ratio_list of this EfirDataHubModelsModelsRatingAggregationScaleRatioFields.  # noqa: E501
        :type: list[EfirDataHubModelsModelsRatingAggregationScaleRatioListFields]
        """

        self._ratio_list = ratio_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRatingAggregationScaleRatioFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRatingAggregationScaleRatioFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
