# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsForecastPriceConsensusFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_date': 'datetime',
        'close_price': 'float',
        'concensus_currency': 'str',
        'concensus_currency_close_price': 'float',
        'consensus_num_est': 'float',
        'exchange': 'str',
        'exchange_code': 'str',
        'exchange_currency': 'str',
        'exchange_currency_target_price': 'float',
        'exchange_currency_tpchg': 'float',
        'exchange_currency_tpchg_pct': 'float',
        'exchange_name': 'str',
        'fintool_name': 'str',
        'fintoolid': 'int',
        'id_recomendation': 'int',
        'latest_close_price': 'float',
        'latest_date': 'datetime',
        'rec_buy_pct': 'float',
        'rec_change': 'float',
        'rec_sell_pct': 'float',
        'rec_hold_pct': 'float',
        'rec_val': 'float',
        'recomendation_name': 'str',
        'target_price': 'float',
        'tp_chng': 'float',
        'tp_chng_pct': 'float',
        'tp_chng_m': 'float',
        'tp_chng_q': 'float',
        'tp_chng_y': 'float',
        'tp_chng_m_pct': 'float',
        'tp_chng_q_pct': 'float',
        'tp_chng_y_pct': 'float',
        'tp_high': 'float',
        'tp_low': 'float',
        'tp_median': 'float',
        'tp_deviation': 'float',
        'upside_pct': 'float',
        'fintoolid_linked': 'int'
    }

    attribute_map = {
        'add_date': 'add_date',
        'close_price': 'close_price',
        'concensus_currency': 'concensus_currency',
        'concensus_currency_close_price': 'concensus_currency_close_price',
        'consensus_num_est': 'consensus_num_est',
        'exchange': 'exchange',
        'exchange_code': 'exchange_code',
        'exchange_currency': 'exchange_currency',
        'exchange_currency_target_price': 'exchange_currency_target_price',
        'exchange_currency_tpchg': 'exchange_currency_tpchg',
        'exchange_currency_tpchg_pct': 'exchange_currency_tpchg_pct',
        'exchange_name': 'exchange_name',
        'fintool_name': 'fintool_name',
        'fintoolid': 'fintoolid',
        'id_recomendation': 'id_recomendation',
        'latest_close_price': 'latest_close_price',
        'latest_date': 'latest_date',
        'rec_buy_pct': 'rec_buy_pct',
        'rec_change': 'rec_change',
        'rec_sell_pct': 'rec_sell_pct',
        'rec_hold_pct': 'rec_hold_pct',
        'rec_val': 'rec_val',
        'recomendation_name': 'recomendation_name',
        'target_price': 'target_price',
        'tp_chng': 'tp_chng',
        'tp_chng_pct': 'tp_chng_pct',
        'tp_chng_m': 'tp_chng_m',
        'tp_chng_q': 'tp_chng_q',
        'tp_chng_y': 'tp_chng_y',
        'tp_chng_m_pct': 'tp_chng_m_pct',
        'tp_chng_q_pct': 'tp_chng_q_pct',
        'tp_chng_y_pct': 'tp_chng_y_pct',
        'tp_high': 'tp_high',
        'tp_low': 'tp_low',
        'tp_median': 'tp_median',
        'tp_deviation': 'tp_deviation',
        'upside_pct': 'upside_pct',
        'fintoolid_linked': 'fintoolid_linked'
    }

    def __init__(self, add_date=None, close_price=None, concensus_currency=None, concensus_currency_close_price=None, consensus_num_est=None, exchange=None, exchange_code=None, exchange_currency=None, exchange_currency_target_price=None, exchange_currency_tpchg=None, exchange_currency_tpchg_pct=None, exchange_name=None, fintool_name=None, fintoolid=None, id_recomendation=None, latest_close_price=None, latest_date=None, rec_buy_pct=None, rec_change=None, rec_sell_pct=None, rec_hold_pct=None, rec_val=None, recomendation_name=None, target_price=None, tp_chng=None, tp_chng_pct=None, tp_chng_m=None, tp_chng_q=None, tp_chng_y=None, tp_chng_m_pct=None, tp_chng_q_pct=None, tp_chng_y_pct=None, tp_high=None, tp_low=None, tp_median=None, tp_deviation=None, upside_pct=None, fintoolid_linked=None):  # noqa: E501
        """EfirDataHubModelsModelsForecastPriceConsensusFields - a model defined in Swagger"""  # noqa: E501
        self._add_date = None
        self._close_price = None
        self._concensus_currency = None
        self._concensus_currency_close_price = None
        self._consensus_num_est = None
        self._exchange = None
        self._exchange_code = None
        self._exchange_currency = None
        self._exchange_currency_target_price = None
        self._exchange_currency_tpchg = None
        self._exchange_currency_tpchg_pct = None
        self._exchange_name = None
        self._fintool_name = None
        self._fintoolid = None
        self._id_recomendation = None
        self._latest_close_price = None
        self._latest_date = None
        self._rec_buy_pct = None
        self._rec_change = None
        self._rec_sell_pct = None
        self._rec_hold_pct = None
        self._rec_val = None
        self._recomendation_name = None
        self._target_price = None
        self._tp_chng = None
        self._tp_chng_pct = None
        self._tp_chng_m = None
        self._tp_chng_q = None
        self._tp_chng_y = None
        self._tp_chng_m_pct = None
        self._tp_chng_q_pct = None
        self._tp_chng_y_pct = None
        self._tp_high = None
        self._tp_low = None
        self._tp_median = None
        self._tp_deviation = None
        self._upside_pct = None
        self._fintoolid_linked = None
        self.discriminator = None
        if add_date is not None:
            self.add_date = add_date
        if close_price is not None:
            self.close_price = close_price
        if concensus_currency is not None:
            self.concensus_currency = concensus_currency
        if concensus_currency_close_price is not None:
            self.concensus_currency_close_price = concensus_currency_close_price
        if consensus_num_est is not None:
            self.consensus_num_est = consensus_num_est
        if exchange is not None:
            self.exchange = exchange
        if exchange_code is not None:
            self.exchange_code = exchange_code
        if exchange_currency is not None:
            self.exchange_currency = exchange_currency
        if exchange_currency_target_price is not None:
            self.exchange_currency_target_price = exchange_currency_target_price
        if exchange_currency_tpchg is not None:
            self.exchange_currency_tpchg = exchange_currency_tpchg
        if exchange_currency_tpchg_pct is not None:
            self.exchange_currency_tpchg_pct = exchange_currency_tpchg_pct
        if exchange_name is not None:
            self.exchange_name = exchange_name
        if fintool_name is not None:
            self.fintool_name = fintool_name
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if id_recomendation is not None:
            self.id_recomendation = id_recomendation
        if latest_close_price is not None:
            self.latest_close_price = latest_close_price
        if latest_date is not None:
            self.latest_date = latest_date
        if rec_buy_pct is not None:
            self.rec_buy_pct = rec_buy_pct
        if rec_change is not None:
            self.rec_change = rec_change
        if rec_sell_pct is not None:
            self.rec_sell_pct = rec_sell_pct
        if rec_hold_pct is not None:
            self.rec_hold_pct = rec_hold_pct
        if rec_val is not None:
            self.rec_val = rec_val
        if recomendation_name is not None:
            self.recomendation_name = recomendation_name
        if target_price is not None:
            self.target_price = target_price
        if tp_chng is not None:
            self.tp_chng = tp_chng
        if tp_chng_pct is not None:
            self.tp_chng_pct = tp_chng_pct
        if tp_chng_m is not None:
            self.tp_chng_m = tp_chng_m
        if tp_chng_q is not None:
            self.tp_chng_q = tp_chng_q
        if tp_chng_y is not None:
            self.tp_chng_y = tp_chng_y
        if tp_chng_m_pct is not None:
            self.tp_chng_m_pct = tp_chng_m_pct
        if tp_chng_q_pct is not None:
            self.tp_chng_q_pct = tp_chng_q_pct
        if tp_chng_y_pct is not None:
            self.tp_chng_y_pct = tp_chng_y_pct
        if tp_high is not None:
            self.tp_high = tp_high
        if tp_low is not None:
            self.tp_low = tp_low
        if tp_median is not None:
            self.tp_median = tp_median
        if tp_deviation is not None:
            self.tp_deviation = tp_deviation
        if upside_pct is not None:
            self.upside_pct = upside_pct
        if fintoolid_linked is not None:
            self.fintoolid_linked = fintoolid_linked

    @property
    def add_date(self):
        """Gets the add_date of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Дата консенсус-прогноза  # noqa: E501

        :return: The add_date of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: datetime
        """
        return self._add_date

    @add_date.setter
    def add_date(self, add_date):
        """Sets the add_date of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Дата консенсус-прогноза  # noqa: E501

        :param add_date: The add_date of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: datetime
        """

        self._add_date = add_date

    @property
    def close_price(self):
        """Gets the close_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Цена закрытия на дату add_date  # noqa: E501

        :return: The close_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._close_price

    @close_price.setter
    def close_price(self, close_price):
        """Sets the close_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Цена закрытия на дату add_date  # noqa: E501

        :param close_price: The close_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._close_price = close_price

    @property
    def concensus_currency(self):
        """Gets the concensus_currency of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Буквенный код валюты прогноза цены по ISO 4217  # noqa: E501

        :return: The concensus_currency of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: str
        """
        return self._concensus_currency

    @concensus_currency.setter
    def concensus_currency(self, concensus_currency):
        """Sets the concensus_currency of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Буквенный код валюты прогноза цены по ISO 4217  # noqa: E501

        :param concensus_currency: The concensus_currency of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: str
        """

        self._concensus_currency = concensus_currency

    @property
    def concensus_currency_close_price(self):
        """Gets the concensus_currency_close_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Цена закрытия в валюте прогноза  # noqa: E501

        :return: The concensus_currency_close_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._concensus_currency_close_price

    @concensus_currency_close_price.setter
    def concensus_currency_close_price(self, concensus_currency_close_price):
        """Sets the concensus_currency_close_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Цена закрытия в валюте прогноза  # noqa: E501

        :param concensus_currency_close_price: The concensus_currency_close_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._concensus_currency_close_price = concensus_currency_close_price

    @property
    def consensus_num_est(self):
        """Gets the consensus_num_est of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Количество рекомендаций  # noqa: E501

        :return: The consensus_num_est of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._consensus_num_est

    @consensus_num_est.setter
    def consensus_num_est(self, consensus_num_est):
        """Sets the consensus_num_est of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Количество рекомендаций  # noqa: E501

        :param consensus_num_est: The consensus_num_est of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._consensus_num_est = consensus_num_est

    @property
    def exchange(self):
        """Gets the exchange of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Биржа  # noqa: E501

        :return: The exchange of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Биржа  # noqa: E501

        :param exchange: The exchange of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def exchange_code(self):
        """Gets the exchange_code of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Биржевой код бумаги  # noqa: E501

        :return: The exchange_code of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: str
        """
        return self._exchange_code

    @exchange_code.setter
    def exchange_code(self, exchange_code):
        """Sets the exchange_code of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Биржевой код бумаги  # noqa: E501

        :param exchange_code: The exchange_code of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: str
        """

        self._exchange_code = exchange_code

    @property
    def exchange_currency(self):
        """Gets the exchange_currency of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Валюта биржи для данной бумаги  # noqa: E501

        :return: The exchange_currency of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: str
        """
        return self._exchange_currency

    @exchange_currency.setter
    def exchange_currency(self, exchange_currency):
        """Sets the exchange_currency of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Валюта биржи для данной бумаги  # noqa: E501

        :param exchange_currency: The exchange_currency of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: str
        """

        self._exchange_currency = exchange_currency

    @property
    def exchange_currency_target_price(self):
        """Gets the exchange_currency_target_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Прогнозная цена в валюте биржи  # noqa: E501

        :return: The exchange_currency_target_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._exchange_currency_target_price

    @exchange_currency_target_price.setter
    def exchange_currency_target_price(self, exchange_currency_target_price):
        """Sets the exchange_currency_target_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Прогнозная цена в валюте биржи  # noqa: E501

        :param exchange_currency_target_price: The exchange_currency_target_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._exchange_currency_target_price = exchange_currency_target_price

    @property
    def exchange_currency_tpchg(self):
        """Gets the exchange_currency_tpchg of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Изменение прогнозной цены по отношению к предыдущему прогнозу в валюте биржи  # noqa: E501

        :return: The exchange_currency_tpchg of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._exchange_currency_tpchg

    @exchange_currency_tpchg.setter
    def exchange_currency_tpchg(self, exchange_currency_tpchg):
        """Sets the exchange_currency_tpchg of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Изменение прогнозной цены по отношению к предыдущему прогнозу в валюте биржи  # noqa: E501

        :param exchange_currency_tpchg: The exchange_currency_tpchg of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._exchange_currency_tpchg = exchange_currency_tpchg

    @property
    def exchange_currency_tpchg_pct(self):
        """Gets the exchange_currency_tpchg_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Изменение прогнозной цены по отношению к предыдущему прогнозу в валюте биржи в %  # noqa: E501

        :return: The exchange_currency_tpchg_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._exchange_currency_tpchg_pct

    @exchange_currency_tpchg_pct.setter
    def exchange_currency_tpchg_pct(self, exchange_currency_tpchg_pct):
        """Sets the exchange_currency_tpchg_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Изменение прогнозной цены по отношению к предыдущему прогнозу в валюте биржи в %  # noqa: E501

        :param exchange_currency_tpchg_pct: The exchange_currency_tpchg_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._exchange_currency_tpchg_pct = exchange_currency_tpchg_pct

    @property
    def exchange_name(self):
        """Gets the exchange_name of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Биржевое наименование бумаги  # noqa: E501

        :return: The exchange_name of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: str
        """
        return self._exchange_name

    @exchange_name.setter
    def exchange_name(self, exchange_name):
        """Sets the exchange_name of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Биржевое наименование бумаги  # noqa: E501

        :param exchange_name: The exchange_name of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: str
        """

        self._exchange_name = exchange_name

    @property
    def fintool_name(self):
        """Gets the fintool_name of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Краткое наименование бумаги  # noqa: E501

        :return: The fintool_name of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: str
        """
        return self._fintool_name

    @fintool_name.setter
    def fintool_name(self, fintool_name):
        """Sets the fintool_name of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Краткое наименование бумаги  # noqa: E501

        :param fintool_name: The fintool_name of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: str
        """

        self._fintool_name = fintool_name

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Идентификатор бумаги в базе Интерфакс  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Идентификатор бумаги в базе Интерфакс  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def id_recomendation(self):
        """Gets the id_recomendation of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Идентификатор консенсус-рекомендации(1, 3, 5)  # noqa: E501

        :return: The id_recomendation of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: int
        """
        return self._id_recomendation

    @id_recomendation.setter
    def id_recomendation(self, id_recomendation):
        """Sets the id_recomendation of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Идентификатор консенсус-рекомендации(1, 3, 5)  # noqa: E501

        :param id_recomendation: The id_recomendation of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: int
        """

        self._id_recomendation = id_recomendation

    @property
    def latest_close_price(self):
        """Gets the latest_close_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Цена закрытия на дату latest_date  # noqa: E501

        :return: The latest_close_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._latest_close_price

    @latest_close_price.setter
    def latest_close_price(self, latest_close_price):
        """Sets the latest_close_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Цена закрытия на дату latest_date  # noqa: E501

        :param latest_close_price: The latest_close_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._latest_close_price = latest_close_price

    @property
    def latest_date(self):
        """Gets the latest_date of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Дата дата последних торгов  # noqa: E501

        :return: The latest_date of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_date

    @latest_date.setter
    def latest_date(self, latest_date):
        """Sets the latest_date of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Дата дата последних торгов  # noqa: E501

        :param latest_date: The latest_date of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: datetime
        """

        self._latest_date = latest_date

    @property
    def rec_buy_pct(self):
        """Gets the rec_buy_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Доля рекомендаций \"Покупать\"  # noqa: E501

        :return: The rec_buy_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._rec_buy_pct

    @rec_buy_pct.setter
    def rec_buy_pct(self, rec_buy_pct):
        """Sets the rec_buy_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Доля рекомендаций \"Покупать\"  # noqa: E501

        :param rec_buy_pct: The rec_buy_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._rec_buy_pct = rec_buy_pct

    @property
    def rec_change(self):
        """Gets the rec_change of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Изменение рекомендации  # noqa: E501

        :return: The rec_change of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._rec_change

    @rec_change.setter
    def rec_change(self, rec_change):
        """Sets the rec_change of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Изменение рекомендации  # noqa: E501

        :param rec_change: The rec_change of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._rec_change = rec_change

    @property
    def rec_sell_pct(self):
        """Gets the rec_sell_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Доля рекомендаций \"Продавать\"  # noqa: E501

        :return: The rec_sell_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._rec_sell_pct

    @rec_sell_pct.setter
    def rec_sell_pct(self, rec_sell_pct):
        """Sets the rec_sell_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Доля рекомендаций \"Продавать\"  # noqa: E501

        :param rec_sell_pct: The rec_sell_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._rec_sell_pct = rec_sell_pct

    @property
    def rec_hold_pct(self):
        """Gets the rec_hold_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Доля рекомендаций \"Держать\"  # noqa: E501

        :return: The rec_hold_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._rec_hold_pct

    @rec_hold_pct.setter
    def rec_hold_pct(self, rec_hold_pct):
        """Sets the rec_hold_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Доля рекомендаций \"Держать\"  # noqa: E501

        :param rec_hold_pct: The rec_hold_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._rec_hold_pct = rec_hold_pct

    @property
    def rec_val(self):
        """Gets the rec_val of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Оценка рекомендации в масштабе от -1 до 1  # noqa: E501

        :return: The rec_val of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._rec_val

    @rec_val.setter
    def rec_val(self, rec_val):
        """Sets the rec_val of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Оценка рекомендации в масштабе от -1 до 1  # noqa: E501

        :param rec_val: The rec_val of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._rec_val = rec_val

    @property
    def recomendation_name(self):
        """Gets the recomendation_name of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Консенсус-рекомендация(идентификатор) :   Продавать - 1  Держать - 3  Покупать - 5  # noqa: E501

        :return: The recomendation_name of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: str
        """
        return self._recomendation_name

    @recomendation_name.setter
    def recomendation_name(self, recomendation_name):
        """Sets the recomendation_name of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Консенсус-рекомендация(идентификатор) :   Продавать - 1  Держать - 3  Покупать - 5  # noqa: E501

        :param recomendation_name: The recomendation_name of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: str
        """

        self._recomendation_name = recomendation_name

    @property
    def target_price(self):
        """Gets the target_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Консенсус-прогноз цены  # noqa: E501

        :return: The target_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._target_price

    @target_price.setter
    def target_price(self, target_price):
        """Sets the target_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Консенсус-прогноз цены  # noqa: E501

        :param target_price: The target_price of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._target_price = target_price

    @property
    def tp_chng(self):
        """Gets the tp_chng of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Изменение прогнозной цены по отношению к предыдущему прогнозу  # noqa: E501

        :return: The tp_chng of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng

    @tp_chng.setter
    def tp_chng(self, tp_chng):
        """Sets the tp_chng of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Изменение прогнозной цены по отношению к предыдущему прогнозу  # noqa: E501

        :param tp_chng: The tp_chng of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._tp_chng = tp_chng

    @property
    def tp_chng_pct(self):
        """Gets the tp_chng_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Изменение прогнозной цены по отношению к предыдущему прогнозу в %  # noqa: E501

        :return: The tp_chng_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_pct

    @tp_chng_pct.setter
    def tp_chng_pct(self, tp_chng_pct):
        """Sets the tp_chng_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Изменение прогнозной цены по отношению к предыдущему прогнозу в %  # noqa: E501

        :param tp_chng_pct: The tp_chng_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_pct = tp_chng_pct

    @property
    def tp_chng_m(self):
        """Gets the tp_chng_m of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Абсолютное изменение прогнозной цены за месяц  # noqa: E501

        :return: The tp_chng_m of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_m

    @tp_chng_m.setter
    def tp_chng_m(self, tp_chng_m):
        """Sets the tp_chng_m of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Абсолютное изменение прогнозной цены за месяц  # noqa: E501

        :param tp_chng_m: The tp_chng_m of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_m = tp_chng_m

    @property
    def tp_chng_q(self):
        """Gets the tp_chng_q of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Абсолютное изменение прогнозной цены за 3 месяца  # noqa: E501

        :return: The tp_chng_q of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_q

    @tp_chng_q.setter
    def tp_chng_q(self, tp_chng_q):
        """Sets the tp_chng_q of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Абсолютное изменение прогнозной цены за 3 месяца  # noqa: E501

        :param tp_chng_q: The tp_chng_q of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_q = tp_chng_q

    @property
    def tp_chng_y(self):
        """Gets the tp_chng_y of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Абсолютное изменение прогнозной цены за год  # noqa: E501

        :return: The tp_chng_y of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_y

    @tp_chng_y.setter
    def tp_chng_y(self, tp_chng_y):
        """Sets the tp_chng_y of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Абсолютное изменение прогнозной цены за год  # noqa: E501

        :param tp_chng_y: The tp_chng_y of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_y = tp_chng_y

    @property
    def tp_chng_m_pct(self):
        """Gets the tp_chng_m_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Относительное изменение прогнозной цены за месяц  # noqa: E501

        :return: The tp_chng_m_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_m_pct

    @tp_chng_m_pct.setter
    def tp_chng_m_pct(self, tp_chng_m_pct):
        """Sets the tp_chng_m_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Относительное изменение прогнозной цены за месяц  # noqa: E501

        :param tp_chng_m_pct: The tp_chng_m_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_m_pct = tp_chng_m_pct

    @property
    def tp_chng_q_pct(self):
        """Gets the tp_chng_q_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Относительное изменение прогнозной цены за 3 месяца  # noqa: E501

        :return: The tp_chng_q_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_q_pct

    @tp_chng_q_pct.setter
    def tp_chng_q_pct(self, tp_chng_q_pct):
        """Sets the tp_chng_q_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Относительное изменение прогнозной цены за 3 месяца  # noqa: E501

        :param tp_chng_q_pct: The tp_chng_q_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_q_pct = tp_chng_q_pct

    @property
    def tp_chng_y_pct(self):
        """Gets the tp_chng_y_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Относительное изменение прогнозной цены за год  # noqa: E501

        :return: The tp_chng_y_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_chng_y_pct

    @tp_chng_y_pct.setter
    def tp_chng_y_pct(self, tp_chng_y_pct):
        """Sets the tp_chng_y_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Относительное изменение прогнозной цены за год  # noqa: E501

        :param tp_chng_y_pct: The tp_chng_y_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._tp_chng_y_pct = tp_chng_y_pct

    @property
    def tp_high(self):
        """Gets the tp_high of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Максимальная из оценок прогнозной цены  # noqa: E501

        :return: The tp_high of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_high

    @tp_high.setter
    def tp_high(self, tp_high):
        """Sets the tp_high of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Максимальная из оценок прогнозной цены  # noqa: E501

        :param tp_high: The tp_high of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._tp_high = tp_high

    @property
    def tp_low(self):
        """Gets the tp_low of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Минимальная из оценок прогнозной цены  # noqa: E501

        :return: The tp_low of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_low

    @tp_low.setter
    def tp_low(self, tp_low):
        """Sets the tp_low of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Минимальная из оценок прогнозной цены  # noqa: E501

        :param tp_low: The tp_low of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._tp_low = tp_low

    @property
    def tp_median(self):
        """Gets the tp_median of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Медианная оценка прогнозной цены  # noqa: E501

        :return: The tp_median of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_median

    @tp_median.setter
    def tp_median(self, tp_median):
        """Sets the tp_median of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Медианная оценка прогнозной цены  # noqa: E501

        :param tp_median: The tp_median of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._tp_median = tp_median

    @property
    def tp_deviation(self):
        """Gets the tp_deviation of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Стандартное отклонение по оценкам прогнозной цены  # noqa: E501

        :return: The tp_deviation of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._tp_deviation

    @tp_deviation.setter
    def tp_deviation(self, tp_deviation):
        """Sets the tp_deviation of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Стандартное отклонение по оценкам прогнозной цены  # noqa: E501

        :param tp_deviation: The tp_deviation of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._tp_deviation = tp_deviation

    @property
    def upside_pct(self):
        """Gets the upside_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Потенциал в %  # noqa: E501

        :return: The upside_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: float
        """
        return self._upside_pct

    @upside_pct.setter
    def upside_pct(self, upside_pct):
        """Sets the upside_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Потенциал в %  # noqa: E501

        :param upside_pct: The upside_pct of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: float
        """

        self._upside_pct = upside_pct

    @property
    def fintoolid_linked(self):
        """Gets the fintoolid_linked of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501

        Идентификатор сопряженной бумаги в базе Интерфакс. Указывается только в случае, если сопряженная бумага используется для расчета консенсуса.  # noqa: E501

        :return: The fintoolid_linked of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid_linked

    @fintoolid_linked.setter
    def fintoolid_linked(self, fintoolid_linked):
        """Sets the fintoolid_linked of this EfirDataHubModelsModelsForecastPriceConsensusFields.

        Идентификатор сопряженной бумаги в базе Интерфакс. Указывается только в случае, если сопряженная бумага используется для расчета консенсуса.  # noqa: E501

        :param fintoolid_linked: The fintoolid_linked of this EfirDataHubModelsModelsForecastPriceConsensusFields.  # noqa: E501
        :type: int
        """

        self._fintoolid_linked = fintoolid_linked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsForecastPriceConsensusFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsForecastPriceConsensusFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
