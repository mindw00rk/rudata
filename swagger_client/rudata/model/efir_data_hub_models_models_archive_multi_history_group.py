# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsArchiveMultiHistoryGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'sec_code': 'str',
        'id_iss': 'int',
        'id_trade_site': 'int',
        'history': 'list[EfirDataHubModelsModelsArchiveMultiHistoryFields]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'sec_code': 'secCode',
        'id_iss': 'idIss',
        'id_trade_site': 'idTradeSite',
        'history': 'history'
    }

    def __init__(self, id=None, name=None, sec_code=None, id_iss=None, id_trade_site=None, history=None):  # noqa: E501
        """EfirDataHubModelsModelsArchiveMultiHistoryGroup - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._sec_code = None
        self._id_iss = None
        self._id_trade_site = None
        self._history = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if sec_code is not None:
            self.sec_code = sec_code
        if id_iss is not None:
            self.id_iss = id_iss
        if id_trade_site is not None:
            self.id_trade_site = id_trade_site
        if history is not None:
            self.history = history

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501

        Идентификатор переданного инструмента  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.

        Идентификатор переданного инструмента  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501

        Название инструмента  # noqa: E501

        :return: The name of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.

        Название инструмента  # noqa: E501

        :param name: The name of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sec_code(self):
        """Gets the sec_code of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501

        Торговый код  # noqa: E501

        :return: The sec_code of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501
        :rtype: str
        """
        return self._sec_code

    @sec_code.setter
    def sec_code(self, sec_code):
        """Sets the sec_code of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.

        Торговый код  # noqa: E501

        :param sec_code: The sec_code of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501
        :type: str
        """

        self._sec_code = sec_code

    @property
    def id_iss(self):
        """Gets the id_iss of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501

        Идентификатор торгового инструмента  # noqa: E501

        :return: The id_iss of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501
        :rtype: int
        """
        return self._id_iss

    @id_iss.setter
    def id_iss(self, id_iss):
        """Sets the id_iss of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.

        Идентификатор торгового инструмента  # noqa: E501

        :param id_iss: The id_iss of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501
        :type: int
        """

        self._id_iss = id_iss

    @property
    def id_trade_site(self):
        """Gets the id_trade_site of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501

        Идентификатор биржи  # noqa: E501

        :return: The id_trade_site of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501
        :rtype: int
        """
        return self._id_trade_site

    @id_trade_site.setter
    def id_trade_site(self, id_trade_site):
        """Sets the id_trade_site of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.

        Идентификатор биржи  # noqa: E501

        :param id_trade_site: The id_trade_site of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501
        :type: int
        """

        self._id_trade_site = id_trade_site

    @property
    def history(self):
        """Gets the history of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501

        Массив исторических данных  # noqa: E501

        :return: The history of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501
        :rtype: list[EfirDataHubModelsModelsArchiveMultiHistoryFields]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.

        Массив исторических данных  # noqa: E501

        :param history: The history of this EfirDataHubModelsModelsArchiveMultiHistoryGroup.  # noqa: E501
        :type: list[EfirDataHubModelsModelsArchiveMultiHistoryFields]
        """

        self._history = history

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsArchiveMultiHistoryGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsArchiveMultiHistoryGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
