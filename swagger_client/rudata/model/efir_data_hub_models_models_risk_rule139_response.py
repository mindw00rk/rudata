# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRiskRule139Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rule': 'str',
        'non_garant_rule': 'str',
        'error': 'str',
        'rule_coef': 'float',
        'non_garant_rule_coef': 'float'
    }

    attribute_map = {
        'rule': 'rule',
        'non_garant_rule': 'nonGarantRule',
        'error': 'error',
        'rule_coef': 'ruleCoef',
        'non_garant_rule_coef': 'nonGarantRuleCoef'
    }

    def __init__(self, rule=None, non_garant_rule=None, error=None, rule_coef=None, non_garant_rule_coef=None):  # noqa: E501
        """EfirDataHubModelsModelsRiskRule139Response - a model defined in Swagger"""  # noqa: E501
        self._rule = None
        self._non_garant_rule = None
        self._error = None
        self._rule_coef = None
        self._non_garant_rule_coef = None
        self.discriminator = None
        if rule is not None:
            self.rule = rule
        if non_garant_rule is not None:
            self.non_garant_rule = non_garant_rule
        if error is not None:
            self.error = error
        if rule_coef is not None:
            self.rule_coef = rule_coef
        if non_garant_rule_coef is not None:
            self.non_garant_rule_coef = non_garant_rule_coef

    @property
    def rule(self):
        """Gets the rule of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501

        Идентификатор правила  # noqa: E501

        :return: The rule of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this EfirDataHubModelsModelsRiskRule139Response.

        Идентификатор правила  # noqa: E501

        :param rule: The rule of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501
        :type: str
        """

        self._rule = rule

    @property
    def non_garant_rule(self):
        """Gets the non_garant_rule of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501

        Правило классификации актива для негарантированной части выпуска.  # noqa: E501

        :return: The non_garant_rule of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501
        :rtype: str
        """
        return self._non_garant_rule

    @non_garant_rule.setter
    def non_garant_rule(self, non_garant_rule):
        """Sets the non_garant_rule of this EfirDataHubModelsModelsRiskRule139Response.

        Правило классификации актива для негарантированной части выпуска.  # noqa: E501

        :param non_garant_rule: The non_garant_rule of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501
        :type: str
        """

        self._non_garant_rule = non_garant_rule

    @property
    def error(self):
        """Gets the error of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501

        Текст ошибки, если она есть  # noqa: E501

        :return: The error of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EfirDataHubModelsModelsRiskRule139Response.

        Текст ошибки, если она есть  # noqa: E501

        :param error: The error of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def rule_coef(self):
        """Gets the rule_coef of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501


        :return: The rule_coef of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501
        :rtype: float
        """
        return self._rule_coef

    @rule_coef.setter
    def rule_coef(self, rule_coef):
        """Sets the rule_coef of this EfirDataHubModelsModelsRiskRule139Response.


        :param rule_coef: The rule_coef of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501
        :type: float
        """

        self._rule_coef = rule_coef

    @property
    def non_garant_rule_coef(self):
        """Gets the non_garant_rule_coef of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501


        :return: The non_garant_rule_coef of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501
        :rtype: float
        """
        return self._non_garant_rule_coef

    @non_garant_rule_coef.setter
    def non_garant_rule_coef(self, non_garant_rule_coef):
        """Sets the non_garant_rule_coef of this EfirDataHubModelsModelsRiskRule139Response.


        :param non_garant_rule_coef: The non_garant_rule_coef of this EfirDataHubModelsModelsRiskRule139Response.  # noqa: E501
        :type: float
        """

        self._non_garant_rule_coef = non_garant_rule_coef

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRiskRule139Response, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRiskRule139Response):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
