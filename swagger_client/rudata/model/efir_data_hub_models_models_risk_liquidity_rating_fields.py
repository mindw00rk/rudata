# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRiskLiquidityRatingFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'isincode': 'str',
        'regcode': 'str',
        'nrdcode': 'str',
        'nickname': 'str',
        'fullname': 'str',
        'liqrt': 'str',
        'mdepthcoef': 'float',
        'omegabid': 'float',
        'gammabid': 'float',
        'hhi': 'float',
        'ind_liq': 'float',
        'ind_unliq': 'float',
        'activ_m2': 'float',
        'summarketvol': 'float',
        'theta': 'float',
        'mu': 'float',
        'nickname_eng': 'str',
        'fullname_eng': 'str',
        'dt': 'datetime',
        'fintoolid': 'int',
        'sigmabid': 'float',
        'mubid': 'float',
        'issue_vol': 'float',
        'activ_m3': 'float',
        'duration': 'float',
        'omega': 'float',
        'nrd_trueprice_pct': 'float',
        'k_theta': 'float',
        'fintool_type': 'str',
        'currency': 'str',
        'method': 'str',
        'method_id': 'float',
        'ro': 'float',
        'vol_max': 'float',
        'l_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'isincode': 'isincode',
        'regcode': 'regcode',
        'nrdcode': 'nrdcode',
        'nickname': 'nickname',
        'fullname': 'fullname',
        'liqrt': 'liqrt',
        'mdepthcoef': 'mdepthcoef',
        'omegabid': 'omegabid',
        'gammabid': 'gammabid',
        'hhi': 'hhi',
        'ind_liq': 'ind_liq',
        'ind_unliq': 'ind_unliq',
        'activ_m2': 'activ_m2',
        'summarketvol': 'summarketvol',
        'theta': 'theta',
        'mu': 'mu',
        'nickname_eng': 'nickname_eng',
        'fullname_eng': 'fullname_eng',
        'dt': 'dt',
        'fintoolid': 'fintoolid',
        'sigmabid': 'sigmabid',
        'mubid': 'mubid',
        'issue_vol': 'issue_vol',
        'activ_m3': 'activ_m3',
        'duration': 'duration',
        'omega': 'omega',
        'nrd_trueprice_pct': 'nrd_trueprice_pct',
        'k_theta': 'k_theta',
        'fintool_type': 'fintool_type',
        'currency': 'currency',
        'method': 'method',
        'method_id': 'method_id',
        'ro': 'ro',
        'vol_max': 'volMax',
        'l_date': 'l_date'
    }

    def __init__(self, id=None, isincode=None, regcode=None, nrdcode=None, nickname=None, fullname=None, liqrt=None, mdepthcoef=None, omegabid=None, gammabid=None, hhi=None, ind_liq=None, ind_unliq=None, activ_m2=None, summarketvol=None, theta=None, mu=None, nickname_eng=None, fullname_eng=None, dt=None, fintoolid=None, sigmabid=None, mubid=None, issue_vol=None, activ_m3=None, duration=None, omega=None, nrd_trueprice_pct=None, k_theta=None, fintool_type=None, currency=None, method=None, method_id=None, ro=None, vol_max=None, l_date=None):  # noqa: E501
        """EfirDataHubModelsModelsRiskLiquidityRatingFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._isincode = None
        self._regcode = None
        self._nrdcode = None
        self._nickname = None
        self._fullname = None
        self._liqrt = None
        self._mdepthcoef = None
        self._omegabid = None
        self._gammabid = None
        self._hhi = None
        self._ind_liq = None
        self._ind_unliq = None
        self._activ_m2 = None
        self._summarketvol = None
        self._theta = None
        self._mu = None
        self._nickname_eng = None
        self._fullname_eng = None
        self._dt = None
        self._fintoolid = None
        self._sigmabid = None
        self._mubid = None
        self._issue_vol = None
        self._activ_m3 = None
        self._duration = None
        self._omega = None
        self._nrd_trueprice_pct = None
        self._k_theta = None
        self._fintool_type = None
        self._currency = None
        self._method = None
        self._method_id = None
        self._ro = None
        self._vol_max = None
        self._l_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if isincode is not None:
            self.isincode = isincode
        if regcode is not None:
            self.regcode = regcode
        if nrdcode is not None:
            self.nrdcode = nrdcode
        if nickname is not None:
            self.nickname = nickname
        if fullname is not None:
            self.fullname = fullname
        if liqrt is not None:
            self.liqrt = liqrt
        if mdepthcoef is not None:
            self.mdepthcoef = mdepthcoef
        if omegabid is not None:
            self.omegabid = omegabid
        if gammabid is not None:
            self.gammabid = gammabid
        if hhi is not None:
            self.hhi = hhi
        if ind_liq is not None:
            self.ind_liq = ind_liq
        if ind_unliq is not None:
            self.ind_unliq = ind_unliq
        if activ_m2 is not None:
            self.activ_m2 = activ_m2
        if summarketvol is not None:
            self.summarketvol = summarketvol
        if theta is not None:
            self.theta = theta
        if mu is not None:
            self.mu = mu
        if nickname_eng is not None:
            self.nickname_eng = nickname_eng
        if fullname_eng is not None:
            self.fullname_eng = fullname_eng
        if dt is not None:
            self.dt = dt
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if sigmabid is not None:
            self.sigmabid = sigmabid
        if mubid is not None:
            self.mubid = mubid
        if issue_vol is not None:
            self.issue_vol = issue_vol
        if activ_m3 is not None:
            self.activ_m3 = activ_m3
        if duration is not None:
            self.duration = duration
        if omega is not None:
            self.omega = omega
        if nrd_trueprice_pct is not None:
            self.nrd_trueprice_pct = nrd_trueprice_pct
        if k_theta is not None:
            self.k_theta = k_theta
        if fintool_type is not None:
            self.fintool_type = fintool_type
        if currency is not None:
            self.currency = currency
        if method is not None:
            self.method = method
        if method_id is not None:
            self.method_id = method_id
        if ro is not None:
            self.ro = ro
        if vol_max is not None:
            self.vol_max = vol_max
        if l_date is not None:
            self.l_date = l_date

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Идентификатор инструмента  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Идентификатор инструмента  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def isincode(self):
        """Gets the isincode of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        ISIN-код выпуска облигаций, присваивается НДЦ  # noqa: E501

        :return: The isincode of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: str
        """
        return self._isincode

    @isincode.setter
    def isincode(self, isincode):
        """Sets the isincode of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        ISIN-код выпуска облигаций, присваивается НДЦ  # noqa: E501

        :param isincode: The isincode of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: str
        """

        self._isincode = isincode

    @property
    def regcode(self):
        """Gets the regcode of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Регистрационный номер выпуска облигаций  # noqa: E501

        :return: The regcode of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: str
        """
        return self._regcode

    @regcode.setter
    def regcode(self, regcode):
        """Sets the regcode of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Регистрационный номер выпуска облигаций  # noqa: E501

        :param regcode: The regcode of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: str
        """

        self._regcode = regcode

    @property
    def nrdcode(self):
        """Gets the nrdcode of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Код НРД выпуска облигаций, присваивается НРД  # noqa: E501

        :return: The nrdcode of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: str
        """
        return self._nrdcode

    @nrdcode.setter
    def nrdcode(self, nrdcode):
        """Sets the nrdcode of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Код НРД выпуска облигаций, присваивается НРД  # noqa: E501

        :param nrdcode: The nrdcode of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: str
        """

        self._nrdcode = nrdcode

    @property
    def nickname(self):
        """Gets the nickname of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Краткое название облигации на русском языке  # noqa: E501

        :return: The nickname of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Краткое название облигации на русском языке  # noqa: E501

        :param nickname: The nickname of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def fullname(self):
        """Gets the fullname of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Полное название выпуска облигации на русском языке  # noqa: E501

        :return: The fullname of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Полное название выпуска облигации на русском языке  # noqa: E501

        :param fullname: The fullname of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def liqrt(self):
        """Gets the liqrt of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Рейтинг ликвидности: L1 … L7  # noqa: E501

        :return: The liqrt of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: str
        """
        return self._liqrt

    @liqrt.setter
    def liqrt(self, liqrt):
        """Sets the liqrt of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Рейтинг ликвидности: L1 … L7  # noqa: E501

        :param liqrt: The liqrt of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: str
        """

        self._liqrt = liqrt

    @property
    def mdepthcoef(self):
        """Gets the mdepthcoef of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Коэффициент \"глубины\" рынка  # noqa: E501

        :return: The mdepthcoef of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._mdepthcoef

    @mdepthcoef.setter
    def mdepthcoef(self, mdepthcoef):
        """Sets the mdepthcoef of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Коэффициент \"глубины\" рынка  # noqa: E501

        :param mdepthcoef: The mdepthcoef of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._mdepthcoef = mdepthcoef

    @property
    def omegabid(self):
        """Gets the omegabid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Значение экспоненциального среднего от логарифма объема, который нужно купить/продать для сдвига цены на минимальный шаг, при коэффициенте усреднения 0.94  # noqa: E501

        :return: The omegabid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._omegabid

    @omegabid.setter
    def omegabid(self, omegabid):
        """Sets the omegabid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Значение экспоненциального среднего от логарифма объема, который нужно купить/продать для сдвига цены на минимальный шаг, при коэффициенте усреднения 0.94  # noqa: E501

        :param omegabid: The omegabid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._omegabid = omegabid

    @property
    def gammabid(self):
        """Gets the gammabid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Значение экспоненциального среднего стандартной ошибки модели при коэффициенте усреднения 0.94  # noqa: E501

        :return: The gammabid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._gammabid

    @gammabid.setter
    def gammabid(self, gammabid):
        """Sets the gammabid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Значение экспоненциального среднего стандартной ошибки модели при коэффициенте усреднения 0.94  # noqa: E501

        :param gammabid: The gammabid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._gammabid = gammabid

    @property
    def hhi(self):
        """Gets the hhi of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Индекс Херфиндаля-Хиршмана для структуры владения облигацией  # noqa: E501

        :return: The hhi of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._hhi

    @hhi.setter
    def hhi(self, hhi):
        """Sets the hhi of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Индекс Херфиндаля-Хиршмана для структуры владения облигацией  # noqa: E501

        :param hhi: The hhi of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._hhi = hhi

    @property
    def ind_liq(self):
        """Gets the ind_liq of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Индекс ликвидности, показывающий средний уровень значения индекса Херфиндаля-Хиршмана в портфеле «типичного» инвестора данной облигации  # noqa: E501

        :return: The ind_liq of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._ind_liq

    @ind_liq.setter
    def ind_liq(self, ind_liq):
        """Sets the ind_liq of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Индекс ликвидности, показывающий средний уровень значения индекса Херфиндаля-Хиршмана в портфеле «типичного» инвестора данной облигации  # noqa: E501

        :param ind_liq: The ind_liq of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._ind_liq = ind_liq

    @property
    def ind_unliq(self):
        """Gets the ind_unliq of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Индекс ликвидности, показывающий средний уровень для неликвидных бумаг в портфеле «типичного» инвестора данной облигации  # noqa: E501

        :return: The ind_unliq of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._ind_unliq

    @ind_unliq.setter
    def ind_unliq(self, ind_unliq):
        """Sets the ind_unliq of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Индекс ликвидности, показывающий средний уровень для неликвидных бумаг в портфеле «типичного» инвестора данной облигации  # noqa: E501

        :param ind_unliq: The ind_unliq of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._ind_unliq = ind_unliq

    @property
    def activ_m2(self):
        """Gets the activ_m2 of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Активность торгов  # noqa: E501

        :return: The activ_m2 of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._activ_m2

    @activ_m2.setter
    def activ_m2(self, activ_m2):
        """Sets the activ_m2 of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Активность торгов  # noqa: E501

        :param activ_m2: The activ_m2 of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._activ_m2 = activ_m2

    @property
    def summarketvol(self):
        """Gets the summarketvol of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Объём выпуска в валюте номинала на указанную дату  # noqa: E501

        :return: The summarketvol of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._summarketvol

    @summarketvol.setter
    def summarketvol(self, summarketvol):
        """Sets the summarketvol of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Объём выпуска в валюте номинала на указанную дату  # noqa: E501

        :param summarketvol: The summarketvol of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._summarketvol = summarketvol

    @property
    def theta(self):
        """Gets the theta of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Доверительная вероятность, константа, равна 0.95  # noqa: E501

        :return: The theta of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._theta

    @theta.setter
    def theta(self, theta):
        """Sets the theta of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Доверительная вероятность, константа, равна 0.95  # noqa: E501

        :param theta: The theta of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._theta = theta

    @property
    def mu(self):
        """Gets the mu of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Допустимая погрешность оценки цены (μ), константа, равна 1.5  # noqa: E501

        :return: The mu of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._mu

    @mu.setter
    def mu(self, mu):
        """Sets the mu of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Допустимая погрешность оценки цены (μ), константа, равна 1.5  # noqa: E501

        :param mu: The mu of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._mu = mu

    @property
    def nickname_eng(self):
        """Gets the nickname_eng of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Краткое название облигации на английском языке  # noqa: E501

        :return: The nickname_eng of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: str
        """
        return self._nickname_eng

    @nickname_eng.setter
    def nickname_eng(self, nickname_eng):
        """Sets the nickname_eng of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Краткое название облигации на английском языке  # noqa: E501

        :param nickname_eng: The nickname_eng of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: str
        """

        self._nickname_eng = nickname_eng

    @property
    def fullname_eng(self):
        """Gets the fullname_eng of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Полное название выпуска облигации на английском языке  # noqa: E501

        :return: The fullname_eng of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_eng

    @fullname_eng.setter
    def fullname_eng(self, fullname_eng):
        """Sets the fullname_eng of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Полное название выпуска облигации на английском языке  # noqa: E501

        :param fullname_eng: The fullname_eng of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: str
        """

        self._fullname_eng = fullname_eng

    @property
    def dt(self):
        """Gets the dt of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Дата расчета  # noqa: E501

        :return: The dt of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Дата расчета  # noqa: E501

        :param dt: The dt of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501

        Идентификатор текущего инструмента в базе ФинМаркет  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.

        Идентификатор текущего инструмента в базе ФинМаркет  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def sigmabid(self):
        """Gets the sigmabid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The sigmabid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._sigmabid

    @sigmabid.setter
    def sigmabid(self, sigmabid):
        """Sets the sigmabid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param sigmabid: The sigmabid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._sigmabid = sigmabid

    @property
    def mubid(self):
        """Gets the mubid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The mubid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._mubid

    @mubid.setter
    def mubid(self, mubid):
        """Sets the mubid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param mubid: The mubid of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._mubid = mubid

    @property
    def issue_vol(self):
        """Gets the issue_vol of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The issue_vol of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._issue_vol

    @issue_vol.setter
    def issue_vol(self, issue_vol):
        """Sets the issue_vol of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param issue_vol: The issue_vol of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._issue_vol = issue_vol

    @property
    def activ_m3(self):
        """Gets the activ_m3 of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The activ_m3 of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._activ_m3

    @activ_m3.setter
    def activ_m3(self, activ_m3):
        """Sets the activ_m3 of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param activ_m3: The activ_m3 of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._activ_m3 = activ_m3

    @property
    def duration(self):
        """Gets the duration of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The duration of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param duration: The duration of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def omega(self):
        """Gets the omega of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The omega of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._omega

    @omega.setter
    def omega(self, omega):
        """Sets the omega of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param omega: The omega of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._omega = omega

    @property
    def nrd_trueprice_pct(self):
        """Gets the nrd_trueprice_pct of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The nrd_trueprice_pct of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._nrd_trueprice_pct

    @nrd_trueprice_pct.setter
    def nrd_trueprice_pct(self, nrd_trueprice_pct):
        """Sets the nrd_trueprice_pct of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param nrd_trueprice_pct: The nrd_trueprice_pct of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._nrd_trueprice_pct = nrd_trueprice_pct

    @property
    def k_theta(self):
        """Gets the k_theta of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The k_theta of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._k_theta

    @k_theta.setter
    def k_theta(self, k_theta):
        """Sets the k_theta of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param k_theta: The k_theta of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._k_theta = k_theta

    @property
    def fintool_type(self):
        """Gets the fintool_type of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The fintool_type of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: str
        """
        return self._fintool_type

    @fintool_type.setter
    def fintool_type(self, fintool_type):
        """Sets the fintool_type of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param fintool_type: The fintool_type of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: str
        """

        self._fintool_type = fintool_type

    @property
    def currency(self):
        """Gets the currency of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The currency of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param currency: The currency of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def method(self):
        """Gets the method of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The method of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param method: The method of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def method_id(self):
        """Gets the method_id of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The method_id of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._method_id

    @method_id.setter
    def method_id(self, method_id):
        """Sets the method_id of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param method_id: The method_id of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._method_id = method_id

    @property
    def ro(self):
        """Gets the ro of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The ro of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._ro

    @ro.setter
    def ro(self, ro):
        """Sets the ro of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param ro: The ro of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._ro = ro

    @property
    def vol_max(self):
        """Gets the vol_max of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The vol_max of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: float
        """
        return self._vol_max

    @vol_max.setter
    def vol_max(self, vol_max):
        """Sets the vol_max of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param vol_max: The vol_max of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: float
        """

        self._vol_max = vol_max

    @property
    def l_date(self):
        """Gets the l_date of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501


        :return: The l_date of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :rtype: datetime
        """
        return self._l_date

    @l_date.setter
    def l_date(self, l_date):
        """Sets the l_date of this EfirDataHubModelsModelsRiskLiquidityRatingFields.


        :param l_date: The l_date of this EfirDataHubModelsModelsRiskLiquidityRatingFields.  # noqa: E501
        :type: datetime
        """

        self._l_date = l_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRiskLiquidityRatingFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRiskLiquidityRatingFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
