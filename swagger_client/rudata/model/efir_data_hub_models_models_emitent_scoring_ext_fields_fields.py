# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsEmitentScoringExtFieldsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'key_name': 'str',
        'name_rus': 'str',
        'group_name': 'str',
        'name_eng': 'str'
    }

    attribute_map = {
        'id': 'id',
        'key_name': 'key_name',
        'name_rus': 'name_rus',
        'group_name': 'group_name',
        'name_eng': 'name_eng'
    }

    def __init__(self, id=None, key_name=None, name_rus=None, group_name=None, name_eng=None):  # noqa: E501
        """EfirDataHubModelsModelsEmitentScoringExtFieldsFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._key_name = None
        self._name_rus = None
        self._group_name = None
        self._name_eng = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if key_name is not None:
            self.key_name = key_name
        if name_rus is not None:
            self.name_rus = name_rus
        if group_name is not None:
            self.group_name = group_name
        if name_eng is not None:
            self.name_eng = name_eng

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501

        Уникальный внутренний идентификатор поля  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.

        Уникальный внутренний идентификатор поля  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key_name(self):
        """Gets the key_name of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501

        Наименование ключа в значениях скоринга  # noqa: E501

        :return: The key_name of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.

        Наименование ключа в значениях скоринга  # noqa: E501

        :param key_name: The key_name of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501
        :type: str
        """

        self._key_name = key_name

    @property
    def name_rus(self):
        """Gets the name_rus of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501

        Наименование показателя - русскоязычное  # noqa: E501

        :return: The name_rus of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._name_rus

    @name_rus.setter
    def name_rus(self, name_rus):
        """Sets the name_rus of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.

        Наименование показателя - русскоязычное  # noqa: E501

        :param name_rus: The name_rus of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501
        :type: str
        """

        self._name_rus = name_rus

    @property
    def group_name(self):
        """Gets the group_name of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501

        Принадлежность показателя к группе  # noqa: E501

        :return: The group_name of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.

        Принадлежность показателя к группе  # noqa: E501

        :param group_name: The group_name of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def name_eng(self):
        """Gets the name_eng of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501

        Наименование показателя - англоязычное  # noqa: E501

        :return: The name_eng of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._name_eng

    @name_eng.setter
    def name_eng(self, name_eng):
        """Sets the name_eng of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.

        Наименование показателя - англоязычное  # noqa: E501

        :param name_eng: The name_eng of this EfirDataHubModelsModelsEmitentScoringExtFieldsFields.  # noqa: E501
        :type: str
        """

        self._name_eng = name_eng

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsEmitentScoringExtFieldsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsEmitentScoringExtFieldsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
