# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondClassificationFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_fintool': 'int',
        'id_type_fintool': 'int',
        'id_type_group': 'int',
        'update_date': 'datetime',
        'counter': 'int'
    }

    attribute_map = {
        'id_fintool': 'id_fintool',
        'id_type_fintool': 'id_type_fintool',
        'id_type_group': 'id_type_group',
        'update_date': 'update_date',
        'counter': 'counter'
    }

    def __init__(self, id_fintool=None, id_type_fintool=None, id_type_group=None, update_date=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsBondClassificationFields - a model defined in Swagger"""  # noqa: E501
        self._id_fintool = None
        self._id_type_fintool = None
        self._id_type_group = None
        self._update_date = None
        self._counter = None
        self.discriminator = None
        if id_fintool is not None:
            self.id_fintool = id_fintool
        if id_type_fintool is not None:
            self.id_type_fintool = id_type_fintool
        if id_type_group is not None:
            self.id_type_group = id_type_group
        if update_date is not None:
            self.update_date = update_date
        if counter is not None:
            self.counter = counter

    @property
    def id_fintool(self):
        """Gets the id_fintool of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501

        Идентификатор облигации  # noqa: E501

        :return: The id_fintool of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501
        :rtype: int
        """
        return self._id_fintool

    @id_fintool.setter
    def id_fintool(self, id_fintool):
        """Sets the id_fintool of this EfirDataHubModelsModelsBondClassificationFields.

        Идентификатор облигации  # noqa: E501

        :param id_fintool: The id_fintool of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501
        :type: int
        """

        self._id_fintool = id_fintool

    @property
    def id_type_fintool(self):
        """Gets the id_type_fintool of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501

        Идентификатор типа облигации. См. метод ListBondTypes для получения списка идентификаторов.  # noqa: E501

        :return: The id_type_fintool of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501
        :rtype: int
        """
        return self._id_type_fintool

    @id_type_fintool.setter
    def id_type_fintool(self, id_type_fintool):
        """Sets the id_type_fintool of this EfirDataHubModelsModelsBondClassificationFields.

        Идентификатор типа облигации. См. метод ListBondTypes для получения списка идентификаторов.  # noqa: E501

        :param id_type_fintool: The id_type_fintool of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501
        :type: int
        """

        self._id_type_fintool = id_type_fintool

    @property
    def id_type_group(self):
        """Gets the id_type_group of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501

        Идентификатор категории типа. См. метод ListTypeGroups для получения списка идентификаторов.  # noqa: E501

        :return: The id_type_group of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501
        :rtype: int
        """
        return self._id_type_group

    @id_type_group.setter
    def id_type_group(self, id_type_group):
        """Sets the id_type_group of this EfirDataHubModelsModelsBondClassificationFields.

        Идентификатор категории типа. См. метод ListTypeGroups для получения списка идентификаторов.  # noqa: E501

        :param id_type_group: The id_type_group of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501
        :type: int
        """

        self._id_type_group = id_type_group

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501

        Дата обновления информации  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsBondClassificationFields.

        Дата обновления информации  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsBondClassificationFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsBondClassificationFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondClassificationFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondClassificationFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
