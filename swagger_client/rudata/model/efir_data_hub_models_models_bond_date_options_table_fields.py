# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondDateOptionsTableFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_lombard': 'bool',
        'exch_main': 'str',
        'listing_level': 'int',
        'sum_mktval': 'float',
        'sum_mktvol': 'float',
        'cpn_no': 'int',
        'cpn_begdate': 'datetime',
        'cpn_enddate': 'datetime',
        'cpn_period': 'int',
        'cpn_fixlist': 'datetime',
        'cpn_rate': 'float',
        'cpn_value': 'float',
        'cpn_paydate': 'datetime',
        'cpn_knownno': 'int',
        'cpn_knowndate': 'datetime',
        'newcpn_date': 'datetime',
        'mty_date': 'datetime',
        'mty_fixdate': 'datetime',
        'mty_part': 'float',
        'mty_value': 'float',
        'mty_paydate': 'datetime',
        'call_date': 'datetime',
        'offer_date': 'datetime',
        'offer_end': 'datetime',
        'offer_price': 'float',
        'offer_paydate': 'datetime',
        'conv_begdate': 'datetime',
        'conv_enddate': 'datetime',
        'conv_coeff': 'float',
        'conv_fintoolid': 'int',
        'default_date': 'datetime',
        'default_type': 'str',
        'event_type': 'str',
        'duty_paydate': 'datetime',
        'auct_exch': 'str',
        'auct_begdate': 'datetime',
        'auct_askval': 'float',
        'auct_askvol': 'float',
        'auct_enddate': 'datetime',
        'accrued_int': 'float',
        'accrued_int_pct': 'float',
        'current_fv': 'float',
        'current_fv_pct': 'float',
        'fairvalue_avg': 'float',
        'fairvalue_nfa': 'float',
        'mty_sumcpn': 'float',
        'offer_sumcpn': 'float',
        'next_repayment_date': 'datetime',
        'fv_last_known_date': 'datetime'
    }

    attribute_map = {
        'is_lombard': 'is_lombard',
        'exch_main': 'exch_main',
        'listing_level': 'listing_level',
        'sum_mktval': 'sum_mktval',
        'sum_mktvol': 'sum_mktvol',
        'cpn_no': 'cpn_no',
        'cpn_begdate': 'cpn_begdate',
        'cpn_enddate': 'cpn_enddate',
        'cpn_period': 'cpn_period',
        'cpn_fixlist': 'cpn_fixlist',
        'cpn_rate': 'cpn_rate',
        'cpn_value': 'cpn_value',
        'cpn_paydate': 'cpn_paydate',
        'cpn_knownno': 'cpn_knownno',
        'cpn_knowndate': 'cpn_knowndate',
        'newcpn_date': 'newcpn_date',
        'mty_date': 'mty_date',
        'mty_fixdate': 'mty_fixdate',
        'mty_part': 'mty_part',
        'mty_value': 'mty_value',
        'mty_paydate': 'mty_paydate',
        'call_date': 'call_date',
        'offer_date': 'offer_date',
        'offer_end': 'offer_end',
        'offer_price': 'offer_price',
        'offer_paydate': 'offer_paydate',
        'conv_begdate': 'conv_begdate',
        'conv_enddate': 'conv_enddate',
        'conv_coeff': 'conv_coeff',
        'conv_fintoolid': 'conv_fintoolid',
        'default_date': 'default_date',
        'default_type': 'default_type',
        'event_type': 'event_type',
        'duty_paydate': 'duty_paydate',
        'auct_exch': 'auct_exch',
        'auct_begdate': 'auct_begdate',
        'auct_askval': 'auct_askval',
        'auct_askvol': 'auct_askvol',
        'auct_enddate': 'auct_enddate',
        'accrued_int': 'accrued_int',
        'accrued_int_pct': 'accrued_int_pct',
        'current_fv': 'current_fv',
        'current_fv_pct': 'current_fv_pct',
        'fairvalue_avg': 'fairvalue_avg',
        'fairvalue_nfa': 'fairvalue_nfa',
        'mty_sumcpn': 'mty_sumcpn',
        'offer_sumcpn': 'offer_sumcpn',
        'next_repayment_date': 'next_repayment_date',
        'fv_last_known_date': 'fv_last_known_date'
    }

    def __init__(self, is_lombard=None, exch_main=None, listing_level=None, sum_mktval=None, sum_mktvol=None, cpn_no=None, cpn_begdate=None, cpn_enddate=None, cpn_period=None, cpn_fixlist=None, cpn_rate=None, cpn_value=None, cpn_paydate=None, cpn_knownno=None, cpn_knowndate=None, newcpn_date=None, mty_date=None, mty_fixdate=None, mty_part=None, mty_value=None, mty_paydate=None, call_date=None, offer_date=None, offer_end=None, offer_price=None, offer_paydate=None, conv_begdate=None, conv_enddate=None, conv_coeff=None, conv_fintoolid=None, default_date=None, default_type=None, event_type=None, duty_paydate=None, auct_exch=None, auct_begdate=None, auct_askval=None, auct_askvol=None, auct_enddate=None, accrued_int=None, accrued_int_pct=None, current_fv=None, current_fv_pct=None, fairvalue_avg=None, fairvalue_nfa=None, mty_sumcpn=None, offer_sumcpn=None, next_repayment_date=None, fv_last_known_date=None):  # noqa: E501
        """EfirDataHubModelsModelsBondDateOptionsTableFields - a model defined in Swagger"""  # noqa: E501
        self._is_lombard = None
        self._exch_main = None
        self._listing_level = None
        self._sum_mktval = None
        self._sum_mktvol = None
        self._cpn_no = None
        self._cpn_begdate = None
        self._cpn_enddate = None
        self._cpn_period = None
        self._cpn_fixlist = None
        self._cpn_rate = None
        self._cpn_value = None
        self._cpn_paydate = None
        self._cpn_knownno = None
        self._cpn_knowndate = None
        self._newcpn_date = None
        self._mty_date = None
        self._mty_fixdate = None
        self._mty_part = None
        self._mty_value = None
        self._mty_paydate = None
        self._call_date = None
        self._offer_date = None
        self._offer_end = None
        self._offer_price = None
        self._offer_paydate = None
        self._conv_begdate = None
        self._conv_enddate = None
        self._conv_coeff = None
        self._conv_fintoolid = None
        self._default_date = None
        self._default_type = None
        self._event_type = None
        self._duty_paydate = None
        self._auct_exch = None
        self._auct_begdate = None
        self._auct_askval = None
        self._auct_askvol = None
        self._auct_enddate = None
        self._accrued_int = None
        self._accrued_int_pct = None
        self._current_fv = None
        self._current_fv_pct = None
        self._fairvalue_avg = None
        self._fairvalue_nfa = None
        self._mty_sumcpn = None
        self._offer_sumcpn = None
        self._next_repayment_date = None
        self._fv_last_known_date = None
        self.discriminator = None
        if is_lombard is not None:
            self.is_lombard = is_lombard
        if exch_main is not None:
            self.exch_main = exch_main
        if listing_level is not None:
            self.listing_level = listing_level
        if sum_mktval is not None:
            self.sum_mktval = sum_mktval
        if sum_mktvol is not None:
            self.sum_mktvol = sum_mktvol
        if cpn_no is not None:
            self.cpn_no = cpn_no
        if cpn_begdate is not None:
            self.cpn_begdate = cpn_begdate
        if cpn_enddate is not None:
            self.cpn_enddate = cpn_enddate
        if cpn_period is not None:
            self.cpn_period = cpn_period
        if cpn_fixlist is not None:
            self.cpn_fixlist = cpn_fixlist
        if cpn_rate is not None:
            self.cpn_rate = cpn_rate
        if cpn_value is not None:
            self.cpn_value = cpn_value
        if cpn_paydate is not None:
            self.cpn_paydate = cpn_paydate
        if cpn_knownno is not None:
            self.cpn_knownno = cpn_knownno
        if cpn_knowndate is not None:
            self.cpn_knowndate = cpn_knowndate
        if newcpn_date is not None:
            self.newcpn_date = newcpn_date
        if mty_date is not None:
            self.mty_date = mty_date
        if mty_fixdate is not None:
            self.mty_fixdate = mty_fixdate
        if mty_part is not None:
            self.mty_part = mty_part
        if mty_value is not None:
            self.mty_value = mty_value
        if mty_paydate is not None:
            self.mty_paydate = mty_paydate
        if call_date is not None:
            self.call_date = call_date
        if offer_date is not None:
            self.offer_date = offer_date
        if offer_end is not None:
            self.offer_end = offer_end
        if offer_price is not None:
            self.offer_price = offer_price
        if offer_paydate is not None:
            self.offer_paydate = offer_paydate
        if conv_begdate is not None:
            self.conv_begdate = conv_begdate
        if conv_enddate is not None:
            self.conv_enddate = conv_enddate
        if conv_coeff is not None:
            self.conv_coeff = conv_coeff
        if conv_fintoolid is not None:
            self.conv_fintoolid = conv_fintoolid
        if default_date is not None:
            self.default_date = default_date
        if default_type is not None:
            self.default_type = default_type
        if event_type is not None:
            self.event_type = event_type
        if duty_paydate is not None:
            self.duty_paydate = duty_paydate
        if auct_exch is not None:
            self.auct_exch = auct_exch
        if auct_begdate is not None:
            self.auct_begdate = auct_begdate
        if auct_askval is not None:
            self.auct_askval = auct_askval
        if auct_askvol is not None:
            self.auct_askvol = auct_askvol
        if auct_enddate is not None:
            self.auct_enddate = auct_enddate
        if accrued_int is not None:
            self.accrued_int = accrued_int
        if accrued_int_pct is not None:
            self.accrued_int_pct = accrued_int_pct
        if current_fv is not None:
            self.current_fv = current_fv
        if current_fv_pct is not None:
            self.current_fv_pct = current_fv_pct
        if fairvalue_avg is not None:
            self.fairvalue_avg = fairvalue_avg
        if fairvalue_nfa is not None:
            self.fairvalue_nfa = fairvalue_nfa
        if mty_sumcpn is not None:
            self.mty_sumcpn = mty_sumcpn
        if offer_sumcpn is not None:
            self.offer_sumcpn = offer_sumcpn
        if next_repayment_date is not None:
            self.next_repayment_date = next_repayment_date
        if fv_last_known_date is not None:
            self.fv_last_known_date = fv_last_known_date

    @property
    def is_lombard(self):
        """Gets the is_lombard of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Признак включения в ломбардный список БР  # noqa: E501

        :return: The is_lombard of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_lombard

    @is_lombard.setter
    def is_lombard(self, is_lombard):
        """Sets the is_lombard of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Признак включения в ломбардный список БР  # noqa: E501

        :param is_lombard: The is_lombard of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: bool
        """

        self._is_lombard = is_lombard

    @property
    def exch_main(self):
        """Gets the exch_main of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Название основной площадки, на которой торгуется бумага  # noqa: E501

        :return: The exch_main of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._exch_main

    @exch_main.setter
    def exch_main(self, exch_main):
        """Sets the exch_main of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Название основной площадки, на которой торгуется бумага  # noqa: E501

        :param exch_main: The exch_main of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: str
        """

        self._exch_main = exch_main

    @property
    def listing_level(self):
        """Gets the listing_level of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Уровень листинга Мосбиржи  # noqa: E501

        :return: The listing_level of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: int
        """
        return self._listing_level

    @listing_level.setter
    def listing_level(self, listing_level):
        """Sets the listing_level of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Уровень листинга Мосбиржи  # noqa: E501

        :param listing_level: The listing_level of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: int
        """

        self._listing_level = listing_level

    @property
    def sum_mktval(self):
        """Gets the sum_mktval of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Объем в обращении в валюте номинала  # noqa: E501

        :return: The sum_mktval of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._sum_mktval

    @sum_mktval.setter
    def sum_mktval(self, sum_mktval):
        """Sets the sum_mktval of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Объем в обращении в валюте номинала  # noqa: E501

        :param sum_mktval: The sum_mktval of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._sum_mktval = sum_mktval

    @property
    def sum_mktvol(self):
        """Gets the sum_mktvol of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Объем в обращении в штуках  # noqa: E501

        :return: The sum_mktvol of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._sum_mktvol

    @sum_mktvol.setter
    def sum_mktvol(self, sum_mktvol):
        """Sets the sum_mktvol of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Объем в обращении в штуках  # noqa: E501

        :param sum_mktvol: The sum_mktvol of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._sum_mktvol = sum_mktvol

    @property
    def cpn_no(self):
        """Gets the cpn_no of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Номер текущего купона  # noqa: E501

        :return: The cpn_no of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: int
        """
        return self._cpn_no

    @cpn_no.setter
    def cpn_no(self, cpn_no):
        """Sets the cpn_no of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Номер текущего купона  # noqa: E501

        :param cpn_no: The cpn_no of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: int
        """

        self._cpn_no = cpn_no

    @property
    def cpn_begdate(self):
        """Gets the cpn_begdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата начала текущего купона  # noqa: E501

        :return: The cpn_begdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._cpn_begdate

    @cpn_begdate.setter
    def cpn_begdate(self, cpn_begdate):
        """Sets the cpn_begdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата начала текущего купона  # noqa: E501

        :param cpn_begdate: The cpn_begdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._cpn_begdate = cpn_begdate

    @property
    def cpn_enddate(self):
        """Gets the cpn_enddate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата окончания текущего купона  # noqa: E501

        :return: The cpn_enddate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._cpn_enddate

    @cpn_enddate.setter
    def cpn_enddate(self, cpn_enddate):
        """Sets the cpn_enddate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата окончания текущего купона  # noqa: E501

        :param cpn_enddate: The cpn_enddate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._cpn_enddate = cpn_enddate

    @property
    def cpn_period(self):
        """Gets the cpn_period of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дней в текущем купонном периоде  # noqa: E501

        :return: The cpn_period of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: int
        """
        return self._cpn_period

    @cpn_period.setter
    def cpn_period(self, cpn_period):
        """Sets the cpn_period of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дней в текущем купонном периоде  # noqa: E501

        :param cpn_period: The cpn_period of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: int
        """

        self._cpn_period = cpn_period

    @property
    def cpn_fixlist(self):
        """Gets the cpn_fixlist of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата фиксации списка на выплату купона  # noqa: E501

        :return: The cpn_fixlist of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._cpn_fixlist

    @cpn_fixlist.setter
    def cpn_fixlist(self, cpn_fixlist):
        """Sets the cpn_fixlist of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата фиксации списка на выплату купона  # noqa: E501

        :param cpn_fixlist: The cpn_fixlist of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._cpn_fixlist = cpn_fixlist

    @property
    def cpn_rate(self):
        """Gets the cpn_rate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Ставка текущего купона, % годовых  # noqa: E501

        :return: The cpn_rate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._cpn_rate

    @cpn_rate.setter
    def cpn_rate(self, cpn_rate):
        """Sets the cpn_rate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Ставка текущего купона, % годовых  # noqa: E501

        :param cpn_rate: The cpn_rate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._cpn_rate = cpn_rate

    @property
    def cpn_value(self):
        """Gets the cpn_value of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Выплата на облигацию в валюте номинала  # noqa: E501

        :return: The cpn_value of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._cpn_value

    @cpn_value.setter
    def cpn_value(self, cpn_value):
        """Sets the cpn_value of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Выплата на облигацию в валюте номинала  # noqa: E501

        :param cpn_value: The cpn_value of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._cpn_value = cpn_value

    @property
    def cpn_paydate(self):
        """Gets the cpn_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата реальной выплаты купона  # noqa: E501

        :return: The cpn_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._cpn_paydate

    @cpn_paydate.setter
    def cpn_paydate(self, cpn_paydate):
        """Sets the cpn_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата реальной выплаты купона  # noqa: E501

        :param cpn_paydate: The cpn_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._cpn_paydate = cpn_paydate

    @property
    def cpn_knownno(self):
        """Gets the cpn_knownno of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Номер последнего известного купона  # noqa: E501

        :return: The cpn_knownno of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: int
        """
        return self._cpn_knownno

    @cpn_knownno.setter
    def cpn_knownno(self, cpn_knownno):
        """Sets the cpn_knownno of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Номер последнего известного купона  # noqa: E501

        :param cpn_knownno: The cpn_knownno of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: int
        """

        self._cpn_knownno = cpn_knownno

    @property
    def cpn_knowndate(self):
        """Gets the cpn_knowndate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата окончания последнего известного купона  # noqa: E501

        :return: The cpn_knowndate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._cpn_knowndate

    @cpn_knowndate.setter
    def cpn_knowndate(self, cpn_knowndate):
        """Sets the cpn_knowndate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата окончания последнего известного купона  # noqa: E501

        :param cpn_knowndate: The cpn_knowndate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._cpn_knowndate = cpn_knowndate

    @property
    def newcpn_date(self):
        """Gets the newcpn_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Ближайшая дата определения неизвестных будущих купонов  # noqa: E501

        :return: The newcpn_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._newcpn_date

    @newcpn_date.setter
    def newcpn_date(self, newcpn_date):
        """Sets the newcpn_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Ближайшая дата определения неизвестных будущих купонов  # noqa: E501

        :param newcpn_date: The newcpn_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._newcpn_date = newcpn_date

    @property
    def mty_date(self):
        """Gets the mty_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Ближайшая дата погашения части номинала  # noqa: E501

        :return: The mty_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._mty_date

    @mty_date.setter
    def mty_date(self, mty_date):
        """Sets the mty_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Ближайшая дата погашения части номинала  # noqa: E501

        :param mty_date: The mty_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._mty_date = mty_date

    @property
    def mty_fixdate(self):
        """Gets the mty_fixdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата фиксации списка на выплату погашения  # noqa: E501

        :return: The mty_fixdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._mty_fixdate

    @mty_fixdate.setter
    def mty_fixdate(self, mty_fixdate):
        """Sets the mty_fixdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата фиксации списка на выплату погашения  # noqa: E501

        :param mty_fixdate: The mty_fixdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._mty_fixdate = mty_fixdate

    @property
    def mty_part(self):
        """Gets the mty_part of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Погашаемый % от первоначального номинала  # noqa: E501

        :return: The mty_part of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._mty_part

    @mty_part.setter
    def mty_part(self, mty_part):
        """Sets the mty_part of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Погашаемый % от первоначального номинала  # noqa: E501

        :param mty_part: The mty_part of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._mty_part = mty_part

    @property
    def mty_value(self):
        """Gets the mty_value of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Выплата на облигацию в валюте номинала  # noqa: E501

        :return: The mty_value of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._mty_value

    @mty_value.setter
    def mty_value(self, mty_value):
        """Sets the mty_value of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Выплата на облигацию в валюте номинала  # noqa: E501

        :param mty_value: The mty_value of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._mty_value = mty_value

    @property
    def mty_paydate(self):
        """Gets the mty_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Реальная дата погашения/выплаты  # noqa: E501

        :return: The mty_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._mty_paydate

    @mty_paydate.setter
    def mty_paydate(self, mty_paydate):
        """Sets the mty_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Реальная дата погашения/выплаты  # noqa: E501

        :param mty_paydate: The mty_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._mty_paydate = mty_paydate

    @property
    def call_date(self):
        """Gets the call_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата досрочного погашения, опцион эмитента  # noqa: E501

        :return: The call_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._call_date

    @call_date.setter
    def call_date(self, call_date):
        """Sets the call_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата досрочного погашения, опцион эмитента  # noqa: E501

        :param call_date: The call_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._call_date = call_date

    @property
    def offer_date(self):
        """Gets the offer_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Расчетная дата(ближайшей) оферты  # noqa: E501

        :return: The offer_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._offer_date

    @offer_date.setter
    def offer_date(self, offer_date):
        """Sets the offer_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Расчетная дата(ближайшей) оферты  # noqa: E501

        :param offer_date: The offer_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._offer_date = offer_date

    @property
    def offer_end(self):
        """Gets the offer_end of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата окончания периода предъявления к выкупу  # noqa: E501

        :return: The offer_end of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._offer_end

    @offer_end.setter
    def offer_end(self, offer_end):
        """Sets the offer_end of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата окончания периода предъявления к выкупу  # noqa: E501

        :param offer_end: The offer_end of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._offer_end = offer_end

    @property
    def offer_price(self):
        """Gets the offer_price of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Цена выкупа, % от номинала, полная (с НКД)  # noqa: E501

        :return: The offer_price of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._offer_price

    @offer_price.setter
    def offer_price(self, offer_price):
        """Sets the offer_price of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Цена выкупа, % от номинала, полная (с НКД)  # noqa: E501

        :param offer_price: The offer_price of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._offer_price = offer_price

    @property
    def offer_paydate(self):
        """Gets the offer_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата реального выкупа  # noqa: E501

        :return: The offer_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._offer_paydate

    @offer_paydate.setter
    def offer_paydate(self, offer_paydate):
        """Sets the offer_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата реального выкупа  # noqa: E501

        :param offer_paydate: The offer_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._offer_paydate = offer_paydate

    @property
    def conv_begdate(self):
        """Gets the conv_begdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата начала конвертации (ближайшей)  # noqa: E501

        :return: The conv_begdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._conv_begdate

    @conv_begdate.setter
    def conv_begdate(self, conv_begdate):
        """Sets the conv_begdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата начала конвертации (ближайшей)  # noqa: E501

        :param conv_begdate: The conv_begdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._conv_begdate = conv_begdate

    @property
    def conv_enddate(self):
        """Gets the conv_enddate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата окончания конвертации (ближайшей)  # noqa: E501

        :return: The conv_enddate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._conv_enddate

    @conv_enddate.setter
    def conv_enddate(self, conv_enddate):
        """Sets the conv_enddate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата окончания конвертации (ближайшей)  # noqa: E501

        :param conv_enddate: The conv_enddate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._conv_enddate = conv_enddate

    @property
    def conv_coeff(self):
        """Gets the conv_coeff of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Коэффициент конвертации(ближайшей)  # noqa: E501

        :return: The conv_coeff of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._conv_coeff

    @conv_coeff.setter
    def conv_coeff(self, conv_coeff):
        """Sets the conv_coeff of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Коэффициент конвертации(ближайшей)  # noqa: E501

        :param conv_coeff: The conv_coeff of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._conv_coeff = conv_coeff

    @property
    def conv_fintoolid(self):
        """Gets the conv_fintoolid of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        ID ценной бумаги, в которую совершается конвертация  # noqa: E501

        :return: The conv_fintoolid of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: int
        """
        return self._conv_fintoolid

    @conv_fintoolid.setter
    def conv_fintoolid(self, conv_fintoolid):
        """Sets the conv_fintoolid of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        ID ценной бумаги, в которую совершается конвертация  # noqa: E501

        :param conv_fintoolid: The conv_fintoolid of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: int
        """

        self._conv_fintoolid = conv_fintoolid

    @property
    def default_date(self):
        """Gets the default_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата дефолта  # noqa: E501

        :return: The default_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._default_date

    @default_date.setter
    def default_date(self, default_date):
        """Sets the default_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата дефолта  # noqa: E501

        :param default_date: The default_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._default_date = default_date

    @property
    def default_type(self):
        """Gets the default_type of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Тип дефолта, либо отсутствие на заданную дату  # noqa: E501

        :return: The default_type of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._default_type

    @default_type.setter
    def default_type(self, default_type):
        """Sets the default_type of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Тип дефолта, либо отсутствие на заданную дату  # noqa: E501

        :param default_type: The default_type of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: str
        """

        self._default_type = default_type

    @property
    def event_type(self):
        """Gets the event_type of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Тип события, на котором возник дефолт  # noqa: E501

        :return: The event_type of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Тип события, на котором возник дефолт  # noqa: E501

        :param event_type: The event_type of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def duty_paydate(self):
        """Gets the duty_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата реального исполнения обязательства  # noqa: E501

        :return: The duty_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._duty_paydate

    @duty_paydate.setter
    def duty_paydate(self, duty_paydate):
        """Sets the duty_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата реального исполнения обязательства  # noqa: E501

        :param duty_paydate: The duty_paydate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._duty_paydate = duty_paydate

    @property
    def auct_exch(self):
        """Gets the auct_exch of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Название площадки, на кторой пройдет(до)размещение  # noqa: E501

        :return: The auct_exch of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: str
        """
        return self._auct_exch

    @auct_exch.setter
    def auct_exch(self, auct_exch):
        """Sets the auct_exch of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Название площадки, на кторой пройдет(до)размещение  # noqa: E501

        :param auct_exch: The auct_exch of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: str
        """

        self._auct_exch = auct_exch

    @property
    def auct_begdate(self):
        """Gets the auct_begdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата начала(до)размещения (ближайшего)  # noqa: E501

        :return: The auct_begdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._auct_begdate

    @auct_begdate.setter
    def auct_begdate(self, auct_begdate):
        """Sets the auct_begdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата начала(до)размещения (ближайшего)  # noqa: E501

        :param auct_begdate: The auct_begdate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._auct_begdate = auct_begdate

    @property
    def auct_askval(self):
        """Gets the auct_askval of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Объем (до)размещаемых облигаций, в валюте номинала  # noqa: E501

        :return: The auct_askval of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._auct_askval

    @auct_askval.setter
    def auct_askval(self, auct_askval):
        """Sets the auct_askval of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Объем (до)размещаемых облигаций, в валюте номинала  # noqa: E501

        :param auct_askval: The auct_askval of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._auct_askval = auct_askval

    @property
    def auct_askvol(self):
        """Gets the auct_askvol of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Количество (до)размещаемых облигаций, штук  # noqa: E501

        :return: The auct_askvol of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._auct_askvol

    @auct_askvol.setter
    def auct_askvol(self, auct_askvol):
        """Sets the auct_askvol of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Количество (до)размещаемых облигаций, штук  # noqa: E501

        :param auct_askvol: The auct_askvol of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._auct_askvol = auct_askvol

    @property
    def auct_enddate(self):
        """Gets the auct_enddate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата окончания(до)размещения (ближайшего)  # noqa: E501

        :return: The auct_enddate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._auct_enddate

    @auct_enddate.setter
    def auct_enddate(self, auct_enddate):
        """Sets the auct_enddate of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата окончания(до)размещения (ближайшего)  # noqa: E501

        :param auct_enddate: The auct_enddate of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._auct_enddate = auct_enddate

    @property
    def accrued_int(self):
        """Gets the accrued_int of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        НКД в валюте номинала  # noqa: E501

        :return: The accrued_int of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._accrued_int

    @accrued_int.setter
    def accrued_int(self, accrued_int):
        """Sets the accrued_int of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        НКД в валюте номинала  # noqa: E501

        :param accrued_int: The accrued_int of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._accrued_int = accrued_int

    @property
    def accrued_int_pct(self):
        """Gets the accrued_int_pct of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        НКД в % от номинала  # noqa: E501

        :return: The accrued_int_pct of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._accrued_int_pct

    @accrued_int_pct.setter
    def accrued_int_pct(self, accrued_int_pct):
        """Sets the accrued_int_pct of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        НКД в % от номинала  # noqa: E501

        :param accrued_int_pct: The accrued_int_pct of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._accrued_int_pct = accrued_int_pct

    @property
    def current_fv(self):
        """Gets the current_fv of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Текущий номинал в валюте номинала  # noqa: E501

        :return: The current_fv of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._current_fv

    @current_fv.setter
    def current_fv(self, current_fv):
        """Sets the current_fv of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Текущий номинал в валюте номинала  # noqa: E501

        :param current_fv: The current_fv of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._current_fv = current_fv

    @property
    def current_fv_pct(self):
        """Gets the current_fv_pct of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Текущий номинал в % от первоначального номинала  # noqa: E501

        :return: The current_fv_pct of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._current_fv_pct

    @current_fv_pct.setter
    def current_fv_pct(self, current_fv_pct):
        """Sets the current_fv_pct of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Текущий номинал в % от первоначального номинала  # noqa: E501

        :param current_fv_pct: The current_fv_pct of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._current_fv_pct = current_fv_pct

    @property
    def fairvalue_avg(self):
        """Gets the fairvalue_avg of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        ТСС в валюте номинала, средневзв.цена биржи  # noqa: E501

        :return: The fairvalue_avg of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._fairvalue_avg

    @fairvalue_avg.setter
    def fairvalue_avg(self, fairvalue_avg):
        """Sets the fairvalue_avg of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        ТСС в валюте номинала, средневзв.цена биржи  # noqa: E501

        :param fairvalue_avg: The fairvalue_avg of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._fairvalue_avg = fairvalue_avg

    @property
    def fairvalue_nfa(self):
        """Gets the fairvalue_nfa of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        ТСС в валюте номинала, НРД  # noqa: E501

        :return: The fairvalue_nfa of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._fairvalue_nfa

    @fairvalue_nfa.setter
    def fairvalue_nfa(self, fairvalue_nfa):
        """Sets the fairvalue_nfa of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        ТСС в валюте номинала, НРД  # noqa: E501

        :param fairvalue_nfa: The fairvalue_nfa of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._fairvalue_nfa = fairvalue_nfa

    @property
    def mty_sumcpn(self):
        """Gets the mty_sumcpn of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Сумма купонов до погашения  # noqa: E501

        :return: The mty_sumcpn of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._mty_sumcpn

    @mty_sumcpn.setter
    def mty_sumcpn(self, mty_sumcpn):
        """Sets the mty_sumcpn of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Сумма купонов до погашения  # noqa: E501

        :param mty_sumcpn: The mty_sumcpn of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._mty_sumcpn = mty_sumcpn

    @property
    def offer_sumcpn(self):
        """Gets the offer_sumcpn of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Сумма купонов до ближайшей оферты  # noqa: E501

        :return: The offer_sumcpn of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: float
        """
        return self._offer_sumcpn

    @offer_sumcpn.setter
    def offer_sumcpn(self, offer_sumcpn):
        """Sets the offer_sumcpn of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Сумма купонов до ближайшей оферты  # noqa: E501

        :param offer_sumcpn: The offer_sumcpn of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: float
        """

        self._offer_sumcpn = offer_sumcpn

    @property
    def next_repayment_date(self):
        """Gets the next_repayment_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Дата ближайшего возможного погашения  # noqa: E501

        :return: The next_repayment_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._next_repayment_date

    @next_repayment_date.setter
    def next_repayment_date(self, next_repayment_date):
        """Sets the next_repayment_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Дата ближайшего возможного погашения  # noqa: E501

        :param next_repayment_date: The next_repayment_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._next_repayment_date = next_repayment_date

    @property
    def fv_last_known_date(self):
        """Gets the fv_last_known_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501

        Последняя известная дата номинала  # noqa: E501

        :return: The fv_last_known_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :rtype: datetime
        """
        return self._fv_last_known_date

    @fv_last_known_date.setter
    def fv_last_known_date(self, fv_last_known_date):
        """Sets the fv_last_known_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.

        Последняя известная дата номинала  # noqa: E501

        :param fv_last_known_date: The fv_last_known_date of this EfirDataHubModelsModelsBondDateOptionsTableFields.  # noqa: E501
        :type: datetime
        """

        self._fv_last_known_date = fv_last_known_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondDateOptionsTableFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondDateOptionsTableFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
