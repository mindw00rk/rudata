# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMarkingValuesFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintool_id': 'int',
        'isin': 'str',
        'reg_code': 'str',
        'nrd_code': 'str',
        'id_code': 'int',
        'id_group': 'int',
        'from_date': 'datetime',
        'up_to_date': 'datetime',
        'qualified_test_id': 'int',
        'id_rule': 'int',
        'update_date': 'datetime',
        'counter': 'int'
    }

    attribute_map = {
        'fintool_id': 'fintoolId',
        'isin': 'isin',
        'reg_code': 'reg_code',
        'nrd_code': 'nrd_code',
        'id_code': 'id_code',
        'id_group': 'id_group',
        'from_date': 'from_date',
        'up_to_date': 'up_to_date',
        'qualified_test_id': 'qualified_test_id',
        'id_rule': 'id_rule',
        'update_date': 'update_date',
        'counter': 'counter'
    }

    def __init__(self, fintool_id=None, isin=None, reg_code=None, nrd_code=None, id_code=None, id_group=None, from_date=None, up_to_date=None, qualified_test_id=None, id_rule=None, update_date=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsMarkingValuesFields - a model defined in Swagger"""  # noqa: E501
        self._fintool_id = None
        self._isin = None
        self._reg_code = None
        self._nrd_code = None
        self._id_code = None
        self._id_group = None
        self._from_date = None
        self._up_to_date = None
        self._qualified_test_id = None
        self._id_rule = None
        self._update_date = None
        self._counter = None
        self.discriminator = None
        if fintool_id is not None:
            self.fintool_id = fintool_id
        if isin is not None:
            self.isin = isin
        if reg_code is not None:
            self.reg_code = reg_code
        if nrd_code is not None:
            self.nrd_code = nrd_code
        if id_code is not None:
            self.id_code = id_code
        if id_group is not None:
            self.id_group = id_group
        if from_date is not None:
            self.from_date = from_date
        if up_to_date is not None:
            self.up_to_date = up_to_date
        if qualified_test_id is not None:
            self.qualified_test_id = qualified_test_id
        if id_rule is not None:
            self.id_rule = id_rule
        if update_date is not None:
            self.update_date = update_date
        if counter is not None:
            self.counter = counter

    @property
    def fintool_id(self):
        """Gets the fintool_id of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501

        Идентификатор ценной бумаги в базе Интерфакс  # noqa: E501

        :return: The fintool_id of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :rtype: int
        """
        return self._fintool_id

    @fintool_id.setter
    def fintool_id(self, fintool_id):
        """Sets the fintool_id of this EfirDataHubModelsModelsMarkingValuesFields.

        Идентификатор ценной бумаги в базе Интерфакс  # noqa: E501

        :param fintool_id: The fintool_id of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :type: int
        """

        self._fintool_id = fintool_id

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501

        ISIN  # noqa: E501

        :return: The isin of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsModelsMarkingValuesFields.

        ISIN  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def reg_code(self):
        """Gets the reg_code of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501

        Гос. рег. номер  # noqa: E501

        :return: The reg_code of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :rtype: str
        """
        return self._reg_code

    @reg_code.setter
    def reg_code(self, reg_code):
        """Sets the reg_code of this EfirDataHubModelsModelsMarkingValuesFields.

        Гос. рег. номер  # noqa: E501

        :param reg_code: The reg_code of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :type: str
        """

        self._reg_code = reg_code

    @property
    def nrd_code(self):
        """Gets the nrd_code of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501

        Рег. номер НРД  # noqa: E501

        :return: The nrd_code of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :rtype: str
        """
        return self._nrd_code

    @nrd_code.setter
    def nrd_code(self, nrd_code):
        """Sets the nrd_code of this EfirDataHubModelsModelsMarkingValuesFields.

        Рег. номер НРД  # noqa: E501

        :param nrd_code: The nrd_code of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :type: str
        """

        self._nrd_code = nrd_code

    @property
    def id_code(self):
        """Gets the id_code of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501

        Идентификатор классификатора бумаги (значение поля id_code из метода Marking/Codes)  # noqa: E501

        :return: The id_code of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :rtype: int
        """
        return self._id_code

    @id_code.setter
    def id_code(self, id_code):
        """Sets the id_code of this EfirDataHubModelsModelsMarkingValuesFields.

        Идентификатор классификатора бумаги (значение поля id_code из метода Marking/Codes)  # noqa: E501

        :param id_code: The id_code of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :type: int
        """

        self._id_code = id_code

    @property
    def id_group(self):
        """Gets the id_group of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501

        Идентификатор группы классификаторов бумаги (значение поля id_group из метода Marking/Codes)  # noqa: E501

        :return: The id_group of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :rtype: int
        """
        return self._id_group

    @id_group.setter
    def id_group(self, id_group):
        """Sets the id_group of this EfirDataHubModelsModelsMarkingValuesFields.

        Идентификатор группы классификаторов бумаги (значение поля id_group из метода Marking/Codes)  # noqa: E501

        :param id_group: The id_group of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :type: int
        """

        self._id_group = id_group

    @property
    def from_date(self):
        """Gets the from_date of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501

        Дата начала действия маркировки  # noqa: E501

        :return: The from_date of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this EfirDataHubModelsModelsMarkingValuesFields.

        Дата начала действия маркировки  # noqa: E501

        :param from_date: The from_date of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    @property
    def up_to_date(self):
        """Gets the up_to_date of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501

        Дата окончания действия маркировки  # noqa: E501

        :return: The up_to_date of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._up_to_date

    @up_to_date.setter
    def up_to_date(self, up_to_date):
        """Sets the up_to_date of this EfirDataHubModelsModelsMarkingValuesFields.

        Дата окончания действия маркировки  # noqa: E501

        :param up_to_date: The up_to_date of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :type: datetime
        """

        self._up_to_date = up_to_date

    @property
    def qualified_test_id(self):
        """Gets the qualified_test_id of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501

        Номер теста  # noqa: E501

        :return: The qualified_test_id of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :rtype: int
        """
        return self._qualified_test_id

    @qualified_test_id.setter
    def qualified_test_id(self, qualified_test_id):
        """Sets the qualified_test_id of this EfirDataHubModelsModelsMarkingValuesFields.

        Номер теста  # noqa: E501

        :param qualified_test_id: The qualified_test_id of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :type: int
        """

        self._qualified_test_id = qualified_test_id

    @property
    def id_rule(self):
        """Gets the id_rule of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501

        Идентификатор правила маркировки  # noqa: E501

        :return: The id_rule of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :rtype: int
        """
        return self._id_rule

    @id_rule.setter
    def id_rule(self, id_rule):
        """Sets the id_rule of this EfirDataHubModelsModelsMarkingValuesFields.

        Идентификатор правила маркировки  # noqa: E501

        :param id_rule: The id_rule of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :type: int
        """

        self._id_rule = id_rule

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501

        Дата обновления информации  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsMarkingValuesFields.

        Дата обновления информации  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501

        Общее количество записей в выборке, если указан pageNum = 1. Иначе = null  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsMarkingValuesFields.

        Общее количество записей в выборке, если указан pageNum = 1. Иначе = null  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsMarkingValuesFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMarkingValuesFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMarkingValuesFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
