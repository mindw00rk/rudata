# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRatingAggScale(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scale': 'str',
        'value_l': 'str',
        'value_n': 'float',
        'agg_reasons': 'list[EfirDataHubModelsModelsRatingAggReason]'
    }

    attribute_map = {
        'scale': 'scale',
        'value_l': 'value_l',
        'value_n': 'value_n',
        'agg_reasons': 'agg_reasons'
    }

    def __init__(self, scale=None, value_l=None, value_n=None, agg_reasons=None):  # noqa: E501
        """EfirDataHubModelsModelsRatingAggScale - a model defined in Swagger"""  # noqa: E501
        self._scale = None
        self._value_l = None
        self._value_n = None
        self._agg_reasons = None
        self.discriminator = None
        if scale is not None:
            self.scale = scale
        if value_l is not None:
            self.value_l = value_l
        if value_n is not None:
            self.value_n = value_n
        if agg_reasons is not None:
            self.agg_reasons = agg_reasons

    @property
    def scale(self):
        """Gets the scale of this EfirDataHubModelsModelsRatingAggScale.  # noqa: E501


        :return: The scale of this EfirDataHubModelsModelsRatingAggScale.  # noqa: E501
        :rtype: str
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this EfirDataHubModelsModelsRatingAggScale.


        :param scale: The scale of this EfirDataHubModelsModelsRatingAggScale.  # noqa: E501
        :type: str
        """

        self._scale = scale

    @property
    def value_l(self):
        """Gets the value_l of this EfirDataHubModelsModelsRatingAggScale.  # noqa: E501


        :return: The value_l of this EfirDataHubModelsModelsRatingAggScale.  # noqa: E501
        :rtype: str
        """
        return self._value_l

    @value_l.setter
    def value_l(self, value_l):
        """Sets the value_l of this EfirDataHubModelsModelsRatingAggScale.


        :param value_l: The value_l of this EfirDataHubModelsModelsRatingAggScale.  # noqa: E501
        :type: str
        """

        self._value_l = value_l

    @property
    def value_n(self):
        """Gets the value_n of this EfirDataHubModelsModelsRatingAggScale.  # noqa: E501


        :return: The value_n of this EfirDataHubModelsModelsRatingAggScale.  # noqa: E501
        :rtype: float
        """
        return self._value_n

    @value_n.setter
    def value_n(self, value_n):
        """Sets the value_n of this EfirDataHubModelsModelsRatingAggScale.


        :param value_n: The value_n of this EfirDataHubModelsModelsRatingAggScale.  # noqa: E501
        :type: float
        """

        self._value_n = value_n

    @property
    def agg_reasons(self):
        """Gets the agg_reasons of this EfirDataHubModelsModelsRatingAggScale.  # noqa: E501


        :return: The agg_reasons of this EfirDataHubModelsModelsRatingAggScale.  # noqa: E501
        :rtype: list[EfirDataHubModelsModelsRatingAggReason]
        """
        return self._agg_reasons

    @agg_reasons.setter
    def agg_reasons(self, agg_reasons):
        """Sets the agg_reasons of this EfirDataHubModelsModelsRatingAggScale.


        :param agg_reasons: The agg_reasons of this EfirDataHubModelsModelsRatingAggScale.  # noqa: E501
        :type: list[EfirDataHubModelsModelsRatingAggReason]
        """

        self._agg_reasons = agg_reasons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRatingAggScale, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRatingAggScale):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
