# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter_category': 'str',
        'fininst_ids': 'list[int]',
        'codes': 'list[str]',
        'only_emitents_with_category': 'bool',
        'page_num': 'int',
        'page_size': 'int'
    }

    attribute_map = {
        'filter_category': 'filterCategory',
        'fininst_ids': 'fininstIds',
        'codes': 'codes',
        'only_emitents_with_category': 'onlyEmitentsWithCategory',
        'page_num': 'pageNum',
        'page_size': 'pageSize'
    }

    def __init__(self, filter_category=None, fininst_ids=None, codes=None, only_emitents_with_category=None, page_num=1, page_size=100):  # noqa: E501
        """EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest - a model defined in Swagger"""  # noqa: E501
        self._filter_category = None
        self._fininst_ids = None
        self._codes = None
        self._only_emitents_with_category = None
        self._page_num = None
        self._page_size = None
        self.discriminator = None
        if filter_category is not None:
            self.filter_category = filter_category
        if fininst_ids is not None:
            self.fininst_ids = fininst_ids
        if codes is not None:
            self.codes = codes
        if only_emitents_with_category is not None:
            self.only_emitents_with_category = only_emitents_with_category
        if page_num is not None:
            self.page_num = page_num
        if page_size is not None:
            self.page_size = page_size

    @property
    def filter_category(self):
        """Gets the filter_category of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501

        Строка фильтрации по категории.  Отбираются компании, у которых есть связь с указанной в фильтре категорией  # noqa: E501

        :return: The filter_category of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501
        :rtype: str
        """
        return self._filter_category

    @filter_category.setter
    def filter_category(self, filter_category):
        """Sets the filter_category of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.

        Строка фильтрации по категории.  Отбираются компании, у которых есть связь с указанной в фильтре категорией  # noqa: E501

        :param filter_category: The filter_category of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501
        :type: str
        """

        self._filter_category = filter_category

    @property
    def fininst_ids(self):
        """Gets the fininst_ids of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501

        Список идентификаторов компании.  # noqa: E501

        :return: The fininst_ids of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._fininst_ids

    @fininst_ids.setter
    def fininst_ids(self, fininst_ids):
        """Sets the fininst_ids of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.

        Список идентификаторов компании.  # noqa: E501

        :param fininst_ids: The fininst_ids of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501
        :type: list[int]
        """

        self._fininst_ids = fininst_ids

    @property
    def codes(self):
        """Gets the codes of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501

        Список кодов компании (ИНН, ОГРН).  Используется, если не задан fininstIds  # noqa: E501

        :return: The codes of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.

        Список кодов компании (ИНН, ОГРН).  Используется, если не задан fininstIds  # noqa: E501

        :param codes: The codes of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501
        :type: list[str]
        """

        self._codes = codes

    @property
    def only_emitents_with_category(self):
        """Gets the only_emitents_with_category of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501

        Отдавать только компании, у которых есть категории  # noqa: E501

        :return: The only_emitents_with_category of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501
        :rtype: bool
        """
        return self._only_emitents_with_category

    @only_emitents_with_category.setter
    def only_emitents_with_category(self, only_emitents_with_category):
        """Sets the only_emitents_with_category of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.

        Отдавать только компании, у которых есть категории  # noqa: E501

        :param only_emitents_with_category: The only_emitents_with_category of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501
        :type: bool
        """

        self._only_emitents_with_category = only_emitents_with_category

    @property
    def page_num(self):
        """Gets the page_num of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501

        Номер страницы для выборки.  Если не задан - или меньше 1, то устанавливается в ‘1’  # noqa: E501

        :return: The page_num of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_num

    @page_num.setter
    def page_num(self, page_num):
        """Sets the page_num of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.

        Номер страницы для выборки.  Если не задан - или меньше 1, то устанавливается в ‘1’  # noqa: E501

        :param page_num: The page_num of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501
        :type: int
        """

        self._page_num = page_num

    @property
    def page_size(self):
        """Gets the page_size of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501

        Размер страницы выборки.  Если не задан или меньше 1, то устанавливается в ‘300’  # noqa: E501

        :return: The page_size of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.

        Размер страницы выборки.  Если не задан или меньше 1, то устанавливается в ‘300’  # noqa: E501

        :param page_size: The page_size of this EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2DictionaryEmitentCategoryValueRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
