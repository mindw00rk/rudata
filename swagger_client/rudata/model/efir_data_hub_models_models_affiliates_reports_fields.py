# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsAffiliatesReportsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_id': 'int',
        'fininstid': 'int',
        'report_date': 'datetime',
        'link': 'str',
        'update_date': 'datetime'
    }

    attribute_map = {
        'report_id': 'report_id',
        'fininstid': 'fininstid',
        'report_date': 'report_date',
        'link': 'link',
        'update_date': 'update_date'
    }

    def __init__(self, report_id=None, fininstid=None, report_date=None, link=None, update_date=None):  # noqa: E501
        """EfirDataHubModelsModelsAffiliatesReportsFields - a model defined in Swagger"""  # noqa: E501
        self._report_id = None
        self._fininstid = None
        self._report_date = None
        self._link = None
        self._update_date = None
        self.discriminator = None
        if report_id is not None:
            self.report_id = report_id
        if fininstid is not None:
            self.fininstid = fininstid
        if report_date is not None:
            self.report_date = report_date
        if link is not None:
            self.link = link
        if update_date is not None:
            self.update_date = update_date

    @property
    def report_id(self):
        """Gets the report_id of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501

        Идентификатор отчета  # noqa: E501

        :return: The report_id of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501
        :rtype: int
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this EfirDataHubModelsModelsAffiliatesReportsFields.

        Идентификатор отчета  # noqa: E501

        :param report_id: The report_id of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501
        :type: int
        """

        self._report_id = report_id

    @property
    def fininstid(self):
        """Gets the fininstid of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501

        Идентификатор компании, предоставившей отчет, в БД Интерфакс  # noqa: E501

        :return: The fininstid of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid

    @fininstid.setter
    def fininstid(self, fininstid):
        """Sets the fininstid of this EfirDataHubModelsModelsAffiliatesReportsFields.

        Идентификатор компании, предоставившей отчет, в БД Интерфакс  # noqa: E501

        :param fininstid: The fininstid of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501
        :type: int
        """

        self._fininstid = fininstid

    @property
    def report_date(self):
        """Gets the report_date of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501

        Дата отчета  # noqa: E501

        :return: The report_date of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._report_date

    @report_date.setter
    def report_date(self, report_date):
        """Sets the report_date of this EfirDataHubModelsModelsAffiliatesReportsFields.

        Дата отчета  # noqa: E501

        :param report_date: The report_date of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501
        :type: datetime
        """

        self._report_date = report_date

    @property
    def link(self):
        """Gets the link of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501

        Ссылка на отчет  # noqa: E501

        :return: The link of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this EfirDataHubModelsModelsAffiliatesReportsFields.

        Ссылка на отчет  # noqa: E501

        :param link: The link of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501

        Дата обновления информации  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsAffiliatesReportsFields.

        Дата обновления информации  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsAffiliatesReportsFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsAffiliatesReportsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsAffiliatesReportsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
