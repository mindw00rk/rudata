# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsEmitentPropertyData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'params': 'str',
        'message_text': 'str',
        'encumbrance_type': 'str',
        'decision_date': 'datetime',
        'burded_share': 'float',
        'burdening_org_data': 'list[EfirDataHubModelsModelsEmitentBurdeningOrgData]'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'params': 'params',
        'message_text': 'message_text',
        'encumbrance_type': 'encumbrance_type',
        'decision_date': 'decision_date',
        'burded_share': 'burded_share',
        'burdening_org_data': 'burdening_org_data'
    }

    def __init__(self, id=None, type=None, params=None, message_text=None, encumbrance_type=None, decision_date=None, burded_share=None, burdening_org_data=None):  # noqa: E501
        """EfirDataHubModelsModelsEmitentPropertyData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._params = None
        self._message_text = None
        self._encumbrance_type = None
        self._decision_date = None
        self._burded_share = None
        self._burdening_org_data = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if params is not None:
            self.params = params
        if message_text is not None:
            self.message_text = message_text
        if encumbrance_type is not None:
            self.encumbrance_type = encumbrance_type
        if decision_date is not None:
            self.decision_date = decision_date
        if burded_share is not None:
            self.burded_share = burded_share
        if burdening_org_data is not None:
            self.burdening_org_data = burdening_org_data

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501

        Идентификатор имущества  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsEmitentPropertyData.

        Идентификатор имущества  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501

        Вид имущества  # noqa: E501

        :return: The type of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EfirDataHubModelsModelsEmitentPropertyData.

        Вид имущества  # noqa: E501

        :param type: The type of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def params(self):
        """Gets the params of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501

        Дополнительные параметры имущества  # noqa: E501

        :return: The params of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this EfirDataHubModelsModelsEmitentPropertyData.

        Дополнительные параметры имущества  # noqa: E501

        :param params: The params of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :type: str
        """

        self._params = params

    @property
    def message_text(self):
        """Gets the message_text of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501

        Текст сообщения об обременении имущества  # noqa: E501

        :return: The message_text of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :rtype: str
        """
        return self._message_text

    @message_text.setter
    def message_text(self, message_text):
        """Sets the message_text of this EfirDataHubModelsModelsEmitentPropertyData.

        Текст сообщения об обременении имущества  # noqa: E501

        :param message_text: The message_text of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :type: str
        """

        self._message_text = message_text

    @property
    def encumbrance_type(self):
        """Gets the encumbrance_type of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501

        Вид обременения имущества  # noqa: E501

        :return: The encumbrance_type of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :rtype: str
        """
        return self._encumbrance_type

    @encumbrance_type.setter
    def encumbrance_type(self, encumbrance_type):
        """Sets the encumbrance_type of this EfirDataHubModelsModelsEmitentPropertyData.

        Вид обременения имущества  # noqa: E501

        :param encumbrance_type: The encumbrance_type of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :type: str
        """

        self._encumbrance_type = encumbrance_type

    @property
    def decision_date(self):
        """Gets the decision_date of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501

        Дата решения об обременении  # noqa: E501

        :return: The decision_date of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :rtype: datetime
        """
        return self._decision_date

    @decision_date.setter
    def decision_date(self, decision_date):
        """Sets the decision_date of this EfirDataHubModelsModelsEmitentPropertyData.

        Дата решения об обременении  # noqa: E501

        :param decision_date: The decision_date of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :type: datetime
        """

        self._decision_date = decision_date

    @property
    def burded_share(self):
        """Gets the burded_share of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501

        Обремененная доля стоимости имущества  # noqa: E501

        :return: The burded_share of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :rtype: float
        """
        return self._burded_share

    @burded_share.setter
    def burded_share(self, burded_share):
        """Sets the burded_share of this EfirDataHubModelsModelsEmitentPropertyData.

        Обремененная доля стоимости имущества  # noqa: E501

        :param burded_share: The burded_share of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :type: float
        """

        self._burded_share = burded_share

    @property
    def burdening_org_data(self):
        """Gets the burdening_org_data of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501

        Данные обременяющей стороны  # noqa: E501

        :return: The burdening_org_data of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :rtype: list[EfirDataHubModelsModelsEmitentBurdeningOrgData]
        """
        return self._burdening_org_data

    @burdening_org_data.setter
    def burdening_org_data(self, burdening_org_data):
        """Sets the burdening_org_data of this EfirDataHubModelsModelsEmitentPropertyData.

        Данные обременяющей стороны  # noqa: E501

        :param burdening_org_data: The burdening_org_data of this EfirDataHubModelsModelsEmitentPropertyData.  # noqa: E501
        :type: list[EfirDataHubModelsModelsEmitentBurdeningOrgData]
        """

        self._burdening_org_data = burdening_org_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsEmitentPropertyData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsEmitentPropertyData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
