# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondProgramsFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'shortname_rus': 'str',
        'fullname_rus': 'str',
        'fininstid': 'int',
        'okpo': 'str',
        'status': 'str',
        'country': 'str',
        'reg_code': 'str',
        'reg_date': 'datetime',
        'reg_org': 'str',
        'facevalue': 'float',
        'facevalue_currency': 'str',
        'issue_vol': 'float',
        'issue_val': 'float',
        'begdist_date': 'datetime',
        'enddist_date': 'datetime',
        'market_vol': 'float',
        'market_val': 'float',
        'guaranteed': 'int',
        'guaranteed_val': 'float',
        'coverage_val': 'float',
        'have_regress': 'int',
        'emitent_take_risk': 'int',
        'debt_cost_ratio': 'float',
        'note': 'str',
        'counter': 'int'
    }

    attribute_map = {
        'id': 'id',
        'shortname_rus': 'shortname_rus',
        'fullname_rus': 'fullname_rus',
        'fininstid': 'fininstid',
        'okpo': 'okpo',
        'status': 'status',
        'country': 'country',
        'reg_code': 'reg_code',
        'reg_date': 'reg_date',
        'reg_org': 'reg_org',
        'facevalue': 'facevalue',
        'facevalue_currency': 'facevalue_currency',
        'issue_vol': 'issue_vol',
        'issue_val': 'issue_val',
        'begdist_date': 'begdist_date',
        'enddist_date': 'enddist_date',
        'market_vol': 'market_vol',
        'market_val': 'market_val',
        'guaranteed': 'guaranteed',
        'guaranteed_val': 'guaranteed_val',
        'coverage_val': 'coverage_val',
        'have_regress': 'have_regress',
        'emitent_take_risk': 'emitent_take_risk',
        'debt_cost_ratio': 'debt_cost_ratio',
        'note': 'note',
        'counter': 'counter'
    }

    def __init__(self, id=None, shortname_rus=None, fullname_rus=None, fininstid=None, okpo=None, status=None, country=None, reg_code=None, reg_date=None, reg_org=None, facevalue=None, facevalue_currency=None, issue_vol=None, issue_val=None, begdist_date=None, enddist_date=None, market_vol=None, market_val=None, guaranteed=None, guaranteed_val=None, coverage_val=None, have_regress=None, emitent_take_risk=None, debt_cost_ratio=None, note=None, counter=None):  # noqa: E501
        """EfirDataHubModelsModelsBondProgramsFields - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._shortname_rus = None
        self._fullname_rus = None
        self._fininstid = None
        self._okpo = None
        self._status = None
        self._country = None
        self._reg_code = None
        self._reg_date = None
        self._reg_org = None
        self._facevalue = None
        self._facevalue_currency = None
        self._issue_vol = None
        self._issue_val = None
        self._begdist_date = None
        self._enddist_date = None
        self._market_vol = None
        self._market_val = None
        self._guaranteed = None
        self._guaranteed_val = None
        self._coverage_val = None
        self._have_regress = None
        self._emitent_take_risk = None
        self._debt_cost_ratio = None
        self._note = None
        self._counter = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if shortname_rus is not None:
            self.shortname_rus = shortname_rus
        if fullname_rus is not None:
            self.fullname_rus = fullname_rus
        if fininstid is not None:
            self.fininstid = fininstid
        if okpo is not None:
            self.okpo = okpo
        if status is not None:
            self.status = status
        if country is not None:
            self.country = country
        if reg_code is not None:
            self.reg_code = reg_code
        if reg_date is not None:
            self.reg_date = reg_date
        if reg_org is not None:
            self.reg_org = reg_org
        if facevalue is not None:
            self.facevalue = facevalue
        if facevalue_currency is not None:
            self.facevalue_currency = facevalue_currency
        if issue_vol is not None:
            self.issue_vol = issue_vol
        if issue_val is not None:
            self.issue_val = issue_val
        if begdist_date is not None:
            self.begdist_date = begdist_date
        if enddist_date is not None:
            self.enddist_date = enddist_date
        if market_vol is not None:
            self.market_vol = market_vol
        if market_val is not None:
            self.market_val = market_val
        if guaranteed is not None:
            self.guaranteed = guaranteed
        if guaranteed_val is not None:
            self.guaranteed_val = guaranteed_val
        if coverage_val is not None:
            self.coverage_val = coverage_val
        if have_regress is not None:
            self.have_regress = have_regress
        if emitent_take_risk is not None:
            self.emitent_take_risk = emitent_take_risk
        if debt_cost_ratio is not None:
            self.debt_cost_ratio = debt_cost_ratio
        if note is not None:
            self.note = note
        if counter is not None:
            self.counter = counter

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Идентификатор программы (id_fintool)  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsBondProgramsFields.

        Идентификатор программы (id_fintool)  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def shortname_rus(self):
        """Gets the shortname_rus of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Краткое название программы  # noqa: E501

        :return: The shortname_rus of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: str
        """
        return self._shortname_rus

    @shortname_rus.setter
    def shortname_rus(self, shortname_rus):
        """Sets the shortname_rus of this EfirDataHubModelsModelsBondProgramsFields.

        Краткое название программы  # noqa: E501

        :param shortname_rus: The shortname_rus of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: str
        """

        self._shortname_rus = shortname_rus

    @property
    def fullname_rus(self):
        """Gets the fullname_rus of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Полное название программы  # noqa: E501

        :return: The fullname_rus of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: str
        """
        return self._fullname_rus

    @fullname_rus.setter
    def fullname_rus(self, fullname_rus):
        """Sets the fullname_rus of this EfirDataHubModelsModelsBondProgramsFields.

        Полное название программы  # noqa: E501

        :param fullname_rus: The fullname_rus of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: str
        """

        self._fullname_rus = fullname_rus

    @property
    def fininstid(self):
        """Gets the fininstid of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Идентификатор эмитента в базе Интерфакс  # noqa: E501

        :return: The fininstid of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: int
        """
        return self._fininstid

    @fininstid.setter
    def fininstid(self, fininstid):
        """Sets the fininstid of this EfirDataHubModelsModelsBondProgramsFields.

        Идентификатор эмитента в базе Интерфакс  # noqa: E501

        :param fininstid: The fininstid of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: int
        """

        self._fininstid = fininstid

    @property
    def okpo(self):
        """Gets the okpo of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        ОКПО эмитента  # noqa: E501

        :return: The okpo of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: str
        """
        return self._okpo

    @okpo.setter
    def okpo(self, okpo):
        """Sets the okpo of this EfirDataHubModelsModelsBondProgramsFields.

        ОКПО эмитента  # noqa: E501

        :param okpo: The okpo of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: str
        """

        self._okpo = okpo

    @property
    def status(self):
        """Gets the status of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Статус программы  # noqa: E501

        :return: The status of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EfirDataHubModelsModelsBondProgramsFields.

        Статус программы  # noqa: E501

        :param status: The status of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def country(self):
        """Gets the country of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Двухбуквенный код страны в соответствии с ОКСМ  # noqa: E501

        :return: The country of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EfirDataHubModelsModelsBondProgramsFields.

        Двухбуквенный код страны в соответствии с ОКСМ  # noqa: E501

        :param country: The country of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def reg_code(self):
        """Gets the reg_code of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Регистрационный номер программы  # noqa: E501

        :return: The reg_code of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: str
        """
        return self._reg_code

    @reg_code.setter
    def reg_code(self, reg_code):
        """Sets the reg_code of this EfirDataHubModelsModelsBondProgramsFields.

        Регистрационный номер программы  # noqa: E501

        :param reg_code: The reg_code of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: str
        """

        self._reg_code = reg_code

    @property
    def reg_date(self):
        """Gets the reg_date of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Дата регистрации  # noqa: E501

        :return: The reg_date of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._reg_date

    @reg_date.setter
    def reg_date(self, reg_date):
        """Sets the reg_date of this EfirDataHubModelsModelsBondProgramsFields.

        Дата регистрации  # noqa: E501

        :param reg_date: The reg_date of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: datetime
        """

        self._reg_date = reg_date

    @property
    def reg_org(self):
        """Gets the reg_org of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Регистратор(ФСФР, ЦБ, МосБиржа и т.п.)  # noqa: E501

        :return: The reg_org of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: str
        """
        return self._reg_org

    @reg_org.setter
    def reg_org(self, reg_org):
        """Sets the reg_org of this EfirDataHubModelsModelsBondProgramsFields.

        Регистратор(ФСФР, ЦБ, МосБиржа и т.п.)  # noqa: E501

        :param reg_org: The reg_org of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: str
        """

        self._reg_org = reg_org

    @property
    def facevalue(self):
        """Gets the facevalue of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Номинал  # noqa: E501

        :return: The facevalue of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: float
        """
        return self._facevalue

    @facevalue.setter
    def facevalue(self, facevalue):
        """Sets the facevalue of this EfirDataHubModelsModelsBondProgramsFields.

        Номинал  # noqa: E501

        :param facevalue: The facevalue of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: float
        """

        self._facevalue = facevalue

    @property
    def facevalue_currency(self):
        """Gets the facevalue_currency of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Валюта номинала  # noqa: E501

        :return: The facevalue_currency of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: str
        """
        return self._facevalue_currency

    @facevalue_currency.setter
    def facevalue_currency(self, facevalue_currency):
        """Sets the facevalue_currency of this EfirDataHubModelsModelsBondProgramsFields.

        Валюта номинала  # noqa: E501

        :param facevalue_currency: The facevalue_currency of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: str
        """

        self._facevalue_currency = facevalue_currency

    @property
    def issue_vol(self):
        """Gets the issue_vol of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Объем программы(в штуках)  # noqa: E501

        :return: The issue_vol of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: float
        """
        return self._issue_vol

    @issue_vol.setter
    def issue_vol(self, issue_vol):
        """Sets the issue_vol of this EfirDataHubModelsModelsBondProgramsFields.

        Объем программы(в штуках)  # noqa: E501

        :param issue_vol: The issue_vol of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: float
        """

        self._issue_vol = issue_vol

    @property
    def issue_val(self):
        """Gets the issue_val of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Размер программы(в деньгах)  # noqa: E501

        :return: The issue_val of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: float
        """
        return self._issue_val

    @issue_val.setter
    def issue_val(self, issue_val):
        """Sets the issue_val of this EfirDataHubModelsModelsBondProgramsFields.

        Размер программы(в деньгах)  # noqa: E501

        :param issue_val: The issue_val of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: float
        """

        self._issue_val = issue_val

    @property
    def begdist_date(self):
        """Gets the begdist_date of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Дата начала размещения  # noqa: E501

        :return: The begdist_date of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._begdist_date

    @begdist_date.setter
    def begdist_date(self, begdist_date):
        """Sets the begdist_date of this EfirDataHubModelsModelsBondProgramsFields.

        Дата начала размещения  # noqa: E501

        :param begdist_date: The begdist_date of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: datetime
        """

        self._begdist_date = begdist_date

    @property
    def enddist_date(self):
        """Gets the enddist_date of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Дата окончания размещения  # noqa: E501

        :return: The enddist_date of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: datetime
        """
        return self._enddist_date

    @enddist_date.setter
    def enddist_date(self, enddist_date):
        """Sets the enddist_date of this EfirDataHubModelsModelsBondProgramsFields.

        Дата окончания размещения  # noqa: E501

        :param enddist_date: The enddist_date of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: datetime
        """

        self._enddist_date = enddist_date

    @property
    def market_vol(self):
        """Gets the market_vol of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Объем в обращении(в штуках)  # noqa: E501

        :return: The market_vol of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: float
        """
        return self._market_vol

    @market_vol.setter
    def market_vol(self, market_vol):
        """Sets the market_vol of this EfirDataHubModelsModelsBondProgramsFields.

        Объем в обращении(в штуках)  # noqa: E501

        :param market_vol: The market_vol of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: float
        """

        self._market_vol = market_vol

    @property
    def market_val(self):
        """Gets the market_val of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Объем в обращении(в деньгах)  # noqa: E501

        :return: The market_val of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: float
        """
        return self._market_val

    @market_val.setter
    def market_val(self, market_val):
        """Sets the market_val of this EfirDataHubModelsModelsBondProgramsFields.

        Объем в обращении(в деньгах)  # noqa: E501

        :param market_val: The market_val of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: float
        """

        self._market_val = market_val

    @property
    def guaranteed(self):
        """Gets the guaranteed of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Признак наличия гарантии по программе  # noqa: E501

        :return: The guaranteed of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: int
        """
        return self._guaranteed

    @guaranteed.setter
    def guaranteed(self, guaranteed):
        """Sets the guaranteed of this EfirDataHubModelsModelsBondProgramsFields.

        Признак наличия гарантии по программе  # noqa: E501

        :param guaranteed: The guaranteed of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: int
        """

        self._guaranteed = guaranteed

    @property
    def guaranteed_val(self):
        """Gets the guaranteed_val of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Гарантированная сумма  # noqa: E501

        :return: The guaranteed_val of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: float
        """
        return self._guaranteed_val

    @guaranteed_val.setter
    def guaranteed_val(self, guaranteed_val):
        """Sets the guaranteed_val of this EfirDataHubModelsModelsBondProgramsFields.

        Гарантированная сумма  # noqa: E501

        :param guaranteed_val: The guaranteed_val of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: float
        """

        self._guaranteed_val = guaranteed_val

    @property
    def coverage_val(self):
        """Gets the coverage_val of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Объем ипотечного/иного покрытия по программе  # noqa: E501

        :return: The coverage_val of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: float
        """
        return self._coverage_val

    @coverage_val.setter
    def coverage_val(self, coverage_val):
        """Sets the coverage_val of this EfirDataHubModelsModelsBondProgramsFields.

        Объем ипотечного/иного покрытия по программе  # noqa: E501

        :param coverage_val: The coverage_val of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: float
        """

        self._coverage_val = coverage_val

    @property
    def have_regress(self):
        """Gets the have_regress of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Признак наличия полного регресса по программе  # noqa: E501

        :return: The have_regress of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: int
        """
        return self._have_regress

    @have_regress.setter
    def have_regress(self, have_regress):
        """Sets the have_regress of this EfirDataHubModelsModelsBondProgramsFields.

        Признак наличия полного регресса по программе  # noqa: E501

        :param have_regress: The have_regress of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: int
        """

        self._have_regress = have_regress

    @property
    def emitent_take_risk(self):
        """Gets the emitent_take_risk of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Эмитент принимает на себя часть кредитного риска через сохранение доли в секьюритизируемых активах  # noqa: E501

        :return: The emitent_take_risk of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: int
        """
        return self._emitent_take_risk

    @emitent_take_risk.setter
    def emitent_take_risk(self, emitent_take_risk):
        """Sets the emitent_take_risk of this EfirDataHubModelsModelsBondProgramsFields.

        Эмитент принимает на себя часть кредитного риска через сохранение доли в секьюритизируемых активах  # noqa: E501

        :param emitent_take_risk: The emitent_take_risk of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: int
        """

        self._emitent_take_risk = emitent_take_risk

    @property
    def debt_cost_ratio(self):
        """Gets the debt_cost_ratio of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Средняя величина соотношения суммы основного долга по ссудам к текущей(справедливой) стоимости предметов залога на момент выпуска программы  # noqa: E501

        :return: The debt_cost_ratio of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: float
        """
        return self._debt_cost_ratio

    @debt_cost_ratio.setter
    def debt_cost_ratio(self, debt_cost_ratio):
        """Sets the debt_cost_ratio of this EfirDataHubModelsModelsBondProgramsFields.

        Средняя величина соотношения суммы основного долга по ссудам к текущей(справедливой) стоимости предметов залога на момент выпуска программы  # noqa: E501

        :param debt_cost_ratio: The debt_cost_ratio of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: float
        """

        self._debt_cost_ratio = debt_cost_ratio

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Примечание  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsBondProgramsFields.

        Примечание  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsBondProgramsFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsBondProgramsFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondProgramsFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondProgramsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
