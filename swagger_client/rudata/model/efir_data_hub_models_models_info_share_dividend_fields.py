# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsInfoShareDividendFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'decision_date': 'datetime',
        'declared_pay_date': 'datetime',
        'declared_pay_date_nominee': 'datetime',
        'declared_sum_divid_val': 'int',
        'dev_organ': 'int',
        'fintoolid': 'int',
        'list_date': 'datetime',
        'list_dividend_date': 'datetime',
        'note': 'str',
        'payed': 'str',
        'pay_stock': 'float',
        'period_shortname': 'str',
        'period_date': 'str',
        'protocol_date': 'datetime',
        'report_pay_date': 'datetime',
        'sum_divid_val': 'float',
        'update_date': 'datetime',
        'recomend_pay_1stock': 'float',
        'recomend_date': 'datetime',
        'recomend_list_dividend_date': 'datetime',
        'recomend_pay_date': 'datetime',
        'recomend_pay_date_nominee': 'datetime',
        'dividend_currency': 'str',
        'pay_decision': 'str',
        'unpayed_decision_reason': 'str',
        'payed_details': 'str',
        'ex_dividend_date': 'datetime',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'decision_date': 'decision_date',
        'declared_pay_date': 'declared_pay_date',
        'declared_pay_date_nominee': 'declared_pay_date_nominee',
        'declared_sum_divid_val': 'declared_sum_divid_val',
        'dev_organ': 'dev_organ',
        'fintoolid': 'fintoolid',
        'list_date': 'list_date',
        'list_dividend_date': 'list_dividend_date',
        'note': 'note',
        'payed': 'payed',
        'pay_stock': 'pay_stock',
        'period_shortname': 'period_shortname',
        'period_date': 'period_date',
        'protocol_date': 'protocol_date',
        'report_pay_date': 'report_pay_date',
        'sum_divid_val': 'sum_divid_val',
        'update_date': 'update_date',
        'recomend_pay_1stock': 'recomend_pay_1stock',
        'recomend_date': 'recomend_date',
        'recomend_list_dividend_date': 'recomend_list_dividend_date',
        'recomend_pay_date': 'recomend_pay_date',
        'recomend_pay_date_nominee': 'recomend_pay_date_nominee',
        'dividend_currency': 'dividend_currency',
        'pay_decision': 'pay_decision',
        'unpayed_decision_reason': 'unpayed_decision_reason',
        'payed_details': 'payed_details',
        'ex_dividend_date': 'ex_dividend_date',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, decision_date=None, declared_pay_date=None, declared_pay_date_nominee=None, declared_sum_divid_val=None, dev_organ=None, fintoolid=None, list_date=None, list_dividend_date=None, note=None, payed=None, pay_stock=None, period_shortname=None, period_date=None, protocol_date=None, report_pay_date=None, sum_divid_val=None, update_date=None, recomend_pay_1stock=None, recomend_date=None, recomend_list_dividend_date=None, recomend_pay_date=None, recomend_pay_date_nominee=None, dividend_currency=None, pay_decision=None, unpayed_decision_reason=None, payed_details=None, ex_dividend_date=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsInfoShareDividendFields - a model defined in Swagger"""  # noqa: E501
        self._decision_date = None
        self._declared_pay_date = None
        self._declared_pay_date_nominee = None
        self._declared_sum_divid_val = None
        self._dev_organ = None
        self._fintoolid = None
        self._list_date = None
        self._list_dividend_date = None
        self._note = None
        self._payed = None
        self._pay_stock = None
        self._period_shortname = None
        self._period_date = None
        self._protocol_date = None
        self._report_pay_date = None
        self._sum_divid_val = None
        self._update_date = None
        self._recomend_pay_1stock = None
        self._recomend_date = None
        self._recomend_list_dividend_date = None
        self._recomend_pay_date = None
        self._recomend_pay_date_nominee = None
        self._dividend_currency = None
        self._pay_decision = None
        self._unpayed_decision_reason = None
        self._payed_details = None
        self._ex_dividend_date = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if decision_date is not None:
            self.decision_date = decision_date
        if declared_pay_date is not None:
            self.declared_pay_date = declared_pay_date
        if declared_pay_date_nominee is not None:
            self.declared_pay_date_nominee = declared_pay_date_nominee
        if declared_sum_divid_val is not None:
            self.declared_sum_divid_val = declared_sum_divid_val
        if dev_organ is not None:
            self.dev_organ = dev_organ
        if fintoolid is not None:
            self.fintoolid = fintoolid
        if list_date is not None:
            self.list_date = list_date
        if list_dividend_date is not None:
            self.list_dividend_date = list_dividend_date
        if note is not None:
            self.note = note
        if payed is not None:
            self.payed = payed
        if pay_stock is not None:
            self.pay_stock = pay_stock
        if period_shortname is not None:
            self.period_shortname = period_shortname
        if period_date is not None:
            self.period_date = period_date
        if protocol_date is not None:
            self.protocol_date = protocol_date
        if report_pay_date is not None:
            self.report_pay_date = report_pay_date
        if sum_divid_val is not None:
            self.sum_divid_val = sum_divid_val
        if update_date is not None:
            self.update_date = update_date
        if recomend_pay_1stock is not None:
            self.recomend_pay_1stock = recomend_pay_1stock
        if recomend_date is not None:
            self.recomend_date = recomend_date
        if recomend_list_dividend_date is not None:
            self.recomend_list_dividend_date = recomend_list_dividend_date
        if recomend_pay_date is not None:
            self.recomend_pay_date = recomend_pay_date
        if recomend_pay_date_nominee is not None:
            self.recomend_pay_date_nominee = recomend_pay_date_nominee
        if dividend_currency is not None:
            self.dividend_currency = dividend_currency
        if pay_decision is not None:
            self.pay_decision = pay_decision
        if unpayed_decision_reason is not None:
            self.unpayed_decision_reason = unpayed_decision_reason
        if payed_details is not None:
            self.payed_details = payed_details
        if ex_dividend_date is not None:
            self.ex_dividend_date = ex_dividend_date
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def decision_date(self):
        """Gets the decision_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Дата принятия решения о выплате  # noqa: E501

        :return: The decision_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._decision_date

    @decision_date.setter
    def decision_date(self, decision_date):
        """Sets the decision_date of this EfirDataHubModelsModelsInfoShareDividendFields.

        Дата принятия решения о выплате  # noqa: E501

        :param decision_date: The decision_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._decision_date = decision_date

    @property
    def declared_pay_date(self):
        """Gets the declared_pay_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Планируемая дата окончания выплаты  # noqa: E501

        :return: The declared_pay_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._declared_pay_date

    @declared_pay_date.setter
    def declared_pay_date(self, declared_pay_date):
        """Sets the declared_pay_date of this EfirDataHubModelsModelsInfoShareDividendFields.

        Планируемая дата окончания выплаты  # noqa: E501

        :param declared_pay_date: The declared_pay_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._declared_pay_date = declared_pay_date

    @property
    def declared_pay_date_nominee(self):
        """Gets the declared_pay_date_nominee of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Объявленная дата выплаты дивидендов номинальным держателям  # noqa: E501

        :return: The declared_pay_date_nominee of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._declared_pay_date_nominee

    @declared_pay_date_nominee.setter
    def declared_pay_date_nominee(self, declared_pay_date_nominee):
        """Sets the declared_pay_date_nominee of this EfirDataHubModelsModelsInfoShareDividendFields.

        Объявленная дата выплаты дивидендов номинальным держателям  # noqa: E501

        :param declared_pay_date_nominee: The declared_pay_date_nominee of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._declared_pay_date_nominee = declared_pay_date_nominee

    @property
    def declared_sum_divid_val(self):
        """Gets the declared_sum_divid_val of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Расчетный объем выплат на выпуск, в валюте номинала  # noqa: E501

        :return: The declared_sum_divid_val of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: int
        """
        return self._declared_sum_divid_val

    @declared_sum_divid_val.setter
    def declared_sum_divid_val(self, declared_sum_divid_val):
        """Sets the declared_sum_divid_val of this EfirDataHubModelsModelsInfoShareDividendFields.

        Расчетный объем выплат на выпуск, в валюте номинала  # noqa: E501

        :param declared_sum_divid_val: The declared_sum_divid_val of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: int
        """

        self._declared_sum_divid_val = declared_sum_divid_val

    @property
    def dev_organ(self):
        """Gets the dev_organ of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Тип собрания  0 - ГОСА(годовое общее собрание акционеров)  1..n – ВОСА(внеочередное общее собрание акционеров). Номер присваивается по мере назначения новых собраний.  # noqa: E501

        :return: The dev_organ of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: int
        """
        return self._dev_organ

    @dev_organ.setter
    def dev_organ(self, dev_organ):
        """Sets the dev_organ of this EfirDataHubModelsModelsInfoShareDividendFields.

        Тип собрания  0 - ГОСА(годовое общее собрание акционеров)  1..n – ВОСА(внеочередное общее собрание акционеров). Номер присваивается по мере назначения новых собраний.  # noqa: E501

        :param dev_organ: The dev_organ of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: int
        """

        self._dev_organ = dev_organ

    @property
    def fintoolid(self):
        """Gets the fintoolid of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Идентификатор инструмента  # noqa: E501

        :return: The fintoolid of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: int
        """
        return self._fintoolid

    @fintoolid.setter
    def fintoolid(self, fintoolid):
        """Sets the fintoolid of this EfirDataHubModelsModelsInfoShareDividendFields.

        Идентификатор инструмента  # noqa: E501

        :param fintoolid: The fintoolid of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: int
        """

        self._fintoolid = fintoolid

    @property
    def list_date(self):
        """Gets the list_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Дата закрытия реестра  # noqa: E501

        :return: The list_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._list_date

    @list_date.setter
    def list_date(self, list_date):
        """Sets the list_date of this EfirDataHubModelsModelsInfoShareDividendFields.

        Дата закрытия реестра  # noqa: E501

        :param list_date: The list_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._list_date = list_date

    @property
    def list_dividend_date(self):
        """Gets the list_dividend_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Дата определения списка получателей дивидендов  # noqa: E501

        :return: The list_dividend_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._list_dividend_date

    @list_dividend_date.setter
    def list_dividend_date(self, list_dividend_date):
        """Sets the list_dividend_date of this EfirDataHubModelsModelsInfoShareDividendFields.

        Дата определения списка получателей дивидендов  # noqa: E501

        :param list_dividend_date: The list_dividend_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._list_dividend_date = list_dividend_date

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Примечание  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsInfoShareDividendFields.

        Примечание  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def payed(self):
        """Gets the payed of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Признак окончания выплаты  # noqa: E501

        :return: The payed of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: str
        """
        return self._payed

    @payed.setter
    def payed(self, payed):
        """Sets the payed of this EfirDataHubModelsModelsInfoShareDividendFields.

        Признак окончания выплаты  # noqa: E501

        :param payed: The payed of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: str
        """

        self._payed = payed

    @property
    def pay_stock(self):
        """Gets the pay_stock of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Объем выплат на акцию, в валюте номинала  # noqa: E501

        :return: The pay_stock of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: float
        """
        return self._pay_stock

    @pay_stock.setter
    def pay_stock(self, pay_stock):
        """Sets the pay_stock of this EfirDataHubModelsModelsInfoShareDividendFields.

        Объем выплат на акцию, в валюте номинала  # noqa: E501

        :param pay_stock: The pay_stock of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: float
        """

        self._pay_stock = pay_stock

    @property
    def period_shortname(self):
        """Gets the period_shortname of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Период, за который выплачены дивиденды  # noqa: E501

        :return: The period_shortname of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: str
        """
        return self._period_shortname

    @period_shortname.setter
    def period_shortname(self, period_shortname):
        """Sets the period_shortname of this EfirDataHubModelsModelsInfoShareDividendFields.

        Период, за который выплачены дивиденды  # noqa: E501

        :param period_shortname: The period_shortname of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: str
        """

        self._period_shortname = period_shortname

    @property
    def period_date(self):
        """Gets the period_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Дата периода  # noqa: E501

        :return: The period_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: str
        """
        return self._period_date

    @period_date.setter
    def period_date(self, period_date):
        """Sets the period_date of this EfirDataHubModelsModelsInfoShareDividendFields.

        Дата периода  # noqa: E501

        :param period_date: The period_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: str
        """

        self._period_date = period_date

    @property
    def protocol_date(self):
        """Gets the protocol_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Дата публикации протокола акционеров  # noqa: E501

        :return: The protocol_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._protocol_date

    @protocol_date.setter
    def protocol_date(self, protocol_date):
        """Sets the protocol_date of this EfirDataHubModelsModelsInfoShareDividendFields.

        Дата публикации протокола акционеров  # noqa: E501

        :param protocol_date: The protocol_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._protocol_date = protocol_date

    @property
    def report_pay_date(self):
        """Gets the report_pay_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Дата сообщения о выплате  # noqa: E501

        :return: The report_pay_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._report_pay_date

    @report_pay_date.setter
    def report_pay_date(self, report_pay_date):
        """Sets the report_pay_date of this EfirDataHubModelsModelsInfoShareDividendFields.

        Дата сообщения о выплате  # noqa: E501

        :param report_pay_date: The report_pay_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._report_pay_date = report_pay_date

    @property
    def sum_divid_val(self):
        """Gets the sum_divid_val of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Реальный объем выплат на выпуск, в валюте номинала  # noqa: E501

        :return: The sum_divid_val of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: float
        """
        return self._sum_divid_val

    @sum_divid_val.setter
    def sum_divid_val(self, sum_divid_val):
        """Sets the sum_divid_val of this EfirDataHubModelsModelsInfoShareDividendFields.

        Реальный объем выплат на выпуск, в валюте номинала  # noqa: E501

        :param sum_divid_val: The sum_divid_val of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: float
        """

        self._sum_divid_val = sum_divid_val

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Дата/время последнего изменения записи  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsInfoShareDividendFields.

        Дата/время последнего изменения записи  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def recomend_pay_1stock(self):
        """Gets the recomend_pay_1stock of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Рекомендация совета директоров по выплате дивидендов на одну акцию, в валюте номинала  # noqa: E501

        :return: The recomend_pay_1stock of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: float
        """
        return self._recomend_pay_1stock

    @recomend_pay_1stock.setter
    def recomend_pay_1stock(self, recomend_pay_1stock):
        """Sets the recomend_pay_1stock of this EfirDataHubModelsModelsInfoShareDividendFields.

        Рекомендация совета директоров по выплате дивидендов на одну акцию, в валюте номинала  # noqa: E501

        :param recomend_pay_1stock: The recomend_pay_1stock of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: float
        """

        self._recomend_pay_1stock = recomend_pay_1stock

    @property
    def recomend_date(self):
        """Gets the recomend_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Дата рекомендации совета директоров по выплате дивидендов  # noqa: E501

        :return: The recomend_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._recomend_date

    @recomend_date.setter
    def recomend_date(self, recomend_date):
        """Sets the recomend_date of this EfirDataHubModelsModelsInfoShareDividendFields.

        Дата рекомендации совета директоров по выплате дивидендов  # noqa: E501

        :param recomend_date: The recomend_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._recomend_date = recomend_date

    @property
    def recomend_list_dividend_date(self):
        """Gets the recomend_list_dividend_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Рекомендация совета директоров по дате составления списка владельцев для выплаты дивидендов  # noqa: E501

        :return: The recomend_list_dividend_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._recomend_list_dividend_date

    @recomend_list_dividend_date.setter
    def recomend_list_dividend_date(self, recomend_list_dividend_date):
        """Sets the recomend_list_dividend_date of this EfirDataHubModelsModelsInfoShareDividendFields.

        Рекомендация совета директоров по дате составления списка владельцев для выплаты дивидендов  # noqa: E501

        :param recomend_list_dividend_date: The recomend_list_dividend_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._recomend_list_dividend_date = recomend_list_dividend_date

    @property
    def recomend_pay_date(self):
        """Gets the recomend_pay_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Рекомендация совета директоров по дате выплаты дивидендов  # noqa: E501

        :return: The recomend_pay_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._recomend_pay_date

    @recomend_pay_date.setter
    def recomend_pay_date(self, recomend_pay_date):
        """Sets the recomend_pay_date of this EfirDataHubModelsModelsInfoShareDividendFields.

        Рекомендация совета директоров по дате выплаты дивидендов  # noqa: E501

        :param recomend_pay_date: The recomend_pay_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._recomend_pay_date = recomend_pay_date

    @property
    def recomend_pay_date_nominee(self):
        """Gets the recomend_pay_date_nominee of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Рекомендация совета директоров по дате выплаты дивидендов номинальным держателям  # noqa: E501

        :return: The recomend_pay_date_nominee of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._recomend_pay_date_nominee

    @recomend_pay_date_nominee.setter
    def recomend_pay_date_nominee(self, recomend_pay_date_nominee):
        """Sets the recomend_pay_date_nominee of this EfirDataHubModelsModelsInfoShareDividendFields.

        Рекомендация совета директоров по дате выплаты дивидендов номинальным держателям  # noqa: E501

        :param recomend_pay_date_nominee: The recomend_pay_date_nominee of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._recomend_pay_date_nominee = recomend_pay_date_nominee

    @property
    def dividend_currency(self):
        """Gets the dividend_currency of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Валюта выплаты дивидендов  # noqa: E501

        :return: The dividend_currency of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: str
        """
        return self._dividend_currency

    @dividend_currency.setter
    def dividend_currency(self, dividend_currency):
        """Sets the dividend_currency of this EfirDataHubModelsModelsInfoShareDividendFields.

        Валюта выплаты дивидендов  # noqa: E501

        :param dividend_currency: The dividend_currency of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: str
        """

        self._dividend_currency = dividend_currency

    @property
    def pay_decision(self):
        """Gets the pay_decision of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Решение о выплате дивидендов, принятое на собрании  # noqa: E501

        :return: The pay_decision of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: str
        """
        return self._pay_decision

    @pay_decision.setter
    def pay_decision(self, pay_decision):
        """Sets the pay_decision of this EfirDataHubModelsModelsInfoShareDividendFields.

        Решение о выплате дивидендов, принятое на собрании  # noqa: E501

        :param pay_decision: The pay_decision of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: str
        """

        self._pay_decision = pay_decision

    @property
    def unpayed_decision_reason(self):
        """Gets the unpayed_decision_reason of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Причина принятия решения о невыплате дивидендов  # noqa: E501

        :return: The unpayed_decision_reason of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: str
        """
        return self._unpayed_decision_reason

    @unpayed_decision_reason.setter
    def unpayed_decision_reason(self, unpayed_decision_reason):
        """Sets the unpayed_decision_reason of this EfirDataHubModelsModelsInfoShareDividendFields.

        Причина принятия решения о невыплате дивидендов  # noqa: E501

        :param unpayed_decision_reason: The unpayed_decision_reason of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: str
        """

        self._unpayed_decision_reason = unpayed_decision_reason

    @property
    def payed_details(self):
        """Gets the payed_details of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Детали выплаты дивидендов  # noqa: E501

        :return: The payed_details of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: str
        """
        return self._payed_details

    @payed_details.setter
    def payed_details(self, payed_details):
        """Sets the payed_details of this EfirDataHubModelsModelsInfoShareDividendFields.

        Детали выплаты дивидендов  # noqa: E501

        :param payed_details: The payed_details of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: str
        """

        self._payed_details = payed_details

    @property
    def ex_dividend_date(self):
        """Gets the ex_dividend_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Экс-дивидендная дата - дата, начиная с которой ценные бумаги начинают торговаться без учета объявленных дивидендов  # noqa: E501

        :return: The ex_dividend_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: datetime
        """
        return self._ex_dividend_date

    @ex_dividend_date.setter
    def ex_dividend_date(self, ex_dividend_date):
        """Sets the ex_dividend_date of this EfirDataHubModelsModelsInfoShareDividendFields.

        Экс-дивидендная дата - дата, начиная с которой ценные бумаги начинают торговаться без учета объявленных дивидендов  # noqa: E501

        :param ex_dividend_date: The ex_dividend_date of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: datetime
        """

        self._ex_dividend_date = ex_dividend_date

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsInfoShareDividendFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsInfoShareDividendFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsInfoShareDividendFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsInfoShareDividendFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsInfoShareDividendFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
