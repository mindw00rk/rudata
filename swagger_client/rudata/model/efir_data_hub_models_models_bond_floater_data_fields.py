# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondFloaterDataFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintool_id': 'int',
        'beg_period': 'datetime',
        'end_period': 'datetime',
        'start_point': 'str',
        'model_type': 'str',
        'date_pub_n': 'int',
        'date_pub_type': 'str',
        'date_fix_n': 'int',
        'date_fix_type': 'str',
        'bases': 'list[EfirDataHubModelsModelsBondFloaterDataBases]'
    }

    attribute_map = {
        'fintool_id': 'fintoolId',
        'beg_period': 'beg_period',
        'end_period': 'end_period',
        'start_point': 'start_point',
        'model_type': 'model_type',
        'date_pub_n': 'date_pub_n',
        'date_pub_type': 'date_pub_type',
        'date_fix_n': 'date_fix_n',
        'date_fix_type': 'date_fix_type',
        'bases': 'bases'
    }

    def __init__(self, fintool_id=None, beg_period=None, end_period=None, start_point=None, model_type=None, date_pub_n=None, date_pub_type=None, date_fix_n=None, date_fix_type=None, bases=None):  # noqa: E501
        """EfirDataHubModelsModelsBondFloaterDataFields - a model defined in Swagger"""  # noqa: E501
        self._fintool_id = None
        self._beg_period = None
        self._end_period = None
        self._start_point = None
        self._model_type = None
        self._date_pub_n = None
        self._date_pub_type = None
        self._date_fix_n = None
        self._date_fix_type = None
        self._bases = None
        self.discriminator = None
        if fintool_id is not None:
            self.fintool_id = fintool_id
        if beg_period is not None:
            self.beg_period = beg_period
        if end_period is not None:
            self.end_period = end_period
        if start_point is not None:
            self.start_point = start_point
        if model_type is not None:
            self.model_type = model_type
        if date_pub_n is not None:
            self.date_pub_n = date_pub_n
        if date_pub_type is not None:
            self.date_pub_type = date_pub_type
        if date_fix_n is not None:
            self.date_fix_n = date_fix_n
        if date_fix_type is not None:
            self.date_fix_type = date_fix_type
        if bases is not None:
            self.bases = bases

    @property
    def fintool_id(self):
        """Gets the fintool_id of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501

        Идентификатор флоатера  # noqa: E501

        :return: The fintool_id of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :rtype: int
        """
        return self._fintool_id

    @fintool_id.setter
    def fintool_id(self, fintool_id):
        """Sets the fintool_id of this EfirDataHubModelsModelsBondFloaterDataFields.

        Идентификатор флоатера  # noqa: E501

        :param fintool_id: The fintool_id of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :type: int
        """

        self._fintool_id = fintool_id

    @property
    def beg_period(self):
        """Gets the beg_period of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501

        Начало периода действия модели  # noqa: E501

        :return: The beg_period of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._beg_period

    @beg_period.setter
    def beg_period(self, beg_period):
        """Sets the beg_period of this EfirDataHubModelsModelsBondFloaterDataFields.

        Начало периода действия модели  # noqa: E501

        :param beg_period: The beg_period of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :type: datetime
        """

        self._beg_period = beg_period

    @property
    def end_period(self):
        """Gets the end_period of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501

        Окончание периода действия модели  # noqa: E501

        :return: The end_period of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :rtype: datetime
        """
        return self._end_period

    @end_period.setter
    def end_period(self, end_period):
        """Sets the end_period of this EfirDataHubModelsModelsBondFloaterDataFields.

        Окончание периода действия модели  # noqa: E501

        :param end_period: The end_period of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :type: datetime
        """

        self._end_period = end_period

    @property
    def start_point(self):
        """Gets the start_point of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501

        Опорная точка - начало или окончание купонного периода, на который определяем ставку  # noqa: E501

        :return: The start_point of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :rtype: str
        """
        return self._start_point

    @start_point.setter
    def start_point(self, start_point):
        """Sets the start_point of this EfirDataHubModelsModelsBondFloaterDataFields.

        Опорная точка - начало или окончание купонного периода, на который определяем ставку  # noqa: E501

        :param start_point: The start_point of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :type: str
        """

        self._start_point = start_point

    @property
    def model_type(self):
        """Gets the model_type of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501

        Тип модели расчета - одна база расчета (single) или несколько баз расчета (max)  # noqa: E501

        :return: The model_type of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this EfirDataHubModelsModelsBondFloaterDataFields.

        Тип модели расчета - одна база расчета (single) или несколько баз расчета (max)  # noqa: E501

        :param model_type: The model_type of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :type: str
        """

        self._model_type = model_type

    @property
    def date_pub_n(self):
        """Gets the date_pub_n of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501

        Сдвиг даты публикации относительно опорной точки расчета в периодах  # noqa: E501

        :return: The date_pub_n of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :rtype: int
        """
        return self._date_pub_n

    @date_pub_n.setter
    def date_pub_n(self, date_pub_n):
        """Sets the date_pub_n of this EfirDataHubModelsModelsBondFloaterDataFields.

        Сдвиг даты публикации относительно опорной точки расчета в периодах  # noqa: E501

        :param date_pub_n: The date_pub_n of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :type: int
        """

        self._date_pub_n = date_pub_n

    @property
    def date_pub_type(self):
        """Gets the date_pub_type of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501

        Сдвиг даты публикации - тип периодов  # noqa: E501

        :return: The date_pub_type of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :rtype: str
        """
        return self._date_pub_type

    @date_pub_type.setter
    def date_pub_type(self, date_pub_type):
        """Sets the date_pub_type of this EfirDataHubModelsModelsBondFloaterDataFields.

        Сдвиг даты публикации - тип периодов  # noqa: E501

        :param date_pub_type: The date_pub_type of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :type: str
        """

        self._date_pub_type = date_pub_type

    @property
    def date_fix_n(self):
        """Gets the date_fix_n of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501

        Сдвиг даты фиксации базы относительно опорной точки расчета в периодах  # noqa: E501

        :return: The date_fix_n of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :rtype: int
        """
        return self._date_fix_n

    @date_fix_n.setter
    def date_fix_n(self, date_fix_n):
        """Sets the date_fix_n of this EfirDataHubModelsModelsBondFloaterDataFields.

        Сдвиг даты фиксации базы относительно опорной точки расчета в периодах  # noqa: E501

        :param date_fix_n: The date_fix_n of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :type: int
        """

        self._date_fix_n = date_fix_n

    @property
    def date_fix_type(self):
        """Gets the date_fix_type of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501

        Сдвиг даты фиксации - тип периодов  # noqa: E501

        :return: The date_fix_type of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :rtype: str
        """
        return self._date_fix_type

    @date_fix_type.setter
    def date_fix_type(self, date_fix_type):
        """Sets the date_fix_type of this EfirDataHubModelsModelsBondFloaterDataFields.

        Сдвиг даты фиксации - тип периодов  # noqa: E501

        :param date_fix_type: The date_fix_type of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :type: str
        """

        self._date_fix_type = date_fix_type

    @property
    def bases(self):
        """Gets the bases of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501

        Базы расчета  # noqa: E501

        :return: The bases of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :rtype: list[EfirDataHubModelsModelsBondFloaterDataBases]
        """
        return self._bases

    @bases.setter
    def bases(self, bases):
        """Sets the bases of this EfirDataHubModelsModelsBondFloaterDataFields.

        Базы расчета  # noqa: E501

        :param bases: The bases of this EfirDataHubModelsModelsBondFloaterDataFields.  # noqa: E501
        :type: list[EfirDataHubModelsModelsBondFloaterDataBases]
        """

        self._bases = bases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondFloaterDataFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondFloaterDataFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
