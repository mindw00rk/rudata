# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2BondCalculateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_close_register': 'bool',
        'is_percent': 'bool',
        'id': 'int',
        '_date': 'datetime',
        'value': 'float',
        'value_type': 'AllOfEfirDataHubModelsRequestsV2BondCalculateRequestValueType',
        'rate_new': 'float',
        'fields': 'list[str]',
        'periods': 'AllOfEfirDataHubModelsRequestsV2BondCalculateRequestPeriods',
        'commission': 'float',
        'members': 'list[str]'
    }

    attribute_map = {
        'is_close_register': 'isCloseRegister',
        'is_percent': 'isPercent',
        'id': 'id',
        '_date': 'date',
        'value': 'value',
        'value_type': 'valueType',
        'rate_new': 'rateNew',
        'fields': 'fields',
        'periods': 'periods',
        'commission': 'commission',
        'members': 'members'
    }

    def __init__(self, is_close_register=None, is_percent=None, id=None, _date=None, value=None, value_type=None, rate_new=None, fields=None, periods=None, commission=None, members=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2BondCalculateRequest - a model defined in Swagger"""  # noqa: E501
        self._is_close_register = None
        self._is_percent = None
        self._id = None
        self.__date = None
        self._value = None
        self._value_type = None
        self._rate_new = None
        self._fields = None
        self._periods = None
        self._commission = None
        self._members = None
        self.discriminator = None
        if is_close_register is not None:
            self.is_close_register = is_close_register
        if is_percent is not None:
            self.is_percent = is_percent
        self.id = id
        self._date = _date
        self.value = value
        if value_type is not None:
            self.value_type = value_type
        if rate_new is not None:
            self.rate_new = rate_new
        if fields is not None:
            self.fields = fields
        if periods is not None:
            self.periods = periods
        if commission is not None:
            self.commission = commission
        if members is not None:
            self.members = members

    @property
    def is_close_register(self):
        """Gets the is_close_register of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501


        :return: The is_close_register of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_close_register

    @is_close_register.setter
    def is_close_register(self, is_close_register):
        """Sets the is_close_register of this EfirDataHubModelsRequestsV2BondCalculateRequest.


        :param is_close_register: The is_close_register of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :type: bool
        """

        self._is_close_register = is_close_register

    @property
    def is_percent(self):
        """Gets the is_percent of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501


        :return: The is_percent of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_percent

    @is_percent.setter
    def is_percent(self, is_percent):
        """Sets the is_percent of this EfirDataHubModelsRequestsV2BondCalculateRequest.


        :param is_percent: The is_percent of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :type: bool
        """

        self._is_percent = is_percent

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501

        issId облигации  # noqa: E501

        :return: The id of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsRequestsV2BondCalculateRequest.

        issId облигации  # noqa: E501

        :param id: The id of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _date(self):
        """Gets the _date of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501

        Дата расчета  # noqa: E501

        :return: The _date of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EfirDataHubModelsRequestsV2BondCalculateRequest.

        Дата расчета  # noqa: E501

        :param _date: The _date of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def value(self):
        """Gets the value of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501

        Цена (в % от номинала) или доходность (в % годовых)  # noqa: E501

        :return: The value of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EfirDataHubModelsRequestsV2BondCalculateRequest.

        Цена (в % от номинала) или доходность (в % годовых)  # noqa: E501

        :param value: The value of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def value_type(self):
        """Gets the value_type of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501

        Тип значения value:  - 0 – чистая цена;  - 1 – полная цена;  - 2 – доходность к погашению;  - 3 – доходность к оферте.  0 = NetPricePrc  1 = GrossPricePrc  2 = YieldToMaturity  3 = YieldToOffer  10 = NetPriceMoneyPrc  11 = GrossPriceMoneyPrc  # noqa: E501

        :return: The value_type of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :rtype: AllOfEfirDataHubModelsRequestsV2BondCalculateRequestValueType
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this EfirDataHubModelsRequestsV2BondCalculateRequest.

        Тип значения value:  - 0 – чистая цена;  - 1 – полная цена;  - 2 – доходность к погашению;  - 3 – доходность к оферте.  0 = NetPricePrc  1 = GrossPricePrc  2 = YieldToMaturity  3 = YieldToOffer  10 = NetPriceMoneyPrc  11 = GrossPriceMoneyPrc  # noqa: E501

        :param value_type: The value_type of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :type: AllOfEfirDataHubModelsRequestsV2BondCalculateRequestValueType
        """

        self._value_type = value_type

    @property
    def rate_new(self):
        """Gets the rate_new of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501

        Значение ставки для неизвестных купонов. Если не задано, то используется ставка последнего известного купона.  # noqa: E501

        :return: The rate_new of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :rtype: float
        """
        return self._rate_new

    @rate_new.setter
    def rate_new(self, rate_new):
        """Sets the rate_new of this EfirDataHubModelsRequestsV2BondCalculateRequest.

        Значение ставки для неизвестных купонов. Если не задано, то используется ставка последнего известного купона.  # noqa: E501

        :param rate_new: The rate_new of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :type: float
        """

        self._rate_new = rate_new

    @property
    def fields(self):
        """Gets the fields of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501

        Список требуемых полей  # noqa: E501

        :return: The fields of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this EfirDataHubModelsRequestsV2BondCalculateRequest.

        Список требуемых полей  # noqa: E501

        :param fields: The fields of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :type: list[str]
        """

        self._fields = fields

    @property
    def periods(self):
        """Gets the periods of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501

        Определяет периоды расчёта, т.е. набор возвращаемых данных:   - 0 – до погашения и ближайшей оферты;  - 1 – сводные значения;  - 2 – до погашения;  - 3 – до погашения и всех оставшихся оферт.  0 = MaturityAndOffer  1 = Consolidated  2 = Maturity  3 = MaturityAndAllOffers  # noqa: E501

        :return: The periods of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :rtype: AllOfEfirDataHubModelsRequestsV2BondCalculateRequestPeriods
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this EfirDataHubModelsRequestsV2BondCalculateRequest.

        Определяет периоды расчёта, т.е. набор возвращаемых данных:   - 0 – до погашения и ближайшей оферты;  - 1 – сводные значения;  - 2 – до погашения;  - 3 – до погашения и всех оставшихся оферт.  0 = MaturityAndOffer  1 = Consolidated  2 = Maturity  3 = MaturityAndAllOffers  # noqa: E501

        :param periods: The periods of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :type: AllOfEfirDataHubModelsRequestsV2BondCalculateRequestPeriods
        """

        self._periods = periods

    @property
    def commission(self):
        """Gets the commission of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501

        Optional commission  # noqa: E501

        :return: The commission of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this EfirDataHubModelsRequestsV2BondCalculateRequest.

        Optional commission  # noqa: E501

        :param commission: The commission of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :type: float
        """

        self._commission = commission

    @property
    def members(self):
        """Gets the members of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501

        Строковой массив, возвращаемых в ответе, объектов:  \"CalculateBond\",\"FaceValue\". Если не указан, то все.  # noqa: E501

        :return: The members of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this EfirDataHubModelsRequestsV2BondCalculateRequest.

        Строковой массив, возвращаемых в ответе, объектов:  \"CalculateBond\",\"FaceValue\". Если не указан, то все.  # noqa: E501

        :param members: The members of this EfirDataHubModelsRequestsV2BondCalculateRequest.  # noqa: E501
        :type: list[str]
        """

        self._members = members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2BondCalculateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2BondCalculateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
