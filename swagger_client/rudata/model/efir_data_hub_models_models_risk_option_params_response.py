# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRiskOptionParamsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cfi_code': 'str',
        'expiration_date': 'str',
        'expiration_date_dt': 'datetime',
        'strike_price': 'float',
        'underlying_symbol': 'str',
        'error': 'str'
    }

    attribute_map = {
        'cfi_code': 'cfiCode',
        'expiration_date': 'expirationDate',
        'expiration_date_dt': 'expirationDateDt',
        'strike_price': 'strikePrice',
        'underlying_symbol': 'underlyingSymbol',
        'error': 'error'
    }

    def __init__(self, cfi_code=None, expiration_date=None, expiration_date_dt=None, strike_price=None, underlying_symbol=None, error=None):  # noqa: E501
        """EfirDataHubModelsModelsRiskOptionParamsResponse - a model defined in Swagger"""  # noqa: E501
        self._cfi_code = None
        self._expiration_date = None
        self._expiration_date_dt = None
        self._strike_price = None
        self._underlying_symbol = None
        self._error = None
        self.discriminator = None
        if cfi_code is not None:
            self.cfi_code = cfi_code
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if expiration_date_dt is not None:
            self.expiration_date_dt = expiration_date_dt
        if strike_price is not None:
            self.strike_price = strike_price
        if underlying_symbol is not None:
            self.underlying_symbol = underlying_symbol
        if error is not None:
            self.error = error

    @property
    def cfi_code(self):
        """Gets the cfi_code of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501

        Код CFI  # noqa: E501

        :return: The cfi_code of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501
        :rtype: str
        """
        return self._cfi_code

    @cfi_code.setter
    def cfi_code(self, cfi_code):
        """Sets the cfi_code of this EfirDataHubModelsModelsRiskOptionParamsResponse.

        Код CFI  # noqa: E501

        :param cfi_code: The cfi_code of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501
        :type: str
        """

        self._cfi_code = cfi_code

    @property
    def expiration_date(self):
        """Gets the expiration_date of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501

        Дата экспирации типа String  # noqa: E501

        :return: The expiration_date of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this EfirDataHubModelsModelsRiskOptionParamsResponse.

        Дата экспирации типа String  # noqa: E501

        :param expiration_date: The expiration_date of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def expiration_date_dt(self):
        """Gets the expiration_date_dt of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501

        Дата экспирации типа DateTime  # noqa: E501

        :return: The expiration_date_dt of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date_dt

    @expiration_date_dt.setter
    def expiration_date_dt(self, expiration_date_dt):
        """Sets the expiration_date_dt of this EfirDataHubModelsModelsRiskOptionParamsResponse.

        Дата экспирации типа DateTime  # noqa: E501

        :param expiration_date_dt: The expiration_date_dt of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501
        :type: datetime
        """

        self._expiration_date_dt = expiration_date_dt

    @property
    def strike_price(self):
        """Gets the strike_price of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501

        Страйк  # noqa: E501

        :return: The strike_price of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501
        :rtype: float
        """
        return self._strike_price

    @strike_price.setter
    def strike_price(self, strike_price):
        """Sets the strike_price of this EfirDataHubModelsModelsRiskOptionParamsResponse.

        Страйк  # noqa: E501

        :param strike_price: The strike_price of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501
        :type: float
        """

        self._strike_price = strike_price

    @property
    def underlying_symbol(self):
        """Gets the underlying_symbol of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501

        Базовый инструмент  # noqa: E501

        :return: The underlying_symbol of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501
        :rtype: str
        """
        return self._underlying_symbol

    @underlying_symbol.setter
    def underlying_symbol(self, underlying_symbol):
        """Sets the underlying_symbol of this EfirDataHubModelsModelsRiskOptionParamsResponse.

        Базовый инструмент  # noqa: E501

        :param underlying_symbol: The underlying_symbol of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501
        :type: str
        """

        self._underlying_symbol = underlying_symbol

    @property
    def error(self):
        """Gets the error of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501

        Текст ошибки, если она есть  # noqa: E501

        :return: The error of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EfirDataHubModelsModelsRiskOptionParamsResponse.

        Текст ошибки, если она есть  # noqa: E501

        :param error: The error of this EfirDataHubModelsModelsRiskOptionParamsResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRiskOptionParamsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRiskOptionParamsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
