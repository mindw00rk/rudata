# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'mean_omega': 'float',
        'face_value': 'float',
        'currency': 'str',
        'currency_rate': 'float',
        'formula': 'str',
        'formula_id': 'int',
        'error': 'str'
    }

    attribute_map = {
        'id': 'id',
        'mean_omega': 'mean_Omega',
        'face_value': 'face_value',
        'currency': 'currency',
        'currency_rate': 'currency_rate',
        'formula': 'formula',
        'formula_id': 'formula_ID',
        'error': 'error'
    }

    def __init__(self, id=None, mean_omega=None, face_value=None, currency=None, currency_rate=None, formula=None, formula_id=None, error=None):  # noqa: E501
        """EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._mean_omega = None
        self._face_value = None
        self._currency = None
        self._currency_rate = None
        self._formula = None
        self._formula_id = None
        self._error = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if mean_omega is not None:
            self.mean_omega = mean_omega
        if face_value is not None:
            self.face_value = face_value
        if currency is not None:
            self.currency = currency
        if currency_rate is not None:
            self.currency_rate = currency_rate
        if formula is not None:
            self.formula = formula
        if formula_id is not None:
            self.formula_id = formula_id
        if error is not None:
            self.error = error

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501


        :return: The id of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.


        :param id: The id of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mean_omega(self):
        """Gets the mean_omega of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501


        :return: The mean_omega of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :rtype: float
        """
        return self._mean_omega

    @mean_omega.setter
    def mean_omega(self, mean_omega):
        """Sets the mean_omega of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.


        :param mean_omega: The mean_omega of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :type: float
        """

        self._mean_omega = mean_omega

    @property
    def face_value(self):
        """Gets the face_value of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501


        :return: The face_value of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :rtype: float
        """
        return self._face_value

    @face_value.setter
    def face_value(self, face_value):
        """Sets the face_value of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.


        :param face_value: The face_value of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :type: float
        """

        self._face_value = face_value

    @property
    def currency(self):
        """Gets the currency of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501


        :return: The currency of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.


        :param currency: The currency of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def currency_rate(self):
        """Gets the currency_rate of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501


        :return: The currency_rate of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :rtype: float
        """
        return self._currency_rate

    @currency_rate.setter
    def currency_rate(self, currency_rate):
        """Sets the currency_rate of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.


        :param currency_rate: The currency_rate of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :type: float
        """

        self._currency_rate = currency_rate

    @property
    def formula(self):
        """Gets the formula of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501


        :return: The formula of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.


        :param formula: The formula of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :type: str
        """

        self._formula = formula

    @property
    def formula_id(self):
        """Gets the formula_id of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501


        :return: The formula_id of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :rtype: int
        """
        return self._formula_id

    @formula_id.setter
    def formula_id(self, formula_id):
        """Sets the formula_id of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.


        :param formula_id: The formula_id of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :type: int
        """

        self._formula_id = formula_id

    @property
    def error(self):
        """Gets the error of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501


        :return: The error of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.


        :param error: The error of this EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRiskLiquidityAdjustmentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
