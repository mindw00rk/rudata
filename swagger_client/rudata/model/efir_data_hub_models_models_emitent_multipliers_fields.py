# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsEmitentMultipliersFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fininst_id': 'int',
        'dt': 'datetime',
        'last_report_date': 'datetime',
        'last_trade_date': 'datetime',
        'market_cap': 'float',
        'price_earnings': 'float',
        'forward_pe_scoring': 'float',
        'forward_pe_analyst': 'float',
        'price_sales': 'float',
        'forward_ps_scoring': 'float',
        'forward_ps_analyst': 'float',
        'price_book': 'float',
        'enterprise_value': 'float',
        'ev_ebitda': 'float',
        'ev_sales': 'float',
        'ebitda': 'float',
        'capex': 'float',
        'fcff': 'float',
        'fcfe': 'float',
        'ffo': 'float',
        'roe': 'float',
        'roa': 'float',
        'roi': 'float',
        'ros': 'float',
        'la': 'float',
        'eps': 'float',
        'leverage': 'float',
        'debt': 'float',
        'netdebt': 'float',
        'short_term_debt': 'float',
        'long_term_debt': 'float',
        'price_fcff': 'float',
        'net_income_ebitda': 'float',
        'sales': 'float',
        'earnings': 'float',
        'book_value': 'float',
        'equity': 'float',
        'earning_forecast_analyst': 'float',
        'sales_forecast_analyst': 'float',
        'earnings_forecast_scoring': 'float',
        'sales_forecast_scoring': 'float',
        'cash': 'float',
        'common_dividend_yield1_y': 'float',
        'common_dividend_yield5_y': 'float',
        'common_dividend_yield_lq': 'float',
        'expected_common_dividend_yield': 'float',
        'net_debt_to_ebitda': 'float',
        'net_profit_margin': 'float',
        'payout_ratio': 'float',
        'current_ratio': 'float',
        'common_dividend_rate1_y': 'float',
        'common_dividend_rate5_y': 'float',
        'common_dividend_rate_lq': 'float',
        'expected_common_dividend_rate': 'float',
        'expected_common_dividend_date': 'datetime',
        'preferred_dividend_rate1_y': 'float',
        'preferred_dividend_rate5_y': 'float',
        'preferred_dividend_rate_lq': 'float',
        'expected_preferred_dividend_rate': 'float',
        'expected_preferred_dividend_date': 'datetime',
        'preferred_dividend_yield1_y': 'float',
        'preferred_dividend_yield5_y': 'float',
        'preferred_dividend_yield_lq': 'float',
        'expected_preferred_dividend_yield': 'float',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'fininst_id': 'fininstId',
        'dt': 'dt',
        'last_report_date': 'lastReportDate',
        'last_trade_date': 'lastTradeDate',
        'market_cap': 'marketCap',
        'price_earnings': 'priceEarnings',
        'forward_pe_scoring': 'forwardPEScoring',
        'forward_pe_analyst': 'forwardPEAnalyst',
        'price_sales': 'priceSales',
        'forward_ps_scoring': 'forwardPSScoring',
        'forward_ps_analyst': 'forwardPSAnalyst',
        'price_book': 'priceBook',
        'enterprise_value': 'enterpriseValue',
        'ev_ebitda': 'evEbitda',
        'ev_sales': 'evSales',
        'ebitda': 'ebitda',
        'capex': 'capex',
        'fcff': 'fcff',
        'fcfe': 'fcfe',
        'ffo': 'ffo',
        'roe': 'roe',
        'roa': 'roa',
        'roi': 'roi',
        'ros': 'ros',
        'la': 'la',
        'eps': 'eps',
        'leverage': 'leverage',
        'debt': 'debt',
        'netdebt': 'netdebt',
        'short_term_debt': 'shortTermDebt',
        'long_term_debt': 'longTermDebt',
        'price_fcff': 'priceFcff',
        'net_income_ebitda': 'netIncomeEbitda',
        'sales': 'sales',
        'earnings': 'earnings',
        'book_value': 'bookValue',
        'equity': 'equity',
        'earning_forecast_analyst': 'earningForecastAnalyst',
        'sales_forecast_analyst': 'salesForecastAnalyst',
        'earnings_forecast_scoring': 'earningsForecastScoring',
        'sales_forecast_scoring': 'salesForecastScoring',
        'cash': 'cash',
        'common_dividend_yield1_y': 'commonDividendYield1Y',
        'common_dividend_yield5_y': 'commonDividendYield5Y',
        'common_dividend_yield_lq': 'commonDividendYieldLQ',
        'expected_common_dividend_yield': 'expectedCommonDividendYield',
        'net_debt_to_ebitda': 'netDebtToEbitda',
        'net_profit_margin': 'netProfitMargin',
        'payout_ratio': 'payoutRatio',
        'current_ratio': 'currentRatio',
        'common_dividend_rate1_y': 'commonDividendRate1Y',
        'common_dividend_rate5_y': 'commonDividendRate5Y',
        'common_dividend_rate_lq': 'commonDividendRateLQ',
        'expected_common_dividend_rate': 'expectedCommonDividendRate',
        'expected_common_dividend_date': 'expectedCommonDividendDate',
        'preferred_dividend_rate1_y': 'preferredDividendRate1Y',
        'preferred_dividend_rate5_y': 'preferredDividendRate5Y',
        'preferred_dividend_rate_lq': 'preferredDividendRateLQ',
        'expected_preferred_dividend_rate': 'expectedPreferredDividendRate',
        'expected_preferred_dividend_date': 'expectedPreferredDividendDate',
        'preferred_dividend_yield1_y': 'preferredDividendYield1Y',
        'preferred_dividend_yield5_y': 'preferredDividendYield5Y',
        'preferred_dividend_yield_lq': 'preferredDividendYieldLQ',
        'expected_preferred_dividend_yield': 'expectedPreferredDividendYield',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, fininst_id=None, dt=None, last_report_date=None, last_trade_date=None, market_cap=None, price_earnings=None, forward_pe_scoring=None, forward_pe_analyst=None, price_sales=None, forward_ps_scoring=None, forward_ps_analyst=None, price_book=None, enterprise_value=None, ev_ebitda=None, ev_sales=None, ebitda=None, capex=None, fcff=None, fcfe=None, ffo=None, roe=None, roa=None, roi=None, ros=None, la=None, eps=None, leverage=None, debt=None, netdebt=None, short_term_debt=None, long_term_debt=None, price_fcff=None, net_income_ebitda=None, sales=None, earnings=None, book_value=None, equity=None, earning_forecast_analyst=None, sales_forecast_analyst=None, earnings_forecast_scoring=None, sales_forecast_scoring=None, cash=None, common_dividend_yield1_y=None, common_dividend_yield5_y=None, common_dividend_yield_lq=None, expected_common_dividend_yield=None, net_debt_to_ebitda=None, net_profit_margin=None, payout_ratio=None, current_ratio=None, common_dividend_rate1_y=None, common_dividend_rate5_y=None, common_dividend_rate_lq=None, expected_common_dividend_rate=None, expected_common_dividend_date=None, preferred_dividend_rate1_y=None, preferred_dividend_rate5_y=None, preferred_dividend_rate_lq=None, expected_preferred_dividend_rate=None, expected_preferred_dividend_date=None, preferred_dividend_yield1_y=None, preferred_dividend_yield5_y=None, preferred_dividend_yield_lq=None, expected_preferred_dividend_yield=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsEmitentMultipliersFields - a model defined in Swagger"""  # noqa: E501
        self._fininst_id = None
        self._dt = None
        self._last_report_date = None
        self._last_trade_date = None
        self._market_cap = None
        self._price_earnings = None
        self._forward_pe_scoring = None
        self._forward_pe_analyst = None
        self._price_sales = None
        self._forward_ps_scoring = None
        self._forward_ps_analyst = None
        self._price_book = None
        self._enterprise_value = None
        self._ev_ebitda = None
        self._ev_sales = None
        self._ebitda = None
        self._capex = None
        self._fcff = None
        self._fcfe = None
        self._ffo = None
        self._roe = None
        self._roa = None
        self._roi = None
        self._ros = None
        self._la = None
        self._eps = None
        self._leverage = None
        self._debt = None
        self._netdebt = None
        self._short_term_debt = None
        self._long_term_debt = None
        self._price_fcff = None
        self._net_income_ebitda = None
        self._sales = None
        self._earnings = None
        self._book_value = None
        self._equity = None
        self._earning_forecast_analyst = None
        self._sales_forecast_analyst = None
        self._earnings_forecast_scoring = None
        self._sales_forecast_scoring = None
        self._cash = None
        self._common_dividend_yield1_y = None
        self._common_dividend_yield5_y = None
        self._common_dividend_yield_lq = None
        self._expected_common_dividend_yield = None
        self._net_debt_to_ebitda = None
        self._net_profit_margin = None
        self._payout_ratio = None
        self._current_ratio = None
        self._common_dividend_rate1_y = None
        self._common_dividend_rate5_y = None
        self._common_dividend_rate_lq = None
        self._expected_common_dividend_rate = None
        self._expected_common_dividend_date = None
        self._preferred_dividend_rate1_y = None
        self._preferred_dividend_rate5_y = None
        self._preferred_dividend_rate_lq = None
        self._expected_preferred_dividend_rate = None
        self._expected_preferred_dividend_date = None
        self._preferred_dividend_yield1_y = None
        self._preferred_dividend_yield5_y = None
        self._preferred_dividend_yield_lq = None
        self._expected_preferred_dividend_yield = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if fininst_id is not None:
            self.fininst_id = fininst_id
        if dt is not None:
            self.dt = dt
        if last_report_date is not None:
            self.last_report_date = last_report_date
        if last_trade_date is not None:
            self.last_trade_date = last_trade_date
        if market_cap is not None:
            self.market_cap = market_cap
        if price_earnings is not None:
            self.price_earnings = price_earnings
        if forward_pe_scoring is not None:
            self.forward_pe_scoring = forward_pe_scoring
        if forward_pe_analyst is not None:
            self.forward_pe_analyst = forward_pe_analyst
        if price_sales is not None:
            self.price_sales = price_sales
        if forward_ps_scoring is not None:
            self.forward_ps_scoring = forward_ps_scoring
        if forward_ps_analyst is not None:
            self.forward_ps_analyst = forward_ps_analyst
        if price_book is not None:
            self.price_book = price_book
        if enterprise_value is not None:
            self.enterprise_value = enterprise_value
        if ev_ebitda is not None:
            self.ev_ebitda = ev_ebitda
        if ev_sales is not None:
            self.ev_sales = ev_sales
        if ebitda is not None:
            self.ebitda = ebitda
        if capex is not None:
            self.capex = capex
        if fcff is not None:
            self.fcff = fcff
        if fcfe is not None:
            self.fcfe = fcfe
        if ffo is not None:
            self.ffo = ffo
        if roe is not None:
            self.roe = roe
        if roa is not None:
            self.roa = roa
        if roi is not None:
            self.roi = roi
        if ros is not None:
            self.ros = ros
        if la is not None:
            self.la = la
        if eps is not None:
            self.eps = eps
        if leverage is not None:
            self.leverage = leverage
        if debt is not None:
            self.debt = debt
        if netdebt is not None:
            self.netdebt = netdebt
        if short_term_debt is not None:
            self.short_term_debt = short_term_debt
        if long_term_debt is not None:
            self.long_term_debt = long_term_debt
        if price_fcff is not None:
            self.price_fcff = price_fcff
        if net_income_ebitda is not None:
            self.net_income_ebitda = net_income_ebitda
        if sales is not None:
            self.sales = sales
        if earnings is not None:
            self.earnings = earnings
        if book_value is not None:
            self.book_value = book_value
        if equity is not None:
            self.equity = equity
        if earning_forecast_analyst is not None:
            self.earning_forecast_analyst = earning_forecast_analyst
        if sales_forecast_analyst is not None:
            self.sales_forecast_analyst = sales_forecast_analyst
        if earnings_forecast_scoring is not None:
            self.earnings_forecast_scoring = earnings_forecast_scoring
        if sales_forecast_scoring is not None:
            self.sales_forecast_scoring = sales_forecast_scoring
        if cash is not None:
            self.cash = cash
        if common_dividend_yield1_y is not None:
            self.common_dividend_yield1_y = common_dividend_yield1_y
        if common_dividend_yield5_y is not None:
            self.common_dividend_yield5_y = common_dividend_yield5_y
        if common_dividend_yield_lq is not None:
            self.common_dividend_yield_lq = common_dividend_yield_lq
        if expected_common_dividend_yield is not None:
            self.expected_common_dividend_yield = expected_common_dividend_yield
        if net_debt_to_ebitda is not None:
            self.net_debt_to_ebitda = net_debt_to_ebitda
        if net_profit_margin is not None:
            self.net_profit_margin = net_profit_margin
        if payout_ratio is not None:
            self.payout_ratio = payout_ratio
        if current_ratio is not None:
            self.current_ratio = current_ratio
        if common_dividend_rate1_y is not None:
            self.common_dividend_rate1_y = common_dividend_rate1_y
        if common_dividend_rate5_y is not None:
            self.common_dividend_rate5_y = common_dividend_rate5_y
        if common_dividend_rate_lq is not None:
            self.common_dividend_rate_lq = common_dividend_rate_lq
        if expected_common_dividend_rate is not None:
            self.expected_common_dividend_rate = expected_common_dividend_rate
        if expected_common_dividend_date is not None:
            self.expected_common_dividend_date = expected_common_dividend_date
        if preferred_dividend_rate1_y is not None:
            self.preferred_dividend_rate1_y = preferred_dividend_rate1_y
        if preferred_dividend_rate5_y is not None:
            self.preferred_dividend_rate5_y = preferred_dividend_rate5_y
        if preferred_dividend_rate_lq is not None:
            self.preferred_dividend_rate_lq = preferred_dividend_rate_lq
        if expected_preferred_dividend_rate is not None:
            self.expected_preferred_dividend_rate = expected_preferred_dividend_rate
        if expected_preferred_dividend_date is not None:
            self.expected_preferred_dividend_date = expected_preferred_dividend_date
        if preferred_dividend_yield1_y is not None:
            self.preferred_dividend_yield1_y = preferred_dividend_yield1_y
        if preferred_dividend_yield5_y is not None:
            self.preferred_dividend_yield5_y = preferred_dividend_yield5_y
        if preferred_dividend_yield_lq is not None:
            self.preferred_dividend_yield_lq = preferred_dividend_yield_lq
        if expected_preferred_dividend_yield is not None:
            self.expected_preferred_dividend_yield = expected_preferred_dividend_yield
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def fininst_id(self):
        """Gets the fininst_id of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Идентификатор организации в базе Интерфакс  # noqa: E501

        :return: The fininst_id of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: int
        """
        return self._fininst_id

    @fininst_id.setter
    def fininst_id(self, fininst_id):
        """Sets the fininst_id of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Идентификатор организации в базе Интерфакс  # noqa: E501

        :param fininst_id: The fininst_id of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: int
        """

        self._fininst_id = fininst_id

    @property
    def dt(self):
        """Gets the dt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Дата расчета  # noqa: E501

        :return: The dt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Дата расчета  # noqa: E501

        :param dt: The dt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def last_report_date(self):
        """Gets the last_report_date of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Дата последней имеющейся отчетности (последней относительно заданной даты)  # noqa: E501

        :return: The last_report_date of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: datetime
        """
        return self._last_report_date

    @last_report_date.setter
    def last_report_date(self, last_report_date):
        """Sets the last_report_date of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Дата последней имеющейся отчетности (последней относительно заданной даты)  # noqa: E501

        :param last_report_date: The last_report_date of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: datetime
        """

        self._last_report_date = last_report_date

    @property
    def last_trade_date(self):
        """Gets the last_trade_date of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Дата последнего торгового дня (последнего относительно заданной даты)  # noqa: E501

        :return: The last_trade_date of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: datetime
        """
        return self._last_trade_date

    @last_trade_date.setter
    def last_trade_date(self, last_trade_date):
        """Sets the last_trade_date of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Дата последнего торгового дня (последнего относительно заданной даты)  # noqa: E501

        :param last_trade_date: The last_trade_date of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: datetime
        """

        self._last_trade_date = last_trade_date

    @property
    def market_cap(self):
        """Gets the market_cap of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Market Capitalization (Price)  # noqa: E501

        :return: The market_cap of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._market_cap

    @market_cap.setter
    def market_cap(self, market_cap):
        """Sets the market_cap of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Market Capitalization (Price)  # noqa: E501

        :param market_cap: The market_cap of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._market_cap = market_cap

    @property
    def price_earnings(self):
        """Gets the price_earnings of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Price / Earnings  # noqa: E501

        :return: The price_earnings of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._price_earnings

    @price_earnings.setter
    def price_earnings(self, price_earnings):
        """Sets the price_earnings of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Price / Earnings  # noqa: E501

        :param price_earnings: The price_earnings of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._price_earnings = price_earnings

    @property
    def forward_pe_scoring(self):
        """Gets the forward_pe_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Price / Earnings Forecast (scoring)  # noqa: E501

        :return: The forward_pe_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._forward_pe_scoring

    @forward_pe_scoring.setter
    def forward_pe_scoring(self, forward_pe_scoring):
        """Sets the forward_pe_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Price / Earnings Forecast (scoring)  # noqa: E501

        :param forward_pe_scoring: The forward_pe_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._forward_pe_scoring = forward_pe_scoring

    @property
    def forward_pe_analyst(self):
        """Gets the forward_pe_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Price / Earnings Forecast (analyst)  # noqa: E501

        :return: The forward_pe_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._forward_pe_analyst

    @forward_pe_analyst.setter
    def forward_pe_analyst(self, forward_pe_analyst):
        """Sets the forward_pe_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Price / Earnings Forecast (analyst)  # noqa: E501

        :param forward_pe_analyst: The forward_pe_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._forward_pe_analyst = forward_pe_analyst

    @property
    def price_sales(self):
        """Gets the price_sales of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Price / Sales  # noqa: E501

        :return: The price_sales of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._price_sales

    @price_sales.setter
    def price_sales(self, price_sales):
        """Sets the price_sales of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Price / Sales  # noqa: E501

        :param price_sales: The price_sales of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._price_sales = price_sales

    @property
    def forward_ps_scoring(self):
        """Gets the forward_ps_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Price / Sales Forecast (scoring)  # noqa: E501

        :return: The forward_ps_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._forward_ps_scoring

    @forward_ps_scoring.setter
    def forward_ps_scoring(self, forward_ps_scoring):
        """Sets the forward_ps_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Price / Sales Forecast (scoring)  # noqa: E501

        :param forward_ps_scoring: The forward_ps_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._forward_ps_scoring = forward_ps_scoring

    @property
    def forward_ps_analyst(self):
        """Gets the forward_ps_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Price / Sales Forecast (analyst)  # noqa: E501

        :return: The forward_ps_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._forward_ps_analyst

    @forward_ps_analyst.setter
    def forward_ps_analyst(self, forward_ps_analyst):
        """Sets the forward_ps_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Price / Sales Forecast (analyst)  # noqa: E501

        :param forward_ps_analyst: The forward_ps_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._forward_ps_analyst = forward_ps_analyst

    @property
    def price_book(self):
        """Gets the price_book of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Price / Book  # noqa: E501

        :return: The price_book of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._price_book

    @price_book.setter
    def price_book(self, price_book):
        """Sets the price_book of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Price / Book  # noqa: E501

        :param price_book: The price_book of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._price_book = price_book

    @property
    def enterprise_value(self):
        """Gets the enterprise_value of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Enterprise Value  # noqa: E501

        :return: The enterprise_value of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._enterprise_value

    @enterprise_value.setter
    def enterprise_value(self, enterprise_value):
        """Sets the enterprise_value of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Enterprise Value  # noqa: E501

        :param enterprise_value: The enterprise_value of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._enterprise_value = enterprise_value

    @property
    def ev_ebitda(self):
        """Gets the ev_ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        EV / EBITDA  # noqa: E501

        :return: The ev_ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._ev_ebitda

    @ev_ebitda.setter
    def ev_ebitda(self, ev_ebitda):
        """Sets the ev_ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.

        EV / EBITDA  # noqa: E501

        :param ev_ebitda: The ev_ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._ev_ebitda = ev_ebitda

    @property
    def ev_sales(self):
        """Gets the ev_sales of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        EV / Sales  # noqa: E501

        :return: The ev_sales of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._ev_sales

    @ev_sales.setter
    def ev_sales(self, ev_sales):
        """Sets the ev_sales of this EfirDataHubModelsModelsEmitentMultipliersFields.

        EV / Sales  # noqa: E501

        :param ev_sales: The ev_sales of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._ev_sales = ev_sales

    @property
    def ebitda(self):
        """Gets the ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Earning before interest, taxes, depreciation and amortization  # noqa: E501

        :return: The ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._ebitda

    @ebitda.setter
    def ebitda(self, ebitda):
        """Sets the ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Earning before interest, taxes, depreciation and amortization  # noqa: E501

        :param ebitda: The ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._ebitda = ebitda

    @property
    def capex(self):
        """Gets the capex of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Capital Expenditures  # noqa: E501

        :return: The capex of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._capex

    @capex.setter
    def capex(self, capex):
        """Sets the capex of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Capital Expenditures  # noqa: E501

        :param capex: The capex of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._capex = capex

    @property
    def fcff(self):
        """Gets the fcff of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Free cash flow  # noqa: E501

        :return: The fcff of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._fcff

    @fcff.setter
    def fcff(self, fcff):
        """Sets the fcff of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Free cash flow  # noqa: E501

        :param fcff: The fcff of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._fcff = fcff

    @property
    def fcfe(self):
        """Gets the fcfe of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Free cash flow to Equity  # noqa: E501

        :return: The fcfe of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._fcfe

    @fcfe.setter
    def fcfe(self, fcfe):
        """Sets the fcfe of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Free cash flow to Equity  # noqa: E501

        :param fcfe: The fcfe of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._fcfe = fcfe

    @property
    def ffo(self):
        """Gets the ffo of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Funds from Operations  # noqa: E501

        :return: The ffo of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._ffo

    @ffo.setter
    def ffo(self, ffo):
        """Sets the ffo of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Funds from Operations  # noqa: E501

        :param ffo: The ffo of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._ffo = ffo

    @property
    def roe(self):
        """Gets the roe of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Return on Equity  # noqa: E501

        :return: The roe of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._roe

    @roe.setter
    def roe(self, roe):
        """Sets the roe of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Return on Equity  # noqa: E501

        :param roe: The roe of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._roe = roe

    @property
    def roa(self):
        """Gets the roa of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Return on Assets  # noqa: E501

        :return: The roa of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._roa

    @roa.setter
    def roa(self, roa):
        """Sets the roa of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Return on Assets  # noqa: E501

        :param roa: The roa of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._roa = roa

    @property
    def roi(self):
        """Gets the roi of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Return on Investments  # noqa: E501

        :return: The roi of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._roi

    @roi.setter
    def roi(self, roi):
        """Sets the roi of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Return on Investments  # noqa: E501

        :param roi: The roi of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._roi = roi

    @property
    def ros(self):
        """Gets the ros of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Return on Sales  # noqa: E501

        :return: The ros of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._ros

    @ros.setter
    def ros(self, ros):
        """Sets the ros of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Return on Sales  # noqa: E501

        :param ros: The ros of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._ros = ros

    @property
    def la(self):
        """Gets the la of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Liabilities / Assets  # noqa: E501

        :return: The la of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._la

    @la.setter
    def la(self, la):
        """Sets the la of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Liabilities / Assets  # noqa: E501

        :param la: The la of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._la = la

    @property
    def eps(self):
        """Gets the eps of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Earnings per Share  # noqa: E501

        :return: The eps of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._eps

    @eps.setter
    def eps(self, eps):
        """Sets the eps of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Earnings per Share  # noqa: E501

        :param eps: The eps of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._eps = eps

    @property
    def leverage(self):
        """Gets the leverage of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Leverage  # noqa: E501

        :return: The leverage of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._leverage

    @leverage.setter
    def leverage(self, leverage):
        """Sets the leverage of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Leverage  # noqa: E501

        :param leverage: The leverage of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._leverage = leverage

    @property
    def debt(self):
        """Gets the debt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Total debt  # noqa: E501

        :return: The debt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._debt

    @debt.setter
    def debt(self, debt):
        """Sets the debt of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Total debt  # noqa: E501

        :param debt: The debt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._debt = debt

    @property
    def netdebt(self):
        """Gets the netdebt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Net debt  # noqa: E501

        :return: The netdebt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._netdebt

    @netdebt.setter
    def netdebt(self, netdebt):
        """Sets the netdebt of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Net debt  # noqa: E501

        :param netdebt: The netdebt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._netdebt = netdebt

    @property
    def short_term_debt(self):
        """Gets the short_term_debt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Short-term debt  # noqa: E501

        :return: The short_term_debt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._short_term_debt

    @short_term_debt.setter
    def short_term_debt(self, short_term_debt):
        """Sets the short_term_debt of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Short-term debt  # noqa: E501

        :param short_term_debt: The short_term_debt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._short_term_debt = short_term_debt

    @property
    def long_term_debt(self):
        """Gets the long_term_debt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Long-term debt  # noqa: E501

        :return: The long_term_debt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._long_term_debt

    @long_term_debt.setter
    def long_term_debt(self, long_term_debt):
        """Sets the long_term_debt of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Long-term debt  # noqa: E501

        :param long_term_debt: The long_term_debt of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._long_term_debt = long_term_debt

    @property
    def price_fcff(self):
        """Gets the price_fcff of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Price / Free Cash Flow to Firm  # noqa: E501

        :return: The price_fcff of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._price_fcff

    @price_fcff.setter
    def price_fcff(self, price_fcff):
        """Sets the price_fcff of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Price / Free Cash Flow to Firm  # noqa: E501

        :param price_fcff: The price_fcff of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._price_fcff = price_fcff

    @property
    def net_income_ebitda(self):
        """Gets the net_income_ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Net income/EBITDA  # noqa: E501

        :return: The net_income_ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._net_income_ebitda

    @net_income_ebitda.setter
    def net_income_ebitda(self, net_income_ebitda):
        """Sets the net_income_ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Net income/EBITDA  # noqa: E501

        :param net_income_ebitda: The net_income_ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._net_income_ebitda = net_income_ebitda

    @property
    def sales(self):
        """Gets the sales of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Sales  # noqa: E501

        :return: The sales of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._sales

    @sales.setter
    def sales(self, sales):
        """Sets the sales of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Sales  # noqa: E501

        :param sales: The sales of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._sales = sales

    @property
    def earnings(self):
        """Gets the earnings of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Earnings  # noqa: E501

        :return: The earnings of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._earnings

    @earnings.setter
    def earnings(self, earnings):
        """Sets the earnings of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Earnings  # noqa: E501

        :param earnings: The earnings of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._earnings = earnings

    @property
    def book_value(self):
        """Gets the book_value of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Book Value  # noqa: E501

        :return: The book_value of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._book_value

    @book_value.setter
    def book_value(self, book_value):
        """Sets the book_value of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Book Value  # noqa: E501

        :param book_value: The book_value of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._book_value = book_value

    @property
    def equity(self):
        """Gets the equity of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Equity  # noqa: E501

        :return: The equity of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Equity  # noqa: E501

        :param equity: The equity of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._equity = equity

    @property
    def earning_forecast_analyst(self):
        """Gets the earning_forecast_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Earnings forecast (analyst)  # noqa: E501

        :return: The earning_forecast_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._earning_forecast_analyst

    @earning_forecast_analyst.setter
    def earning_forecast_analyst(self, earning_forecast_analyst):
        """Sets the earning_forecast_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Earnings forecast (analyst)  # noqa: E501

        :param earning_forecast_analyst: The earning_forecast_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._earning_forecast_analyst = earning_forecast_analyst

    @property
    def sales_forecast_analyst(self):
        """Gets the sales_forecast_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Sales forecast (analyst)  # noqa: E501

        :return: The sales_forecast_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._sales_forecast_analyst

    @sales_forecast_analyst.setter
    def sales_forecast_analyst(self, sales_forecast_analyst):
        """Sets the sales_forecast_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Sales forecast (analyst)  # noqa: E501

        :param sales_forecast_analyst: The sales_forecast_analyst of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._sales_forecast_analyst = sales_forecast_analyst

    @property
    def earnings_forecast_scoring(self):
        """Gets the earnings_forecast_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Earnings forecast (scoring)  # noqa: E501

        :return: The earnings_forecast_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._earnings_forecast_scoring

    @earnings_forecast_scoring.setter
    def earnings_forecast_scoring(self, earnings_forecast_scoring):
        """Sets the earnings_forecast_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Earnings forecast (scoring)  # noqa: E501

        :param earnings_forecast_scoring: The earnings_forecast_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._earnings_forecast_scoring = earnings_forecast_scoring

    @property
    def sales_forecast_scoring(self):
        """Gets the sales_forecast_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Sales forecast (scoring)  # noqa: E501

        :return: The sales_forecast_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._sales_forecast_scoring

    @sales_forecast_scoring.setter
    def sales_forecast_scoring(self, sales_forecast_scoring):
        """Sets the sales_forecast_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Sales forecast (scoring)  # noqa: E501

        :param sales_forecast_scoring: The sales_forecast_scoring of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._sales_forecast_scoring = sales_forecast_scoring

    @property
    def cash(self):
        """Gets the cash of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Cash  # noqa: E501

        :return: The cash of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Cash  # noqa: E501

        :param cash: The cash of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._cash = cash

    @property
    def common_dividend_yield1_y(self):
        """Gets the common_dividend_yield1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Common dividend yield 1 year  # noqa: E501

        :return: The common_dividend_yield1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._common_dividend_yield1_y

    @common_dividend_yield1_y.setter
    def common_dividend_yield1_y(self, common_dividend_yield1_y):
        """Sets the common_dividend_yield1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Common dividend yield 1 year  # noqa: E501

        :param common_dividend_yield1_y: The common_dividend_yield1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._common_dividend_yield1_y = common_dividend_yield1_y

    @property
    def common_dividend_yield5_y(self):
        """Gets the common_dividend_yield5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Common dividend yield 5 years  # noqa: E501

        :return: The common_dividend_yield5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._common_dividend_yield5_y

    @common_dividend_yield5_y.setter
    def common_dividend_yield5_y(self, common_dividend_yield5_y):
        """Sets the common_dividend_yield5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Common dividend yield 5 years  # noqa: E501

        :param common_dividend_yield5_y: The common_dividend_yield5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._common_dividend_yield5_y = common_dividend_yield5_y

    @property
    def common_dividend_yield_lq(self):
        """Gets the common_dividend_yield_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Common dividend yield last quarter  # noqa: E501

        :return: The common_dividend_yield_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._common_dividend_yield_lq

    @common_dividend_yield_lq.setter
    def common_dividend_yield_lq(self, common_dividend_yield_lq):
        """Sets the common_dividend_yield_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Common dividend yield last quarter  # noqa: E501

        :param common_dividend_yield_lq: The common_dividend_yield_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._common_dividend_yield_lq = common_dividend_yield_lq

    @property
    def expected_common_dividend_yield(self):
        """Gets the expected_common_dividend_yield of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Expected common dividend yield  # noqa: E501

        :return: The expected_common_dividend_yield of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._expected_common_dividend_yield

    @expected_common_dividend_yield.setter
    def expected_common_dividend_yield(self, expected_common_dividend_yield):
        """Sets the expected_common_dividend_yield of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Expected common dividend yield  # noqa: E501

        :param expected_common_dividend_yield: The expected_common_dividend_yield of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._expected_common_dividend_yield = expected_common_dividend_yield

    @property
    def net_debt_to_ebitda(self):
        """Gets the net_debt_to_ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Net debt / EBITDA  # noqa: E501

        :return: The net_debt_to_ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._net_debt_to_ebitda

    @net_debt_to_ebitda.setter
    def net_debt_to_ebitda(self, net_debt_to_ebitda):
        """Sets the net_debt_to_ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Net debt / EBITDA  # noqa: E501

        :param net_debt_to_ebitda: The net_debt_to_ebitda of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._net_debt_to_ebitda = net_debt_to_ebitda

    @property
    def net_profit_margin(self):
        """Gets the net_profit_margin of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Net profit margin  # noqa: E501

        :return: The net_profit_margin of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._net_profit_margin

    @net_profit_margin.setter
    def net_profit_margin(self, net_profit_margin):
        """Sets the net_profit_margin of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Net profit margin  # noqa: E501

        :param net_profit_margin: The net_profit_margin of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._net_profit_margin = net_profit_margin

    @property
    def payout_ratio(self):
        """Gets the payout_ratio of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Payout ratio  # noqa: E501

        :return: The payout_ratio of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._payout_ratio

    @payout_ratio.setter
    def payout_ratio(self, payout_ratio):
        """Sets the payout_ratio of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Payout ratio  # noqa: E501

        :param payout_ratio: The payout_ratio of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._payout_ratio = payout_ratio

    @property
    def current_ratio(self):
        """Gets the current_ratio of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Current ratio  # noqa: E501

        :return: The current_ratio of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._current_ratio

    @current_ratio.setter
    def current_ratio(self, current_ratio):
        """Sets the current_ratio of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Current ratio  # noqa: E501

        :param current_ratio: The current_ratio of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._current_ratio = current_ratio

    @property
    def common_dividend_rate1_y(self):
        """Gets the common_dividend_rate1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Common dividend rate 1 year  # noqa: E501

        :return: The common_dividend_rate1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._common_dividend_rate1_y

    @common_dividend_rate1_y.setter
    def common_dividend_rate1_y(self, common_dividend_rate1_y):
        """Sets the common_dividend_rate1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Common dividend rate 1 year  # noqa: E501

        :param common_dividend_rate1_y: The common_dividend_rate1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._common_dividend_rate1_y = common_dividend_rate1_y

    @property
    def common_dividend_rate5_y(self):
        """Gets the common_dividend_rate5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Common dividend rate 5 years  # noqa: E501

        :return: The common_dividend_rate5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._common_dividend_rate5_y

    @common_dividend_rate5_y.setter
    def common_dividend_rate5_y(self, common_dividend_rate5_y):
        """Sets the common_dividend_rate5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Common dividend rate 5 years  # noqa: E501

        :param common_dividend_rate5_y: The common_dividend_rate5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._common_dividend_rate5_y = common_dividend_rate5_y

    @property
    def common_dividend_rate_lq(self):
        """Gets the common_dividend_rate_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Common dividend rate last quarter  # noqa: E501

        :return: The common_dividend_rate_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._common_dividend_rate_lq

    @common_dividend_rate_lq.setter
    def common_dividend_rate_lq(self, common_dividend_rate_lq):
        """Sets the common_dividend_rate_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Common dividend rate last quarter  # noqa: E501

        :param common_dividend_rate_lq: The common_dividend_rate_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._common_dividend_rate_lq = common_dividend_rate_lq

    @property
    def expected_common_dividend_rate(self):
        """Gets the expected_common_dividend_rate of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Expected common dividend yield  # noqa: E501

        :return: The expected_common_dividend_rate of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._expected_common_dividend_rate

    @expected_common_dividend_rate.setter
    def expected_common_dividend_rate(self, expected_common_dividend_rate):
        """Sets the expected_common_dividend_rate of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Expected common dividend yield  # noqa: E501

        :param expected_common_dividend_rate: The expected_common_dividend_rate of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._expected_common_dividend_rate = expected_common_dividend_rate

    @property
    def expected_common_dividend_date(self):
        """Gets the expected_common_dividend_date of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Expected common dividend date  # noqa: E501

        :return: The expected_common_dividend_date of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_common_dividend_date

    @expected_common_dividend_date.setter
    def expected_common_dividend_date(self, expected_common_dividend_date):
        """Sets the expected_common_dividend_date of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Expected common dividend date  # noqa: E501

        :param expected_common_dividend_date: The expected_common_dividend_date of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: datetime
        """

        self._expected_common_dividend_date = expected_common_dividend_date

    @property
    def preferred_dividend_rate1_y(self):
        """Gets the preferred_dividend_rate1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Preferred dividend rate 1 year  # noqa: E501

        :return: The preferred_dividend_rate1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._preferred_dividend_rate1_y

    @preferred_dividend_rate1_y.setter
    def preferred_dividend_rate1_y(self, preferred_dividend_rate1_y):
        """Sets the preferred_dividend_rate1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Preferred dividend rate 1 year  # noqa: E501

        :param preferred_dividend_rate1_y: The preferred_dividend_rate1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._preferred_dividend_rate1_y = preferred_dividend_rate1_y

    @property
    def preferred_dividend_rate5_y(self):
        """Gets the preferred_dividend_rate5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Preferred dividend rate 5 years  # noqa: E501

        :return: The preferred_dividend_rate5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._preferred_dividend_rate5_y

    @preferred_dividend_rate5_y.setter
    def preferred_dividend_rate5_y(self, preferred_dividend_rate5_y):
        """Sets the preferred_dividend_rate5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Preferred dividend rate 5 years  # noqa: E501

        :param preferred_dividend_rate5_y: The preferred_dividend_rate5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._preferred_dividend_rate5_y = preferred_dividend_rate5_y

    @property
    def preferred_dividend_rate_lq(self):
        """Gets the preferred_dividend_rate_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Preferred dividend rate last quarter  # noqa: E501

        :return: The preferred_dividend_rate_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._preferred_dividend_rate_lq

    @preferred_dividend_rate_lq.setter
    def preferred_dividend_rate_lq(self, preferred_dividend_rate_lq):
        """Sets the preferred_dividend_rate_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Preferred dividend rate last quarter  # noqa: E501

        :param preferred_dividend_rate_lq: The preferred_dividend_rate_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._preferred_dividend_rate_lq = preferred_dividend_rate_lq

    @property
    def expected_preferred_dividend_rate(self):
        """Gets the expected_preferred_dividend_rate of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Expected preferred dividend rate  # noqa: E501

        :return: The expected_preferred_dividend_rate of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._expected_preferred_dividend_rate

    @expected_preferred_dividend_rate.setter
    def expected_preferred_dividend_rate(self, expected_preferred_dividend_rate):
        """Sets the expected_preferred_dividend_rate of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Expected preferred dividend rate  # noqa: E501

        :param expected_preferred_dividend_rate: The expected_preferred_dividend_rate of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._expected_preferred_dividend_rate = expected_preferred_dividend_rate

    @property
    def expected_preferred_dividend_date(self):
        """Gets the expected_preferred_dividend_date of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Expected preferred dividend date  # noqa: E501

        :return: The expected_preferred_dividend_date of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_preferred_dividend_date

    @expected_preferred_dividend_date.setter
    def expected_preferred_dividend_date(self, expected_preferred_dividend_date):
        """Sets the expected_preferred_dividend_date of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Expected preferred dividend date  # noqa: E501

        :param expected_preferred_dividend_date: The expected_preferred_dividend_date of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: datetime
        """

        self._expected_preferred_dividend_date = expected_preferred_dividend_date

    @property
    def preferred_dividend_yield1_y(self):
        """Gets the preferred_dividend_yield1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Preferred dividend yield 1 year  # noqa: E501

        :return: The preferred_dividend_yield1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._preferred_dividend_yield1_y

    @preferred_dividend_yield1_y.setter
    def preferred_dividend_yield1_y(self, preferred_dividend_yield1_y):
        """Sets the preferred_dividend_yield1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Preferred dividend yield 1 year  # noqa: E501

        :param preferred_dividend_yield1_y: The preferred_dividend_yield1_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._preferred_dividend_yield1_y = preferred_dividend_yield1_y

    @property
    def preferred_dividend_yield5_y(self):
        """Gets the preferred_dividend_yield5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Preferred dividend yield 5 years  # noqa: E501

        :return: The preferred_dividend_yield5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._preferred_dividend_yield5_y

    @preferred_dividend_yield5_y.setter
    def preferred_dividend_yield5_y(self, preferred_dividend_yield5_y):
        """Sets the preferred_dividend_yield5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Preferred dividend yield 5 years  # noqa: E501

        :param preferred_dividend_yield5_y: The preferred_dividend_yield5_y of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._preferred_dividend_yield5_y = preferred_dividend_yield5_y

    @property
    def preferred_dividend_yield_lq(self):
        """Gets the preferred_dividend_yield_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Preferred dividend yield last quarter  # noqa: E501

        :return: The preferred_dividend_yield_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._preferred_dividend_yield_lq

    @preferred_dividend_yield_lq.setter
    def preferred_dividend_yield_lq(self, preferred_dividend_yield_lq):
        """Sets the preferred_dividend_yield_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Preferred dividend yield last quarter  # noqa: E501

        :param preferred_dividend_yield_lq: The preferred_dividend_yield_lq of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._preferred_dividend_yield_lq = preferred_dividend_yield_lq

    @property
    def expected_preferred_dividend_yield(self):
        """Gets the expected_preferred_dividend_yield of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Expected preferred dividend yield  # noqa: E501

        :return: The expected_preferred_dividend_yield of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: float
        """
        return self._expected_preferred_dividend_yield

    @expected_preferred_dividend_yield.setter
    def expected_preferred_dividend_yield(self, expected_preferred_dividend_yield):
        """Sets the expected_preferred_dividend_yield of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Expected preferred dividend yield  # noqa: E501

        :param expected_preferred_dividend_yield: The expected_preferred_dividend_yield of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: float
        """

        self._expected_preferred_dividend_yield = expected_preferred_dividend_yield

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsEmitentMultipliersFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsEmitentMultipliersFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsEmitentMultipliersFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsEmitentMultipliersFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
