# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRiskRiskDateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'datetime',
        'rule': 'str',
        'has_amortisations': 'bool',
        'error': 'str',
        'timing_group_id': 'int',
        'timing_group_name': 'str',
        'rule_name': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'rule': 'rule',
        'has_amortisations': 'hasAmortisations',
        'error': 'error',
        'timing_group_id': 'timingGroupId',
        'timing_group_name': 'timingGroupName',
        'rule_name': 'ruleName'
    }

    def __init__(self, _date=None, rule=None, has_amortisations=None, error=None, timing_group_id=None, timing_group_name=None, rule_name=None):  # noqa: E501
        """EfirDataHubModelsModelsRiskRiskDateResponse - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._rule = None
        self._has_amortisations = None
        self._error = None
        self._timing_group_id = None
        self._timing_group_name = None
        self._rule_name = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if rule is not None:
            self.rule = rule
        if has_amortisations is not None:
            self.has_amortisations = has_amortisations
        if error is not None:
            self.error = error
        if timing_group_id is not None:
            self.timing_group_id = timing_group_id
        if timing_group_name is not None:
            self.timing_group_name = timing_group_name
        if rule_name is not None:
            self.rule_name = rule_name

    @property
    def _date(self):
        """Gets the _date of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501

        Дата для вычисления группы срочности  # noqa: E501

        :return: The _date of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EfirDataHubModelsModelsRiskRiskDateResponse.

        Дата для вычисления группы срочности  # noqa: E501

        :param _date: The _date of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def rule(self):
        """Gets the rule of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501

        Идентификатор правила:  - POSITION_MATURITY - срок договора  - ISSUE_MATURITY – погашение  - ISSUE_OFFER - оферта  - ISSUE_RATE – купон  - ISSUE_DIVIDEND – дивиденды  - AMORTISATION - амортизация  - ISSUE_FLOATINGRATE - ставка  - AVERAGE_FLOATINGRATE - средняя RUONIA  - MBD_CBRF - непрерывная КС  - OVERDUE - истечение  # noqa: E501

        :return: The rule of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this EfirDataHubModelsModelsRiskRiskDateResponse.

        Идентификатор правила:  - POSITION_MATURITY - срок договора  - ISSUE_MATURITY – погашение  - ISSUE_OFFER - оферта  - ISSUE_RATE – купон  - ISSUE_DIVIDEND – дивиденды  - AMORTISATION - амортизация  - ISSUE_FLOATINGRATE - ставка  - AVERAGE_FLOATINGRATE - средняя RUONIA  - MBD_CBRF - непрерывная КС  - OVERDUE - истечение  # noqa: E501

        :param rule: The rule of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :type: str
        """

        self._rule = rule

    @property
    def has_amortisations(self):
        """Gets the has_amortisations of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501

        Наличие амортизации  # noqa: E501

        :return: The has_amortisations of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_amortisations

    @has_amortisations.setter
    def has_amortisations(self, has_amortisations):
        """Sets the has_amortisations of this EfirDataHubModelsModelsRiskRiskDateResponse.

        Наличие амортизации  # noqa: E501

        :param has_amortisations: The has_amortisations of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :type: bool
        """

        self._has_amortisations = has_amortisations

    @property
    def error(self):
        """Gets the error of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501

        Текст ошибки, если она есть  # noqa: E501

        :return: The error of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EfirDataHubModelsModelsRiskRiskDateResponse.

        Текст ошибки, если она есть  # noqa: E501

        :param error: The error of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def timing_group_id(self):
        """Gets the timing_group_id of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501

        Идентификатор группы срочности  # noqa: E501

        :return: The timing_group_id of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :rtype: int
        """
        return self._timing_group_id

    @timing_group_id.setter
    def timing_group_id(self, timing_group_id):
        """Sets the timing_group_id of this EfirDataHubModelsModelsRiskRiskDateResponse.

        Идентификатор группы срочности  # noqa: E501

        :param timing_group_id: The timing_group_id of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :type: int
        """

        self._timing_group_id = timing_group_id

    @property
    def timing_group_name(self):
        """Gets the timing_group_name of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501

        Наименование группы срочности  # noqa: E501

        :return: The timing_group_name of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :rtype: str
        """
        return self._timing_group_name

    @timing_group_name.setter
    def timing_group_name(self, timing_group_name):
        """Sets the timing_group_name of this EfirDataHubModelsModelsRiskRiskDateResponse.

        Наименование группы срочности  # noqa: E501

        :param timing_group_name: The timing_group_name of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :type: str
        """

        self._timing_group_name = timing_group_name

    @property
    def rule_name(self):
        """Gets the rule_name of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501

        Наименование правила  # noqa: E501

        :return: The rule_name of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this EfirDataHubModelsModelsRiskRiskDateResponse.

        Наименование правила  # noqa: E501

        :param rule_name: The rule_name of this EfirDataHubModelsModelsRiskRiskDateResponse.  # noqa: E501
        :type: str
        """

        self._rule_name = rule_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRiskRiskDateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRiskRiskDateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
