# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsInfoResidualFaceValueResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'face_value': 'float',
        'error': 'str',
        'last_known_date': 'datetime'
    }

    attribute_map = {
        'face_value': 'faceValue',
        'error': 'error',
        'last_known_date': 'lastKnownDate'
    }

    def __init__(self, face_value=None, error=None, last_known_date=None):  # noqa: E501
        """EfirDataHubModelsModelsInfoResidualFaceValueResponse - a model defined in Swagger"""  # noqa: E501
        self._face_value = None
        self._error = None
        self._last_known_date = None
        self.discriminator = None
        if face_value is not None:
            self.face_value = face_value
        if error is not None:
            self.error = error
        if last_known_date is not None:
            self.last_known_date = last_known_date

    @property
    def face_value(self):
        """Gets the face_value of this EfirDataHubModelsModelsInfoResidualFaceValueResponse.  # noqa: E501

        Остаточный номинал  # noqa: E501

        :return: The face_value of this EfirDataHubModelsModelsInfoResidualFaceValueResponse.  # noqa: E501
        :rtype: float
        """
        return self._face_value

    @face_value.setter
    def face_value(self, face_value):
        """Sets the face_value of this EfirDataHubModelsModelsInfoResidualFaceValueResponse.

        Остаточный номинал  # noqa: E501

        :param face_value: The face_value of this EfirDataHubModelsModelsInfoResidualFaceValueResponse.  # noqa: E501
        :type: float
        """

        self._face_value = face_value

    @property
    def error(self):
        """Gets the error of this EfirDataHubModelsModelsInfoResidualFaceValueResponse.  # noqa: E501

        Текст ошибки, если возникла  # noqa: E501

        :return: The error of this EfirDataHubModelsModelsInfoResidualFaceValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EfirDataHubModelsModelsInfoResidualFaceValueResponse.

        Текст ошибки, если возникла  # noqa: E501

        :param error: The error of this EfirDataHubModelsModelsInfoResidualFaceValueResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def last_known_date(self):
        """Gets the last_known_date of this EfirDataHubModelsModelsInfoResidualFaceValueResponse.  # noqa: E501

        Последняя известная дата номинала  # noqa: E501

        :return: The last_known_date of this EfirDataHubModelsModelsInfoResidualFaceValueResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_known_date

    @last_known_date.setter
    def last_known_date(self, last_known_date):
        """Sets the last_known_date of this EfirDataHubModelsModelsInfoResidualFaceValueResponse.

        Последняя известная дата номинала  # noqa: E501

        :param last_known_date: The last_known_date of this EfirDataHubModelsModelsInfoResidualFaceValueResponse.  # noqa: E501
        :type: datetime
        """

        self._last_known_date = last_known_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsInfoResidualFaceValueResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsInfoResidualFaceValueResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
