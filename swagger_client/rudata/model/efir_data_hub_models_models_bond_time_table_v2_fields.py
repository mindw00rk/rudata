# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondTimeTableV2Fields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintool_rusbonds_type': 'str',
        'issuer_rusbonds_type': 'str',
        'original_country': 'str',
        'update_date': 'datetime',
        'security_type': 'str',
        'private_dist': 'bool',
        'country': 'str',
        'listing_level': 'int',
        'type_convertation': 'str',
        'literid_typeoperation': 'int',
        'act_code': 'str',
        'fininst_id': 'int',
        'issuer_name': 'str',
        'id': 'str',
        'isi_ncode': 'str',
        'reg_code': 'str',
        'nickname': 'str',
        'nr_dcode': 'str',
        'fin_tool_id': 'int',
        'type': 'int',
        'event_id': 'int',
        'type_operation': 'str',
        'rate_date': 'datetime',
        'begin_period': 'datetime',
        'end_period': 'datetime',
        'coupon_period': 'float',
        'coupon_rate': 'float',
        'pay1_bond': 'float',
        'money_flow_val': 'float',
        'event_total_vol': 'float',
        'days_from_dist': 'float',
        'execution': 'str',
        'pay_date': 'datetime',
        'fix_date': 'datetime',
        'mty_date': 'datetime',
        'mty_part': 'float',
        'offer_date': 'datetime',
        'buy_back_price': 'float',
        'beg_order': 'datetime',
        'end_order': 'datetime',
        'event_period': 'float',
        'convert2_fin_tool_id': 'str',
        'coefficient': 'float',
        'begin_conv_date': 'datetime',
        'end_conv_date': 'datetime',
        'default_id': 'float',
        'default_type': 'str',
        'type_event': 'str',
        'default_date': 'datetime',
        'real_pay_date': 'datetime',
        'note': 'str',
        'event_type': 'str',
        'event_date': 'datetime',
        'begin_event_per': 'datetime',
        'value': 'float',
        'face_ft_name': 'str',
        'pay1_security': 'float',
        'money_flow_plan': 'float',
        'protocol_date': 'datetime',
        'pay1_bond_frac': 'float',
        'recomend_pay1_security': 'float',
        'recomend_rate_date': 'datetime',
        'recomend_fix_date': 'datetime',
        'recomend_pay_date': 'datetime',
        'recomend_pay_date_nominee': 'datetime',
        'fintool_type': 'str',
        'dividend_currency': 'str',
        'ex_dividend_date': 'datetime',
        'declared_pay_date_nominee': 'datetime',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'fintool_rusbonds_type': 'fintool_rusbonds_type',
        'issuer_rusbonds_type': 'issuer_rusbonds_type',
        'original_country': 'original_country',
        'update_date': 'update_date',
        'security_type': 'securityType',
        'private_dist': 'privateDist',
        'country': 'country',
        'listing_level': 'listing_level',
        'type_convertation': 'type_convertation',
        'literid_typeoperation': 'literid_typeoperation',
        'act_code': 'act_code',
        'fininst_id': 'fininstId',
        'issuer_name': 'issuerName',
        'id': 'id',
        'isi_ncode': 'isiNcode',
        'reg_code': 'regCode',
        'nickname': 'nickname',
        'nr_dcode': 'nrDcode',
        'fin_tool_id': 'finToolID',
        'type': 'type',
        'event_id': 'eventID',
        'type_operation': 'typeOperation',
        'rate_date': 'rateDate',
        'begin_period': 'beginPeriod',
        'end_period': 'endPeriod',
        'coupon_period': 'couponPeriod',
        'coupon_rate': 'couponRate',
        'pay1_bond': 'pay1Bond',
        'money_flow_val': 'moneyFlowVal',
        'event_total_vol': 'eventTotalVol',
        'days_from_dist': 'daysFromDist',
        'execution': 'execution',
        'pay_date': 'payDate',
        'fix_date': 'fixDate',
        'mty_date': 'mtyDate',
        'mty_part': 'mtyPart',
        'offer_date': 'offerDate',
        'buy_back_price': 'buyBackPrice',
        'beg_order': 'begOrder',
        'end_order': 'endOrder',
        'event_period': 'eventPeriod',
        'convert2_fin_tool_id': 'convert2FinToolID',
        'coefficient': 'coefficient',
        'begin_conv_date': 'beginConvDate',
        'end_conv_date': 'endConvDate',
        'default_id': 'defaultID',
        'default_type': 'defaultType',
        'type_event': 'typeEvent',
        'default_date': 'defaultDate',
        'real_pay_date': 'realPayDate',
        'note': 'note',
        'event_type': 'eventType',
        'event_date': 'eventDate',
        'begin_event_per': 'beginEventPer',
        'value': 'value',
        'face_ft_name': 'faceFTName',
        'pay1_security': 'pay1Security',
        'money_flow_plan': 'moneyFlowPlan',
        'protocol_date': 'protocolDate',
        'pay1_bond_frac': 'pay1Bond_frac',
        'recomend_pay1_security': 'recomendPay1Security',
        'recomend_rate_date': 'recomendRateDate',
        'recomend_fix_date': 'recomendFixDate',
        'recomend_pay_date': 'recomendPayDate',
        'recomend_pay_date_nominee': 'recomendPayDateNominee',
        'fintool_type': 'fintoolType',
        'dividend_currency': 'dividend_currency',
        'ex_dividend_date': 'ex_dividend_date',
        'declared_pay_date_nominee': 'declared_pay_date_nominee',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, fintool_rusbonds_type=None, issuer_rusbonds_type=None, original_country=None, update_date=None, security_type=None, private_dist=None, country=None, listing_level=None, type_convertation=None, literid_typeoperation=None, act_code=None, fininst_id=None, issuer_name=None, id=None, isi_ncode=None, reg_code=None, nickname=None, nr_dcode=None, fin_tool_id=None, type=None, event_id=None, type_operation=None, rate_date=None, begin_period=None, end_period=None, coupon_period=None, coupon_rate=None, pay1_bond=None, money_flow_val=None, event_total_vol=None, days_from_dist=None, execution=None, pay_date=None, fix_date=None, mty_date=None, mty_part=None, offer_date=None, buy_back_price=None, beg_order=None, end_order=None, event_period=None, convert2_fin_tool_id=None, coefficient=None, begin_conv_date=None, end_conv_date=None, default_id=None, default_type=None, type_event=None, default_date=None, real_pay_date=None, note=None, event_type=None, event_date=None, begin_event_per=None, value=None, face_ft_name=None, pay1_security=None, money_flow_plan=None, protocol_date=None, pay1_bond_frac=None, recomend_pay1_security=None, recomend_rate_date=None, recomend_fix_date=None, recomend_pay_date=None, recomend_pay_date_nominee=None, fintool_type=None, dividend_currency=None, ex_dividend_date=None, declared_pay_date_nominee=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsBondTimeTableV2Fields - a model defined in Swagger"""  # noqa: E501
        self._fintool_rusbonds_type = None
        self._issuer_rusbonds_type = None
        self._original_country = None
        self._update_date = None
        self._security_type = None
        self._private_dist = None
        self._country = None
        self._listing_level = None
        self._type_convertation = None
        self._literid_typeoperation = None
        self._act_code = None
        self._fininst_id = None
        self._issuer_name = None
        self._id = None
        self._isi_ncode = None
        self._reg_code = None
        self._nickname = None
        self._nr_dcode = None
        self._fin_tool_id = None
        self._type = None
        self._event_id = None
        self._type_operation = None
        self._rate_date = None
        self._begin_period = None
        self._end_period = None
        self._coupon_period = None
        self._coupon_rate = None
        self._pay1_bond = None
        self._money_flow_val = None
        self._event_total_vol = None
        self._days_from_dist = None
        self._execution = None
        self._pay_date = None
        self._fix_date = None
        self._mty_date = None
        self._mty_part = None
        self._offer_date = None
        self._buy_back_price = None
        self._beg_order = None
        self._end_order = None
        self._event_period = None
        self._convert2_fin_tool_id = None
        self._coefficient = None
        self._begin_conv_date = None
        self._end_conv_date = None
        self._default_id = None
        self._default_type = None
        self._type_event = None
        self._default_date = None
        self._real_pay_date = None
        self._note = None
        self._event_type = None
        self._event_date = None
        self._begin_event_per = None
        self._value = None
        self._face_ft_name = None
        self._pay1_security = None
        self._money_flow_plan = None
        self._protocol_date = None
        self._pay1_bond_frac = None
        self._recomend_pay1_security = None
        self._recomend_rate_date = None
        self._recomend_fix_date = None
        self._recomend_pay_date = None
        self._recomend_pay_date_nominee = None
        self._fintool_type = None
        self._dividend_currency = None
        self._ex_dividend_date = None
        self._declared_pay_date_nominee = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if fintool_rusbonds_type is not None:
            self.fintool_rusbonds_type = fintool_rusbonds_type
        if issuer_rusbonds_type is not None:
            self.issuer_rusbonds_type = issuer_rusbonds_type
        if original_country is not None:
            self.original_country = original_country
        if update_date is not None:
            self.update_date = update_date
        if security_type is not None:
            self.security_type = security_type
        if private_dist is not None:
            self.private_dist = private_dist
        if country is not None:
            self.country = country
        if listing_level is not None:
            self.listing_level = listing_level
        if type_convertation is not None:
            self.type_convertation = type_convertation
        if literid_typeoperation is not None:
            self.literid_typeoperation = literid_typeoperation
        if act_code is not None:
            self.act_code = act_code
        if fininst_id is not None:
            self.fininst_id = fininst_id
        if issuer_name is not None:
            self.issuer_name = issuer_name
        if id is not None:
            self.id = id
        if isi_ncode is not None:
            self.isi_ncode = isi_ncode
        if reg_code is not None:
            self.reg_code = reg_code
        if nickname is not None:
            self.nickname = nickname
        if nr_dcode is not None:
            self.nr_dcode = nr_dcode
        if fin_tool_id is not None:
            self.fin_tool_id = fin_tool_id
        if type is not None:
            self.type = type
        if event_id is not None:
            self.event_id = event_id
        if type_operation is not None:
            self.type_operation = type_operation
        if rate_date is not None:
            self.rate_date = rate_date
        if begin_period is not None:
            self.begin_period = begin_period
        if end_period is not None:
            self.end_period = end_period
        if coupon_period is not None:
            self.coupon_period = coupon_period
        if coupon_rate is not None:
            self.coupon_rate = coupon_rate
        if pay1_bond is not None:
            self.pay1_bond = pay1_bond
        if money_flow_val is not None:
            self.money_flow_val = money_flow_val
        if event_total_vol is not None:
            self.event_total_vol = event_total_vol
        if days_from_dist is not None:
            self.days_from_dist = days_from_dist
        if execution is not None:
            self.execution = execution
        if pay_date is not None:
            self.pay_date = pay_date
        if fix_date is not None:
            self.fix_date = fix_date
        if mty_date is not None:
            self.mty_date = mty_date
        if mty_part is not None:
            self.mty_part = mty_part
        if offer_date is not None:
            self.offer_date = offer_date
        if buy_back_price is not None:
            self.buy_back_price = buy_back_price
        if beg_order is not None:
            self.beg_order = beg_order
        if end_order is not None:
            self.end_order = end_order
        if event_period is not None:
            self.event_period = event_period
        if convert2_fin_tool_id is not None:
            self.convert2_fin_tool_id = convert2_fin_tool_id
        if coefficient is not None:
            self.coefficient = coefficient
        if begin_conv_date is not None:
            self.begin_conv_date = begin_conv_date
        if end_conv_date is not None:
            self.end_conv_date = end_conv_date
        if default_id is not None:
            self.default_id = default_id
        if default_type is not None:
            self.default_type = default_type
        if type_event is not None:
            self.type_event = type_event
        if default_date is not None:
            self.default_date = default_date
        if real_pay_date is not None:
            self.real_pay_date = real_pay_date
        if note is not None:
            self.note = note
        if event_type is not None:
            self.event_type = event_type
        if event_date is not None:
            self.event_date = event_date
        if begin_event_per is not None:
            self.begin_event_per = begin_event_per
        if value is not None:
            self.value = value
        if face_ft_name is not None:
            self.face_ft_name = face_ft_name
        if pay1_security is not None:
            self.pay1_security = pay1_security
        if money_flow_plan is not None:
            self.money_flow_plan = money_flow_plan
        if protocol_date is not None:
            self.protocol_date = protocol_date
        if pay1_bond_frac is not None:
            self.pay1_bond_frac = pay1_bond_frac
        if recomend_pay1_security is not None:
            self.recomend_pay1_security = recomend_pay1_security
        if recomend_rate_date is not None:
            self.recomend_rate_date = recomend_rate_date
        if recomend_fix_date is not None:
            self.recomend_fix_date = recomend_fix_date
        if recomend_pay_date is not None:
            self.recomend_pay_date = recomend_pay_date
        if recomend_pay_date_nominee is not None:
            self.recomend_pay_date_nominee = recomend_pay_date_nominee
        if fintool_type is not None:
            self.fintool_type = fintool_type
        if dividend_currency is not None:
            self.dividend_currency = dividend_currency
        if ex_dividend_date is not None:
            self.ex_dividend_date = ex_dividend_date
        if declared_pay_date_nominee is not None:
            self.declared_pay_date_nominee = declared_pay_date_nominee
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def fintool_rusbonds_type(self):
        """Gets the fintool_rusbonds_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Классификация инструмента по RusBonds  # noqa: E501

        :return: The fintool_rusbonds_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._fintool_rusbonds_type

    @fintool_rusbonds_type.setter
    def fintool_rusbonds_type(self, fintool_rusbonds_type):
        """Sets the fintool_rusbonds_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Классификация инструмента по RusBonds  # noqa: E501

        :param fintool_rusbonds_type: The fintool_rusbonds_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._fintool_rusbonds_type = fintool_rusbonds_type

    @property
    def issuer_rusbonds_type(self):
        """Gets the issuer_rusbonds_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Классификация эмитента по RusBonds  # noqa: E501

        :return: The issuer_rusbonds_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._issuer_rusbonds_type

    @issuer_rusbonds_type.setter
    def issuer_rusbonds_type(self, issuer_rusbonds_type):
        """Sets the issuer_rusbonds_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Классификация эмитента по RusBonds  # noqa: E501

        :param issuer_rusbonds_type: The issuer_rusbonds_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._issuer_rusbonds_type = issuer_rusbonds_type

    @property
    def original_country(self):
        """Gets the original_country of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Идентификатор страны риска в базе Интерфакс  # noqa: E501

        :return: The original_country of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._original_country

    @original_country.setter
    def original_country(self, original_country):
        """Sets the original_country of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Идентификатор страны риска в базе Интерфакс  # noqa: E501

        :param original_country: The original_country of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._original_country = original_country

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Дата обновления сведений по событию  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Дата обновления сведений по событию  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def security_type(self):
        """Gets the security_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Тип выпуска  # noqa: E501

        :return: The security_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Тип выпуска  # noqa: E501

        :param security_type: The security_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._security_type = security_type

    @property
    def private_dist(self):
        """Gets the private_dist of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Признак размещения по закрытой подписке  # noqa: E501

        :return: The private_dist of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: bool
        """
        return self._private_dist

    @private_dist.setter
    def private_dist(self, private_dist):
        """Sets the private_dist of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Признак размещения по закрытой подписке  # noqa: E501

        :param private_dist: The private_dist of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: bool
        """

        self._private_dist = private_dist

    @property
    def country(self):
        """Gets the country of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Страна размещения  # noqa: E501

        :return: The country of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Страна размещения  # noqa: E501

        :param country: The country of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def listing_level(self):
        """Gets the listing_level of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Уровень листинга МБ  # noqa: E501

        :return: The listing_level of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: int
        """
        return self._listing_level

    @listing_level.setter
    def listing_level(self, listing_level):
        """Sets the listing_level of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Уровень листинга МБ  # noqa: E501

        :param listing_level: The listing_level of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: int
        """

        self._listing_level = listing_level

    @property
    def type_convertation(self):
        """Gets the type_convertation of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Тип конвертации  # noqa: E501

        :return: The type_convertation of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._type_convertation

    @type_convertation.setter
    def type_convertation(self, type_convertation):
        """Sets the type_convertation of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Тип конвертации  # noqa: E501

        :param type_convertation: The type_convertation of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._type_convertation = type_convertation

    @property
    def literid_typeoperation(self):
        """Gets the literid_typeoperation of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        ID литеры типа события  # noqa: E501

        :return: The literid_typeoperation of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: int
        """
        return self._literid_typeoperation

    @literid_typeoperation.setter
    def literid_typeoperation(self, literid_typeoperation):
        """Sets the literid_typeoperation of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        ID литеры типа события  # noqa: E501

        :param literid_typeoperation: The literid_typeoperation of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: int
        """

        self._literid_typeoperation = literid_typeoperation

    @property
    def act_code(self):
        """Gets the act_code of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Код КД  # noqa: E501

        :return: The act_code of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._act_code

    @act_code.setter
    def act_code(self, act_code):
        """Sets the act_code of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Код КД  # noqa: E501

        :param act_code: The act_code of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._act_code = act_code

    @property
    def fininst_id(self):
        """Gets the fininst_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Идентификатор эмитента  # noqa: E501

        :return: The fininst_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: int
        """
        return self._fininst_id

    @fininst_id.setter
    def fininst_id(self, fininst_id):
        """Sets the fininst_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Идентификатор эмитента  # noqa: E501

        :param fininst_id: The fininst_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: int
        """

        self._fininst_id = fininst_id

    @property
    def issuer_name(self):
        """Gets the issuer_name of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Наименование эмитента  # noqa: E501

        :return: The issuer_name of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Наименование эмитента  # noqa: E501

        :param issuer_name: The issuer_name of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._issuer_name = issuer_name

    @property
    def id(self):
        """Gets the id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Идентификатор инструмента, введённый пользователем  # noqa: E501

        :return: The id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Идентификатор инструмента, введённый пользователем  # noqa: E501

        :param id: The id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def isi_ncode(self):
        """Gets the isi_ncode of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        ISIN инструмента  # noqa: E501

        :return: The isi_ncode of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._isi_ncode

    @isi_ncode.setter
    def isi_ncode(self, isi_ncode):
        """Sets the isi_ncode of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        ISIN инструмента  # noqa: E501

        :param isi_ncode: The isi_ncode of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._isi_ncode = isi_ncode

    @property
    def reg_code(self):
        """Gets the reg_code of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Регистрационный код  # noqa: E501

        :return: The reg_code of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._reg_code

    @reg_code.setter
    def reg_code(self, reg_code):
        """Sets the reg_code of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Регистрационный код  # noqa: E501

        :param reg_code: The reg_code of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._reg_code = reg_code

    @property
    def nickname(self):
        """Gets the nickname of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Короткое имя инструмента  # noqa: E501

        :return: The nickname of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Короткое имя инструмента  # noqa: E501

        :param nickname: The nickname of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def nr_dcode(self):
        """Gets the nr_dcode of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Код инструмента в НРД  # noqa: E501

        :return: The nr_dcode of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._nr_dcode

    @nr_dcode.setter
    def nr_dcode(self, nr_dcode):
        """Sets the nr_dcode of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Код инструмента в НРД  # noqa: E501

        :param nr_dcode: The nr_dcode of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._nr_dcode = nr_dcode

    @property
    def fin_tool_id(self):
        """Gets the fin_tool_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Идентификатор выпуска бумаги  # noqa: E501

        :return: The fin_tool_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: int
        """
        return self._fin_tool_id

    @fin_tool_id.setter
    def fin_tool_id(self, fin_tool_id):
        """Sets the fin_tool_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Идентификатор выпуска бумаги  # noqa: E501

        :param fin_tool_id: The fin_tool_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: int
        """

        self._fin_tool_id = fin_tool_id

    @property
    def type(self):
        """Gets the type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501


        :return: The type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EfirDataHubModelsModelsBondTimeTableV2Fields.


        :param type: The type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def event_id(self):
        """Gets the event_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Номер события  # noqa: E501

        :return: The event_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Номер события  # noqa: E501

        :param event_id: The event_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: int
        """

        self._event_id = event_id

    @property
    def type_operation(self):
        """Gets the type_operation of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Субтип события  # noqa: E501

        :return: The type_operation of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._type_operation

    @type_operation.setter
    def type_operation(self, type_operation):
        """Sets the type_operation of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Субтип события  # noqa: E501

        :param type_operation: The type_operation of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._type_operation = type_operation

    @property
    def rate_date(self):
        """Gets the rate_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Дата определения даты либо факта события  # noqa: E501

        :return: The rate_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._rate_date

    @rate_date.setter
    def rate_date(self, rate_date):
        """Sets the rate_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Дата определения даты либо факта события  # noqa: E501

        :param rate_date: The rate_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._rate_date = rate_date

    @property
    def begin_period(self):
        """Gets the begin_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Начало купонного периода  # noqa: E501

        :return: The begin_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._begin_period

    @begin_period.setter
    def begin_period(self, begin_period):
        """Sets the begin_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Начало купонного периода  # noqa: E501

        :param begin_period: The begin_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._begin_period = begin_period

    @property
    def end_period(self):
        """Gets the end_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Окончание купонного периода  # noqa: E501

        :return: The end_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._end_period

    @end_period.setter
    def end_period(self, end_period):
        """Sets the end_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Окончание купонного периода  # noqa: E501

        :param end_period: The end_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._end_period = end_period

    @property
    def coupon_period(self):
        """Gets the coupon_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Купонный период  # noqa: E501

        :return: The coupon_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._coupon_period

    @coupon_period.setter
    def coupon_period(self, coupon_period):
        """Sets the coupon_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Купонный период  # noqa: E501

        :param coupon_period: The coupon_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._coupon_period = coupon_period

    @property
    def coupon_rate(self):
        """Gets the coupon_rate of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Ставка купона, процентов годовых  # noqa: E501

        :return: The coupon_rate of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._coupon_rate

    @coupon_rate.setter
    def coupon_rate(self, coupon_rate):
        """Sets the coupon_rate of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Ставка купона, процентов годовых  # noqa: E501

        :param coupon_rate: The coupon_rate of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._coupon_rate = coupon_rate

    @property
    def pay1_bond(self):
        """Gets the pay1_bond of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Выплата на одну облигацию  # noqa: E501

        :return: The pay1_bond of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._pay1_bond

    @pay1_bond.setter
    def pay1_bond(self, pay1_bond):
        """Sets the pay1_bond of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Выплата на одну облигацию  # noqa: E501

        :param pay1_bond: The pay1_bond of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._pay1_bond = pay1_bond

    @property
    def money_flow_val(self):
        """Gets the money_flow_val of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Выплаты на все бумаги, задействованные в событии  # noqa: E501

        :return: The money_flow_val of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._money_flow_val

    @money_flow_val.setter
    def money_flow_val(self, money_flow_val):
        """Sets the money_flow_val of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Выплаты на все бумаги, задействованные в событии  # noqa: E501

        :param money_flow_val: The money_flow_val of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._money_flow_val = money_flow_val

    @property
    def event_total_vol(self):
        """Gets the event_total_vol of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Полное количество бумаг, задействованных в событии  # noqa: E501

        :return: The event_total_vol of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._event_total_vol

    @event_total_vol.setter
    def event_total_vol(self, event_total_vol):
        """Sets the event_total_vol of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Полное количество бумаг, задействованных в событии  # noqa: E501

        :param event_total_vol: The event_total_vol of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._event_total_vol = event_total_vol

    @property
    def days_from_dist(self):
        """Gets the days_from_dist of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Количество дней от даты начала размещения до события  # noqa: E501

        :return: The days_from_dist of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._days_from_dist

    @days_from_dist.setter
    def days_from_dist(self, days_from_dist):
        """Sets the days_from_dist of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Количество дней от даты начала размещения до события  # noqa: E501

        :param days_from_dist: The days_from_dist of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._days_from_dist = days_from_dist

    @property
    def execution(self):
        """Gets the execution of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Признак исполнения  # noqa: E501

        :return: The execution of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._execution

    @execution.setter
    def execution(self, execution):
        """Sets the execution of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Признак исполнения  # noqa: E501

        :param execution: The execution of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._execution = execution

    @property
    def pay_date(self):
        """Gets the pay_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Дата фактического платежа  # noqa: E501

        :return: The pay_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._pay_date

    @pay_date.setter
    def pay_date(self, pay_date):
        """Sets the pay_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Дата фактического платежа  # noqa: E501

        :param pay_date: The pay_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._pay_date = pay_date

    @property
    def fix_date(self):
        """Gets the fix_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Дата фиксации владельцев для участия в событии  # noqa: E501

        :return: The fix_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._fix_date

    @fix_date.setter
    def fix_date(self, fix_date):
        """Sets the fix_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Дата фиксации владельцев для участия в событии  # noqa: E501

        :param fix_date: The fix_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._fix_date = fix_date

    @property
    def mty_date(self):
        """Gets the mty_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Погашение (части) номинала  # noqa: E501

        :return: The mty_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._mty_date

    @mty_date.setter
    def mty_date(self, mty_date):
        """Sets the mty_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Погашение (части) номинала  # noqa: E501

        :param mty_date: The mty_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._mty_date = mty_date

    @property
    def mty_part(self):
        """Gets the mty_part of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Процент погашения  # noqa: E501

        :return: The mty_part of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._mty_part

    @mty_part.setter
    def mty_part(self, mty_part):
        """Sets the mty_part of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Процент погашения  # noqa: E501

        :param mty_part: The mty_part of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._mty_part = mty_part

    @property
    def offer_date(self):
        """Gets the offer_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Расчетная дата выкупа  # noqa: E501

        :return: The offer_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._offer_date

    @offer_date.setter
    def offer_date(self, offer_date):
        """Sets the offer_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Расчетная дата выкупа  # noqa: E501

        :param offer_date: The offer_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._offer_date = offer_date

    @property
    def buy_back_price(self):
        """Gets the buy_back_price of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Цена выкупа, в процентах от номинала(чистая)  # noqa: E501

        :return: The buy_back_price of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._buy_back_price

    @buy_back_price.setter
    def buy_back_price(self, buy_back_price):
        """Sets the buy_back_price of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Цена выкупа, в процентах от номинала(чистая)  # noqa: E501

        :param buy_back_price: The buy_back_price of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._buy_back_price = buy_back_price

    @property
    def beg_order(self):
        """Gets the beg_order of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Начало периода предъявления к выкупу  # noqa: E501

        :return: The beg_order of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._beg_order

    @beg_order.setter
    def beg_order(self, beg_order):
        """Sets the beg_order of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Начало периода предъявления к выкупу  # noqa: E501

        :param beg_order: The beg_order of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._beg_order = beg_order

    @property
    def end_order(self):
        """Gets the end_order of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Окончание периода предъявления к выкупу  # noqa: E501

        :return: The end_order of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._end_order

    @end_order.setter
    def end_order(self, end_order):
        """Sets the end_order of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Окончание периода предъявления к выкупу  # noqa: E501

        :param end_order: The end_order of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._end_order = end_order

    @property
    def event_period(self):
        """Gets the event_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Период события  # noqa: E501

        :return: The event_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._event_period

    @event_period.setter
    def event_period(self, event_period):
        """Sets the event_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Период события  # noqa: E501

        :param event_period: The event_period of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._event_period = event_period

    @property
    def convert2_fin_tool_id(self):
        """Gets the convert2_fin_tool_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        ID выпуска бумаг, в который произведена конвертация  # noqa: E501

        :return: The convert2_fin_tool_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._convert2_fin_tool_id

    @convert2_fin_tool_id.setter
    def convert2_fin_tool_id(self, convert2_fin_tool_id):
        """Sets the convert2_fin_tool_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        ID выпуска бумаг, в который произведена конвертация  # noqa: E501

        :param convert2_fin_tool_id: The convert2_fin_tool_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._convert2_fin_tool_id = convert2_fin_tool_id

    @property
    def coefficient(self):
        """Gets the coefficient of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Коэффициент, с которым происходит конвертация  # noqa: E501

        :return: The coefficient of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._coefficient

    @coefficient.setter
    def coefficient(self, coefficient):
        """Sets the coefficient of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Коэффициент, с которым происходит конвертация  # noqa: E501

        :param coefficient: The coefficient of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._coefficient = coefficient

    @property
    def begin_conv_date(self):
        """Gets the begin_conv_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Дата начала конвертации  # noqa: E501

        :return: The begin_conv_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._begin_conv_date

    @begin_conv_date.setter
    def begin_conv_date(self, begin_conv_date):
        """Sets the begin_conv_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Дата начала конвертации  # noqa: E501

        :param begin_conv_date: The begin_conv_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._begin_conv_date = begin_conv_date

    @property
    def end_conv_date(self):
        """Gets the end_conv_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Окончание конвертации  # noqa: E501

        :return: The end_conv_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._end_conv_date

    @end_conv_date.setter
    def end_conv_date(self, end_conv_date):
        """Sets the end_conv_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Окончание конвертации  # noqa: E501

        :param end_conv_date: The end_conv_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._end_conv_date = end_conv_date

    @property
    def default_id(self):
        """Gets the default_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Идентификатор записи в таблице  # noqa: E501

        :return: The default_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._default_id

    @default_id.setter
    def default_id(self, default_id):
        """Sets the default_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Идентификатор записи в таблице  # noqa: E501

        :param default_id: The default_id of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._default_id = default_id

    @property
    def default_type(self):
        """Gets the default_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Тип дефолта:  - B - Блокировка  - D - Дефолт  - R - Блокировка РФ  - S - Соглашение  - T - Технический дефолт  # noqa: E501

        :return: The default_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._default_type

    @default_type.setter
    def default_type(self, default_type):
        """Sets the default_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Тип дефолта:  - B - Блокировка  - D - Дефолт  - R - Блокировка РФ  - S - Соглашение  - T - Технический дефолт  # noqa: E501

        :param default_type: The default_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._default_type = default_type

    @property
    def type_event(self):
        """Gets the type_event of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Тип события:  - B - Досрочный выкуп  - C - Купонная выплата  - M - Погашение номинала или части номинала  # noqa: E501

        :return: The type_event of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._type_event

    @type_event.setter
    def type_event(self, type_event):
        """Sets the type_event of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Тип события:  - B - Досрочный выкуп  - C - Купонная выплата  - M - Погашение номинала или части номинала  # noqa: E501

        :param type_event: The type_event of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._type_event = type_event

    @property
    def default_date(self):
        """Gets the default_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Дата дефолта  # noqa: E501

        :return: The default_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._default_date

    @default_date.setter
    def default_date(self, default_date):
        """Sets the default_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Дата дефолта  # noqa: E501

        :param default_date: The default_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._default_date = default_date

    @property
    def real_pay_date(self):
        """Gets the real_pay_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Дата реального исполнения обязательства  # noqa: E501

        :return: The real_pay_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._real_pay_date

    @real_pay_date.setter
    def real_pay_date(self, real_pay_date):
        """Sets the real_pay_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Дата реального исполнения обязательства  # noqa: E501

        :param real_pay_date: The real_pay_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._real_pay_date = real_pay_date

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Примечание  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Примечание  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def event_type(self):
        """Gets the event_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Тип события: CPN, CALL, MTY, CONV, DIV  # noqa: E501

        :return: The event_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Тип события: CPN, CALL, MTY, CONV, DIV  # noqa: E501

        :param event_type: The event_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def event_date(self):
        """Gets the event_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Дата события  # noqa: E501

        :return: The event_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Дата события  # noqa: E501

        :param event_date: The event_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._event_date = event_date

    @property
    def begin_event_per(self):
        """Gets the begin_event_per of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Дата начала периода события  # noqa: E501

        :return: The begin_event_per of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._begin_event_per

    @begin_event_per.setter
    def begin_event_per(self, begin_event_per):
        """Sets the begin_event_per of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Дата начала периода события  # noqa: E501

        :param begin_event_per: The begin_event_per of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._begin_event_per = begin_event_per

    @property
    def value(self):
        """Gets the value of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Ставка купона, доля номинала, цена выкупа или коэффициент конвертации  # noqa: E501

        :return: The value of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Ставка купона, доля номинала, цена выкупа или коэффициент конвертации  # noqa: E501

        :param value: The value of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def face_ft_name(self):
        """Gets the face_ft_name of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Валюта номинала  # noqa: E501

        :return: The face_ft_name of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._face_ft_name

    @face_ft_name.setter
    def face_ft_name(self, face_ft_name):
        """Sets the face_ft_name of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Валюта номинала  # noqa: E501

        :param face_ft_name: The face_ft_name of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._face_ft_name = face_ft_name

    @property
    def pay1_security(self):
        """Gets the pay1_security of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Выплата на одну ценную бумагу  # noqa: E501

        :return: The pay1_security of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._pay1_security

    @pay1_security.setter
    def pay1_security(self, pay1_security):
        """Sets the pay1_security of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Выплата на одну ценную бумагу  # noqa: E501

        :param pay1_security: The pay1_security of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._pay1_security = pay1_security

    @property
    def money_flow_plan(self):
        """Gets the money_flow_plan of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Выплаты на все бумаги (планируемая величина)  # noqa: E501

        :return: The money_flow_plan of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._money_flow_plan

    @money_flow_plan.setter
    def money_flow_plan(self, money_flow_plan):
        """Sets the money_flow_plan of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Выплаты на все бумаги (планируемая величина)  # noqa: E501

        :param money_flow_plan: The money_flow_plan of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._money_flow_plan = money_flow_plan

    @property
    def protocol_date(self):
        """Gets the protocol_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Дата публикации протокола общего собрания  # noqa: E501

        :return: The protocol_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._protocol_date

    @protocol_date.setter
    def protocol_date(self, protocol_date):
        """Sets the protocol_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Дата публикации протокола общего собрания  # noqa: E501

        :param protocol_date: The protocol_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._protocol_date = protocol_date

    @property
    def pay1_bond_frac(self):
        """Gets the pay1_bond_frac of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Выплата на одну облигацию (без округл.)  # noqa: E501

        :return: The pay1_bond_frac of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._pay1_bond_frac

    @pay1_bond_frac.setter
    def pay1_bond_frac(self, pay1_bond_frac):
        """Sets the pay1_bond_frac of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Выплата на одну облигацию (без округл.)  # noqa: E501

        :param pay1_bond_frac: The pay1_bond_frac of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._pay1_bond_frac = pay1_bond_frac

    @property
    def recomend_pay1_security(self):
        """Gets the recomend_pay1_security of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Рекомендация совета директоров по выплате дивидендов на одну акцию, в валюте номинала  # noqa: E501

        :return: The recomend_pay1_security of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: float
        """
        return self._recomend_pay1_security

    @recomend_pay1_security.setter
    def recomend_pay1_security(self, recomend_pay1_security):
        """Sets the recomend_pay1_security of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Рекомендация совета директоров по выплате дивидендов на одну акцию, в валюте номинала  # noqa: E501

        :param recomend_pay1_security: The recomend_pay1_security of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: float
        """

        self._recomend_pay1_security = recomend_pay1_security

    @property
    def recomend_rate_date(self):
        """Gets the recomend_rate_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Дата рекомендации совета директоров по выплате дивидендов  # noqa: E501

        :return: The recomend_rate_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._recomend_rate_date

    @recomend_rate_date.setter
    def recomend_rate_date(self, recomend_rate_date):
        """Sets the recomend_rate_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Дата рекомендации совета директоров по выплате дивидендов  # noqa: E501

        :param recomend_rate_date: The recomend_rate_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._recomend_rate_date = recomend_rate_date

    @property
    def recomend_fix_date(self):
        """Gets the recomend_fix_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Рекомендация совета директоров по дате составления списка владельцев для выплаты дивидендов  # noqa: E501

        :return: The recomend_fix_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._recomend_fix_date

    @recomend_fix_date.setter
    def recomend_fix_date(self, recomend_fix_date):
        """Sets the recomend_fix_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Рекомендация совета директоров по дате составления списка владельцев для выплаты дивидендов  # noqa: E501

        :param recomend_fix_date: The recomend_fix_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._recomend_fix_date = recomend_fix_date

    @property
    def recomend_pay_date(self):
        """Gets the recomend_pay_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Рекомендация совета директоров по дате выплаты дивидендов  # noqa: E501

        :return: The recomend_pay_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._recomend_pay_date

    @recomend_pay_date.setter
    def recomend_pay_date(self, recomend_pay_date):
        """Sets the recomend_pay_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Рекомендация совета директоров по дате выплаты дивидендов  # noqa: E501

        :param recomend_pay_date: The recomend_pay_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._recomend_pay_date = recomend_pay_date

    @property
    def recomend_pay_date_nominee(self):
        """Gets the recomend_pay_date_nominee of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Рекомендация совета директоров по дате выплаты дивидендов номинальным держателям  # noqa: E501

        :return: The recomend_pay_date_nominee of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._recomend_pay_date_nominee

    @recomend_pay_date_nominee.setter
    def recomend_pay_date_nominee(self, recomend_pay_date_nominee):
        """Sets the recomend_pay_date_nominee of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Рекомендация совета директоров по дате выплаты дивидендов номинальным держателям  # noqa: E501

        :param recomend_pay_date_nominee: The recomend_pay_date_nominee of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._recomend_pay_date_nominee = recomend_pay_date_nominee

    @property
    def fintool_type(self):
        """Gets the fintool_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Тип торгового инструмента  # noqa: E501

        :return: The fintool_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._fintool_type

    @fintool_type.setter
    def fintool_type(self, fintool_type):
        """Sets the fintool_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Тип торгового инструмента  # noqa: E501

        :param fintool_type: The fintool_type of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._fintool_type = fintool_type

    @property
    def dividend_currency(self):
        """Gets the dividend_currency of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Валюта выплаты дивидендов  # noqa: E501

        :return: The dividend_currency of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: str
        """
        return self._dividend_currency

    @dividend_currency.setter
    def dividend_currency(self, dividend_currency):
        """Sets the dividend_currency of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Валюта выплаты дивидендов  # noqa: E501

        :param dividend_currency: The dividend_currency of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: str
        """

        self._dividend_currency = dividend_currency

    @property
    def ex_dividend_date(self):
        """Gets the ex_dividend_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Экс-дивидендная дата - дата, начиная с которой ценные бумаги начинают торговаться без учета объявленных дивидендов  # noqa: E501

        :return: The ex_dividend_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._ex_dividend_date

    @ex_dividend_date.setter
    def ex_dividend_date(self, ex_dividend_date):
        """Sets the ex_dividend_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Экс-дивидендная дата - дата, начиная с которой ценные бумаги начинают торговаться без учета объявленных дивидендов  # noqa: E501

        :param ex_dividend_date: The ex_dividend_date of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._ex_dividend_date = ex_dividend_date

    @property
    def declared_pay_date_nominee(self):
        """Gets the declared_pay_date_nominee of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Объявленная дата выплаты  # noqa: E501

        :return: The declared_pay_date_nominee of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: datetime
        """
        return self._declared_pay_date_nominee

    @declared_pay_date_nominee.setter
    def declared_pay_date_nominee(self, declared_pay_date_nominee):
        """Sets the declared_pay_date_nominee of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Объявленная дата выплаты  # noqa: E501

        :param declared_pay_date_nominee: The declared_pay_date_nominee of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: datetime
        """

        self._declared_pay_date_nominee = declared_pay_date_nominee

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsBondTimeTableV2Fields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsBondTimeTableV2Fields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondTimeTableV2Fields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondTimeTableV2Fields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
