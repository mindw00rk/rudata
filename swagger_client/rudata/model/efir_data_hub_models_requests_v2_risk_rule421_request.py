# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2RiskRule421Request(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'isin': 'str',
        '_date': 'datetime',
        'use_frozen_dates': 'bool',
        'b_b_country': 'str',
        'vla_edition': 'str',
        'ir_pd_level': 'int',
        'use_frozen_max30d_loss': 'bool',
        'max30d_loss_source_name': 'str'
    }

    attribute_map = {
        'isin': 'isin',
        '_date': 'date',
        'use_frozen_dates': 'useFrozenDates',
        'b_b_country': 'bBCountry',
        'vla_edition': 'vla_edition',
        'ir_pd_level': 'ir_pd_level',
        'use_frozen_max30d_loss': 'useFrozenMax30dLoss',
        'max30d_loss_source_name': 'max30dLossSourceName'
    }

    def __init__(self, isin=None, _date=None, use_frozen_dates=None, b_b_country=None, vla_edition=None, ir_pd_level=None, use_frozen_max30d_loss=False, max30d_loss_source_name=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2RiskRule421Request - a model defined in Swagger"""  # noqa: E501
        self._isin = None
        self.__date = None
        self._use_frozen_dates = None
        self._b_b_country = None
        self._vla_edition = None
        self._ir_pd_level = None
        self._use_frozen_max30d_loss = None
        self._max30d_loss_source_name = None
        self.discriminator = None
        self.isin = isin
        self._date = _date
        if use_frozen_dates is not None:
            self.use_frozen_dates = use_frozen_dates
        if b_b_country is not None:
            self.b_b_country = b_b_country
        if vla_edition is not None:
            self.vla_edition = vla_edition
        if ir_pd_level is not None:
            self.ir_pd_level = ir_pd_level
        if use_frozen_max30d_loss is not None:
            self.use_frozen_max30d_loss = use_frozen_max30d_loss
        if max30d_loss_source_name is not None:
            self.max30d_loss_source_name = max30d_loss_source_name

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501

        ISIN (обязательный)  # noqa: E501

        :return: The isin of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsRequestsV2RiskRule421Request.

        ISIN (обязательный)  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :type: str
        """
        if isin is None:
            raise ValueError("Invalid value for `isin`, must not be `None`")  # noqa: E501

        self._isin = isin

    @property
    def _date(self):
        """Gets the _date of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501

        Дата (обязательный)  # noqa: E501

        :return: The _date of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EfirDataHubModelsRequestsV2RiskRule421Request.

        Дата (обязательный)  # noqa: E501

        :param _date: The _date of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def use_frozen_dates(self):
        """Gets the use_frozen_dates of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501

        TRUE - использовать даты рейтингов  # noqa: E501

        :return: The use_frozen_dates of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :rtype: bool
        """
        return self._use_frozen_dates

    @use_frozen_dates.setter
    def use_frozen_dates(self, use_frozen_dates):
        """Sets the use_frozen_dates of this EfirDataHubModelsRequestsV2RiskRule421Request.

        TRUE - использовать даты рейтингов  # noqa: E501

        :param use_frozen_dates: The use_frozen_dates of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :type: bool
        """

        self._use_frozen_dates = use_frozen_dates

    @property
    def b_b_country(self):
        """Gets the b_b_country of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501

        Двухбуквенный код страны филиала банка (Alfa-2), например, KZ (необязательный), по умолчанию = RU.  # noqa: E501

        :return: The b_b_country of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :rtype: str
        """
        return self._b_b_country

    @b_b_country.setter
    def b_b_country(self, b_b_country):
        """Sets the b_b_country of this EfirDataHubModelsRequestsV2RiskRule421Request.

        Двухбуквенный код страны филиала банка (Alfa-2), например, KZ (необязательный), по умолчанию = RU.  # noqa: E501

        :param b_b_country: The b_b_country of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :type: str
        """

        self._b_b_country = b_b_country

    @property
    def vla_edition(self):
        """Gets the vla_edition of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501

        Редакция ВЛА  # noqa: E501

        :return: The vla_edition of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :rtype: str
        """
        return self._vla_edition

    @vla_edition.setter
    def vla_edition(self, vla_edition):
        """Sets the vla_edition of this EfirDataHubModelsRequestsV2RiskRule421Request.

        Редакция ВЛА  # noqa: E501

        :param vla_edition: The vla_edition of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :type: str
        """

        self._vla_edition = vla_edition

    @property
    def ir_pd_level(self):
        """Gets the ir_pd_level of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501

        Уровень вероятности дефолта при использовании ПВР.  Принимает целые положительные значения.   Если значение не задано, то не используется.  # noqa: E501

        :return: The ir_pd_level of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :rtype: int
        """
        return self._ir_pd_level

    @ir_pd_level.setter
    def ir_pd_level(self, ir_pd_level):
        """Sets the ir_pd_level of this EfirDataHubModelsRequestsV2RiskRule421Request.

        Уровень вероятности дефолта при использовании ПВР.  Принимает целые положительные значения.   Если значение не задано, то не используется.  # noqa: E501

        :param ir_pd_level: The ir_pd_level of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :type: int
        """

        self._ir_pd_level = ir_pd_level

    @property
    def use_frozen_max30d_loss(self):
        """Gets the use_frozen_max30d_loss of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501

        Флаг использования значения обесценения на 18.02.2022  # noqa: E501

        :return: The use_frozen_max30d_loss of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :rtype: bool
        """
        return self._use_frozen_max30d_loss

    @use_frozen_max30d_loss.setter
    def use_frozen_max30d_loss(self, use_frozen_max30d_loss):
        """Sets the use_frozen_max30d_loss of this EfirDataHubModelsRequestsV2RiskRule421Request.

        Флаг использования значения обесценения на 18.02.2022  # noqa: E501

        :param use_frozen_max30d_loss: The use_frozen_max30d_loss of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :type: bool
        """

        self._use_frozen_max30d_loss = use_frozen_max30d_loss

    @property
    def max30d_loss_source_name(self):
        """Gets the max30d_loss_source_name of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501

        Наименование источника данных, по которым рассчитаны значения обесценения:  - 'main' - источник, соответствующий основному торговому инструменту. Приоритет 1.  - 'pcnrd' - ценовой центр НРД. Приоритет 2.  - 'rudip' - данные RUDIP/MIFID. Приоритет 3.  - 'moex' - данные Московской биржи. Приоритет 4.  - Наименование не указано - значение с наивысшим приоритетом из существующих на дату.  # noqa: E501

        :return: The max30d_loss_source_name of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :rtype: str
        """
        return self._max30d_loss_source_name

    @max30d_loss_source_name.setter
    def max30d_loss_source_name(self, max30d_loss_source_name):
        """Sets the max30d_loss_source_name of this EfirDataHubModelsRequestsV2RiskRule421Request.

        Наименование источника данных, по которым рассчитаны значения обесценения:  - 'main' - источник, соответствующий основному торговому инструменту. Приоритет 1.  - 'pcnrd' - ценовой центр НРД. Приоритет 2.  - 'rudip' - данные RUDIP/MIFID. Приоритет 3.  - 'moex' - данные Московской биржи. Приоритет 4.  - Наименование не указано - значение с наивысшим приоритетом из существующих на дату.  # noqa: E501

        :param max30d_loss_source_name: The max30d_loss_source_name of this EfirDataHubModelsRequestsV2RiskRule421Request.  # noqa: E501
        :type: str
        """

        self._max30d_loss_source_name = max30d_loss_source_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2RiskRule421Request, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2RiskRule421Request):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
