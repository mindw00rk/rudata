# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsBondOffersFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_fintool': 'int',
        'id_offer': 'int',
        'beg_order': 'datetime',
        'end_order': 'datetime',
        'offer_date': 'datetime',
        'end_offer_date': 'datetime',
        'days_from_dist': 'int',
        'rate_date': 'datetime',
        'operation_type': 'str',
        'buy_back_price': 'float',
        'buy_back_vol': 'float',
        'update_date': 'datetime',
        'buy_back_limit_vol': 'int',
        'buy_back_bid_vol': 'int',
        'buy_back_bid_ratio': 'float',
        'note': 'str',
        'counter': 'int',
        'rn': 'int'
    }

    attribute_map = {
        'id_fintool': 'id_fintool',
        'id_offer': 'id_offer',
        'beg_order': 'beg_order',
        'end_order': 'end_order',
        'offer_date': 'offer_date',
        'end_offer_date': 'end_offer_date',
        'days_from_dist': 'days_from_dist',
        'rate_date': 'rate_date',
        'operation_type': 'operation_type',
        'buy_back_price': 'buy_back_price',
        'buy_back_vol': 'buy_back_vol',
        'update_date': 'update_date',
        'buy_back_limit_vol': 'buy_back_limit_vol',
        'buy_back_bid_vol': 'buy_back_bid_vol',
        'buy_back_bid_ratio': 'buy_back_bid_ratio',
        'note': 'note',
        'counter': 'counter',
        'rn': 'rn'
    }

    def __init__(self, id_fintool=None, id_offer=None, beg_order=None, end_order=None, offer_date=None, end_offer_date=None, days_from_dist=None, rate_date=None, operation_type=None, buy_back_price=None, buy_back_vol=None, update_date=None, buy_back_limit_vol=None, buy_back_bid_vol=None, buy_back_bid_ratio=None, note=None, counter=None, rn=None):  # noqa: E501
        """EfirDataHubModelsModelsBondOffersFields - a model defined in Swagger"""  # noqa: E501
        self._id_fintool = None
        self._id_offer = None
        self._beg_order = None
        self._end_order = None
        self._offer_date = None
        self._end_offer_date = None
        self._days_from_dist = None
        self._rate_date = None
        self._operation_type = None
        self._buy_back_price = None
        self._buy_back_vol = None
        self._update_date = None
        self._buy_back_limit_vol = None
        self._buy_back_bid_vol = None
        self._buy_back_bid_ratio = None
        self._note = None
        self._counter = None
        self._rn = None
        self.discriminator = None
        if id_fintool is not None:
            self.id_fintool = id_fintool
        if id_offer is not None:
            self.id_offer = id_offer
        if beg_order is not None:
            self.beg_order = beg_order
        if end_order is not None:
            self.end_order = end_order
        if offer_date is not None:
            self.offer_date = offer_date
        if end_offer_date is not None:
            self.end_offer_date = end_offer_date
        if days_from_dist is not None:
            self.days_from_dist = days_from_dist
        if rate_date is not None:
            self.rate_date = rate_date
        if operation_type is not None:
            self.operation_type = operation_type
        if buy_back_price is not None:
            self.buy_back_price = buy_back_price
        if buy_back_vol is not None:
            self.buy_back_vol = buy_back_vol
        if update_date is not None:
            self.update_date = update_date
        if buy_back_limit_vol is not None:
            self.buy_back_limit_vol = buy_back_limit_vol
        if buy_back_bid_vol is not None:
            self.buy_back_bid_vol = buy_back_bid_vol
        if buy_back_bid_ratio is not None:
            self.buy_back_bid_ratio = buy_back_bid_ratio
        if note is not None:
            self.note = note
        if counter is not None:
            self.counter = counter
        if rn is not None:
            self.rn = rn

    @property
    def id_fintool(self):
        """Gets the id_fintool of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Идентификатор облигации  # noqa: E501

        :return: The id_fintool of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: int
        """
        return self._id_fintool

    @id_fintool.setter
    def id_fintool(self, id_fintool):
        """Sets the id_fintool of this EfirDataHubModelsModelsBondOffersFields.

        Идентификатор облигации  # noqa: E501

        :param id_fintool: The id_fintool of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: int
        """

        self._id_fintool = id_fintool

    @property
    def id_offer(self):
        """Gets the id_offer of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Номер досрочного выкупа (оферты)  # noqa: E501

        :return: The id_offer of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: int
        """
        return self._id_offer

    @id_offer.setter
    def id_offer(self, id_offer):
        """Sets the id_offer of this EfirDataHubModelsModelsBondOffersFields.

        Номер досрочного выкупа (оферты)  # noqa: E501

        :param id_offer: The id_offer of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: int
        """

        self._id_offer = id_offer

    @property
    def beg_order(self):
        """Gets the beg_order of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Дата начала периода предъявления облигаций к выкупу  # noqa: E501

        :return: The beg_order of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: datetime
        """
        return self._beg_order

    @beg_order.setter
    def beg_order(self, beg_order):
        """Sets the beg_order of this EfirDataHubModelsModelsBondOffersFields.

        Дата начала периода предъявления облигаций к выкупу  # noqa: E501

        :param beg_order: The beg_order of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: datetime
        """

        self._beg_order = beg_order

    @property
    def end_order(self):
        """Gets the end_order of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Дата окончания периода предъявления облигаций к выкупу  # noqa: E501

        :return: The end_order of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: datetime
        """
        return self._end_order

    @end_order.setter
    def end_order(self, end_order):
        """Sets the end_order of this EfirDataHubModelsModelsBondOffersFields.

        Дата окончания периода предъявления облигаций к выкупу  # noqa: E501

        :param end_order: The end_order of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: datetime
        """

        self._end_order = end_order

    @property
    def offer_date(self):
        """Gets the offer_date of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Расчетная дата выкупа  # noqa: E501

        :return: The offer_date of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: datetime
        """
        return self._offer_date

    @offer_date.setter
    def offer_date(self, offer_date):
        """Sets the offer_date of this EfirDataHubModelsModelsBondOffersFields.

        Расчетная дата выкупа  # noqa: E501

        :param offer_date: The offer_date of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: datetime
        """

        self._offer_date = offer_date

    @property
    def end_offer_date(self):
        """Gets the end_offer_date of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Дата реального выкупа  # noqa: E501

        :return: The end_offer_date of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: datetime
        """
        return self._end_offer_date

    @end_offer_date.setter
    def end_offer_date(self, end_offer_date):
        """Sets the end_offer_date of this EfirDataHubModelsModelsBondOffersFields.

        Дата реального выкупа  # noqa: E501

        :param end_offer_date: The end_offer_date of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: datetime
        """

        self._end_offer_date = end_offer_date

    @property
    def days_from_dist(self):
        """Gets the days_from_dist of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Количество дней от размещения до расчетной даты выкупа  # noqa: E501

        :return: The days_from_dist of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: int
        """
        return self._days_from_dist

    @days_from_dist.setter
    def days_from_dist(self, days_from_dist):
        """Sets the days_from_dist of this EfirDataHubModelsModelsBondOffersFields.

        Количество дней от размещения до расчетной даты выкупа  # noqa: E501

        :param days_from_dist: The days_from_dist of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: int
        """

        self._days_from_dist = days_from_dist

    @property
    def rate_date(self):
        """Gets the rate_date of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Дата объявления досрочного выкупа/оферты  # noqa: E501

        :return: The rate_date of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: datetime
        """
        return self._rate_date

    @rate_date.setter
    def rate_date(self, rate_date):
        """Sets the rate_date of this EfirDataHubModelsModelsBondOffersFields.

        Дата объявления досрочного выкупа/оферты  # noqa: E501

        :param rate_date: The rate_date of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: datetime
        """

        self._rate_date = rate_date

    @property
    def operation_type(self):
        """Gets the operation_type of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Тип выкупа  # noqa: E501

        :return: The operation_type of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this EfirDataHubModelsModelsBondOffersFields.

        Тип выкупа  # noqa: E501

        :param operation_type: The operation_type of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: str
        """

        self._operation_type = operation_type

    @property
    def buy_back_price(self):
        """Gets the buy_back_price of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Цена выкупа, в процентах от номинала, чистая  # noqa: E501

        :return: The buy_back_price of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: float
        """
        return self._buy_back_price

    @buy_back_price.setter
    def buy_back_price(self, buy_back_price):
        """Sets the buy_back_price of this EfirDataHubModelsModelsBondOffersFields.

        Цена выкупа, в процентах от номинала, чистая  # noqa: E501

        :param buy_back_price: The buy_back_price of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: float
        """

        self._buy_back_price = buy_back_price

    @property
    def buy_back_vol(self):
        """Gets the buy_back_vol of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Объем выкупленных облигаций, штук  # noqa: E501

        :return: The buy_back_vol of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: float
        """
        return self._buy_back_vol

    @buy_back_vol.setter
    def buy_back_vol(self, buy_back_vol):
        """Sets the buy_back_vol of this EfirDataHubModelsModelsBondOffersFields.

        Объем выкупленных облигаций, штук  # noqa: E501

        :param buy_back_vol: The buy_back_vol of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: float
        """

        self._buy_back_vol = buy_back_vol

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Дата/время последнего изменения записи  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsBondOffersFields.

        Дата/время последнего изменения записи  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def buy_back_limit_vol(self):
        """Gets the buy_back_limit_vol of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Предельный объем выкупаемых облигаций, штук  # noqa: E501

        :return: The buy_back_limit_vol of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: int
        """
        return self._buy_back_limit_vol

    @buy_back_limit_vol.setter
    def buy_back_limit_vol(self, buy_back_limit_vol):
        """Sets the buy_back_limit_vol of this EfirDataHubModelsModelsBondOffersFields.

        Предельный объем выкупаемых облигаций, штук  # noqa: E501

        :param buy_back_limit_vol: The buy_back_limit_vol of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: int
        """

        self._buy_back_limit_vol = buy_back_limit_vol

    @property
    def buy_back_bid_vol(self):
        """Gets the buy_back_bid_vol of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Общий объем предъявленных к выкупу облигаций, штук  # noqa: E501

        :return: The buy_back_bid_vol of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: int
        """
        return self._buy_back_bid_vol

    @buy_back_bid_vol.setter
    def buy_back_bid_vol(self, buy_back_bid_vol):
        """Sets the buy_back_bid_vol of this EfirDataHubModelsModelsBondOffersFields.

        Общий объем предъявленных к выкупу облигаций, штук  # noqa: E501

        :param buy_back_bid_vol: The buy_back_bid_vol of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: int
        """

        self._buy_back_bid_vol = buy_back_bid_vol

    @property
    def buy_back_bid_ratio(self):
        """Gets the buy_back_bid_ratio of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Коэффициент удовлетворения заявок на выкуп облигаций  # noqa: E501

        :return: The buy_back_bid_ratio of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: float
        """
        return self._buy_back_bid_ratio

    @buy_back_bid_ratio.setter
    def buy_back_bid_ratio(self, buy_back_bid_ratio):
        """Sets the buy_back_bid_ratio of this EfirDataHubModelsModelsBondOffersFields.

        Коэффициент удовлетворения заявок на выкуп облигаций  # noqa: E501

        :param buy_back_bid_ratio: The buy_back_bid_ratio of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: float
        """

        self._buy_back_bid_ratio = buy_back_bid_ratio

    @property
    def note(self):
        """Gets the note of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Примечание  # noqa: E501

        :return: The note of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EfirDataHubModelsModelsBondOffersFields.

        Примечание  # noqa: E501

        :param note: The note of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def counter(self):
        """Gets the counter of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Общее количество записей в выборке  # noqa: E501

        :return: The counter of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EfirDataHubModelsModelsBondOffersFields.

        Общее количество записей в выборке  # noqa: E501

        :param counter: The counter of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def rn(self):
        """Gets the rn of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501

        Номер записи в выборке  # noqa: E501

        :return: The rn of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :rtype: int
        """
        return self._rn

    @rn.setter
    def rn(self, rn):
        """Sets the rn of this EfirDataHubModelsModelsBondOffersFields.

        Номер записи в выборке  # noqa: E501

        :param rn: The rn of this EfirDataHubModelsModelsBondOffersFields.  # noqa: E501
        :type: int
        """

        self._rn = rn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsBondOffersFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsBondOffersFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
