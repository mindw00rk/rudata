# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsDictionaryCommodityCodeFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_code': 'str',
        'classifier': 'str',
        'efir_code': 'str',
        'fin_tool_short_name_rus': 'str',
        'fin_tool_short_name_eng': 'str',
        'fintool_type': 'str',
        'nominal_currency': 'str',
        'pfi_currency': 'str',
        'timing_group': 'int',
        'percent_risk_type': 'AllOfEfirDataHubModelsModelsDictionaryCommodityCodeFieldsPercentRiskType',
        'has_fond_risk': 'bool',
        'has_commodity_risk': 'bool'
    }

    attribute_map = {
        'user_code': 'userCode',
        'classifier': 'classifier',
        'efir_code': 'efirCode',
        'fin_tool_short_name_rus': 'finToolShortNameRus',
        'fin_tool_short_name_eng': 'finToolShortNameEng',
        'fintool_type': 'fintoolType',
        'nominal_currency': 'nominalCurrency',
        'pfi_currency': 'pfiCurrency',
        'timing_group': 'timingGroup',
        'percent_risk_type': 'percentRiskType',
        'has_fond_risk': 'hasFondRisk',
        'has_commodity_risk': 'hasCommodityRisk'
    }

    def __init__(self, user_code=None, classifier=None, efir_code=None, fin_tool_short_name_rus=None, fin_tool_short_name_eng=None, fintool_type=None, nominal_currency=None, pfi_currency=None, timing_group=None, percent_risk_type=None, has_fond_risk=None, has_commodity_risk=None):  # noqa: E501
        """EfirDataHubModelsModelsDictionaryCommodityCodeFields - a model defined in Swagger"""  # noqa: E501
        self._user_code = None
        self._classifier = None
        self._efir_code = None
        self._fin_tool_short_name_rus = None
        self._fin_tool_short_name_eng = None
        self._fintool_type = None
        self._nominal_currency = None
        self._pfi_currency = None
        self._timing_group = None
        self._percent_risk_type = None
        self._has_fond_risk = None
        self._has_commodity_risk = None
        self.discriminator = None
        if user_code is not None:
            self.user_code = user_code
        if classifier is not None:
            self.classifier = classifier
        if efir_code is not None:
            self.efir_code = efir_code
        if fin_tool_short_name_rus is not None:
            self.fin_tool_short_name_rus = fin_tool_short_name_rus
        if fin_tool_short_name_eng is not None:
            self.fin_tool_short_name_eng = fin_tool_short_name_eng
        if fintool_type is not None:
            self.fintool_type = fintool_type
        if nominal_currency is not None:
            self.nominal_currency = nominal_currency
        if pfi_currency is not None:
            self.pfi_currency = pfi_currency
        if timing_group is not None:
            self.timing_group = timing_group
        if percent_risk_type is not None:
            self.percent_risk_type = percent_risk_type
        if has_fond_risk is not None:
            self.has_fond_risk = has_fond_risk
        if has_commodity_risk is not None:
            self.has_commodity_risk = has_commodity_risk

    @property
    def user_code(self):
        """Gets the user_code of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501


        :return: The user_code of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :rtype: str
        """
        return self._user_code

    @user_code.setter
    def user_code(self, user_code):
        """Sets the user_code of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.


        :param user_code: The user_code of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :type: str
        """

        self._user_code = user_code

    @property
    def classifier(self):
        """Gets the classifier of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501


        :return: The classifier of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :rtype: str
        """
        return self._classifier

    @classifier.setter
    def classifier(self, classifier):
        """Sets the classifier of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.


        :param classifier: The classifier of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :type: str
        """

        self._classifier = classifier

    @property
    def efir_code(self):
        """Gets the efir_code of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501


        :return: The efir_code of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :rtype: str
        """
        return self._efir_code

    @efir_code.setter
    def efir_code(self, efir_code):
        """Sets the efir_code of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.


        :param efir_code: The efir_code of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :type: str
        """

        self._efir_code = efir_code

    @property
    def fin_tool_short_name_rus(self):
        """Gets the fin_tool_short_name_rus of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501


        :return: The fin_tool_short_name_rus of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :rtype: str
        """
        return self._fin_tool_short_name_rus

    @fin_tool_short_name_rus.setter
    def fin_tool_short_name_rus(self, fin_tool_short_name_rus):
        """Sets the fin_tool_short_name_rus of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.


        :param fin_tool_short_name_rus: The fin_tool_short_name_rus of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :type: str
        """

        self._fin_tool_short_name_rus = fin_tool_short_name_rus

    @property
    def fin_tool_short_name_eng(self):
        """Gets the fin_tool_short_name_eng of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501


        :return: The fin_tool_short_name_eng of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :rtype: str
        """
        return self._fin_tool_short_name_eng

    @fin_tool_short_name_eng.setter
    def fin_tool_short_name_eng(self, fin_tool_short_name_eng):
        """Sets the fin_tool_short_name_eng of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.


        :param fin_tool_short_name_eng: The fin_tool_short_name_eng of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :type: str
        """

        self._fin_tool_short_name_eng = fin_tool_short_name_eng

    @property
    def fintool_type(self):
        """Gets the fintool_type of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501


        :return: The fintool_type of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :rtype: str
        """
        return self._fintool_type

    @fintool_type.setter
    def fintool_type(self, fintool_type):
        """Sets the fintool_type of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.


        :param fintool_type: The fintool_type of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :type: str
        """

        self._fintool_type = fintool_type

    @property
    def nominal_currency(self):
        """Gets the nominal_currency of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501


        :return: The nominal_currency of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :rtype: str
        """
        return self._nominal_currency

    @nominal_currency.setter
    def nominal_currency(self, nominal_currency):
        """Sets the nominal_currency of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.


        :param nominal_currency: The nominal_currency of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :type: str
        """

        self._nominal_currency = nominal_currency

    @property
    def pfi_currency(self):
        """Gets the pfi_currency of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501


        :return: The pfi_currency of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :rtype: str
        """
        return self._pfi_currency

    @pfi_currency.setter
    def pfi_currency(self, pfi_currency):
        """Sets the pfi_currency of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.


        :param pfi_currency: The pfi_currency of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :type: str
        """

        self._pfi_currency = pfi_currency

    @property
    def timing_group(self):
        """Gets the timing_group of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501


        :return: The timing_group of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :rtype: int
        """
        return self._timing_group

    @timing_group.setter
    def timing_group(self, timing_group):
        """Sets the timing_group of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.


        :param timing_group: The timing_group of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :type: int
        """

        self._timing_group = timing_group

    @property
    def percent_risk_type(self):
        """Gets the percent_risk_type of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501

          0 = None  1 = HasRiksNoSecuritization  2 = PrimarySecuritizaion  3 = SecondarySecuritization  # noqa: E501

        :return: The percent_risk_type of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :rtype: AllOfEfirDataHubModelsModelsDictionaryCommodityCodeFieldsPercentRiskType
        """
        return self._percent_risk_type

    @percent_risk_type.setter
    def percent_risk_type(self, percent_risk_type):
        """Sets the percent_risk_type of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.

          0 = None  1 = HasRiksNoSecuritization  2 = PrimarySecuritizaion  3 = SecondarySecuritization  # noqa: E501

        :param percent_risk_type: The percent_risk_type of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :type: AllOfEfirDataHubModelsModelsDictionaryCommodityCodeFieldsPercentRiskType
        """

        self._percent_risk_type = percent_risk_type

    @property
    def has_fond_risk(self):
        """Gets the has_fond_risk of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501


        :return: The has_fond_risk of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :rtype: bool
        """
        return self._has_fond_risk

    @has_fond_risk.setter
    def has_fond_risk(self, has_fond_risk):
        """Sets the has_fond_risk of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.


        :param has_fond_risk: The has_fond_risk of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :type: bool
        """

        self._has_fond_risk = has_fond_risk

    @property
    def has_commodity_risk(self):
        """Gets the has_commodity_risk of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501


        :return: The has_commodity_risk of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :rtype: bool
        """
        return self._has_commodity_risk

    @has_commodity_risk.setter
    def has_commodity_risk(self, has_commodity_risk):
        """Sets the has_commodity_risk of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.


        :param has_commodity_risk: The has_commodity_risk of this EfirDataHubModelsModelsDictionaryCommodityCodeFields.  # noqa: E501
        :type: bool
        """

        self._has_commodity_risk = has_commodity_risk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsDictionaryCommodityCodeFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsDictionaryCommodityCodeFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
