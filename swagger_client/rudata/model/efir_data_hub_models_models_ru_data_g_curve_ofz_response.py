# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRuDataGCurveOFZResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dt': 'datetime',
        'beta0val': 'float',
        'beta1val': 'float',
        'beta2val': 'float',
        'g1val': 'float',
        'g2val': 'float',
        'g3val': 'float',
        'g4val': 'float',
        'g5val': 'float',
        'g6val': 'float',
        'g7val': 'float',
        'g8val': 'float',
        'g9val': 'float',
        'tauval': 'float'
    }

    attribute_map = {
        'dt': 'dt',
        'beta0val': 'beta0val',
        'beta1val': 'beta1val',
        'beta2val': 'beta2val',
        'g1val': 'g1val',
        'g2val': 'g2val',
        'g3val': 'g3val',
        'g4val': 'g4val',
        'g5val': 'g5val',
        'g6val': 'g6val',
        'g7val': 'g7val',
        'g8val': 'g8val',
        'g9val': 'g9val',
        'tauval': 'tauval'
    }

    def __init__(self, dt=None, beta0val=None, beta1val=None, beta2val=None, g1val=None, g2val=None, g3val=None, g4val=None, g5val=None, g6val=None, g7val=None, g8val=None, g9val=None, tauval=None):  # noqa: E501
        """EfirDataHubModelsModelsRuDataGCurveOFZResponse - a model defined in Swagger"""  # noqa: E501
        self._dt = None
        self._beta0val = None
        self._beta1val = None
        self._beta2val = None
        self._g1val = None
        self._g2val = None
        self._g3val = None
        self._g4val = None
        self._g5val = None
        self._g6val = None
        self._g7val = None
        self._g8val = None
        self._g9val = None
        self._tauval = None
        self.discriminator = None
        if dt is not None:
            self.dt = dt
        if beta0val is not None:
            self.beta0val = beta0val
        if beta1val is not None:
            self.beta1val = beta1val
        if beta2val is not None:
            self.beta2val = beta2val
        if g1val is not None:
            self.g1val = g1val
        if g2val is not None:
            self.g2val = g2val
        if g3val is not None:
            self.g3val = g3val
        if g4val is not None:
            self.g4val = g4val
        if g5val is not None:
            self.g5val = g5val
        if g6val is not None:
            self.g6val = g6val
        if g7val is not None:
            self.g7val = g7val
        if g8val is not None:
            self.g8val = g8val
        if g9val is not None:
            self.g9val = g9val
        if tauval is not None:
            self.tauval = tauval

    @property
    def dt(self):
        """Gets the dt of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501

        Дата параметров  # noqa: E501

        :return: The dt of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.

        Дата параметров  # noqa: E501

        :param dt: The dt of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def beta0val(self):
        """Gets the beta0val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The beta0val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._beta0val

    @beta0val.setter
    def beta0val(self, beta0val):
        """Sets the beta0val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param beta0val: The beta0val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._beta0val = beta0val

    @property
    def beta1val(self):
        """Gets the beta1val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The beta1val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._beta1val

    @beta1val.setter
    def beta1val(self, beta1val):
        """Sets the beta1val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param beta1val: The beta1val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._beta1val = beta1val

    @property
    def beta2val(self):
        """Gets the beta2val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The beta2val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._beta2val

    @beta2val.setter
    def beta2val(self, beta2val):
        """Sets the beta2val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param beta2val: The beta2val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._beta2val = beta2val

    @property
    def g1val(self):
        """Gets the g1val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The g1val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._g1val

    @g1val.setter
    def g1val(self, g1val):
        """Sets the g1val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param g1val: The g1val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._g1val = g1val

    @property
    def g2val(self):
        """Gets the g2val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The g2val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._g2val

    @g2val.setter
    def g2val(self, g2val):
        """Sets the g2val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param g2val: The g2val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._g2val = g2val

    @property
    def g3val(self):
        """Gets the g3val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The g3val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._g3val

    @g3val.setter
    def g3val(self, g3val):
        """Sets the g3val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param g3val: The g3val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._g3val = g3val

    @property
    def g4val(self):
        """Gets the g4val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The g4val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._g4val

    @g4val.setter
    def g4val(self, g4val):
        """Sets the g4val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param g4val: The g4val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._g4val = g4val

    @property
    def g5val(self):
        """Gets the g5val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The g5val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._g5val

    @g5val.setter
    def g5val(self, g5val):
        """Sets the g5val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param g5val: The g5val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._g5val = g5val

    @property
    def g6val(self):
        """Gets the g6val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The g6val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._g6val

    @g6val.setter
    def g6val(self, g6val):
        """Sets the g6val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param g6val: The g6val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._g6val = g6val

    @property
    def g7val(self):
        """Gets the g7val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The g7val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._g7val

    @g7val.setter
    def g7val(self, g7val):
        """Sets the g7val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param g7val: The g7val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._g7val = g7val

    @property
    def g8val(self):
        """Gets the g8val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The g8val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._g8val

    @g8val.setter
    def g8val(self, g8val):
        """Sets the g8val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param g8val: The g8val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._g8val = g8val

    @property
    def g9val(self):
        """Gets the g9val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The g9val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._g9val

    @g9val.setter
    def g9val(self, g9val):
        """Sets the g9val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param g9val: The g9val of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._g9val = g9val

    @property
    def tauval(self):
        """Gets the tauval of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501


        :return: The tauval of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :rtype: float
        """
        return self._tauval

    @tauval.setter
    def tauval(self, tauval):
        """Sets the tauval of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.


        :param tauval: The tauval of this EfirDataHubModelsModelsRuDataGCurveOFZResponse.  # noqa: E501
        :type: float
        """

        self._tauval = tauval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRuDataGCurveOFZResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRuDataGCurveOFZResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
