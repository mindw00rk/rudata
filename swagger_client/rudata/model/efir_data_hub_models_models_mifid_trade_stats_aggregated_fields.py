# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsMifidTradeStatsAggregatedFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintool_id': 'int',
        'tradedatestart': 'datetime',
        'tradedateend': 'datetime',
        'is_filtered': 'bool',
        'isin': 'str',
        'code': 'str',
        'group_name_rus': 'str',
        'group_name_eng': 'str',
        'update_date': 'datetime',
        'total_turnover': 'float',
        'total_volume': 'float',
        'wap': 'float',
        'median_price': 'float',
        'price_q025': 'float',
        'price_q075': 'float',
        'price_max': 'float',
        'price_min': 'float',
        'trades_cnt': 'int'
    }

    attribute_map = {
        'fintool_id': 'fintoolId',
        'tradedatestart': 'tradedatestart',
        'tradedateend': 'tradedateend',
        'is_filtered': 'is_filtered',
        'isin': 'isin',
        'code': 'code',
        'group_name_rus': 'group_name_rus',
        'group_name_eng': 'group_name_eng',
        'update_date': 'update_date',
        'total_turnover': 'total_turnover',
        'total_volume': 'total_volume',
        'wap': 'wap',
        'median_price': 'median_price',
        'price_q025': 'price_q025',
        'price_q075': 'price_q075',
        'price_max': 'price_max',
        'price_min': 'price_min',
        'trades_cnt': 'trades_cnt'
    }

    def __init__(self, fintool_id=None, tradedatestart=None, tradedateend=None, is_filtered=None, isin=None, code=None, group_name_rus=None, group_name_eng=None, update_date=None, total_turnover=None, total_volume=None, wap=None, median_price=None, price_q025=None, price_q075=None, price_max=None, price_min=None, trades_cnt=None):  # noqa: E501
        """EfirDataHubModelsModelsMifidTradeStatsAggregatedFields - a model defined in Swagger"""  # noqa: E501
        self._fintool_id = None
        self._tradedatestart = None
        self._tradedateend = None
        self._is_filtered = None
        self._isin = None
        self._code = None
        self._group_name_rus = None
        self._group_name_eng = None
        self._update_date = None
        self._total_turnover = None
        self._total_volume = None
        self._wap = None
        self._median_price = None
        self._price_q025 = None
        self._price_q075 = None
        self._price_max = None
        self._price_min = None
        self._trades_cnt = None
        self.discriminator = None
        if fintool_id is not None:
            self.fintool_id = fintool_id
        if tradedatestart is not None:
            self.tradedatestart = tradedatestart
        if tradedateend is not None:
            self.tradedateend = tradedateend
        if is_filtered is not None:
            self.is_filtered = is_filtered
        if isin is not None:
            self.isin = isin
        if code is not None:
            self.code = code
        if group_name_rus is not None:
            self.group_name_rus = group_name_rus
        if group_name_eng is not None:
            self.group_name_eng = group_name_eng
        if update_date is not None:
            self.update_date = update_date
        if total_turnover is not None:
            self.total_turnover = total_turnover
        if total_volume is not None:
            self.total_volume = total_volume
        if wap is not None:
            self.wap = wap
        if median_price is not None:
            self.median_price = median_price
        if price_q025 is not None:
            self.price_q025 = price_q025
        if price_q075 is not None:
            self.price_q075 = price_q075
        if price_max is not None:
            self.price_max = price_max
        if price_min is not None:
            self.price_min = price_min
        if trades_cnt is not None:
            self.trades_cnt = trades_cnt

    @property
    def fintool_id(self):
        """Gets the fintool_id of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Идентификатор финансового инструмента в базе Интерфакс  # noqa: E501

        :return: The fintool_id of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: int
        """
        return self._fintool_id

    @fintool_id.setter
    def fintool_id(self, fintool_id):
        """Sets the fintool_id of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Идентификатор финансового инструмента в базе Интерфакс  # noqa: E501

        :param fintool_id: The fintool_id of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: int
        """

        self._fintool_id = fintool_id

    @property
    def tradedatestart(self):
        """Gets the tradedatestart of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Дата начала отбора сделок  # noqa: E501

        :return: The tradedatestart of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: datetime
        """
        return self._tradedatestart

    @tradedatestart.setter
    def tradedatestart(self, tradedatestart):
        """Sets the tradedatestart of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Дата начала отбора сделок  # noqa: E501

        :param tradedatestart: The tradedatestart of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: datetime
        """

        self._tradedatestart = tradedatestart

    @property
    def tradedateend(self):
        """Gets the tradedateend of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Дата окончания отбора сделок  # noqa: E501

        :return: The tradedateend of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: datetime
        """
        return self._tradedateend

    @tradedateend.setter
    def tradedateend(self, tradedateend):
        """Sets the tradedateend of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Дата окончания отбора сделок  # noqa: E501

        :param tradedateend: The tradedateend of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: datetime
        """

        self._tradedateend = tradedateend

    @property
    def is_filtered(self):
        """Gets the is_filtered of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Признак фильтрации сделок  # noqa: E501

        :return: The is_filtered of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: bool
        """
        return self._is_filtered

    @is_filtered.setter
    def is_filtered(self, is_filtered):
        """Sets the is_filtered of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Признак фильтрации сделок  # noqa: E501

        :param is_filtered: The is_filtered of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: bool
        """

        self._is_filtered = is_filtered

    @property
    def isin(self):
        """Gets the isin of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        ISIN  # noqa: E501

        :return: The isin of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        ISIN  # noqa: E501

        :param isin: The isin of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def code(self):
        """Gets the code of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Код переданный в параметре Codes  # noqa: E501

        :return: The code of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Код переданный в параметре Codes  # noqa: E501

        :param code: The code of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def group_name_rus(self):
        """Gets the group_name_rus of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Наименование группы сделок - Рус  # noqa: E501

        :return: The group_name_rus of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: str
        """
        return self._group_name_rus

    @group_name_rus.setter
    def group_name_rus(self, group_name_rus):
        """Sets the group_name_rus of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Наименование группы сделок - Рус  # noqa: E501

        :param group_name_rus: The group_name_rus of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: str
        """

        self._group_name_rus = group_name_rus

    @property
    def group_name_eng(self):
        """Gets the group_name_eng of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Наименование группы сделок - Англ  # noqa: E501

        :return: The group_name_eng of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: str
        """
        return self._group_name_eng

    @group_name_eng.setter
    def group_name_eng(self, group_name_eng):
        """Sets the group_name_eng of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Наименование группы сделок - Англ  # noqa: E501

        :param group_name_eng: The group_name_eng of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: str
        """

        self._group_name_eng = group_name_eng

    @property
    def update_date(self):
        """Gets the update_date of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Дата обновления статистики  # noqa: E501

        :return: The update_date of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Дата обновления статистики  # noqa: E501

        :param update_date: The update_date of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def total_turnover(self):
        """Gets the total_turnover of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Общий оборот сделок  # noqa: E501

        :return: The total_turnover of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: float
        """
        return self._total_turnover

    @total_turnover.setter
    def total_turnover(self, total_turnover):
        """Sets the total_turnover of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Общий оборот сделок  # noqa: E501

        :param total_turnover: The total_turnover of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: float
        """

        self._total_turnover = total_turnover

    @property
    def total_volume(self):
        """Gets the total_volume of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Общий объем сделок  # noqa: E501

        :return: The total_volume of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: float
        """
        return self._total_volume

    @total_volume.setter
    def total_volume(self, total_volume):
        """Sets the total_volume of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Общий объем сделок  # noqa: E501

        :param total_volume: The total_volume of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: float
        """

        self._total_volume = total_volume

    @property
    def wap(self):
        """Gets the wap of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Средневзвешенная цена сделок периода  # noqa: E501

        :return: The wap of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: float
        """
        return self._wap

    @wap.setter
    def wap(self, wap):
        """Sets the wap of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Средневзвешенная цена сделок периода  # noqa: E501

        :param wap: The wap of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: float
        """

        self._wap = wap

    @property
    def median_price(self):
        """Gets the median_price of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Значение, которое PRICE не превышает с вероятностью 0,5  # noqa: E501

        :return: The median_price of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: float
        """
        return self._median_price

    @median_price.setter
    def median_price(self, median_price):
        """Sets the median_price of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Значение, которое PRICE не превышает с вероятностью 0,5  # noqa: E501

        :param median_price: The median_price of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: float
        """

        self._median_price = median_price

    @property
    def price_q025(self):
        """Gets the price_q025 of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Значение, которое PRICE не превышает с вероятностью 0,25  # noqa: E501

        :return: The price_q025 of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: float
        """
        return self._price_q025

    @price_q025.setter
    def price_q025(self, price_q025):
        """Sets the price_q025 of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Значение, которое PRICE не превышает с вероятностью 0,25  # noqa: E501

        :param price_q025: The price_q025 of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: float
        """

        self._price_q025 = price_q025

    @property
    def price_q075(self):
        """Gets the price_q075 of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Значение, которое PRICE не превышает с вероятностью 0,75  # noqa: E501

        :return: The price_q075 of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: float
        """
        return self._price_q075

    @price_q075.setter
    def price_q075(self, price_q075):
        """Sets the price_q075 of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Значение, которое PRICE не превышает с вероятностью 0,75  # noqa: E501

        :param price_q075: The price_q075 of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: float
        """

        self._price_q075 = price_q075

    @property
    def price_max(self):
        """Gets the price_max of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Максимальная цена для сделок периода  # noqa: E501

        :return: The price_max of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: float
        """
        return self._price_max

    @price_max.setter
    def price_max(self, price_max):
        """Sets the price_max of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Максимальная цена для сделок периода  # noqa: E501

        :param price_max: The price_max of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: float
        """

        self._price_max = price_max

    @property
    def price_min(self):
        """Gets the price_min of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Минимальная цена для сделок периода  # noqa: E501

        :return: The price_min of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: float
        """
        return self._price_min

    @price_min.setter
    def price_min(self, price_min):
        """Sets the price_min of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Минимальная цена для сделок периода  # noqa: E501

        :param price_min: The price_min of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: float
        """

        self._price_min = price_min

    @property
    def trades_cnt(self):
        """Gets the trades_cnt of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501

        Число сделок за период  # noqa: E501

        :return: The trades_cnt of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :rtype: int
        """
        return self._trades_cnt

    @trades_cnt.setter
    def trades_cnt(self, trades_cnt):
        """Sets the trades_cnt of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.

        Число сделок за период  # noqa: E501

        :param trades_cnt: The trades_cnt of this EfirDataHubModelsModelsMifidTradeStatsAggregatedFields.  # noqa: E501
        :type: int
        """

        self._trades_cnt = trades_cnt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsMifidTradeStatsAggregatedFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsMifidTradeStatsAggregatedFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
