# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsModelsRiskHasRiskResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_risk': 'bool',
        'error': 'str',
        'has_risk_value': 'int'
    }

    attribute_map = {
        'has_risk': 'hasRisk',
        'error': 'error',
        'has_risk_value': 'hasRiskValue'
    }

    def __init__(self, has_risk=None, error=None, has_risk_value=None):  # noqa: E501
        """EfirDataHubModelsModelsRiskHasRiskResponse - a model defined in Swagger"""  # noqa: E501
        self._has_risk = None
        self._error = None
        self._has_risk_value = None
        self.discriminator = None
        if has_risk is not None:
            self.has_risk = has_risk
        if error is not None:
            self.error = error
        if has_risk_value is not None:
            self.has_risk_value = has_risk_value

    @property
    def has_risk(self):
        """Gets the has_risk of this EfirDataHubModelsModelsRiskHasRiskResponse.  # noqa: E501

        Флаг наличия запрашиваемого риска  # noqa: E501

        :return: The has_risk of this EfirDataHubModelsModelsRiskHasRiskResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_risk

    @has_risk.setter
    def has_risk(self, has_risk):
        """Sets the has_risk of this EfirDataHubModelsModelsRiskHasRiskResponse.

        Флаг наличия запрашиваемого риска  # noqa: E501

        :param has_risk: The has_risk of this EfirDataHubModelsModelsRiskHasRiskResponse.  # noqa: E501
        :type: bool
        """

        self._has_risk = has_risk

    @property
    def error(self):
        """Gets the error of this EfirDataHubModelsModelsRiskHasRiskResponse.  # noqa: E501

        Текст ошибки, если она есть  # noqa: E501

        :return: The error of this EfirDataHubModelsModelsRiskHasRiskResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this EfirDataHubModelsModelsRiskHasRiskResponse.

        Текст ошибки, если она есть  # noqa: E501

        :param error: The error of this EfirDataHubModelsModelsRiskHasRiskResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def has_risk_value(self):
        """Gets the has_risk_value of this EfirDataHubModelsModelsRiskHasRiskResponse.  # noqa: E501

        Атрибут запрашиваемого риска:  0 – риск отсутствует  1 – риск присутствует, секьюритизация отсутствует  2 – первичная секьюритизация  3 – вторичная секьюритизация  # noqa: E501

        :return: The has_risk_value of this EfirDataHubModelsModelsRiskHasRiskResponse.  # noqa: E501
        :rtype: int
        """
        return self._has_risk_value

    @has_risk_value.setter
    def has_risk_value(self, has_risk_value):
        """Sets the has_risk_value of this EfirDataHubModelsModelsRiskHasRiskResponse.

        Атрибут запрашиваемого риска:  0 – риск отсутствует  1 – риск присутствует, секьюритизация отсутствует  2 – первичная секьюритизация  3 – вторичная секьюритизация  # noqa: E501

        :param has_risk_value: The has_risk_value of this EfirDataHubModelsModelsRiskHasRiskResponse.  # noqa: E501
        :type: int
        """

        self._has_risk_value = has_risk_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsModelsRiskHasRiskResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsModelsRiskHasRiskResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
