# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2RuDataCalendarV2Request(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fintool_ids': 'list[int]',
        'event_types': 'list[str]',
        'fields': 'list[str]',
        'filter': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'is_show_default': 'bool',
        'page_num': 'int',
        'page_size': 'int',
        'sort_desc': 'bool'
    }

    attribute_map = {
        'fintool_ids': 'fintoolIds',
        'event_types': 'eventTypes',
        'fields': 'fields',
        'filter': 'filter',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'is_show_default': 'isShowDefault',
        'page_num': 'pageNum',
        'page_size': 'pageSize',
        'sort_desc': 'sortDesc'
    }

    def __init__(self, fintool_ids=None, event_types=None, fields=None, filter=None, start_date=None, end_date=None, is_show_default=None, page_num=None, page_size=None, sort_desc=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2RuDataCalendarV2Request - a model defined in Swagger"""  # noqa: E501
        self._fintool_ids = None
        self._event_types = None
        self._fields = None
        self._filter = None
        self._start_date = None
        self._end_date = None
        self._is_show_default = None
        self._page_num = None
        self._page_size = None
        self._sort_desc = None
        self.discriminator = None
        if fintool_ids is not None:
            self.fintool_ids = fintool_ids
        if event_types is not None:
            self.event_types = event_types
        if fields is not None:
            self.fields = fields
        if filter is not None:
            self.filter = filter
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if is_show_default is not None:
            self.is_show_default = is_show_default
        if page_num is not None:
            self.page_num = page_num
        if page_size is not None:
            self.page_size = page_size
        if sort_desc is not None:
            self.sort_desc = sort_desc

    @property
    def fintool_ids(self):
        """Gets the fintool_ids of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501

        Список идентификаторов (fintoolId)  Максимум 100 элементов.  # noqa: E501

        :return: The fintool_ids of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :rtype: list[int]
        """
        return self._fintool_ids

    @fintool_ids.setter
    def fintool_ids(self, fintool_ids):
        """Sets the fintool_ids of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.

        Список идентификаторов (fintoolId)  Максимум 100 элементов.  # noqa: E501

        :param fintool_ids: The fintool_ids of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :type: list[int]
        """

        self._fintool_ids = fintool_ids

    @property
    def event_types(self):
        """Gets the event_types of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501

        Типы событий(CONV, CALL, CPN, MTY, DIV, DFLT).  Если не указаны, то выбираются все типы.  # noqa: E501

        :return: The event_types of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.

        Типы событий(CONV, CALL, CPN, MTY, DIV, DFLT).  Если не указаны, то выбираются все типы.  # noqa: E501

        :param event_types: The event_types of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :type: list[str]
        """

        self._event_types = event_types

    @property
    def fields(self):
        """Gets the fields of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501

        Список требуемых полей (см. метод TimeTableFields)  # noqa: E501

        :return: The fields of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.

        Список требуемых полей (см. метод TimeTableFields)  # noqa: E501

        :param fields: The fields of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :type: list[str]
        """

        self._fields = fields

    @property
    def filter(self):
        """Gets the filter of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501

        Дополнительный фильтр  # noqa: E501

        :return: The filter of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.

        Дополнительный фильтр  # noqa: E501

        :param filter: The filter of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def start_date(self):
        """Gets the start_date of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501

        Дата начала интересующего периода  # noqa: E501

        :return: The start_date of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.

        Дата начала интересующего периода  # noqa: E501

        :param start_date: The start_date of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501

        Дата окончания интересующего периода;  # noqa: E501

        :return: The end_date of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.

        Дата окончания интересующего периода;  # noqa: E501

        :param end_date: The end_date of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def is_show_default(self):
        """Gets the is_show_default of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501

        Показывать ли дефолты по событиям. По-умолчанию - True.  # noqa: E501

        :return: The is_show_default of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :rtype: bool
        """
        return self._is_show_default

    @is_show_default.setter
    def is_show_default(self, is_show_default):
        """Sets the is_show_default of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.

        Показывать ли дефолты по событиям. По-умолчанию - True.  # noqa: E501

        :param is_show_default: The is_show_default of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :type: bool
        """

        self._is_show_default = is_show_default

    @property
    def page_num(self):
        """Gets the page_num of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501

        Номер страницы для выборки. Если не задан - не используется, если  меньше 1, то устанавливается в 1  # noqa: E501

        :return: The page_num of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :rtype: int
        """
        return self._page_num

    @page_num.setter
    def page_num(self, page_num):
        """Sets the page_num of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.

        Номер страницы для выборки. Если не задан - не используется, если  меньше 1, то устанавливается в 1  # noqa: E501

        :param page_num: The page_num of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :type: int
        """

        self._page_num = page_num

    @property
    def page_size(self):
        """Gets the page_size of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501

        Размер страницы выборки. Максимум 1000.  Если не задан, устанавливается 1000.  # noqa: E501

        :return: The page_size of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.

        Размер страницы выборки. Максимум 1000.  Если не задан, устанавливается 1000.  # noqa: E501

        :param page_size: The page_size of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def sort_desc(self):
        """Gets the sort_desc of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501

        Признак сортировки по убыванию времени  # noqa: E501

        :return: The sort_desc of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :rtype: bool
        """
        return self._sort_desc

    @sort_desc.setter
    def sort_desc(self, sort_desc):
        """Sets the sort_desc of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.

        Признак сортировки по убыванию времени  # noqa: E501

        :param sort_desc: The sort_desc of this EfirDataHubModelsRequestsV2RuDataCalendarV2Request.  # noqa: E501
        :type: bool
        """

        self._sort_desc = sort_desc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2RuDataCalendarV2Request, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2RuDataCalendarV2Request):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
