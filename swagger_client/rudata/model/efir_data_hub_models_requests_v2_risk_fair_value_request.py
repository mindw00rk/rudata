# coding: utf-8

"""
    API Reference United Data (RU DATA) v2.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: DataHub: v2, Models: 1.23.21.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EfirDataHubModelsRequestsV2RiskFairValueRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        '_date': 'datetime',
        'price_type': 'str',
        'is_close_register': 'bool',
        'is_percent': 'bool',
        'ignore_accrued_int': 'bool',
        'depth': 'int'
    }

    attribute_map = {
        'symbol': 'symbol',
        '_date': 'date',
        'price_type': 'priceType',
        'is_close_register': 'isCloseRegister',
        'is_percent': 'isPercent',
        'ignore_accrued_int': 'ignoreAccruedInt',
        'depth': 'depth'
    }

    def __init__(self, symbol=None, _date=None, price_type=None, is_close_register=None, is_percent=None, ignore_accrued_int=None, depth=None):  # noqa: E501
        """EfirDataHubModelsRequestsV2RiskFairValueRequest - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self.__date = None
        self._price_type = None
        self._is_close_register = None
        self._is_percent = None
        self._ignore_accrued_int = None
        self._depth = None
        self.discriminator = None
        self.symbol = symbol
        self._date = _date
        if price_type is not None:
            self.price_type = price_type
        if is_close_register is not None:
            self.is_close_register = is_close_register
        if is_percent is not None:
            self.is_percent = is_percent
        if ignore_accrued_int is not None:
            self.ignore_accrued_int = ignore_accrued_int
        if depth is not None:
            self.depth = depth

    @property
    def symbol(self):
        """Gets the symbol of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501

        Обязательный параметр. Инструмент задается числовым или строковым кодом – это может быть ID_ISS, ISIN, TradeCode, EfirCode  # noqa: E501

        :return: The symbol of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this EfirDataHubModelsRequestsV2RiskFairValueRequest.

        Обязательный параметр. Инструмент задается числовым или строковым кодом – это может быть ID_ISS, ISIN, TradeCode, EfirCode  # noqa: E501

        :param symbol: The symbol of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def _date(self):
        """Gets the _date of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501

        Обязательный параметр. Дата расчета текущей справедливой стоимости (ТСС). Может задаваться ячейкой с датой либо строкой в формате \"DD.MM.YYYY\".  # noqa: E501

        :return: The _date of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EfirDataHubModelsRequestsV2RiskFairValueRequest.

        Обязательный параметр. Дата расчета текущей справедливой стоимости (ТСС). Может задаваться ячейкой с датой либо строкой в формате \"DD.MM.YYYY\".  # noqa: E501

        :param _date: The _date of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def price_type(self):
        """Gets the price_type of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501

        Тип цены  Any или пустое значение - по умолчанию  Market – рыночная  Close – цена закрытия  AvgPrice – средневзвешенная  # noqa: E501

        :return: The price_type of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this EfirDataHubModelsRequestsV2RiskFairValueRequest.

        Тип цены  Any или пустое значение - по умолчанию  Market – рыночная  Close – цена закрытия  AvgPrice – средневзвешенная  # noqa: E501

        :param price_type: The price_type of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :type: str
        """

        self._price_type = price_type

    @property
    def is_close_register(self):
        """Gets the is_close_register of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501

        true – учитывать даты закрытия реестра перед выплатой купона/амортизации.  false – (по умолчанию) не учитывать даты закрытия реестра. В этом случае будут использоваться, соответственно,  даты начала и конца купонного периода, а также дата амортизации.  # noqa: E501

        :return: The is_close_register of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_close_register

    @is_close_register.setter
    def is_close_register(self, is_close_register):
        """Sets the is_close_register of this EfirDataHubModelsRequestsV2RiskFairValueRequest.

        true – учитывать даты закрытия реестра перед выплатой купона/амортизации.  false – (по умолчанию) не учитывать даты закрытия реестра. В этом случае будут использоваться, соответственно,  даты начала и конца купонного периода, а также дата амортизации.  # noqa: E501

        :param is_close_register: The is_close_register of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :type: bool
        """

        self._is_close_register = is_close_register

    @property
    def is_percent(self):
        """Gets the is_percent of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501

        true – функция возвращает справедливую стоимость в процентах к номиналу. Применимо только к облигациям.  false – (по умолчанию) функция возвращает справедливую стоимость в валюте номинала.  # noqa: E501

        :return: The is_percent of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_percent

    @is_percent.setter
    def is_percent(self, is_percent):
        """Sets the is_percent of this EfirDataHubModelsRequestsV2RiskFairValueRequest.

        true – функция возвращает справедливую стоимость в процентах к номиналу. Применимо только к облигациям.  false – (по умолчанию) функция возвращает справедливую стоимость в валюте номинала.  # noqa: E501

        :param is_percent: The is_percent of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :type: bool
        """

        self._is_percent = is_percent

    @property
    def ignore_accrued_int(self):
        """Gets the ignore_accrued_int of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501

        true – не учитывать НКД для облигаций;  false – (по умолчанию) учитывать НКД для облигаций.  # noqa: E501

        :return: The ignore_accrued_int of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_accrued_int

    @ignore_accrued_int.setter
    def ignore_accrued_int(self, ignore_accrued_int):
        """Sets the ignore_accrued_int of this EfirDataHubModelsRequestsV2RiskFairValueRequest.

        true – не учитывать НКД для облигаций;  false – (по умолчанию) учитывать НКД для облигаций.  # noqa: E501

        :param ignore_accrued_int: The ignore_accrued_int of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :type: bool
        """

        self._ignore_accrued_int = ignore_accrued_int

    @property
    def depth(self):
        """Gets the depth of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501

        Глубина поиска, выраженная в днях.  Значение по умолчанию: 90. Если Depth=0, поиск цены будет идти только в рамках указанной даты  # noqa: E501

        :return: The depth of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this EfirDataHubModelsRequestsV2RiskFairValueRequest.

        Глубина поиска, выраженная в днях.  Значение по умолчанию: 90. Если Depth=0, поиск цены будет идти только в рамках указанной даты  # noqa: E501

        :param depth: The depth of this EfirDataHubModelsRequestsV2RiskFairValueRequest.  # noqa: E501
        :type: int
        """

        self._depth = depth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfirDataHubModelsRequestsV2RiskFairValueRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfirDataHubModelsRequestsV2RiskFairValueRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
